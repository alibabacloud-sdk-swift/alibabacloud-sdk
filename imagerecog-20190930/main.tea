import OSS;
import OpenPlatform;
import RPCUtil;
import RPC;
import OSSUtil;
import Util;
import FileForm;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('imagerecog', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DetectFruitsRequest = {
  imageURL: string(name='ImageURL'),
}

model DetectFruitsResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        name: string(name='Name'),
        score: float(name='Score'),
        box: [ float ](name='Box'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function detectFruits(request: DetectFruitsRequest, runtime: Util.RuntimeOptions): DetectFruitsResponse {
  Util.validateModel(request);
  return doRequest('DetectFruits', 'HTTPS', 'POST' , '2019-09-30', 'AK', null, request, runtime);
}

model DetectFruitsAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function detectFruitsAdvance(request: DetectFruitsAdvanceRequest, runtime: Util.RuntimeOptions): DetectFruitsResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imagerecog',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var detectFruitsreq = new DetectFruitsRequest{};
  RPCUtil.convert(request, detectFruitsreq);
  detectFruitsreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectFruitsResp = detectFruits(detectFruitsreq, runtime);
  return detectFruitsResp;
}

model ClassifyingRubbishRequest = {
  imageURL: string(name='ImageURL'),
}

model ClassifyingRubbishResponse = {
  requestId: string(name='RequestId'),
  data: {
    sensitive: boolean(name='Sensitive'),
    elements: [
      {
        category: string(name='Category'),
        categoryScore: float(name='CategoryScore'),
        rubbish: string(name='Rubbish'),
        rubbishScore: float(name='RubbishScore'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function classifyingRubbish(request: ClassifyingRubbishRequest, runtime: Util.RuntimeOptions): ClassifyingRubbishResponse {
  Util.validateModel(request);
  return doRequest('ClassifyingRubbish', 'HTTPS', 'POST' , '2019-09-30', 'AK', null, request, runtime);
}

model ClassifyingRubbishAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function classifyingRubbishAdvance(request: ClassifyingRubbishAdvanceRequest, runtime: Util.RuntimeOptions): ClassifyingRubbishResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imagerecog',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var classifyingRubbishreq = new ClassifyingRubbishRequest{};
  RPCUtil.convert(request, classifyingRubbishreq);
  classifyingRubbishreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var classifyingRubbishResp = classifyingRubbish(classifyingRubbishreq, runtime);
  return classifyingRubbishResp;
}

model RecognizeVehicleTypeRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeVehicleTypeResponse = {
  requestId: string(name='RequestId'),
  data: {
    threshold: float(name='Threshold'),
    elements: [
      {
        name: string(name='Name'),
        score: float(name='Score'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function recognizeVehicleType(request: RecognizeVehicleTypeRequest, runtime: Util.RuntimeOptions): RecognizeVehicleTypeResponse {
  Util.validateModel(request);
  return doRequest('RecognizeVehicleType', 'HTTPS', 'POST' , '2019-09-30', 'AK', null, request, runtime);
}

model RecognizeVehicleTypeAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeVehicleTypeAdvance(request: RecognizeVehicleTypeAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVehicleTypeResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imagerecog',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeVehicleTypereq = new RecognizeVehicleTypeRequest{};
  RPCUtil.convert(request, recognizeVehicleTypereq);
  recognizeVehicleTypereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeVehicleTypeResp = recognizeVehicleType(recognizeVehicleTypereq, runtime);
  return recognizeVehicleTypeResp;
}

model RecognizeLogoRequest = {
  tasks: [
    {
      imageURL: string(name='ImageURL'),
    }
  ](name='Tasks'),
}

model RecognizeLogoResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        taskId: string(name='TaskId'),
        imageURL: string(name='ImageURL'),
        results: [
          {
            label: string(name='Label'),
            suggestion: string(name='Suggestion'),
            rate: float(name='Rate'),
            logosData: [
              {
                name: string(name='Name'),
                type: string(name='Type'),
                x: float(name='X'),
                y: float(name='Y'),
                h: float(name='H'),
                w: float(name='W'),
              }
            ](name='LogosData'),
          }
        ](name='Results'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function recognizeLogo(request: RecognizeLogoRequest, runtime: Util.RuntimeOptions): RecognizeLogoResponse {
  Util.validateModel(request);
  return doRequest('RecognizeLogo', 'HTTPS', 'POST' , '2019-09-30', 'AK', null, request, runtime);
}

model TaggingImageRequest = {
  imageURL: string(name='ImageURL'),
}

model TaggingImageResponse = {
  requestId: string(name='RequestId'),
  data: {
    tags: [
      {
        confidence: float(name='Confidence'),
        value: string(name='Value'),
      }
    ](name='Tags'),
  }(name='Data'),
}

async function taggingImage(request: TaggingImageRequest, runtime: Util.RuntimeOptions): TaggingImageResponse {
  Util.validateModel(request);
  return doRequest('TaggingImage', 'HTTPS', 'POST' , '2019-09-30', 'AK', null, request, runtime);
}

model TaggingImageAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function taggingImageAdvance(request: TaggingImageAdvanceRequest, runtime: Util.RuntimeOptions): TaggingImageResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imagerecog',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var taggingImagereq = new TaggingImageRequest{};
  RPCUtil.convert(request, taggingImagereq);
  taggingImagereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var taggingImageResp = taggingImage(taggingImagereq, runtime);
  return taggingImageResp;
}

model RecognizeSceneRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeSceneResponse = {
  requestId: string(name='RequestId'),
  data: {
    tags: [
      {
        confidence: float(name='Confidence'),
        value: string(name='Value'),
      }
    ](name='Tags'),
  }(name='Data'),
}

async function recognizeScene(request: RecognizeSceneRequest, runtime: Util.RuntimeOptions): RecognizeSceneResponse {
  Util.validateModel(request);
  return doRequest('RecognizeScene', 'HTTPS', 'POST' , '2019-09-30', 'AK', null, request, runtime);
}

model RecognizeSceneAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeSceneAdvance(request: RecognizeSceneAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeSceneResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imagerecog',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeScenereq = new RecognizeSceneRequest{};
  RPCUtil.convert(request, recognizeScenereq);
  recognizeScenereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeSceneResp = recognizeScene(recognizeScenereq, runtime);
  return recognizeSceneResp;
}

model RecognizeImageColorRequest = {
  url: string(name='Url'),
  colorCount?: integer(name='ColorCount'),
}

model RecognizeImageColorResponse = {
  requestId: string(name='RequestId'),
  data: {
    colorTemplateList: [
      {
        color: string(name='Color'),
        label: string(name='Label'),
        percentage: float(name='Percentage'),
      }
    ](name='ColorTemplateList'),
  }(name='Data'),
}

async function recognizeImageColor(request: RecognizeImageColorRequest, runtime: Util.RuntimeOptions): RecognizeImageColorResponse {
  Util.validateModel(request);
  return doRequest('RecognizeImageColor', 'HTTPS', 'POST' , '2019-09-30', 'AK', null, request, runtime);
}

model RecognizeImageColorAdvanceRequest = {
  urlObject: readable(name='UrlObject'),
  colorCount?: integer(name='ColorCount'),
}

async function recognizeImageColorAdvance(request: RecognizeImageColorAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeImageColorResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imagerecog',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.urlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeImageColorreq = new RecognizeImageColorRequest{};
  RPCUtil.convert(request, recognizeImageColorreq);
  recognizeImageColorreq.url = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeImageColorResp = recognizeImageColor(recognizeImageColorreq, runtime);
  return recognizeImageColorResp;
}

model DetectImageElementsRequest = {
  url: string(name='Url'),
}

model DetectImageElementsResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        type: string(name='Type'),
        x: integer(name='X'),
        y: integer(name='Y'),
        width: integer(name='Width'),
        height: integer(name='Height'),
        score: float(name='Score'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function detectImageElements(request: DetectImageElementsRequest, runtime: Util.RuntimeOptions): DetectImageElementsResponse {
  Util.validateModel(request);
  return doRequest('DetectImageElements', 'HTTPS', 'POST' , '2019-09-30', 'AK', null, request, runtime);
}

model DetectImageElementsAdvanceRequest = {
  urlObject: readable(name='UrlObject'),
}

async function detectImageElementsAdvance(request: DetectImageElementsAdvanceRequest, runtime: Util.RuntimeOptions): DetectImageElementsResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imagerecog',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.urlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var detectImageElementsreq = new DetectImageElementsRequest{};
  RPCUtil.convert(request, detectImageElementsreq);
  detectImageElementsreq.url = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectImageElementsResp = detectImageElements(detectImageElementsreq, runtime);
  return detectImageElementsResp;
}

model RecognizeImageStyleRequest = {
  url: string(name='Url'),
}

model RecognizeImageStyleResponse = {
  requestId: string(name='RequestId'),
  data: {
    styles: [ string ](name='Styles'),
  }(name='Data'),
}

async function recognizeImageStyle(request: RecognizeImageStyleRequest, runtime: Util.RuntimeOptions): RecognizeImageStyleResponse {
  Util.validateModel(request);
  return doRequest('RecognizeImageStyle', 'HTTPS', 'POST' , '2019-09-30', 'AK', null, request, runtime);
}

model RecognizeImageStyleAdvanceRequest = {
  urlObject: readable(name='UrlObject'),
}

async function recognizeImageStyleAdvance(request: RecognizeImageStyleAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeImageStyleResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imagerecog',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.urlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeImageStylereq = new RecognizeImageStyleRequest{};
  RPCUtil.convert(request, recognizeImageStylereq);
  recognizeImageStylereq.url = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeImageStyleResp = recognizeImageStyle(recognizeImageStylereq, runtime);
  return recognizeImageStyleResp;
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
