import Util;
import RPCUtil;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cdrs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model ListPersonTrackRequest = {
  corpId: string(name='CorpId'),
  personId: string(name='PersonId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
}

model ListPersonTrackResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      personId: string(name='PersonId'),
      corpId: string(name='CorpId'),
      dataSourceId: string(name='DataSourceId'),
      dataSourceName: string(name='DataSourceName'),
      picUrlPath: string(name='PicUrlPath'),
      targetPicUrlPath: string(name='TargetPicUrlPath'),
      rightBottomY: string(name='RightBottomY'),
      rightBottomX: string(name='RightBottomX'),
      leftTopY: string(name='LeftTopY'),
      leftTopX: string(name='LeftTopX'),
      shotTime: string(name='ShotTime'),
      longitude: string(name='Longitude'),
      latitude: string(name='Latitude'),
    }
  ](name='Data'),
}

async function listPersonTrackWithOptions(request: ListPersonTrackRequest, runtime: Util.RuntimeOptions): ListPersonTrackResponse {
  Util.validateModel(request);
  return doRequest('ListPersonTrack', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listPersonTrack(request: ListPersonTrackRequest): ListPersonTrackResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPersonTrackWithOptions(request, runtime);
}

model ListDeviceDetailRequest = {
  dataSourceId: string(name='DataSourceId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  corpId: string(name='CorpId'),
}

model ListDeviceDetailResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      dataSourceId: string(name='DataSourceId'),
      corpId: string(name='CorpId'),
      dataSourceName: string(name='DataSourceName'),
      dataSourcePoi: string(name='DataSourcePoi'),
      nearPoi: string(name='NearPoi'),
      latitude: string(name='Latitude'),
      longitude: string(name='Longitude'),
    }
  ](name='Data'),
}

async function listDeviceDetailWithOptions(request: ListDeviceDetailRequest, runtime: Util.RuntimeOptions): ListDeviceDetailResponse {
  Util.validateModel(request);
  return doRequest('ListDeviceDetail', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listDeviceDetail(request: ListDeviceDetailRequest): ListDeviceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceDetailWithOptions(request, runtime);
}

model ListCityMapRangeStatisticRequest = {
  radius: integer(name='Radius'),
  latitude: string(name='Latitude'),
  longitude: string(name='Longitude'),
  endTime: string(name='EndTime'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
}

model ListCityMapRangeStatisticResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      dataSourceId: string(name='DataSourceId'),
      latitude: string(name='Latitude'),
      longitude: string(name='Longitude'),
      dataSourceName: string(name='DataSourceName'),
      corpId: string(name='CorpId'),
      adultValue: string(name='AdultValue'),
      womanValue: string(name='WomanValue'),
      motorValue: string(name='MotorValue'),
      manValue: string(name='ManValue'),
      oldValue: string(name='OldValue'),
      childValue: string(name='ChildValue'),
    }
  ](name='Data'),
}

async function listCityMapRangeStatisticWithOptions(request: ListCityMapRangeStatisticRequest, runtime: Util.RuntimeOptions): ListCityMapRangeStatisticResponse {
  Util.validateModel(request);
  return doRequest('ListCityMapRangeStatistic', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listCityMapRangeStatistic(request: ListCityMapRangeStatisticRequest): ListCityMapRangeStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCityMapRangeStatisticWithOptions(request, runtime);
}

model ListPersonDetailsRequest = {
  corpId: string(name='CorpId'),
  personId: string(name='PersonId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model ListPersonDetailsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      personId: string(name='PersonId'),
      gender: string(name='Gender'),
      age: string(name='Age'),
      profession: string(name='Profession'),
      address: string(name='Address'),
      transportation: string(name='Transportation'),
      personType: string(name='PersonType'),
      hotSpotAddress: string(name='HotSpotAddress'),
      updateTime: string(name='UpdateTime'),
      preferredColor: string(name='PreferredColor'),
      faceSourceImage: string(name='FaceSourceImage'),
      faceTargetImage: string(name='FaceTargetImage'),
      bodySourceImage: string(name='BodySourceImage'),
      bodyTargetImage: string(name='BodyTargetImage'),
      prefOutTime: string(name='PrefOutTime'),
    }
  ](name='Data'),
}

async function listPersonDetailsWithOptions(request: ListPersonDetailsRequest, runtime: Util.RuntimeOptions): ListPersonDetailsResponse {
  Util.validateModel(request);
  return doRequest('ListPersonDetails', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listPersonDetails(request: ListPersonDetailsRequest): ListPersonDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPersonDetailsWithOptions(request, runtime);
}

model ListVehicleTrackRequest = {
  corpId: string(name='CorpId'),
  plateId: string(name='PlateId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model ListVehicleTrackResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      plateId: string(name='PlateId'),
      corpId: string(name='CorpId'),
      dataSourceId: string(name='DataSourceId'),
      dataSourceName: string(name='DataSourceName'),
      picUrlPath: string(name='PicUrlPath'),
      targetPicUrlPath: string(name='TargetPicUrlPath'),
      rightBottomY: string(name='RightBottomY'),
      rightBottomX: string(name='RightBottomX'),
      leftTopY: string(name='LeftTopY'),
      leftTopX: string(name='LeftTopX'),
      passTime: string(name='PassTime'),
      latitude: string(name='Latitude'),
      longitude: string(name='Longitude'),
    }
  ](name='Data'),
}

async function listVehicleTrackWithOptions(request: ListVehicleTrackRequest, runtime: Util.RuntimeOptions): ListVehicleTrackResponse {
  Util.validateModel(request);
  return doRequest('ListVehicleTrack', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listVehicleTrack(request: ListVehicleTrackRequest): ListVehicleTrackResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVehicleTrackWithOptions(request, runtime);
}

model ListDevicePersonStatisticsRequest = {
  dataSourceId: string(name='DataSourceId'),
  statisticsType: string(name='StatisticsType'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  corpId: string(name='CorpId'),
}

model ListDevicePersonStatisticsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      dataSourceId: string(name='DataSourceId'),
      shotTime: string(name='ShotTime'),
      number: string(name='Number'),
    }
  ](name='Data'),
}

async function listDevicePersonStatisticsWithOptions(request: ListDevicePersonStatisticsRequest, runtime: Util.RuntimeOptions): ListDevicePersonStatisticsResponse {
  Util.validateModel(request);
  return doRequest('ListDevicePersonStatistics', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listDevicePersonStatistics(request: ListDevicePersonStatisticsRequest): ListDevicePersonStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDevicePersonStatisticsWithOptions(request, runtime);
}

model ListVehicleResultsRequest = {
  corpId: string(name='CorpId'),
  vehicleColor?: string(name='VehicleColor'),
  vehicleClass?: string(name='VehicleClass'),
  vehicleApplication?: string(name='VehicleApplication'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
}

model ListVehicleResultsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      vehicleId: string(name='VehicleId'),
      gender: string(name='Gender'),
      vehicleClass: string(name='VehicleClass'),
      profession: string(name='Profession'),
      liveAddress: string(name='LiveAddress'),
      plateId: string(name='PlateId'),
      vehicleApplication: string(name='VehicleApplication'),
      personId: string(name='PersonId'),
      updateTime: string(name='UpdateTime'),
    }
  ](name='Data'),
}

async function listVehicleResultsWithOptions(request: ListVehicleResultsRequest, runtime: Util.RuntimeOptions): ListVehicleResultsResponse {
  Util.validateModel(request);
  return doRequest('ListVehicleResults', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listVehicleResults(request: ListVehicleResultsRequest): ListVehicleResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVehicleResultsWithOptions(request, runtime);
}

model ListPersonTopRequest = {
  corpId: string(name='CorpId'),
  personId: string(name='PersonId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model ListPersonTopResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      corpId: string(name='CorpId'),
      personId: string(name='PersonId'),
      poiId: string(name='PoiId'),
      poiName: string(name='PoiName'),
      passHour: string(name='PassHour'),
      frequency: string(name='Frequency'),
    }
  ](name='Data'),
}

async function listPersonTopWithOptions(request: ListPersonTopRequest, runtime: Util.RuntimeOptions): ListPersonTopResponse {
  Util.validateModel(request);
  return doRequest('ListPersonTop', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listPersonTop(request: ListPersonTopRequest): ListPersonTopResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPersonTopWithOptions(request, runtime);
}

model ListStorageStatisticsRequest = {
  corpId: string(name='CorpId'),
}

model ListStorageStatisticsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      corpId: string(name='CorpId'),
      number: string(name='Number'),
      totalStore: string(name='TotalStore'),
      unusedStore: string(name='UnusedStore'),
      usedStore: string(name='UsedStore'),
    }
  ](name='Data'),
}

async function listStorageStatisticsWithOptions(request: ListStorageStatisticsRequest, runtime: Util.RuntimeOptions): ListStorageStatisticsResponse {
  Util.validateModel(request);
  return doRequest('ListStorageStatistics', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listStorageStatistics(request: ListStorageStatisticsRequest): ListStorageStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStorageStatisticsWithOptions(request, runtime);
}

model ListVehicleTagDistributeRequest = {
  corpId: string(name='CorpId'),
  tagCode: string(name='TagCode'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model ListVehicleTagDistributeResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      corpId: string(name='CorpId'),
      tagValue: string(name='TagValue'),
      value: string(name='Value'),
    }
  ](name='Data'),
}

async function listVehicleTagDistributeWithOptions(request: ListVehicleTagDistributeRequest, runtime: Util.RuntimeOptions): ListVehicleTagDistributeResponse {
  Util.validateModel(request);
  return doRequest('ListVehicleTagDistribute', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listVehicleTagDistribute(request: ListVehicleTagDistributeRequest): ListVehicleTagDistributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVehicleTagDistributeWithOptions(request, runtime);
}

model ListCityMapAoisRequest = {
  radius: integer(name='Radius'),
  latitude: string(name='Latitude'),
  longitude: string(name='Longitude'),
}

model ListCityMapAoisResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      id: string(name='Id'),
      value: string(name='Value'),
    }
  ](name='Data'),
}

async function listCityMapAoisWithOptions(request: ListCityMapAoisRequest, runtime: Util.RuntimeOptions): ListCityMapAoisResponse {
  Util.validateModel(request);
  return doRequest('ListCityMapAois', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listCityMapAois(request: ListCityMapAoisRequest): ListCityMapAoisResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCityMapAoisWithOptions(request, runtime);
}

model ListDeviceGenderStatisticsRequest = {
  dataSourceId: string(name='DataSourceId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  corpId: string(name='CorpId'),
}

model ListDeviceGenderStatisticsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      dataSourceId: string(name='DataSourceId'),
      gender: string(name='Gender'),
      number: string(name='Number'),
    }
  ](name='Data'),
}

async function listDeviceGenderStatisticsWithOptions(request: ListDeviceGenderStatisticsRequest, runtime: Util.RuntimeOptions): ListDeviceGenderStatisticsResponse {
  Util.validateModel(request);
  return doRequest('ListDeviceGenderStatistics', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listDeviceGenderStatistics(request: ListDeviceGenderStatisticsRequest): ListDeviceGenderStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceGenderStatisticsWithOptions(request, runtime);
}

model ListVehicleTopRequest = {
  corpId: string(name='CorpId'),
  plateId: string(name='PlateId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model ListVehicleTopResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      corpId: string(name='CorpId'),
      vehicleId: string(name='VehicleId'),
      poiId: string(name='PoiId'),
      poiName: string(name='PoiName'),
      passHour: string(name='PassHour'),
      frequency: string(name='Frequency'),
    }
  ](name='Data'),
}

async function listVehicleTopWithOptions(request: ListVehicleTopRequest, runtime: Util.RuntimeOptions): ListVehicleTopResponse {
  Util.validateModel(request);
  return doRequest('ListVehicleTop', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listVehicleTop(request: ListVehicleTopRequest): ListVehicleTopResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVehicleTopWithOptions(request, runtime);
}

model ListStructureStatisticsRequest = {
  corpId: string(name='CorpId'),
  backCategory: string(name='BackCategory'),
}

model ListStructureStatisticsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      number: string(name='Number'),
      corpId: string(name='CorpId'),
    }
  ](name='Data'),
}

async function listStructureStatisticsWithOptions(request: ListStructureStatisticsRequest, runtime: Util.RuntimeOptions): ListStructureStatisticsResponse {
  Util.validateModel(request);
  return doRequest('ListStructureStatistics', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listStructureStatistics(request: ListStructureStatisticsRequest): ListStructureStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStructureStatisticsWithOptions(request, runtime);
}

model ListPersonTagRequest = {
  corpId: string(name='CorpId'),
  tagCode: string(name='TagCode'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model ListPersonTagResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      corpId: string(name='CorpId'),
      tagValue: string(name='TagValue'),
      value: string(name='Value'),
    }
  ](name='Data'),
}

async function listPersonTagWithOptions(request: ListPersonTagRequest, runtime: Util.RuntimeOptions): ListPersonTagResponse {
  Util.validateModel(request);
  return doRequest('ListPersonTag', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listPersonTag(request: ListPersonTagRequest): ListPersonTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPersonTagWithOptions(request, runtime);
}

model ListRangeDeviceRequest = {
  radius: integer(name='Radius'),
  dataSourceId: string(name='DataSourceId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  corpId: string(name='CorpId'),
}

model ListRangeDeviceResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      corpId: string(name='CorpId'),
      dataSourceId: string(name='DataSourceId'),
      nearPoi: string(name='NearPoi'),
      distance: string(name='Distance'),
      dataSourceIdPoi: string(name='DataSourceIdPoi'),
      latitude: string(name='Latitude'),
      dataSourceIdName: string(name='DataSourceIdName'),
      longitude: string(name='Longitude'),
    }
  ](name='Data'),
}

async function listRangeDeviceWithOptions(request: ListRangeDeviceRequest, runtime: Util.RuntimeOptions): ListRangeDeviceResponse {
  Util.validateModel(request);
  return doRequest('ListRangeDevice', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listRangeDevice(request: ListRangeDeviceRequest): ListRangeDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRangeDeviceWithOptions(request, runtime);
}

model ListCityMapCameraResultsRequest = {
  dataSourceIdList: map[string]any(name='DataSourceIdList'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
}

model ListCityMapCameraResultsShrinkRequest = {
  dataSourceIdListShrink: string(name='DataSourceIdList'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
}

model ListCityMapCameraResultsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  totalCount: long(name='TotalCount'),
  pageNum: string(name='PageNum'),
  pageSize: string(name='PageSize'),
  data: [
    {
      dataSourceId: string(name='DataSourceId'),
      latitude: string(name='Latitude'),
      longitude: string(name='Longitude'),
      nearPoi: string(name='NearPoi'),
      dataSourcePoi: string(name='DataSourcePoi'),
      dataSourceName: string(name='DataSourceName'),
      corpId: string(name='CorpId'),
    }
  ](name='Data'),
}

async function listCityMapCameraResultsWithOptions(tmp: ListCityMapCameraResultsRequest, runtime: Util.RuntimeOptions): ListCityMapCameraResultsResponse {
  Util.validateModel(tmp);
  var request = new ListCityMapCameraResultsShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.dataSourceIdList)) {
    request.dataSourceIdListShrink = Util.toJSONString(tmp.dataSourceIdList);
  }

  return doRequest('ListCityMapCameraResults', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listCityMapCameraResults(request: ListCityMapCameraResultsRequest): ListCityMapCameraResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCityMapCameraResultsWithOptions(request, runtime);
}

model ListCityMapCameraStatisticsRequest = {
  endTime: string(name='EndTime'),
  startTime: string(name='StartTime'),
  dataSourceIdList: string(name='DataSourceIdList'),
  pageSize: long(name='PageSize'),
  pageNumber: long(name='PageNumber'),
}

model ListCityMapCameraStatisticsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      dataSourceId: string(name='DataSourceId'),
      latitude: string(name='Latitude'),
      longitude: string(name='Longitude'),
      dataSourceName: string(name='DataSourceName'),
      corpId: string(name='CorpId'),
      adultValue: string(name='AdultValue'),
      womanValue: string(name='WomanValue'),
      motorValue: string(name='MotorValue'),
      manValue: string(name='ManValue'),
      oldValue: string(name='OldValue'),
      childValue: string(name='ChildValue'),
      statisticTime: string(name='StatisticTime'),
    }
  ](name='Data'),
}

async function listCityMapCameraStatisticsWithOptions(request: ListCityMapCameraStatisticsRequest, runtime: Util.RuntimeOptions): ListCityMapCameraStatisticsResponse {
  Util.validateModel(request);
  return doRequest('ListCityMapCameraStatistics', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listCityMapCameraStatistics(request: ListCityMapCameraStatisticsRequest): ListCityMapCameraStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCityMapCameraStatisticsWithOptions(request, runtime);
}

model ListMapRouteDetailsRequest = {
  routeList?: map[string]any(name='RouteList'),
}

model ListMapRouteDetailsShrinkRequest = {
  routeListShrink?: string(name='RouteList'),
}

model ListMapRouteDetailsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  requestId: string(name='RequestId'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      destination: string(name='Destination'),
      origin: string(name='Origin'),
      route: string(name='Route'),
      type: string(name='Type'),
    }
  ](name='Data'),
}

async function listMapRouteDetailsWithOptions(tmp: ListMapRouteDetailsRequest, runtime: Util.RuntimeOptions): ListMapRouteDetailsResponse {
  Util.validateModel(tmp);
  var request = new ListMapRouteDetailsShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.routeList)) {
    request.routeListShrink = Util.toJSONString(tmp.routeList);
  }

  return doRequest('ListMapRouteDetails', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listMapRouteDetails(request: ListMapRouteDetailsRequest): ListMapRouteDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMapRouteDetailsWithOptions(request, runtime);
}

model ListDevicePersonRequest = {
  dataSourceId: string(name='DataSourceId'),
  statisticsType: string(name='StatisticsType'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  corpId: string(name='CorpId'),
}

model ListDevicePersonResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      personId: string(name='PersonId'),
      dataSourceId: string(name='DataSourceId'),
      gender: string(name='Gender'),
      freqNum: string(name='FreqNum'),
      targetPicUrlPath: string(name='TargetPicUrlPath'),
    }
  ](name='Data'),
}

async function listDevicePersonWithOptions(request: ListDevicePersonRequest, runtime: Util.RuntimeOptions): ListDevicePersonResponse {
  Util.validateModel(request);
  return doRequest('ListDevicePerson', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listDevicePerson(request: ListDevicePersonRequest): ListDevicePersonResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDevicePersonWithOptions(request, runtime);
}

model ListDataStatisticsByDayRequest = {
  corpId: string(name='CorpId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model ListDataStatisticsByDayResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      date: string(name='Date'),
      corpId: string(name='CorpId'),
      faceNumber: integer(name='FaceNumber'),
      bodyNumber: integer(name='BodyNumber'),
      motorNumber: integer(name='MotorNumber'),
      nonMotorNumber: integer(name='NonMotorNumber'),
      totalNumber: integer(name='TotalNumber'),
    }
  ](name='Data'),
}

async function listDataStatisticsByDayWithOptions(request: ListDataStatisticsByDayRequest, runtime: Util.RuntimeOptions): ListDataStatisticsByDayResponse {
  Util.validateModel(request);
  return doRequest('ListDataStatisticsByDay', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listDataStatisticsByDay(request: ListDataStatisticsByDayRequest): ListDataStatisticsByDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataStatisticsByDayWithOptions(request, runtime);
}

model ListVehicleDetailsRequest = {
  corpId: string(name='CorpId'),
  plateId: string(name='PlateId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
}

model ListVehicleDetailsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      vehicleId: string(name='VehicleId'),
      vehicleColor: string(name='VehicleColor'),
      targetImageStoragePath: string(name='TargetImageStoragePath'),
      gender: string(name='Gender'),
      personType: string(name='PersonType'),
      prefOutTime: string(name='PrefOutTime'),
      popularPoi: string(name='PopularPoi'),
      popularAddress: string(name='PopularAddress'),
      sourceImageStoragePath: string(name='SourceImageStoragePath'),
      vehicleClass: string(name='VehicleClass'),
      vehicleApplication: string(name='VehicleApplication'),
      personId: string(name='PersonId'),
      plateId: string(name='PlateId'),
    }
  ](name='Data'),
}

async function listVehicleDetailsWithOptions(request: ListVehicleDetailsRequest, runtime: Util.RuntimeOptions): ListVehicleDetailsResponse {
  Util.validateModel(request);
  return doRequest('ListVehicleDetails', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listVehicleDetails(request: ListVehicleDetailsRequest): ListVehicleDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVehicleDetailsWithOptions(request, runtime);
}

model ListDataStatisticsRequest = {
  backCategory: string(name='BackCategory'),
  schema?: string(name='Schema'),
}

model ListDataStatisticsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      corpId: string(name='CorpId'),
      number: string(name='Number'),
    }
  ](name='Data'),
}

async function listDataStatisticsWithOptions(request: ListDataStatisticsRequest, runtime: Util.RuntimeOptions): ListDataStatisticsResponse {
  Util.validateModel(request);
  return doRequest('ListDataStatistics', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listDataStatistics(request: ListDataStatisticsRequest): ListDataStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataStatisticsWithOptions(request, runtime);
}

model ListCityMapImageDetailsRequest = {
  dataSourceId: string(name='DataSourceId'),
  recordNumber: long(name='RecordNumber'),
  timeInterval: string(name='TimeInterval'),
}

model ListCityMapImageDetailsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      personTargetImageStoragePath: string(name='PersonTargetImageStoragePath'),
      ageLowerLimit: string(name='AgeLowerLimit'),
      ageUpLimit: string(name='AgeUpLimit'),
      vehicleColor: string(name='VehicleColor'),
      trousersColor: string(name='TrousersColor'),
      dataSourceId: string(name='DataSourceId'),
      gender: string(name='Gender'),
      ageLowerLimitReliability: string(name='AgeLowerLimitReliability'),
      genderCodeReliability: string(name='GenderCodeReliability'),
      vehicleClassReliability: string(name='VehicleClassReliability'),
      recordId: string(name='RecordId'),
      ageCodeReliability: string(name='AgeCodeReliability'),
      sourceImageStoragePath: string(name='SourceImageStoragePath'),
      vehicleClass: string(name='VehicleClass'),
      motorTargetImageStoragePath: string(name='MotorTargetImageStoragePath'),
      coatColor: string(name='CoatColor'),
      faceTargetImageStoragePath: string(name='FaceTargetImageStoragePath'),
      shotTime: string(name='ShotTime'),
      vehicleColorReliability: string(name='VehicleColorReliability'),
      trousersColorReliability: string(name='TrousersColorReliability'),
      coatColorReliability: string(name='CoatColorReliability'),
      leftTopX: string(name='LeftTopX'),
      leftTopY: string(name='LeftTopY'),
      rightBottomX: string(name='RightBottomX'),
      rightBottomY: string(name='RightBottomY'),
    }
  ](name='Data'),
}

async function listCityMapImageDetailsWithOptions(request: ListCityMapImageDetailsRequest, runtime: Util.RuntimeOptions): ListCityMapImageDetailsResponse {
  Util.validateModel(request);
  return doRequest('ListCityMapImageDetails', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listCityMapImageDetails(request: ListCityMapImageDetailsRequest): ListCityMapImageDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCityMapImageDetailsWithOptions(request, runtime);
}

model ListPersonResultRequest = {
  corpId: string(name='CorpId'),
  age?: string(name='Age'),
  gender?: string(name='Gender'),
  profession?: string(name='Profession'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
}

model ListPersonResultResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      personId: string(name='PersonId'),
      gender: string(name='Gender'),
      age: string(name='Age'),
      profession: string(name='Profession'),
      address: string(name='Address'),
      transportation: string(name='Transportation'),
      personType: string(name='PersonType'),
      hotSpotAddress: string(name='HotSpotAddress'),
      updateTime: string(name='UpdateTime'),
    }
  ](name='Data'),
}

async function listPersonResultWithOptions(request: ListPersonResultRequest, runtime: Util.RuntimeOptions): ListPersonResultResponse {
  Util.validateModel(request);
  return doRequest('ListPersonResult', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listPersonResult(request: ListPersonResultRequest): ListPersonResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPersonResultWithOptions(request, runtime);
}

model ListCityMapPersonFlowRequest = {
  originDataSourceIdList: map[string]any(name='OriginDataSourceIdList'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  targetDataSourceIdList: map[string]any(name='TargetDataSourceIdList'),
  endTime: string(name='EndTime'),
  startTime: string(name='StartTime'),
  range: string(name='Range'),
}

model ListCityMapPersonFlowShrinkRequest = {
  originDataSourceIdListShrink: string(name='OriginDataSourceIdList'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  targetDataSourceIdListShrink: string(name='TargetDataSourceIdList'),
  endTime: string(name='EndTime'),
  startTime: string(name='StartTime'),
  range: string(name='Range'),
}

model ListCityMapPersonFlowResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  data: [
    {
      originDataSourceId: string(name='OriginDataSourceId'),
      targetDataSourceId: string(name='TargetDataSourceId'),
      flowNumber: string(name='FlowNumber'),
      flowDirection: string(name='FlowDirection'),
    }
  ](name='Data'),
}

async function listCityMapPersonFlowWithOptions(tmp: ListCityMapPersonFlowRequest, runtime: Util.RuntimeOptions): ListCityMapPersonFlowResponse {
  Util.validateModel(tmp);
  var request = new ListCityMapPersonFlowShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.originDataSourceIdList)) {
    request.originDataSourceIdListShrink = Util.toJSONString(tmp.originDataSourceIdList);
  }

  if (!Util.isUnset(tmp.targetDataSourceIdList)) {
    request.targetDataSourceIdListShrink = Util.toJSONString(tmp.targetDataSourceIdList);
  }

  return doRequest('ListCityMapPersonFlow', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function listCityMapPersonFlow(request: ListCityMapPersonFlowRequest): ListCityMapPersonFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCityMapPersonFlowWithOptions(request, runtime);
}

model SearchObjectRequest = {
  corpId: string(name='CorpId'),
  objectType: string(name='ObjectType'),
  vendor?: string(name='Vendor'),
  feature?: string(name='Feature'),
  imageContent?: string(name='ImageContent'),
  imageUrl?: string(name='ImageUrl'),
  deviceList?: string(name='DeviceList'),
  attributes?: string(name='Attributes'),
  shotTimeStart?: string(name='ShotTimeStart'),
  shotTimeEnd?: string(name='ShotTimeEnd'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model SearchObjectResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  total: integer(name='Total'),
  pageSize: long(name='PageSize'),
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    bodyList: [
      {
        deviceID: string(name='DeviceID'),
        objectType: string(name='ObjectType'),
        leftTopX: integer(name='LeftTopX'),
        leftTopY: integer(name='LeftTopY'),
        rightBottomX: integer(name='RightBottomX'),
        rightBottomY: integer(name='RightBottomY'),
        score: float(name='Score'),
        shotTime: string(name='ShotTime'),
        sourceImageUrl: string(name='SourceImageUrl'),
        targetImageUrl: string(name='TargetImageUrl'),
      }
    ](name='BodyList'),
    faceList: [
      {
        deviceID: string(name='DeviceID'),
        objectType: string(name='ObjectType'),
        leftTopX: integer(name='LeftTopX'),
        leftTopY: integer(name='LeftTopY'),
        rightBottomX: integer(name='RightBottomX'),
        rightBottomY: integer(name='RightBottomY'),
        score: float(name='Score'),
        shotTime: string(name='ShotTime'),
        sourceImageUrl: string(name='SourceImageUrl'),
        targetImageUrl: string(name='TargetImageUrl'),
      }
    ](name='FaceList'),
    motorList: [
      {
        deviceID: string(name='DeviceID'),
        objectType: string(name='ObjectType'),
        leftTopX: integer(name='LeftTopX'),
        leftTopY: integer(name='LeftTopY'),
        rightBottomX: integer(name='RightBottomX'),
        rightBottomY: integer(name='RightBottomY'),
        score: float(name='Score'),
        shotTime: string(name='ShotTime'),
        sourceImageUrl: string(name='SourceImageUrl'),
        targetImageUrl: string(name='TargetImageUrl'),
      }
    ](name='MotorList'),
    nonMotorList: [
      {
        deviceID: string(name='DeviceID'),
        objectType: string(name='ObjectType'),
        leftTopX: integer(name='LeftTopX'),
        leftTopY: integer(name='LeftTopY'),
        rightBottomX: integer(name='RightBottomX'),
        rightBottomY: integer(name='RightBottomY'),
        score: integer(name='Score'),
        shotTime: string(name='ShotTime'),
        sourceImageUrl: string(name='SourceImageUrl'),
        targetImageUrl: string(name='TargetImageUrl'),
      }
    ](name='NonMotorList'),
  }(name='Data'),
}

async function searchObjectWithOptions(request: SearchObjectRequest, runtime: Util.RuntimeOptions): SearchObjectResponse {
  Util.validateModel(request);
  return doRequest('SearchObject', 'HTTPS', 'POST', '2020-11-01', 'AK', null, request, runtime);
}

async function searchObject(request: SearchObjectRequest): SearchObjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchObjectWithOptions(request, runtime);
}

model RecognizeImageRequest = {
  corpId: string(name='CorpId'),
  vendor?: string(name='Vendor'),
  imageContent?: string(name='ImageContent'),
  imageUrl?: string(name='ImageUrl'),
}

model RecognizeImageResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  success: string(name='Success'),
  data: {
    bodyList: [
      {
        leftTopX: integer(name='LeftTopX'),
        leftTopY: integer(name='LeftTopY'),
        rightBottomX: integer(name='RightBottomX'),
        rightBottomY: integer(name='RightBottomY'),
        feature: string(name='Feature'),
      }
    ](name='BodyList'),
    faceList: [
      {
        leftTopX: integer(name='LeftTopX'),
        leftTopY: integer(name='LeftTopY'),
        rightBottomX: integer(name='RightBottomX'),
        rightBottomY: integer(name='RightBottomY'),
        faceQuality: float(name='FaceQuality'),
        faceKeyPointQuality: float(name='FaceKeyPointQuality'),
        feature: string(name='Feature'),
      }
    ](name='FaceList'),
  }(name='Data'),
}

async function recognizeImageWithOptions(request: RecognizeImageRequest, runtime: Util.RuntimeOptions): RecognizeImageResponse {
  Util.validateModel(request);
  return doRequest('RecognizeImage', 'HTTPS', 'POST', '2020-11-01', 'AK,APP', null, request, runtime);
}

async function recognizeImage(request: RecognizeImageRequest): RecognizeImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeImageWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
