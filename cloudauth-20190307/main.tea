import Util;
import RPCUtil;
import RPC;
import EndpointUtil;
import OSS;
import OpenPlatform;
import OSSUtil;
import FileForm;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloudauth', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DescribeFaceConfigRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
}

model DescribeFaceConfigResponse = {
  requestId: string(name='RequestId'),
  items: [
    {
      bizType: string(name='BizType'),
      bizName: string(name='BizName'),
      gmtUpdated: long(name='GmtUpdated'),
    }
  ](name='Items'),
}

async function describeFaceConfig(request: DescribeFaceConfigRequest, runtime: Util.RuntimeOptions): DescribeFaceConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeFaceConfig', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeFaceConfigSimply(request: DescribeFaceConfigRequest): DescribeFaceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFaceConfig(request, runtime);
}

model UpdateFaceConfigRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  bizType: string(name='BizType'),
  bizName: string(name='BizName'),
}

model UpdateFaceConfigResponse = {
  requestId: string(name='RequestId'),
}

async function updateFaceConfig(request: UpdateFaceConfigRequest, runtime: Util.RuntimeOptions): UpdateFaceConfigResponse {
  Util.validateModel(request);
  return doRequest('UpdateFaceConfig', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function updateFaceConfigSimply(request: UpdateFaceConfigRequest): UpdateFaceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFaceConfig(request, runtime);
}

model CreateFaceConfigRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  bizType: string(name='BizType'),
  bizName: string(name='BizName'),
}

model CreateFaceConfigResponse = {
  requestId: string(name='RequestId'),
}

async function createFaceConfig(request: CreateFaceConfigRequest, runtime: Util.RuntimeOptions): CreateFaceConfigResponse {
  Util.validateModel(request);
  return doRequest('CreateFaceConfig', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function createFaceConfigSimply(request: CreateFaceConfigRequest): CreateFaceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFaceConfig(request, runtime);
}

model LivenessFaceVerifyRequest = {
  sceneId?: long(name='SceneId'),
  outerOrderNo?: string(name='OuterOrderNo'),
  productCode?: string(name='ProductCode'),
  faceContrastPicture?: string(name='FaceContrastPicture'),
  deviceToken?: string(name='DeviceToken'),
  mobile?: string(name='Mobile'),
  ip?: string(name='Ip'),
  userId?: string(name='UserId'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl'),
  certifyId?: string(name='CertifyId'),
  ossBucketName?: string(name='OssBucketName'),
  ossObjectName?: string(name='OssObjectName'),
  model?: string(name='Model'),
}

model LivenessFaceVerifyResponse = {
  requestId: string(name='RequestId'),
  message: string(name='Message'),
  code: string(name='Code'),
  resultObject: {
    passed: string(name='Passed'),
    materialInfo: string(name='MaterialInfo'),
    subCode: string(name='SubCode'),
  }(name='ResultObject'),
}

async function livenessFaceVerify(request: LivenessFaceVerifyRequest, runtime: Util.RuntimeOptions): LivenessFaceVerifyResponse {
  Util.validateModel(request);
  return doRequest('LivenessFaceVerify', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function livenessFaceVerifySimply(request: LivenessFaceVerifyRequest): LivenessFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return livenessFaceVerify(request, runtime);
}

model CompareFaceVerifyRequest = {
  sceneId?: long(name='SceneId'),
  outerOrderNo?: string(name='OuterOrderNo'),
  productCode?: string(name='ProductCode'),
  sourceFaceContrastPicture?: string(name='SourceFaceContrastPicture'),
  sourceFaceContrastPictureUrl?: string(name='SourceFaceContrastPictureUrl'),
  sourceCertifyId?: string(name='SourceCertifyId'),
  sourceOssBucketName?: string(name='SourceOssBucketName'),
  sourceOssObjectName?: string(name='SourceOssObjectName'),
  targetFaceContrastPicture?: string(name='TargetFaceContrastPicture'),
  targetFaceContrastPictureUrl?: string(name='TargetFaceContrastPictureUrl'),
  targetCertifyId?: string(name='TargetCertifyId'),
  targetOssBucketName?: string(name='TargetOssBucketName'),
  targetOssObjectName?: string(name='TargetOssObjectName'),
}

model CompareFaceVerifyResponse = {
  requestId: string(name='RequestId'),
  message: string(name='Message'),
  code: string(name='Code'),
  resultObject: {
    passed: string(name='Passed'),
    verifyScore: float(name='VerifyScore'),
  }(name='ResultObject'),
}

async function compareFaceVerify(request: CompareFaceVerifyRequest, runtime: Util.RuntimeOptions): CompareFaceVerifyResponse {
  Util.validateModel(request);
  return doRequest('CompareFaceVerify', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function compareFaceVerifySimply(request: CompareFaceVerifyRequest): CompareFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return compareFaceVerify(request, runtime);
}

model DescribeSdkUrlRequest = {
  id: long(name='Id'),
  debug?: boolean(name='Debug'),
}

model DescribeSdkUrlResponse = {
  requestId: string(name='RequestId'),
  sdkUrl: string(name='SdkUrl'),
}

async function describeSdkUrl(request: DescribeSdkUrlRequest, runtime: Util.RuntimeOptions): DescribeSdkUrlResponse {
  Util.validateModel(request);
  return doRequest('DescribeSdkUrl', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeSdkUrlSimply(request: DescribeSdkUrlRequest): DescribeSdkUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSdkUrl(request, runtime);
}

model DescribeUpdatePackageResultRequest = {
  taskId: string(name='TaskId'),
}

model DescribeUpdatePackageResultResponse = {
  requestId: string(name='RequestId'),
  appInfo: {
    id: long(name='Id'),
    name: string(name='Name'),
    packageName: string(name='PackageName'),
    icon: string(name='Icon'),
    startDate: string(name='StartDate'),
    endDate: string(name='EndDate'),
    type: integer(name='Type'),
    packageInfo: {
      version: string(name='Version'),
    }(name='PackageInfo'),
    debugPackageInfo: {
      version: string(name='Version'),
    }(name='DebugPackageInfo'),
  }(name='AppInfo'),
}

async function describeUpdatePackageResult(request: DescribeUpdatePackageResultRequest, runtime: Util.RuntimeOptions): DescribeUpdatePackageResultResponse {
  Util.validateModel(request);
  return doRequest('DescribeUpdatePackageResult', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeUpdatePackageResultSimply(request: DescribeUpdatePackageResultRequest): DescribeUpdatePackageResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUpdatePackageResult(request, runtime);
}

model UpdateAppPackageRequest = {
  id?: long(name='Id'),
  packageUrl: string(name='PackageUrl'),
  platform?: string(name='Platform'),
  debug?: boolean(name='Debug'),
}

model UpdateAppPackageResponse = {
  requestId: string(name='RequestId'),
  taskId: string(name='TaskId'),
}

async function updateAppPackage(request: UpdateAppPackageRequest, runtime: Util.RuntimeOptions): UpdateAppPackageResponse {
  Util.validateModel(request);
  return doRequest('UpdateAppPackage', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function updateAppPackageSimply(request: UpdateAppPackageRequest): UpdateAppPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppPackage(request, runtime);
}

model DescribeAppInfoRequest = {
  pageSize?: integer(name='PageSize'),
  currentPage?: integer(name='CurrentPage'),
  platform?: string(name='Platform'),
}

model DescribeAppInfoResponse = {
  requestId: string(name='RequestId'),
  pageSize: integer(name='PageSize'),
  currentPage: integer(name='CurrentPage'),
  totalCount: integer(name='TotalCount'),
  appInfoList: [
    {
      id: long(name='Id'),
      name: string(name='Name'),
      packageName: string(name='PackageName'),
      icon: string(name='Icon'),
      startDate: string(name='StartDate'),
      endDate: string(name='EndDate'),
      type: integer(name='Type'),
      packageInfo: {
        version: string(name='Version'),
      }(name='PackageInfo'),
      debugPackageInfo: {
        version: string(name='Version'),
      }(name='DebugPackageInfo'),
    }
  ](name='AppInfoList'),
}

async function describeAppInfo(request: DescribeAppInfoRequest, runtime: Util.RuntimeOptions): DescribeAppInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeAppInfo', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeAppInfoSimply(request: DescribeAppInfoRequest): DescribeAppInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppInfo(request, runtime);
}

model ContrastFaceVerifyRequest = {
  sceneId?: long(name='SceneId'),
  outerOrderNo?: string(name='OuterOrderNo'),
  productCode?: string(name='ProductCode'),
  certType?: string(name='CertType'),
  certName?: string(name='CertName'),
  certNo?: string(name='CertNo'),
  faceContrastPicture?: string(name='FaceContrastPicture'),
  deviceToken?: string(name='DeviceToken'),
  mobile?: string(name='Mobile'),
  ip?: string(name='Ip'),
  userId?: string(name='UserId'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl'),
  certifyId?: string(name='CertifyId'),
  ossBucketName?: string(name='OssBucketName'),
  ossObjectName?: string(name='OssObjectName'),
  model?: string(name='Model'),
  faceContrastFile?: string(name='FaceContrastFile'),
}

model ContrastFaceVerifyResponse = {
  requestId: string(name='RequestId'),
  message: string(name='Message'),
  code: string(name='Code'),
  resultObject: {
    passed: string(name='Passed'),
    identityInfo: string(name='IdentityInfo'),
    materialInfo: string(name='MaterialInfo'),
    subCode: string(name='SubCode'),
  }(name='ResultObject'),
}

async function contrastFaceVerify(request: ContrastFaceVerifyRequest, runtime: Util.RuntimeOptions): ContrastFaceVerifyResponse {
  Util.validateModel(request);
  return doRequest('ContrastFaceVerify', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function contrastFaceVerifySimply(request: ContrastFaceVerifyRequest): ContrastFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return contrastFaceVerify(request, runtime);
}

model ContrastFaceVerifyAdvanceRequest = {
  faceContrastFileObject: readable(name='FaceContrastFileObject'),
  sceneId?: long(name='SceneId'),
  outerOrderNo?: string(name='OuterOrderNo'),
  productCode?: string(name='ProductCode'),
  certType?: string(name='CertType'),
  certName?: string(name='CertName'),
  certNo?: string(name='CertNo'),
  faceContrastPicture?: string(name='FaceContrastPicture'),
  deviceToken?: string(name='DeviceToken'),
  mobile?: string(name='Mobile'),
  ip?: string(name='Ip'),
  userId?: string(name='UserId'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl'),
  certifyId?: string(name='CertifyId'),
  ossBucketName?: string(name='OssBucketName'),
  ossObjectName?: string(name='OssObjectName'),
  model?: string(name='Model'),
}

async function contrastFaceVerifyAdvance(request: ContrastFaceVerifyAdvanceRequest, runtime: Util.RuntimeOptions): ContrastFaceVerifyResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'Cloudauth',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  var contrastFaceVerifyReq = new ContrastFaceVerifyRequest{};
  RPCUtil.convert(request, contrastFaceVerifyReq);

  authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  ossConfig.accessKeyId = authResponse.accessKeyId;
  ossConfig.endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
  ossClient = new OSS(ossConfig);

  fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.faceContrastFileObject,
    contentType = '',
  };
  ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  ossClient.postObject(uploadRequest, ossRuntime);
  contrastFaceVerifyReq.faceContrastFile = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var contrastFaceVerifyResp = contrastFaceVerify(contrastFaceVerifyReq, runtime);
  return contrastFaceVerifyResp;
}

model InitDeviceRequest = {
  certifyId?: string(name='CertifyId'),
  outerOrderNo?: string(name='OuterOrderNo'),
  channel?: string(name='Channel'),
  merchant?: string(name='Merchant'),
  productName?: string(name='ProductName'),
  produceNode?: string(name='ProduceNode'),
  bizData?: string(name='BizData'),
  metaInfo?: string(name='MetaInfo'),
  certifyPrincipal?: string(name='CertifyPrincipal'),
  appVersion?: string(name='AppVersion'),
  deviceToken?: string(name='DeviceToken'),
  uaToken?: string(name='UaToken'),
  webUmidToken?: string(name='WebUmidToken'),
}

model InitDeviceResponse = {
  requestId: string(name='RequestId'),
  message: string(name='Message'),
  code: string(name='Code'),
  resultObject: {
    certifyId: string(name='CertifyId'),
    protocol: string(name='Protocol'),
    extParams: string(name='ExtParams'),
    retCode: string(name='RetCode'),
    retCodeSub: string(name='RetCodeSub'),
    retMessageSub: string(name='RetMessageSub'),
    message: string(name='Message'),
    ossEndPoint: string(name='OssEndPoint'),
    accessKeyId: string(name='AccessKeyId'),
    accessKeySecret: string(name='AccessKeySecret'),
    securityToken: string(name='SecurityToken'),
    bucketName: string(name='BucketName'),
    fileNamePrefix: string(name='FileNamePrefix'),
    fileName: string(name='FileName'),
    presignedUrl: string(name='PresignedUrl'),
  }(name='ResultObject'),
}

async function initDevice(request: InitDeviceRequest, runtime: Util.RuntimeOptions): InitDeviceResponse {
  Util.validateModel(request);
  return doRequest('InitDevice', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function initDeviceSimply(request: InitDeviceRequest): InitDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return initDevice(request, runtime);
}

model InitFaceVerifyRequest = {
  sceneId?: long(name='SceneId'),
  outerOrderNo?: string(name='OuterOrderNo'),
  productCode?: string(name='ProductCode'),
  certType?: string(name='CertType'),
  certName?: string(name='CertName'),
  certNo?: string(name='CertNo'),
  returnUrl?: string(name='ReturnUrl'),
  faceContrastPicture?: string(name='FaceContrastPicture'),
  metaInfo?: string(name='MetaInfo'),
  mobile?: string(name='Mobile'),
  ip?: string(name='Ip'),
  userId?: string(name='UserId'),
  faceContrastPictureUrl?: string(name='FaceContrastPictureUrl'),
  certifyId?: string(name='CertifyId'),
  ossBucketName?: string(name='OssBucketName'),
  ossObjectName?: string(name='OssObjectName'),
  model?: string(name='Model'),
  callbackUrl?: string(name='CallbackUrl'),
  callbackToken?: string(name='CallbackToken'),
}

model InitFaceVerifyResponse = {
  requestId: string(name='RequestId'),
  message: string(name='Message'),
  code: string(name='Code'),
  resultObject: {
    certifyId: string(name='CertifyId'),
    certifyUrl: string(name='CertifyUrl'),
  }(name='ResultObject'),
}

async function initFaceVerify(request: InitFaceVerifyRequest, runtime: Util.RuntimeOptions): InitFaceVerifyResponse {
  Util.validateModel(request);
  return doRequest('InitFaceVerify', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function initFaceVerifySimply(request: InitFaceVerifyRequest): InitFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return initFaceVerify(request, runtime);
}

model DescribeFaceVerifyRequest = {
  sceneId?: long(name='SceneId'),
  certifyId?: string(name='CertifyId'),
}

model DescribeFaceVerifyResponse = {
  requestId: string(name='RequestId'),
  message: string(name='Message'),
  code: string(name='Code'),
  resultObject: {
    passed: string(name='Passed'),
    identityInfo: string(name='IdentityInfo'),
    materialInfo: string(name='MaterialInfo'),
    deviceToken: string(name='DeviceToken'),
    subCode: string(name='SubCode'),
  }(name='ResultObject'),
}

async function describeFaceVerify(request: DescribeFaceVerifyRequest, runtime: Util.RuntimeOptions): DescribeFaceVerifyResponse {
  Util.validateModel(request);
  return doRequest('DescribeFaceVerify', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeFaceVerifySimply(request: DescribeFaceVerifyRequest): DescribeFaceVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFaceVerify(request, runtime);
}

model VerifyDeviceRequest = {
  certifyId?: string(name='CertifyId'),
  certifyData?: string(name='CertifyData'),
  appVersion?: string(name='AppVersion'),
  extInfo?: string(name='ExtInfo'),
}

model VerifyDeviceResponse = {
  requestId: string(name='RequestId'),
  code: string(name='Code'),
  message: string(name='Message'),
  resultObject: {
    validationRetCode: string(name='ValidationRetCode'),
    productRetCode: string(name='ProductRetCode'),
    retCodeSub: string(name='RetCodeSub'),
    retMessageSub: string(name='RetMessageSub'),
    hasNext: string(name='HasNext'),
    extParams: string(name='ExtParams'),
  }(name='ResultObject'),
}

async function verifyDevice(request: VerifyDeviceRequest, runtime: Util.RuntimeOptions): VerifyDeviceResponse {
  Util.validateModel(request);
  return doRequest('VerifyDevice', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function verifyDeviceSimply(request: VerifyDeviceRequest): VerifyDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyDevice(request, runtime);
}

model ModifyDeviceInfoRequest = {
  deviceId: string(name='DeviceId'),
  userDeviceId?: string(name='UserDeviceId'),
  bizType?: string(name='BizType'),
  duration?: string(name='Duration'),
  expiredDay?: string(name='ExpiredDay'),
}

model ModifyDeviceInfoResponse = {
  requestId: string(name='RequestId'),
  deviceId: string(name='DeviceId'),
  userDeviceId: string(name='UserDeviceId'),
  bizType: string(name='BizType'),
  beginDay: string(name='BeginDay'),
  expiredDay: string(name='ExpiredDay'),
}

async function modifyDeviceInfo(request: ModifyDeviceInfoRequest, runtime: Util.RuntimeOptions): ModifyDeviceInfoResponse {
  Util.validateModel(request);
  return doRequest('ModifyDeviceInfo', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function modifyDeviceInfoSimply(request: ModifyDeviceInfoRequest): ModifyDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDeviceInfo(request, runtime);
}

model DescribeVerifySDKRequest = {
  taskId: string(name='TaskId'),
}

model DescribeVerifySDKResponse = {
  requestId: string(name='RequestId'),
  sdkUrl: string(name='SdkUrl'),
}

async function describeVerifySDK(request: DescribeVerifySDKRequest, runtime: Util.RuntimeOptions): DescribeVerifySDKResponse {
  Util.validateModel(request);
  return doRequest('DescribeVerifySDK', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeVerifySDKSimply(request: DescribeVerifySDKRequest): DescribeVerifySDKResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifySDK(request, runtime);
}

model DescribeDeviceInfoRequest = {
  pageSize?: integer(name='PageSize'),
  currentPage?: integer(name='CurrentPage'),
  deviceId?: string(name='DeviceId'),
  bizType?: string(name='BizType'),
  userDeviceId?: string(name='UserDeviceId'),
  expiredStartDay?: string(name='ExpiredStartDay'),
  expiredEndDay?: string(name='ExpiredEndDay'),
}

model DescribeDeviceInfoResponse = {
  requestId: string(name='RequestId'),
  pageSize: integer(name='PageSize'),
  currentPage: integer(name='CurrentPage'),
  totalCount: integer(name='TotalCount'),
  deviceInfoList: {
    deviceInfo: [
      {
        deviceId: string(name='DeviceId'),
        userDeviceId: string(name='UserDeviceId'),
        bizType: string(name='BizType'),
        beginDay: string(name='BeginDay'),
        expiredDay: string(name='ExpiredDay'),
      }
    ](name='DeviceInfo'),
  }(name='DeviceInfoList'),
}

async function describeDeviceInfo(request: DescribeDeviceInfoRequest, runtime: Util.RuntimeOptions): DescribeDeviceInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeDeviceInfo', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeDeviceInfoSimply(request: DescribeDeviceInfoRequest): DescribeDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceInfo(request, runtime);
}

model CreateVerifySDKRequest = {
  appUrl: string(name='AppUrl'),
  platform?: string(name='Platform'),
}

model CreateVerifySDKResponse = {
  requestId: string(name='RequestId'),
  taskId: string(name='TaskId'),
}

async function createVerifySDK(request: CreateVerifySDKRequest, runtime: Util.RuntimeOptions): CreateVerifySDKResponse {
  Util.validateModel(request);
  return doRequest('CreateVerifySDK', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function createVerifySDKSimply(request: CreateVerifySDKRequest): CreateVerifySDKResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVerifySDK(request, runtime);
}

model CreateAuthKeyRequest = {
  bizType?: string(name='BizType'),
  userDeviceId?: string(name='UserDeviceId'),
  test?: boolean(name='Test'),
  authYears?: integer(name='AuthYears'),
}

model CreateAuthKeyResponse = {
  requestId: string(name='RequestId'),
  authKey: string(name='AuthKey'),
}

async function createAuthKey(request: CreateAuthKeyRequest, runtime: Util.RuntimeOptions): CreateAuthKeyResponse {
  Util.validateModel(request);
  return doRequest('CreateAuthKey', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function createAuthKeySimply(request: CreateAuthKeyRequest): CreateAuthKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAuthKey(request, runtime);
}

model DetectFaceAttributesRequest = {
  materialValue: string(name='MaterialValue'),
  bizType?: string(name='BizType'),
}

model DetectFaceAttributesResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  code: string(name='Code'),
  message: string(name='Message'),
  data: {
    imgWidth: integer(name='ImgWidth'),
    imgHeight: integer(name='ImgHeight'),
    faceInfos: {
      faceAttributesDetectInfo: [
        {
          faceRect: {
            top: integer(name='Top'),
            left: integer(name='Left'),
            width: integer(name='Width'),
            height: integer(name='Height'),
          }(name='FaceRect'),
          faceAttributes: {
            age: integer(name='Age'),
            glasses: string(name='Glasses'),
            facetype: string(name='Facetype'),
            blur: float(name='Blur'),
            ethnicity: string(name='Ethnicity'),
            gender: {
              score: float(name='Score'),
              value: string(name='Value'),
            }(name='Gender'),
            smiling: {
              value: float(name='Value'),
              threshold: float(name='Threshold'),
            }(name='Smiling'),
            headpose: {
              pitchAngle: float(name='PitchAngle'),
              rollAngle: float(name='RollAngle'),
              yawAngle: float(name='YawAngle'),
            }(name='Headpose'),
          }(name='FaceAttributes'),
        }
      ](name='FaceAttributesDetectInfo'),
    }(name='FaceInfos'),
  }(name='Data'),
}

async function detectFaceAttributes(request: DetectFaceAttributesRequest, runtime: Util.RuntimeOptions): DetectFaceAttributesResponse {
  Util.validateModel(request);
  return doRequest('DetectFaceAttributes', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function detectFaceAttributesSimply(request: DetectFaceAttributesRequest): DetectFaceAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectFaceAttributes(request, runtime);
}

model CompareFacesRequest = {
  targetImageType?: string(name='TargetImageType'),
  sourceImageType?: string(name='SourceImageType'),
  sourceImageValue?: string(name='SourceImageValue'),
  targetImageValue?: string(name='TargetImageValue'),
  bizType?: string(name='BizType'),
}

model CompareFacesResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  code: string(name='Code'),
  message: string(name='Message'),
  data: {
    similarityScore: float(name='SimilarityScore'),
    confidenceThresholds: string(name='ConfidenceThresholds'),
  }(name='Data'),
}

async function compareFaces(request: CompareFacesRequest, runtime: Util.RuntimeOptions): CompareFacesResponse {
  Util.validateModel(request);
  return doRequest('CompareFaces', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function compareFacesSimply(request: CompareFacesRequest): CompareFacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return compareFaces(request, runtime);
}

model DescribeFaceUsageRequest = {
  startDate: string(name='StartDate'),
  endDate: string(name='EndDate'),
}

model DescribeFaceUsageResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  faceUsageList: [
    {
      date: string(name='Date'),
      totalCount: long(name='TotalCount'),
    }
  ](name='FaceUsageList'),
}

async function describeFaceUsage(request: DescribeFaceUsageRequest, runtime: Util.RuntimeOptions): DescribeFaceUsageResponse {
  Util.validateModel(request);
  return doRequest('DescribeFaceUsage', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeFaceUsageSimply(request: DescribeFaceUsageRequest): DescribeFaceUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFaceUsage(request, runtime);
}

model DescribeVerifyRecordsRequest = {
  totalCount?: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  currentPage: integer(name='CurrentPage'),
  bizType?: string(name='BizType'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
  bizId?: string(name='BizId'),
  idCardNum?: string(name='IdCardNum'),
  statusList?: string(name='StatusList'),
  queryId?: string(name='QueryId'),
}

model DescribeVerifyRecordsResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  currentPage: integer(name='CurrentPage'),
  queryId: string(name='QueryId'),
  recordsList: [
    {
      bizType: string(name='BizType'),
      bizId: string(name='BizId'),
      dataStats: string(name='DataStats'),
      verifyId: string(name='VerifyId'),
      finishTime: long(name='FinishTime'),
      status: integer(name='Status'),
      idCardFaceComparisonScore: float(name='IdCardFaceComparisonScore'),
      authorityComparisonScore: float(name='AuthorityComparisonScore'),
      material: {
        faceImageUrl: string(name='FaceImageUrl'),
        idCardName: string(name='IdCardName'),
        idCardNumber: string(name='IdCardNumber'),
        idCardInfo: {
          frontImageUrl: string(name='FrontImageUrl'),
          backImageUrl: string(name='BackImageUrl'),
          name: string(name='Name'),
          number: string(name='Number'),
          address: string(name='Address'),
          birth: string(name='Birth'),
          sex: string(name='Sex'),
          nationality: string(name='Nationality'),
          authority: string(name='Authority'),
          startDate: string(name='StartDate'),
          endDate: string(name='EndDate'),
        }(name='IdCardInfo'),
      }(name='Material'),
    }
  ](name='RecordsList'),
}

async function describeVerifyRecords(request: DescribeVerifyRecordsRequest, runtime: Util.RuntimeOptions): DescribeVerifyRecordsResponse {
  Util.validateModel(request);
  return doRequest('DescribeVerifyRecords', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeVerifyRecordsSimply(request: DescribeVerifyRecordsRequest): DescribeVerifyRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifyRecords(request, runtime);
}

model UpdateVerifySettingRequest = {
  bizType: string(name='BizType'),
  bizName?: string(name='BizName'),
  solution?: string(name='Solution'),
  guideStep?: boolean(name='GuideStep'),
  privacyStep?: boolean(name='PrivacyStep'),
  resultStep?: boolean(name='ResultStep'),
}

model UpdateVerifySettingResponse = {
  requestId: string(name='RequestId'),
  bizType: string(name='BizType'),
  bizName: string(name='BizName'),
  solution: string(name='Solution'),
  stepList: [ string ] (name='StepList'),
}

async function updateVerifySetting(request: UpdateVerifySettingRequest, runtime: Util.RuntimeOptions): UpdateVerifySettingResponse {
  Util.validateModel(request);
  return doRequest('UpdateVerifySetting', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function updateVerifySettingSimply(request: UpdateVerifySettingRequest): UpdateVerifySettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVerifySetting(request, runtime);
}

model CreateVerifySettingRequest = {
  bizType: string(name='BizType'),
  bizName: string(name='BizName'),
  solution: string(name='Solution'),
  guideStep?: boolean(name='GuideStep'),
  privacyStep?: boolean(name='PrivacyStep'),
  resultStep?: boolean(name='ResultStep'),
}

model CreateVerifySettingResponse = {
  requestId: string(name='RequestId'),
  bizType: string(name='BizType'),
  bizName: string(name='BizName'),
  solution: string(name='Solution'),
  stepList: [ string ] (name='StepList'),
}

async function createVerifySetting(request: CreateVerifySettingRequest, runtime: Util.RuntimeOptions): CreateVerifySettingResponse {
  Util.validateModel(request);
  return doRequest('CreateVerifySetting', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function createVerifySettingSimply(request: CreateVerifySettingRequest): CreateVerifySettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVerifySetting(request, runtime);
}

model DescribeVerifySettingRequest = {
}

model DescribeVerifySettingResponse = {
  requestId: string(name='RequestId'),
  verifySettingList: [
    {
      bizType: string(name='BizType'),
      bizName: string(name='BizName'),
      solution: string(name='Solution'),
      stepList: [ string ](name='StepList'),
    }
  ](name='VerifySettingList'),
}

async function describeVerifySetting(request: DescribeVerifySettingRequest, runtime: Util.RuntimeOptions): DescribeVerifySettingResponse {
  Util.validateModel(request);
  return doRequest('DescribeVerifySetting', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeVerifySettingSimply(request: DescribeVerifySettingRequest): DescribeVerifySettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifySetting(request, runtime);
}

model DescribeVerifyUsageRequest = {
  bizType?: string(name='BizType'),
  startDate: string(name='StartDate'),
  endDate: string(name='EndDate'),
}

model DescribeVerifyUsageResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  verifyUsageList: [
    {
      bizType: string(name='BizType'),
      date: string(name='Date'),
      totalCount: long(name='TotalCount'),
      passCount: long(name='PassCount'),
      failCount: long(name='FailCount'),
    }
  ](name='VerifyUsageList'),
}

async function describeVerifyUsage(request: DescribeVerifyUsageRequest, runtime: Util.RuntimeOptions): DescribeVerifyUsageResponse {
  Util.validateModel(request);
  return doRequest('DescribeVerifyUsage', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeVerifyUsageSimply(request: DescribeVerifyUsageRequest): DescribeVerifyUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifyUsage(request, runtime);
}

model DescribeUserStatusRequest = {
}

model DescribeUserStatusResponse = {
  requestId: string(name='RequestId'),
  enabled: boolean(name='Enabled'),
}

async function describeUserStatus(request: DescribeUserStatusRequest, runtime: Util.RuntimeOptions): DescribeUserStatusResponse {
  Util.validateModel(request);
  return doRequest('DescribeUserStatus', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeUserStatusSimply(request: DescribeUserStatusRequest): DescribeUserStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserStatus(request, runtime);
}

model DescribeUploadInfoRequest = {
  biz?: string(name='Biz'),
}

model DescribeUploadInfoResponse = {
  requestId: string(name='RequestId'),
  accessid: string(name='Accessid'),
  policy: string(name='Policy'),
  signature: string(name='Signature'),
  folder: string(name='Folder'),
  host: string(name='Host'),
  expire: long(name='Expire'),
}

async function describeUploadInfo(request: DescribeUploadInfoRequest, runtime: Util.RuntimeOptions): DescribeUploadInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeUploadInfo', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeUploadInfoSimply(request: DescribeUploadInfoRequest): DescribeUploadInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUploadInfo(request, runtime);
}

model DescribeRPSDKRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  taskId: string(name='TaskId'),
}

model DescribeRPSDKResponse = {
  requestId: string(name='RequestId'),
  sdkUrl: string(name='SdkUrl'),
}

async function describeRPSDK(request: DescribeRPSDKRequest, runtime: Util.RuntimeOptions): DescribeRPSDKResponse {
  Util.validateModel(request);
  return doRequest('DescribeRPSDK', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeRPSDKSimply(request: DescribeRPSDKRequest): DescribeRPSDKResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRPSDK(request, runtime);
}

model CreateRPSDKRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  appUrl: string(name='AppUrl'),
  platform?: string(name='Platform'),
}

model CreateRPSDKResponse = {
  requestId: string(name='RequestId'),
  taskId: string(name='TaskId'),
}

async function createRPSDK(request: CreateRPSDKRequest, runtime: Util.RuntimeOptions): CreateRPSDKResponse {
  Util.validateModel(request);
  return doRequest('CreateRPSDK', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function createRPSDKSimply(request: CreateRPSDKRequest): CreateRPSDKResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRPSDK(request, runtime);
}

model VerifyMaterialRequest = {
  idCardBackImageUrl?: string(name='IdCardBackImageUrl'),
  faceImageUrl: string(name='FaceImageUrl'),
  bizType: string(name='BizType'),
  bizId: string(name='BizId'),
  name: string(name='Name'),
  idCardNumber: string(name='IdCardNumber'),
  idCardFrontImageUrl?: string(name='IdCardFrontImageUrl'),
  userId?: string(name='UserId'),
}

model VerifyMaterialResponse = {
  requestId: string(name='RequestId'),
  verifyToken: string(name='VerifyToken'),
  verifyStatus: integer(name='VerifyStatus'),
  authorityComparisionScore: float(name='AuthorityComparisionScore'),
  idCardFaceComparisonScore: float(name='IdCardFaceComparisonScore'),
  material: {
    faceImageUrl: string(name='FaceImageUrl'),
    idCardName: string(name='IdCardName'),
    idCardNumber: string(name='IdCardNumber'),
    faceQuality: string(name='FaceQuality'),
    faceGlobalUrl: string(name='FaceGlobalUrl'),
    faceMask: string(name='FaceMask'),
    idCardInfo: {
      number: string(name='Number'),
      address: string(name='Address'),
      nationality: string(name='Nationality'),
      endDate: string(name='EndDate'),
      frontImageUrl: string(name='FrontImageUrl'),
      authority: string(name='Authority'),
      sex: string(name='Sex'),
      name: string(name='Name'),
      birth: string(name='Birth'),
      backImageUrl: string(name='BackImageUrl'),
      startDate: string(name='StartDate'),
    }(name='IdCardInfo'),
  }(name='Material'),
}

async function verifyMaterial(request: VerifyMaterialRequest, runtime: Util.RuntimeOptions): VerifyMaterialResponse {
  Util.validateModel(request);
  return doRequest('VerifyMaterial', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function verifyMaterialSimply(request: VerifyMaterialRequest): VerifyMaterialResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyMaterial(request, runtime);
}

model DescribeVerifyResultRequest = {
  bizId: string(name='BizId'),
  bizType: string(name='BizType'),
}

model DescribeVerifyResultResponse = {
  requestId: string(name='RequestId'),
  verifyStatus: integer(name='VerifyStatus'),
  authorityComparisionScore: float(name='AuthorityComparisionScore'),
  faceComparisonScore: float(name='FaceComparisonScore'),
  idCardFaceComparisonScore: float(name='IdCardFaceComparisonScore'),
  material: {
    faceImageUrl: string(name='FaceImageUrl'),
    idCardName: string(name='IdCardName'),
    idCardNumber: string(name='IdCardNumber'),
    faceQuality: string(name='FaceQuality'),
    faceGlobalUrl: string(name='FaceGlobalUrl'),
    faceMask: boolean(name='FaceMask'),
    idCardInfo: {
      number: string(name='Number'),
      address: string(name='Address'),
      nationality: string(name='Nationality'),
      endDate: string(name='EndDate'),
      frontImageUrl: string(name='FrontImageUrl'),
      authority: string(name='Authority'),
      sex: string(name='Sex'),
      name: string(name='Name'),
      birth: string(name='Birth'),
      backImageUrl: string(name='BackImageUrl'),
      startDate: string(name='StartDate'),
    }(name='IdCardInfo'),
    videoUrls: [ string ](name='VideoUrls'),
  }(name='Material'),
}

async function describeVerifyResult(request: DescribeVerifyResultRequest, runtime: Util.RuntimeOptions): DescribeVerifyResultResponse {
  Util.validateModel(request);
  return doRequest('DescribeVerifyResult', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeVerifyResultSimply(request: DescribeVerifyResultRequest): DescribeVerifyResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifyResult(request, runtime);
}

model DescribeOssUploadTokenRequest = {
}

model DescribeOssUploadTokenResponse = {
  requestId: string(name='RequestId'),
  ossUploadToken: {
    bucket: string(name='Bucket'),
    endPoint: string(name='EndPoint'),
    path: string(name='Path'),
    expired: long(name='Expired'),
    secret: string(name='Secret'),
    key: string(name='Key'),
    token: string(name='Token'),
  }(name='OssUploadToken'),
}

async function describeOssUploadToken(request: DescribeOssUploadTokenRequest, runtime: Util.RuntimeOptions): DescribeOssUploadTokenResponse {
  Util.validateModel(request);
  return doRequest('DescribeOssUploadToken', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeOssUploadTokenSimply(request: DescribeOssUploadTokenRequest): DescribeOssUploadTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOssUploadToken(request, runtime);
}

model DescribeVerifyTokenRequest = {
  idCardBackImageUrl?: string(name='IdCardBackImageUrl'),
  bizType: string(name='BizType'),
  failedRedirectUrl?: string(name='FailedRedirectUrl'),
  faceRetainedImageUrl?: string(name='FaceRetainedImageUrl'),
  callbackSeed?: string(name='CallbackSeed'),
  idCardFrontImageUrl?: string(name='IdCardFrontImageUrl'),
  userId?: string(name='UserId'),
  bizId: string(name='BizId'),
  name?: string(name='Name'),
  idCardNumber?: string(name='IdCardNumber'),
  passedRedirectUrl?: string(name='PassedRedirectUrl'),
  callbackUrl?: string(name='CallbackUrl'),
  userIp?: string(name='UserIp'),
  userPhoneNumber?: string(name='UserPhoneNumber'),
  userRegistTime?: long(name='UserRegistTime'),
}

model DescribeVerifyTokenResponse = {
  requestId: string(name='RequestId'),
  verifyPageUrl: string(name='VerifyPageUrl'),
  verifyToken: string(name='VerifyToken'),
  ossUploadToken: {
    bucket: string(name='Bucket'),
    endPoint: string(name='EndPoint'),
    path: string(name='Path'),
    expired: long(name='Expired'),
    secret: string(name='Secret'),
    key: string(name='Key'),
    token: string(name='Token'),
  }(name='OssUploadToken'),
}

async function describeVerifyToken(request: DescribeVerifyTokenRequest, runtime: Util.RuntimeOptions): DescribeVerifyTokenResponse {
  Util.validateModel(request);
  return doRequest('DescribeVerifyToken', 'HTTPS', 'POST', '2019-03-07', 'AK', null, request, runtime);
}

async function describeVerifyTokenSimply(request: DescribeVerifyTokenRequest): DescribeVerifyTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifyToken(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
