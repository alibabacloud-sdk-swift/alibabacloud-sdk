import OSS;
import OpenPlatform;
import RPCUtil;
import RPC;
import OSSUtil;
import Util;
import FileForm;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('ocr', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model GetAsyncJobResultRequest = {
  jobId: string(name='JobId'),
}

model GetAsyncJobResultResponse = {
  requestId: string(name='RequestId'),
  data: {
    errorCode: string(name='ErrorCode'),
    errorMessage: string(name='ErrorMessage'),
    jobId: string(name='JobId'),
    result: string(name='Result'),
    status: string(name='Status'),
  }(name='Data'),
}

async function getAsyncJobResult(request: GetAsyncJobResultRequest, runtime: Util.RuntimeOptions): GetAsyncJobResultResponse {
  Util.validateModel(request);
  return doRequest('GetAsyncJobResult', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model TrimDocumentRequest = {
  fileURL: string(name='FileURL'),
  fileType: string(name='FileType'),
  outputType: string(name='OutputType'),
}

model TrimDocumentResponse = {
  requestId: string(name='RequestId'),
  data: {
    content: string(name='Content'),
  }(name='Data'),
}

async function trimDocument(request: TrimDocumentRequest, runtime: Util.RuntimeOptions): TrimDocumentResponse {
  Util.validateModel(request);
  return doRequest('TrimDocument', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model TrimDocumentAdvanceRequest = {
  fileURLObject: readable(name='FileURLObject'),
  fileType: string(name='FileType'),
  outputType: string(name='OutputType'),
}

async function trimDocumentAdvance(request: TrimDocumentAdvanceRequest, runtime: Util.RuntimeOptions): TrimDocumentResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.fileURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var trimDocumentreq = new TrimDocumentRequest{};
  RPCUtil.convert(request, trimDocumentreq);
  trimDocumentreq.fileURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var trimDocumentResp = trimDocument(trimDocumentreq, runtime);
  return trimDocumentResp;
}

model RecognizeChinapassportRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeChinapassportResponse = {
  requestId: string(name='RequestId'),
  data: {
    authority: string(name='Authority'),
    birthDate: string(name='BirthDate'),
    birthDay: string(name='BirthDay'),
    birthPlace: string(name='BirthPlace'),
    birthPlaceRaw: string(name='BirthPlaceRaw'),
    country: string(name='Country'),
    expiryDate: string(name='ExpiryDate'),
    expiryDay: string(name='ExpiryDay'),
    issueDate: string(name='IssueDate'),
    issuePlace: string(name='IssuePlace'),
    issuePlaceRaw: string(name='IssuePlaceRaw'),
    lineZero: string(name='LineZero'),
    lineOne: string(name='LineOne'),
    name: string(name='Name'),
    nameChinese: string(name='NameChinese'),
    nameChineseRaw: string(name='NameChineseRaw'),
    passportNo: string(name='PassportNo'),
    personId: string(name='PersonId'),
    sex: string(name='Sex'),
    sourceCountry: string(name='SourceCountry'),
    success: boolean(name='Success'),
    type: string(name='Type'),
  }(name='Data'),
}

async function recognizeChinapassport(request: RecognizeChinapassportRequest, runtime: Util.RuntimeOptions): RecognizeChinapassportResponse {
  Util.validateModel(request);
  return doRequest('RecognizeChinapassport', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeChinapassportAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeChinapassportAdvance(request: RecognizeChinapassportAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeChinapassportResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeChinapassportreq = new RecognizeChinapassportRequest{};
  RPCUtil.convert(request, recognizeChinapassportreq);
  recognizeChinapassportreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeChinapassportResp = recognizeChinapassport(recognizeChinapassportreq, runtime);
  return recognizeChinapassportResp;
}

model RecognizeVerificationcodeRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeVerificationcodeResponse = {
  requestId: string(name='RequestId'),
  data: {
    content: string(name='Content'),
  }(name='Data'),
}

async function recognizeVerificationcode(request: RecognizeVerificationcodeRequest, runtime: Util.RuntimeOptions): RecognizeVerificationcodeResponse {
  Util.validateModel(request);
  return doRequest('RecognizeVerificationcode', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeVerificationcodeAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeVerificationcodeAdvance(request: RecognizeVerificationcodeAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVerificationcodeResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeVerificationcodereq = new RecognizeVerificationcodeRequest{};
  RPCUtil.convert(request, recognizeVerificationcodereq);
  recognizeVerificationcodereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeVerificationcodeResp = recognizeVerificationcode(recognizeVerificationcodereq, runtime);
  return recognizeVerificationcodeResp;
}

model RecognizePassportMRZRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizePassportMRZResponse = {
  requestId: string(name='RequestId'),
  data: {
    regions: [
      {
        name: string(name='Name'),
        recognitionScore: float(name='RecognitionScore'),
        content: string(name='Content'),
        detectionScore: float(name='DetectionScore'),
        bandBoxes: [ float ](name='BandBoxes'),
      }
    ](name='Regions'),
  }(name='Data'),
}

async function recognizePassportMRZ(request: RecognizePassportMRZRequest, runtime: Util.RuntimeOptions): RecognizePassportMRZResponse {
  Util.validateModel(request);
  return doRequest('RecognizePassportMRZ', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizePassportMRZAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizePassportMRZAdvance(request: RecognizePassportMRZAdvanceRequest, runtime: Util.RuntimeOptions): RecognizePassportMRZResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizePassportMRZreq = new RecognizePassportMRZRequest{};
  RPCUtil.convert(request, recognizePassportMRZreq);
  recognizePassportMRZreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizePassportMRZResp = recognizePassportMRZ(recognizePassportMRZreq, runtime);
  return recognizePassportMRZResp;
}

model RecognizeTakeoutOrderRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeTakeoutOrderResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        score: float(name='Score'),
        name: string(name='Name'),
        value: string(name='Value'),
        boxes: [ integer ](name='Boxes'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function recognizeTakeoutOrder(request: RecognizeTakeoutOrderRequest, runtime: Util.RuntimeOptions): RecognizeTakeoutOrderResponse {
  Util.validateModel(request);
  return doRequest('RecognizeTakeoutOrder', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeTakeoutOrderAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeTakeoutOrderAdvance(request: RecognizeTakeoutOrderAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeTakeoutOrderResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeTakeoutOrderreq = new RecognizeTakeoutOrderRequest{};
  RPCUtil.convert(request, recognizeTakeoutOrderreq);
  recognizeTakeoutOrderreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeTakeoutOrderResp = recognizeTakeoutOrder(recognizeTakeoutOrderreq, runtime);
  return recognizeTakeoutOrderResp;
}

model RecognizeQrCodeRequest = {
  tasks: [
    {
      imageURL: string(name='ImageURL'),
    }
  ](name='Tasks'),
}

model RecognizeQrCodeResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        taskId: string(name='TaskId'),
        imageURL: string(name='ImageURL'),
        results: [
          {
            label: string(name='Label'),
            suggestion: string(name='Suggestion'),
            rate: float(name='Rate'),
            qrCodesData: [ string ](name='QrCodesData'),
          }
        ](name='Results'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function recognizeQrCode(request: RecognizeQrCodeRequest, runtime: Util.RuntimeOptions): RecognizeQrCodeResponse {
  Util.validateModel(request);
  return doRequest('RecognizeQrCode', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeVATInvoiceRequest = {
  fileURL: string(name='FileURL'),
  fileType: string(name='FileType'),
}

model RecognizeVATInvoiceResponse = {
  requestId: string(name='RequestId'),
  data: {
    content: {
      invoiceCode: string(name='InvoiceCode'),
      invoiceNo: string(name='InvoiceNo'),
      invoiceDate: string(name='InvoiceDate'),
      antiFakeCode: string(name='AntiFakeCode'),
      payerName: string(name='PayerName'),
      payerRegisterNo: string(name='PayerRegisterNo'),
      payerAddress: string(name='PayerAddress'),
      payerBankName: string(name='PayerBankName'),
      withoutTaxAmount: string(name='WithoutTaxAmount'),
      taxAmount: string(name='TaxAmount'),
      sumAmount: string(name='SumAmount'),
      invoiceAmount: string(name='InvoiceAmount'),
      payeeName: string(name='PayeeName'),
      payeeRegisterNo: string(name='PayeeRegisterNo'),
      payeeAddress: string(name='PayeeAddress'),
      payeeBankName: string(name='PayeeBankName'),
      payee: string(name='Payee'),
      checker: string(name='Checker'),
      clerk: string(name='Clerk'),
    }(name='Content'),
    box: {
      invoiceCodes: [ float ](name='InvoiceCodes'),
      invoiceNoes: [ float ](name='InvoiceNoes'),
      invoiceDates: [ float ](name='InvoiceDates'),
      invoiceFakeCodes: [ float ](name='InvoiceFakeCodes'),
      payerNames: [ float ](name='PayerNames'),
      payerRegisterNoes: [ float ](name='PayerRegisterNoes'),
      payerAddresses: [ float ](name='PayerAddresses'),
      payerBankNames: [ float ](name='PayerBankNames'),
      withoutTaxAmounts: [ float ](name='WithoutTaxAmounts'),
      taxAmounts: [ float ](name='TaxAmounts'),
      sumAmounts: [ float ](name='SumAmounts'),
      invoiceAmounts: [ float ](name='InvoiceAmounts'),
      payeeNames: [ float ](name='PayeeNames'),
      payeeRegisterNoes: [ float ](name='PayeeRegisterNoes'),
      payeeAddresses: [ float ](name='PayeeAddresses'),
      payeeBankNames: [ float ](name='PayeeBankNames'),
      payees: [ float ](name='Payees'),
      checkers: [ float ](name='Checkers'),
      clerks: [ float ](name='Clerks'),
    }(name='Box'),
  }(name='Data'),
}

async function recognizeVATInvoice(request: RecognizeVATInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeVATInvoiceResponse {
  Util.validateModel(request);
  return doRequest('RecognizeVATInvoice', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeVATInvoiceAdvanceRequest = {
  fileURLObject: readable(name='FileURLObject'),
  fileType: string(name='FileType'),
}

async function recognizeVATInvoiceAdvance(request: RecognizeVATInvoiceAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVATInvoiceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.fileURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeVATInvoicereq = new RecognizeVATInvoiceRequest{};
  RPCUtil.convert(request, recognizeVATInvoicereq);
  recognizeVATInvoicereq.fileURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeVATInvoiceResp = recognizeVATInvoice(recognizeVATInvoicereq, runtime);
  return recognizeVATInvoiceResp;
}

model RecognizeCharacterRequest = {
  imageURL: string(name='ImageURL'),
  minHeight: integer(name='MinHeight'),
  outputProbability: boolean(name='OutputProbability'),
}

model RecognizeCharacterResponse = {
  requestId: string(name='RequestId'),
  data: {
    results: [
      {
        probability: float(name='Probability'),
        text: string(name='Text'),
        textRectangles: {
          angle: integer(name='Angle'),
          left: integer(name='Left'),
          top: integer(name='Top'),
          width: integer(name='Width'),
          height: integer(name='Height'),
        }(name='TextRectangles'),
      }
    ](name='Results'),
  }(name='Data'),
}

async function recognizeCharacter(request: RecognizeCharacterRequest, runtime: Util.RuntimeOptions): RecognizeCharacterResponse {
  Util.validateModel(request);
  return doRequest('RecognizeCharacter', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeCharacterAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
  minHeight: integer(name='MinHeight'),
  outputProbability: boolean(name='OutputProbability'),
}

async function recognizeCharacterAdvance(request: RecognizeCharacterAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeCharacterResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeCharacterreq = new RecognizeCharacterRequest{};
  RPCUtil.convert(request, recognizeCharacterreq);
  recognizeCharacterreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeCharacterResp = recognizeCharacter(recognizeCharacterreq, runtime);
  return recognizeCharacterResp;
}

model RecognizeTaxiInvoiceRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeTaxiInvoiceResponse = {
  requestId: string(name='RequestId'),
  data: {
    invoices: [
      {
        rotateType: integer(name='RotateType'),
        items: [
          {
            text: string(name='Text'),
            itemRoi: {
              angle: float(name='Angle'),
              center: {
                x: float(name='X'),
                y: float(name='Y'),
              }(name='Center'),
              size: {
                h: float(name='H'),
                w: float(name='W'),
              }(name='Size'),
            }(name='ItemRoi'),
          }
        ](name='Items'),
        invoiceRoi: {
          h: float(name='H'),
          w: float(name='W'),
          x: float(name='X'),
          y: float(name='Y'),
        }(name='InvoiceRoi'),
      }
    ](name='Invoices'),
  }(name='Data'),
}

async function recognizeTaxiInvoice(request: RecognizeTaxiInvoiceRequest, runtime: Util.RuntimeOptions): RecognizeTaxiInvoiceResponse {
  Util.validateModel(request);
  return doRequest('RecognizeTaxiInvoice', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeTaxiInvoiceAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeTaxiInvoiceAdvance(request: RecognizeTaxiInvoiceAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeTaxiInvoiceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeTaxiInvoicereq = new RecognizeTaxiInvoiceRequest{};
  RPCUtil.convert(request, recognizeTaxiInvoicereq);
  recognizeTaxiInvoicereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeTaxiInvoiceResp = recognizeTaxiInvoice(recognizeTaxiInvoicereq, runtime);
  return recognizeTaxiInvoiceResp;
}

model RecognizeIdentityCardRequest = {
  imageURL: string(name='ImageURL'),
  side: string(name='Side'),
}

model RecognizeIdentityCardResponse = {
  requestId: string(name='RequestId'),
  data: {
    frontResult: {
      address: string(name='Address'),
      name: string(name='Name'),
      nationality: string(name='Nationality'),
      IDNumber: string(name='IDNumber'),
      gender: string(name='Gender'),
      birthDate: string(name='BirthDate'),
      cardAreas: [
        {
          x: float(name='X'),
          y: float(name='Y'),
        }
      ](name='CardAreas'),
      faceRectVertices: [
        {
          x: float(name='X'),
          y: float(name='Y'),
        }
      ](name='FaceRectVertices'),
      faceRectangle: {
        angle: float(name='Angle'),
        center: {
          x: float(name='X'),
          y: float(name='Y'),
        }(name='Center'),
        size: {
          height: float(name='Height'),
          width: float(name='Width'),
        }(name='Size'),
      }(name='FaceRectangle'),
    }(name='FrontResult'),
    backResult: {
      startDate: string(name='StartDate'),
      endDate: string(name='EndDate'),
      issue: string(name='Issue'),
    }(name='BackResult'),
  }(name='Data'),
}

async function recognizeIdentityCard(request: RecognizeIdentityCardRequest, runtime: Util.RuntimeOptions): RecognizeIdentityCardResponse {
  Util.validateModel(request);
  return doRequest('RecognizeIdentityCard', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeIdentityCardAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
  side: string(name='Side'),
}

async function recognizeIdentityCardAdvance(request: RecognizeIdentityCardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeIdentityCardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeIdentityCardreq = new RecognizeIdentityCardRequest{};
  RPCUtil.convert(request, recognizeIdentityCardreq);
  recognizeIdentityCardreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeIdentityCardResp = recognizeIdentityCard(recognizeIdentityCardreq, runtime);
  return recognizeIdentityCardResp;
}

model RecognizeLicensePlateRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeLicensePlateResponse = {
  requestId: string(name='RequestId'),
  data: {
    plates: [
      {
        confidence: float(name='Confidence'),
        plateNumber: string(name='PlateNumber'),
        plateType: string(name='PlateType'),
        plateTypeConfidence: float(name='PlateTypeConfidence'),
        roi: {
          h: integer(name='H'),
          w: integer(name='W'),
          x: integer(name='X'),
          y: integer(name='Y'),
        }(name='Roi'),
      }
    ](name='Plates'),
  }(name='Data'),
}

async function recognizeLicensePlate(request: RecognizeLicensePlateRequest, runtime: Util.RuntimeOptions): RecognizeLicensePlateResponse {
  Util.validateModel(request);
  return doRequest('RecognizeLicensePlate', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeLicensePlateAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeLicensePlateAdvance(request: RecognizeLicensePlateAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeLicensePlateResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeLicensePlatereq = new RecognizeLicensePlateRequest{};
  RPCUtil.convert(request, recognizeLicensePlatereq);
  recognizeLicensePlatereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeLicensePlateResp = recognizeLicensePlate(recognizeLicensePlatereq, runtime);
  return recognizeLicensePlateResp;
}

model RecognizeTableRequest = {
  imageURL: string(name='ImageURL'),
  outputFormat: string(name='OutputFormat'),
  useFinanceModel: boolean(name='UseFinanceModel'),
  assureDirection: boolean(name='AssureDirection'),
  hasLine: boolean(name='HasLine'),
  skipDetection: boolean(name='SkipDetection'),
}

model RecognizeTableResponse = {
  requestId: string(name='RequestId'),
  data: {
    fileContent: string(name='FileContent'),
    tables: [
      {
        tableRows: [
          {
            tableColumns: [
              {
                startColumn: integer(name='StartColumn'),
                startRow: integer(name='StartRow'),
                endColumn: integer(name='EndColumn'),
                endRow: integer(name='EndRow'),
                height: integer(name='Height'),
                width: integer(name='Width'),
                texts: [ string ](name='Texts'),
              }
            ](name='TableColumns'),
          }
        ](name='TableRows'),
        head: [ string ](name='Head'),
        tail: [ string ](name='Tail'),
      }
    ](name='Tables'),
  }(name='Data'),
}

async function recognizeTable(request: RecognizeTableRequest, runtime: Util.RuntimeOptions): RecognizeTableResponse {
  Util.validateModel(request);
  return doRequest('RecognizeTable', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeTableAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
  outputFormat: string(name='OutputFormat'),
  useFinanceModel: boolean(name='UseFinanceModel'),
  assureDirection: boolean(name='AssureDirection'),
  hasLine: boolean(name='HasLine'),
  skipDetection: boolean(name='SkipDetection'),
}

async function recognizeTableAdvance(request: RecognizeTableAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeTableResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeTablereq = new RecognizeTableRequest{};
  RPCUtil.convert(request, recognizeTablereq);
  recognizeTablereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeTableResp = recognizeTable(recognizeTablereq, runtime);
  return recognizeTableResp;
}

model RecognizeDrivingLicenseRequest = {
  imageURL: string(name='ImageURL'),
  side: string(name='Side'),
}

model RecognizeDrivingLicenseResponse = {
  requestId: string(name='RequestId'),
  data: {
    faceResult: {
      plateNumber: string(name='PlateNumber'),
      vehicleType: string(name='VehicleType'),
      owner: string(name='Owner'),
      useCharacter: string(name='UseCharacter'),
      address: string(name='Address'),
      model: string(name='Model'),
      vin: string(name='Vin'),
      engineNumber: string(name='EngineNumber'),
      registerDate: string(name='RegisterDate'),
      issueDate: string(name='IssueDate'),
    }(name='FaceResult'),
    backResult: {
      approvedPassengerCapacity: string(name='ApprovedPassengerCapacity'),
      approvedLoad: string(name='ApprovedLoad'),
      fileNumber: string(name='FileNumber'),
      grossMass: string(name='GrossMass'),
      energyType: string(name='EnergyType'),
      inspectionRecord: string(name='InspectionRecord'),
      overallDimension: string(name='OverallDimension'),
      tractionMass: string(name='TractionMass'),
      unladenMass: string(name='UnladenMass'),
      plateNumber: string(name='PlateNumber'),
    }(name='BackResult'),
  }(name='Data'),
}

async function recognizeDrivingLicense(request: RecognizeDrivingLicenseRequest, runtime: Util.RuntimeOptions): RecognizeDrivingLicenseResponse {
  Util.validateModel(request);
  return doRequest('RecognizeDrivingLicense', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeDrivingLicenseAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
  side: string(name='Side'),
}

async function recognizeDrivingLicenseAdvance(request: RecognizeDrivingLicenseAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeDrivingLicenseResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeDrivingLicensereq = new RecognizeDrivingLicenseRequest{};
  RPCUtil.convert(request, recognizeDrivingLicensereq);
  recognizeDrivingLicensereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeDrivingLicenseResp = recognizeDrivingLicense(recognizeDrivingLicensereq, runtime);
  return recognizeDrivingLicenseResp;
}

model RecognizeBankCardRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeBankCardResponse = {
  requestId: string(name='RequestId'),
  data: {
    bankName: string(name='BankName'),
    cardNumber: string(name='CardNumber'),
    validDate: string(name='ValidDate'),
  }(name='Data'),
}

async function recognizeBankCard(request: RecognizeBankCardRequest, runtime: Util.RuntimeOptions): RecognizeBankCardResponse {
  Util.validateModel(request);
  return doRequest('RecognizeBankCard', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeBankCardAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeBankCardAdvance(request: RecognizeBankCardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeBankCardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeBankCardreq = new RecognizeBankCardRequest{};
  RPCUtil.convert(request, recognizeBankCardreq);
  recognizeBankCardreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeBankCardResp = recognizeBankCard(recognizeBankCardreq, runtime);
  return recognizeBankCardResp;
}

model RecognizeTrainTicketRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeTrainTicketResponse = {
  requestId: string(name='RequestId'),
  data: {
    date: string(name='Date'),
    destination: string(name='Destination'),
    level: string(name='Level'),
    number: string(name='Number'),
    name: string(name='Name'),
    departureStation: string(name='DepartureStation'),
    seat: string(name='Seat'),
    price: float(name='Price'),
  }(name='Data'),
}

async function recognizeTrainTicket(request: RecognizeTrainTicketRequest, runtime: Util.RuntimeOptions): RecognizeTrainTicketResponse {
  Util.validateModel(request);
  return doRequest('RecognizeTrainTicket', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeTrainTicketAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeTrainTicketAdvance(request: RecognizeTrainTicketAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeTrainTicketResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeTrainTicketreq = new RecognizeTrainTicketRequest{};
  RPCUtil.convert(request, recognizeTrainTicketreq);
  recognizeTrainTicketreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeTrainTicketResp = recognizeTrainTicket(recognizeTrainTicketreq, runtime);
  return recognizeTrainTicketResp;
}

model RecognizeDriverLicenseRequest = {
  imageURL: string(name='ImageURL'),
  side: string(name='Side'),
}

model RecognizeDriverLicenseResponse = {
  requestId: string(name='RequestId'),
  data: {
    faceResult: {
      name: string(name='Name'),
      licenseNumber: string(name='LicenseNumber'),
      vehicleType: string(name='VehicleType'),
      startDate: string(name='StartDate'),
      endDate: string(name='EndDate'),
      issueDate: string(name='IssueDate'),
      address: string(name='Address'),
      gender: string(name='Gender'),
    }(name='FaceResult'),
    backResult: {
      archiveNumber: string(name='ArchiveNumber'),
    }(name='BackResult'),
  }(name='Data'),
}

async function recognizeDriverLicense(request: RecognizeDriverLicenseRequest, runtime: Util.RuntimeOptions): RecognizeDriverLicenseResponse {
  Util.validateModel(request);
  return doRequest('RecognizeDriverLicense', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeDriverLicenseAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
  side: string(name='Side'),
}

async function recognizeDriverLicenseAdvance(request: RecognizeDriverLicenseAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeDriverLicenseResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeDriverLicensereq = new RecognizeDriverLicenseRequest{};
  RPCUtil.convert(request, recognizeDriverLicensereq);
  recognizeDriverLicensereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeDriverLicenseResp = recognizeDriverLicense(recognizeDriverLicensereq, runtime);
  return recognizeDriverLicenseResp;
}

model RecognizeAccountPageRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeAccountPageResponse = {
  requestId: string(name='RequestId'),
  data: {
    angle: float(name='Angle'),
    name: string(name='Name'),
    gender: string(name='Gender'),
    relation: string(name='Relation'),
    birthPlace: string(name='BirthPlace'),
    nationality: string(name='Nationality'),
    nativePlace: string(name='NativePlace'),
    birthDate: string(name='BirthDate'),
    IDNumber: string(name='IDNumber'),
    invalidStampAreas: [
      {
        left: integer(name='Left'),
        top: integer(name='Top'),
        height: integer(name='Height'),
        width: integer(name='Width'),
      }
    ](name='InvalidStampAreas'),
    undertakeStampAreas: [
      {
        left: integer(name='Left'),
        top: integer(name='Top'),
        height: integer(name='Height'),
        width: integer(name='Width'),
      }
    ](name='UndertakeStampAreas'),
    registerStampAreas: [
      {
        left: integer(name='Left'),
        top: integer(name='Top'),
        height: integer(name='Height'),
        width: integer(name='Width'),
      }
    ](name='RegisterStampAreas'),
    otherStampAreas: [
      {
        left: integer(name='Left'),
        top: integer(name='Top'),
        height: integer(name='Height'),
        width: integer(name='Width'),
      }
    ](name='OtherStampAreas'),
    titleArea: {
      left: integer(name='Left'),
      top: integer(name='Top'),
      height: integer(name='Height'),
      width: integer(name='Width'),
    }(name='TitleArea'),
  }(name='Data'),
}

async function recognizeAccountPage(request: RecognizeAccountPageRequest, runtime: Util.RuntimeOptions): RecognizeAccountPageResponse {
  Util.validateModel(request);
  return doRequest('RecognizeAccountPage', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeAccountPageAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeAccountPageAdvance(request: RecognizeAccountPageAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeAccountPageResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeAccountPagereq = new RecognizeAccountPageRequest{};
  RPCUtil.convert(request, recognizeAccountPagereq);
  recognizeAccountPagereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeAccountPageResp = recognizeAccountPage(recognizeAccountPagereq, runtime);
  return recognizeAccountPageResp;
}

model RecognizeStampRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeStampResponse = {
  requestId: string(name='RequestId'),
  data: {
    results: [
      {
        generalText: [
          {
            content: string(name='Content'),
            confidence: float(name='Confidence'),
          }
        ](name='GeneralText'),
        roi: {
          left: integer(name='Left'),
          top: integer(name='Top'),
          width: integer(name='Width'),
          height: integer(name='Height'),
        }(name='Roi'),
        text: {
          content: string(name='Content'),
          confidence: float(name='Confidence'),
        }(name='Text'),
      }
    ](name='Results'),
  }(name='Data'),
}

async function recognizeStamp(request: RecognizeStampRequest, runtime: Util.RuntimeOptions): RecognizeStampResponse {
  Util.validateModel(request);
  return doRequest('RecognizeStamp', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeStampAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeStampAdvance(request: RecognizeStampAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeStampResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeStampreq = new RecognizeStampRequest{};
  RPCUtil.convert(request, recognizeStampreq);
  recognizeStampreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeStampResp = recognizeStamp(recognizeStampreq, runtime);
  return recognizeStampResp;
}

model RecognizeBusinessCardRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeBusinessCardResponse = {
  requestId: string(name='RequestId'),
  data: {
    name: string(name='Name'),
    companies: [ string ](name='Companies'),
    departments: [ string ](name='Departments'),
    titles: [ string ](name='Titles'),
    cellPhoneNumbers: [ string ](name='CellPhoneNumbers'),
    officePhoneNumbers: [ string ](name='OfficePhoneNumbers'),
    addresses: [ string ](name='Addresses'),
    emails: [ string ](name='Emails'),
  }(name='Data'),
}

async function recognizeBusinessCard(request: RecognizeBusinessCardRequest, runtime: Util.RuntimeOptions): RecognizeBusinessCardResponse {
  Util.validateModel(request);
  return doRequest('RecognizeBusinessCard', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeBusinessCardAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeBusinessCardAdvance(request: RecognizeBusinessCardAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeBusinessCardResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeBusinessCardreq = new RecognizeBusinessCardRequest{};
  RPCUtil.convert(request, recognizeBusinessCardreq);
  recognizeBusinessCardreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeBusinessCardResp = recognizeBusinessCard(recognizeBusinessCardreq, runtime);
  return recognizeBusinessCardResp;
}

model RecognizeVINCodeRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeVINCodeResponse = {
  requestId: string(name='RequestId'),
  data: {
    vinCode: string(name='VinCode'),
  }(name='Data'),
}

async function recognizeVINCode(request: RecognizeVINCodeRequest, runtime: Util.RuntimeOptions): RecognizeVINCodeResponse {
  Util.validateModel(request);
  return doRequest('RecognizeVINCode', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeVINCodeAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeVINCodeAdvance(request: RecognizeVINCodeAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVINCodeResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeVINCodereq = new RecognizeVINCodeRequest{};
  RPCUtil.convert(request, recognizeVINCodereq);
  recognizeVINCodereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeVINCodeResp = recognizeVINCode(recognizeVINCodereq, runtime);
  return recognizeVINCodeResp;
}

model RecognizeBusinessLicenseRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeBusinessLicenseResponse = {
  requestId: string(name='RequestId'),
  data: {
    angle: string(name='Angle'),
    registerNumber: string(name='RegisterNumber'),
    name: string(name='Name'),
    type: string(name='Type'),
    legalPerson: string(name='LegalPerson'),
    establishDate: string(name='EstablishDate'),
    validPeriod: string(name='ValidPeriod'),
    address: string(name='Address'),
    capital: string(name='Capital'),
    business: string(name='Business'),
    emblem: {
      top: integer(name='Top'),
      left: integer(name='Left'),
      height: integer(name='Height'),
      width: integer(name='Width'),
    }(name='Emblem'),
    title: {
      top: integer(name='Top'),
      left: integer(name='Left'),
      height: integer(name='Height'),
      width: integer(name='Width'),
    }(name='Title'),
    stamp: {
      top: integer(name='Top'),
      left: integer(name='Left'),
      height: integer(name='Height'),
      width: integer(name='Width'),
    }(name='Stamp'),
    QRCode: {
      top: integer(name='Top'),
      left: integer(name='Left'),
      height: integer(name='Height'),
      width: integer(name='Width'),
    }(name='QRCode'),
  }(name='Data'),
}

async function recognizeBusinessLicense(request: RecognizeBusinessLicenseRequest, runtime: Util.RuntimeOptions): RecognizeBusinessLicenseResponse {
  Util.validateModel(request);
  return doRequest('RecognizeBusinessLicense', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeBusinessLicenseAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeBusinessLicenseAdvance(request: RecognizeBusinessLicenseAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeBusinessLicenseResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ocr',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeBusinessLicensereq = new RecognizeBusinessLicenseRequest{};
  RPCUtil.convert(request, recognizeBusinessLicensereq);
  recognizeBusinessLicensereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeBusinessLicenseResp = recognizeBusinessLicense(recognizeBusinessLicensereq, runtime);
  return recognizeBusinessLicenseResp;
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
