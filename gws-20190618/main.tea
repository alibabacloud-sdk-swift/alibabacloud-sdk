import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-southeast-3 = 'gws.ap-northeast-3.aliyuncs.com',
    cn-hangzhou-finance = 'ecd.cn-hangzhou-finance.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('gws', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model SetClusterDnatRequest = {
  clusterId: string(name='ClusterId'),
  natId: string(name='NatId'),
  natEip?: string(name='NatEip'),
}

model SetClusterDnatResponse = {
  requestId: string(name='RequestId'),
}

async function setClusterDnatWithOptions(request: SetClusterDnatRequest, runtime: Util.RuntimeOptions): SetClusterDnatResponse {
  Util.validateModel(request);
  return doRequest('SetClusterDnat', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function setClusterDnat(request: SetClusterDnatRequest): SetClusterDnatResponse {
  var runtime = new Util.RuntimeOptions{};
  return setClusterDnatWithOptions(request, runtime);
}

model CreateServiceLinkedRoleRequest = {
}

model CreateServiceLinkedRoleResponse = {
  requestId: string(name='RequestId'),
  alreadyExists: boolean(name='AlreadyExists'),
}

async function createServiceLinkedRoleWithOptions(request: CreateServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CreateServiceLinkedRoleResponse {
  Util.validateModel(request);
  return doRequest('CreateServiceLinkedRole', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleWithOptions(request, runtime);
}

model DescribeClusterConnectionsRequest = {
  clusterId: string(name='ClusterId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  taskId?: string(name='TaskId'),
}

model DescribeClusterConnectionsResponse = {
  requestId: string(name='RequestId'),
  taskFinished: boolean(name='TaskFinished'),
  taskId: string(name='TaskId'),
  totalCount: long(name='TotalCount'),
  connections: [
    {
      instanceId: string(name='InstanceId'),
      instanceName: string(name='InstanceName'),
      hostName: string(name='HostName'),
      clientName: string(name='ClientName'),
      logonTime: string(name='LogonTime'),
      logoffTime: string(name='LogoffTime'),
      logoffStatus: string(name='LogoffStatus'),
    }
  ](name='Connections'),
}

async function describeClusterConnectionsWithOptions(request: DescribeClusterConnectionsRequest, runtime: Util.RuntimeOptions): DescribeClusterConnectionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeClusterConnections', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function describeClusterConnections(request: DescribeClusterConnectionsRequest): DescribeClusterConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterConnectionsWithOptions(request, runtime);
}

model DescribeClusterADDomainRequest = {
  clusterId: string(name='ClusterId'),
  taskId?: string(name='TaskId'),
}

model DescribeClusterADDomainResponse = {
  requestId: string(name='RequestId'),
  isSupported: boolean(name='IsSupported'),
  taskFinished: boolean(name='TaskFinished'),
  taskId: string(name='TaskId'),
  domainName: string(name='DomainName'),
  domainDnsIp: string(name='DomainDnsIp'),
}

async function describeClusterADDomainWithOptions(request: DescribeClusterADDomainRequest, runtime: Util.RuntimeOptions): DescribeClusterADDomainResponse {
  Util.validateModel(request);
  return doRequest('DescribeClusterADDomain', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function describeClusterADDomain(request: DescribeClusterADDomainRequest): DescribeClusterADDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterADDomainWithOptions(request, runtime);
}

model SetClusterADDomainRequest = {
  clusterId: string(name='ClusterId'),
  domainDnsIp: string(name='DomainDnsIp'),
  domainName: string(name='DomainName'),
  domainPassword: string(name='DomainPassword'),
  domainAdmin?: string(name='DomainAdmin'),
  domainDelete?: boolean(name='DomainDelete'),
}

model SetClusterADDomainResponse = {
  requestId: string(name='RequestId'),
  taskId: string(name='TaskId'),
}

async function setClusterADDomainWithOptions(request: SetClusterADDomainRequest, runtime: Util.RuntimeOptions): SetClusterADDomainResponse {
  Util.validateModel(request);
  return doRequest('SetClusterADDomain', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function setClusterADDomain(request: SetClusterADDomainRequest): SetClusterADDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return setClusterADDomainWithOptions(request, runtime);
}

model DescribeInstancePolicyRequest = {
  instanceId: string(name='InstanceId'),
  taskId?: string(name='TaskId'),
  asyncMode?: boolean(name='AsyncMode'),
}

model DescribeInstancePolicyResponse = {
  requestId: string(name='RequestId'),
  visualLossless: string(name='VisualLossless'),
  optimizeFor3d: string(name='OptimizeFor3d'),
  taskId: string(name='TaskId'),
  taskFinished: boolean(name='TaskFinished'),
}

async function describeInstancePolicyWithOptions(request: DescribeInstancePolicyRequest, runtime: Util.RuntimeOptions): DescribeInstancePolicyResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstancePolicy', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function describeInstancePolicy(request: DescribeInstancePolicyRequest): DescribeInstancePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancePolicyWithOptions(request, runtime);
}

model SetInstancePolicyRequest = {
  instanceId: string(name='InstanceId'),
  visualLossless?: string(name='VisualLossless'),
  optimizeFor3d?: string(name='OptimizeFor3d'),
  asyncMode?: boolean(name='AsyncMode'),
}

model SetInstancePolicyResponse = {
  requestId: string(name='RequestId'),
  taskId: string(name='TaskId'),
}

async function setInstancePolicyWithOptions(request: SetInstancePolicyRequest, runtime: Util.RuntimeOptions): SetInstancePolicyResponse {
  Util.validateModel(request);
  return doRequest('SetInstancePolicy', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function setInstancePolicy(request: SetInstancePolicyRequest): SetInstancePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setInstancePolicyWithOptions(request, runtime);
}

model DescribeAvailableResourceRequest = {
}

model DescribeAvailableResourceResponse = {
  requestId: string(name='RequestId'),
  availableResources: [
    {
      clusterType: string(name='ClusterType'),
      zone: string(name='Zone'),
    }
  ](name='AvailableResources'),
}

async function describeAvailableResourceWithOptions(request: DescribeAvailableResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourceResponse {
  Util.validateModel(request);
  return doRequest('DescribeAvailableResource', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceWithOptions(request, runtime);
}

model SetClusterPolicyRequest = {
  clusterId: string(name='ClusterId'),
  usbRedirect: string(name='UsbRedirect'),
  watermark: string(name='Watermark'),
  localDrive: string(name='LocalDrive'),
  clipboard: string(name='Clipboard'),
  udpPort?: string(name='UdpPort'),
  domainList?: string(name='DomainList'),
  asyncMode?: boolean(name='AsyncMode'),
}

model SetClusterPolicyResponse = {
  requestId: string(name='RequestId'),
  taskId: string(name='TaskId'),
}

async function setClusterPolicyWithOptions(request: SetClusterPolicyRequest, runtime: Util.RuntimeOptions): SetClusterPolicyResponse {
  Util.validateModel(request);
  return doRequest('SetClusterPolicy', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function setClusterPolicy(request: SetClusterPolicyRequest): SetClusterPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setClusterPolicyWithOptions(request, runtime);
}

model DescribeClusterPolicyRequest = {
  taskId?: string(name='TaskId'),
  asyncMode?: boolean(name='AsyncMode'),
  clusterId: string(name='ClusterId'),
}

model DescribeClusterPolicyResponse = {
  requestId: string(name='RequestId'),
  usbRedirect: string(name='UsbRedirect'),
  watermark: string(name='Watermark'),
  localDrive: string(name='LocalDrive'),
  clipboard: string(name='Clipboard'),
  udpPort: string(name='UdpPort'),
  domainList: string(name='DomainList'),
  taskId: string(name='TaskId'),
  taskFinished: boolean(name='TaskFinished'),
}

async function describeClusterPolicyWithOptions(request: DescribeClusterPolicyRequest, runtime: Util.RuntimeOptions): DescribeClusterPolicyResponse {
  Util.validateModel(request);
  return doRequest('DescribeClusterPolicy', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function describeClusterPolicy(request: DescribeClusterPolicyRequest): DescribeClusterPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterPolicyWithOptions(request, runtime);
}

model SetInstanceNameRequest = {
  instanceId: string(name='InstanceId'),
  name: string(name='Name'),
}

model SetInstanceNameResponse = {
  requestId: string(name='RequestId'),
}

async function setInstanceNameWithOptions(request: SetInstanceNameRequest, runtime: Util.RuntimeOptions): SetInstanceNameResponse {
  Util.validateModel(request);
  return doRequest('SetInstanceName', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function setInstanceName(request: SetInstanceNameRequest): SetInstanceNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return setInstanceNameWithOptions(request, runtime);
}

model SetImageNameRequest = {
  imageId: string(name='ImageId'),
  name: string(name='Name'),
}

model SetImageNameResponse = {
  requestId: string(name='RequestId'),
}

async function setImageNameWithOptions(request: SetImageNameRequest, runtime: Util.RuntimeOptions): SetImageNameResponse {
  Util.validateModel(request);
  return doRequest('SetImageName', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function setImageName(request: SetImageNameRequest): SetImageNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return setImageNameWithOptions(request, runtime);
}

model SetClusterNameRequest = {
  clusterId: string(name='ClusterId'),
  name: string(name='Name'),
}

model SetClusterNameResponse = {
  requestId: string(name='RequestId'),
}

async function setClusterNameWithOptions(request: SetClusterNameRequest, runtime: Util.RuntimeOptions): SetClusterNameResponse {
  Util.validateModel(request);
  return doRequest('SetClusterName', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function setClusterName(request: SetClusterNameRequest): SetClusterNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return setClusterNameWithOptions(request, runtime);
}

model StopInstanceRequest = {
  instanceId: string(name='InstanceId'),
}

model StopInstanceResponse = {
  requestId: string(name='RequestId'),
}

async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  return doRequest('StopInstance', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

model StartInstanceRequest = {
  instanceId: string(name='InstanceId'),
}

model StartInstanceResponse = {
  requestId: string(name='RequestId'),
}

async function startInstanceWithOptions(request: StartInstanceRequest, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(request);
  return doRequest('StartInstance', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model SetInstanceUserRequest = {
  instanceId: string(name='InstanceId'),
  userUid: long(name='UserUid'),
  userName: string(name='UserName'),
}

model SetInstanceUserResponse = {
  requestId: string(name='RequestId'),
}

async function setInstanceUserWithOptions(request: SetInstanceUserRequest, runtime: Util.RuntimeOptions): SetInstanceUserResponse {
  Util.validateModel(request);
  return doRequest('SetInstanceUser', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function setInstanceUser(request: SetInstanceUserRequest): SetInstanceUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return setInstanceUserWithOptions(request, runtime);
}

model RestartInstanceRequest = {
  instanceId: string(name='InstanceId'),
}

model RestartInstanceResponse = {
  requestId: string(name='RequestId'),
}

async function restartInstanceWithOptions(request: RestartInstanceRequest, runtime: Util.RuntimeOptions): RestartInstanceResponse {
  Util.validateModel(request);
  return doRequest('RestartInstance', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartInstanceWithOptions(request, runtime);
}

model IsUserAdminRequest = {
}

model IsUserAdminResponse = {
  requestId: string(name='RequestId'),
  isAdmin: boolean(name='IsAdmin'),
  isAllow: boolean(name='IsAllow'),
}

async function isUserAdminWithOptions(request: IsUserAdminRequest, runtime: Util.RuntimeOptions): IsUserAdminResponse {
  Util.validateModel(request);
  return doRequest('IsUserAdmin', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function isUserAdmin(request: IsUserAdminRequest): IsUserAdminResponse {
  var runtime = new Util.RuntimeOptions{};
  return isUserAdminWithOptions(request, runtime);
}

model GetConnectTicketRequest = {
  instanceId: string(name='InstanceId'),
  appName?: string(name='AppName'),
  userName?: string(name='UserName'),
  password?: string(name='Password'),
  taskId?: string(name='TaskId'),
  asyncMode?: boolean(name='AsyncMode'),
}

model GetConnectTicketResponse = {
  requestId: string(name='RequestId'),
  ticket: string(name='Ticket'),
  taskId: string(name='TaskId'),
  taskFinished: boolean(name='TaskFinished'),
}

async function getConnectTicketWithOptions(request: GetConnectTicketRequest, runtime: Util.RuntimeOptions): GetConnectTicketResponse {
  Util.validateModel(request);
  return doRequest('GetConnectTicket', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function getConnectTicket(request: GetConnectTicketRequest): GetConnectTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConnectTicketWithOptions(request, runtime);
}

model DescribeInstancesRequest = {
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  clusterId?: string(name='ClusterId'),
  instanceId?: string(name='InstanceId'),
  userUid?: long(name='UserUid'),
  userName?: string(name='UserName'),
}

model DescribeInstancesResponse = {
  requestId: string(name='RequestId'),
  totalCount: long(name='TotalCount'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  instances: [
    {
      instanceId: string(name='InstanceId'),
      name: string(name='Name'),
      clusterId: string(name='ClusterId'),
      status: string(name='Status'),
      workMode: string(name='WorkMode'),
      stoppedMode: string(name='StoppedMode'),
      imageId: string(name='ImageId'),
      instanceChargeType: string(name='InstanceChargeType'),
      instanceType: string(name='InstanceType'),
      createTime: string(name='CreateTime'),
      expireTime: string(name='ExpireTime'),
      userUid: long(name='UserUid'),
      userName: string(name='UserName'),
      domainName: string(name='DomainName'),
      maxBandwidthIn: long(name='MaxBandwidthIn'),
      maxBandwidthOut: long(name='MaxBandwidthOut'),
      isBoundUser: boolean(name='IsBoundUser'),
      appList: [
        {
          appName: string(name='AppName'),
          appPath: string(name='AppPath'),
          appArgs: string(name='AppArgs'),
        }
      ](name='AppList'),
    }
  ](name='Instances'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstances', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeImagesRequest = {
  instanceType?: string(name='InstanceType'),
}

model DescribeImagesResponse = {
  requestId: string(name='RequestId'),
  totalCount: long(name='TotalCount'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  images: [
    {
      imageId: string(name='ImageId'),
      name: string(name='Name'),
      size: long(name='Size'),
      status: string(name='Status'),
      createTime: string(name='CreateTime'),
      progress: string(name='Progress'),
      imageType: string(name='ImageType'),
      productCode: string(name='ProductCode'),
    }
  ](name='Images'),
}

async function describeImagesWithOptions(request: DescribeImagesRequest, runtime: Util.RuntimeOptions): DescribeImagesResponse {
  Util.validateModel(request);
  return doRequest('DescribeImages', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagesWithOptions(request, runtime);
}

model DescribeClustersRequest = {
  clusterId?: string(name='ClusterId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model DescribeClustersResponse = {
  requestId: string(name='RequestId'),
  totalCount: long(name='TotalCount'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  clusters: [
    {
      clusterId: string(name='ClusterId'),
      name: string(name='Name'),
      status: string(name='Status'),
      vpcId: string(name='VpcId'),
      createTime: string(name='CreateTime'),
      securityGroup: string(name='SecurityGroup'),
      domainName: string(name='DomainName'),
      natId: string(name='NatId'),
      natEip: string(name='NatEip'),
      instanceCount: long(name='InstanceCount'),
    }
  ](name='Clusters'),
}

async function describeClustersWithOptions(request: DescribeClustersRequest, runtime: Util.RuntimeOptions): DescribeClustersResponse {
  Util.validateModel(request);
  return doRequest('DescribeClusters', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClustersWithOptions(request, runtime);
}

model DeleteInstanceRequest = {
  instanceId: string(name='InstanceId'),
}

model DeleteInstanceResponse = {
  requestId: string(name='RequestId'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  return doRequest('DeleteInstance', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DeleteImageRequest = {
  imageId: string(name='ImageId'),
}

model DeleteImageResponse = {
  requestId: string(name='RequestId'),
}

async function deleteImageWithOptions(request: DeleteImageRequest, runtime: Util.RuntimeOptions): DeleteImageResponse {
  Util.validateModel(request);
  return doRequest('DeleteImage', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function deleteImage(request: DeleteImageRequest): DeleteImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImageWithOptions(request, runtime);
}

model DeleteClusterRequest = {
  clusterId: string(name='ClusterId'),
}

model DeleteClusterResponse = {
  requestId: string(name='RequestId'),
}

async function deleteClusterWithOptions(request: DeleteClusterRequest, runtime: Util.RuntimeOptions): DeleteClusterResponse {
  Util.validateModel(request);
  return doRequest('DeleteCluster', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClusterWithOptions(request, runtime);
}

model CreateInstanceRequest = {
  clusterId: string(name='ClusterId'),
  vSwitchId?: string(name='VSwitchId'),
  name?: string(name='Name'),
  imageId: string(name='ImageId'),
  systemDiskSize: integer(name='SystemDiskSize'),
  systemDiskCategory: string(name='SystemDiskCategory'),
  allocatePublicAddress?: string(name='AllocatePublicAddress'),
  internetChargeType?: string(name='InternetChargeType'),
  internetMaxBandwidthIn?: integer(name='InternetMaxBandwidthIn'),
  internetMaxBandwidthOut?: integer(name='InternetMaxBandwidthOut'),
  instanceType: string(name='InstanceType'),
  instanceChargeType?: string(name='InstanceChargeType'),
  autoRenew?: string(name='AutoRenew'),
  period?: integer(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  workMode: string(name='WorkMode'),
  appList?: [
    {
      appName?: string(name='AppName'),
      appPath?: string(name='AppPath'),
      appArgs?: string(name='AppArgs'),
    }
  ](name='AppList'),
}

model CreateInstanceResponse = {
  requestId: string(name='RequestId'),
  instanceId: string(name='InstanceId'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateInstance', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateImageRequest = {
  instanceId: string(name='InstanceId'),
  name?: string(name='Name'),
}

model CreateImageResponse = {
  requestId: string(name='RequestId'),
  imageId: string(name='ImageId'),
}

async function createImageWithOptions(request: CreateImageRequest, runtime: Util.RuntimeOptions): CreateImageResponse {
  Util.validateModel(request);
  return doRequest('CreateImage', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function createImage(request: CreateImageRequest): CreateImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageWithOptions(request, runtime);
}

model CreateClusterRequest = {
  vpcId: string(name='VpcId'),
  clusterType: string(name='ClusterType'),
  vSwitchId?: string(name='VSwitchId'),
}

model CreateClusterResponse = {
  requestId: string(name='RequestId'),
  clusterId: string(name='ClusterId'),
}

async function createClusterWithOptions(request: CreateClusterRequest, runtime: Util.RuntimeOptions): CreateClusterResponse {
  Util.validateModel(request);
  return doRequest('CreateCluster', 'HTTPS', 'POST', '2019-06-18', 'AK', null, request, runtime);
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClusterWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
