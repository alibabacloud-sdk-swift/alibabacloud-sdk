import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing = 'gpdb.aliyuncs.com',
    cn-hangzhou = 'gpdb.aliyuncs.com',
    cn-shanghai = 'gpdb.aliyuncs.com',
    cn-shenzhen = 'gpdb.aliyuncs.com',
    cn-hongkong = 'gpdb.aliyuncs.com',
    ap-southeast-1 = 'gpdb.aliyuncs.com',
    us-west-1 = 'gpdb.aliyuncs.com',
    us-east-1 = 'gpdb.aliyuncs.com',
    cn-hangzhou-finance = 'gpdb.aliyuncs.com',
    cn-shanghai-finance-1 = 'gpdb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'gpdb.aliyuncs.com',
    cn-qingdao = 'gpdb.aliyuncs.com',
    cn-north-2-gov-1 = 'gpdb.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('gpdb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DescribeUserEncryptionKeyListRequest = {
  regionId: string(name='RegionId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
}

model DescribeUserEncryptionKeyListResponse = {
  requestId: string(name='RequestId'),
  kmsKeys: [
    {
      keyId: string(name='KeyId'),
    }
  ](name='KmsKeys'),
}

async function describeUserEncryptionKeyListWithOptions(request: DescribeUserEncryptionKeyListRequest, runtime: Util.RuntimeOptions): DescribeUserEncryptionKeyListResponse {
  Util.validateModel(request);
  return doRequest('DescribeUserEncryptionKeyList', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeUserEncryptionKeyList(request: DescribeUserEncryptionKeyListRequest): DescribeUserEncryptionKeyListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserEncryptionKeyListWithOptions(request, runtime);
}

model DescribeModifyParameterLogRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeModifyParameterLogResponse = {
  requestId: string(name='RequestId'),
  changelogs: [
    {
      parameterName: string(name='ParameterName'),
      parameterValueBefore: string(name='ParameterValueBefore'),
      parameterValueAfter: string(name='ParameterValueAfter'),
      parameterValid: string(name='ParameterValid'),
      effectTime: string(name='EffectTime'),
    }
  ](name='Changelogs'),
}

async function describeModifyParameterLogWithOptions(request: DescribeModifyParameterLogRequest, runtime: Util.RuntimeOptions): DescribeModifyParameterLogResponse {
  Util.validateModel(request);
  return doRequest('DescribeModifyParameterLog', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeModifyParameterLog(request: DescribeModifyParameterLogRequest): DescribeModifyParameterLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModifyParameterLogWithOptions(request, runtime);
}

model DescribeParametersRequest = {
  DBInstanceId: string(name='DBInstanceId'),
}

model DescribeParametersResponse = {
  requestId: string(name='RequestId'),
  parameters: [
    {
      parameterName: string(name='ParameterName'),
      parameterValue: string(name='ParameterValue'),
      currentValue: string(name='CurrentValue'),
      parameterDescription: string(name='ParameterDescription'),
      forceRestartInstance: string(name='ForceRestartInstance'),
      isChangeableConfig: string(name='IsChangeableConfig'),
      optionalRange: string(name='OptionalRange'),
    }
  ](name='Parameters'),
}

async function describeParametersWithOptions(request: DescribeParametersRequest, runtime: Util.RuntimeOptions): DescribeParametersResponse {
  Util.validateModel(request);
  return doRequest('DescribeParameters', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParametersWithOptions(request, runtime);
}

model ModifyParametersRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  parameters: string(name='Parameters'),
  forceRestartInstance?: boolean(name='ForceRestartInstance'),
}

model ModifyParametersResponse = {
  requestId: string(name='RequestId'),
}

async function modifyParametersWithOptions(request: ModifyParametersRequest, runtime: Util.RuntimeOptions): ModifyParametersResponse {
  Util.validateModel(request);
  return doRequest('ModifyParameters', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function modifyParameters(request: ModifyParametersRequest): ModifyParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyParametersWithOptions(request, runtime);
}

model CreateServiceLinkedRoleRequest = {
  regionId: string(name='RegionId'),
}

model CreateServiceLinkedRoleResponse = {
  requestId: string(name='RequestId'),
}

async function createServiceLinkedRoleWithOptions(request: CreateServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CreateServiceLinkedRoleResponse {
  Util.validateModel(request);
  return doRequest('CreateServiceLinkedRole', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleWithOptions(request, runtime);
}

model CheckServiceLinkedRoleRequest = {
  regionId?: string(name='RegionId'),
}

model CheckServiceLinkedRoleResponse = {
  requestId: string(name='RequestId'),
  hasServiceLinkedRole: string(name='HasServiceLinkedRole'),
  regionId: string(name='RegionId'),
}

async function checkServiceLinkedRoleWithOptions(request: CheckServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CheckServiceLinkedRoleResponse {
  Util.validateModel(request);
  return doRequest('CheckServiceLinkedRole', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function checkServiceLinkedRole(request: CheckServiceLinkedRoleRequest): CheckServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkServiceLinkedRoleWithOptions(request, runtime);
}

model DescribeSQLLogCountRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  queryKeywords?: string(name='QueryKeywords'),
  startTime: string(name='StartTime'),
  database?: string(name='Database'),
  user?: string(name='User'),
  endTime: string(name='EndTime'),
  executeCost?: string(name='ExecuteCost'),
  sourceIP?: string(name='SourceIP'),
  executeState?: string(name='ExecuteState'),
  operationClass?: string(name='OperationClass'),
  operationType?: string(name='OperationType'),
}

model DescribeSQLLogCountResponse = {
  requestId: string(name='RequestId'),
  DBClusterId: string(name='DBClusterId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  items: [
    {
      name: string(name='Name'),
      series: [
        {
          values: [
            {
              point: [ string ](name='Point'),
            }
          ](name='Values'),
        }
      ](name='Series'),
    }
  ](name='Items'),
}

async function describeSQLLogCountWithOptions(request: DescribeSQLLogCountRequest, runtime: Util.RuntimeOptions): DescribeSQLLogCountResponse {
  Util.validateModel(request);
  return doRequest('DescribeSQLLogCount', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeSQLLogCount(request: DescribeSQLLogCountRequest): DescribeSQLLogCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogCountWithOptions(request, runtime);
}

model DescribeSQLLogsRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  queryKeywords?: string(name='QueryKeywords'),
  startTime: string(name='StartTime'),
  database?: string(name='Database'),
  user?: string(name='User'),
  endTime: string(name='EndTime'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
  executeCost?: string(name='ExecuteCost'),
  sourceIP?: string(name='SourceIP'),
  executeState?: string(name='ExecuteState'),
  operationClass?: string(name='OperationClass'),
  operationType?: string(name='OperationType'),
}

model DescribeSQLLogsResponse = {
  requestId: string(name='RequestId'),
  pageNumber: integer(name='PageNumber'),
  pageRecordCount: integer(name='PageRecordCount'),
  items: [
    {
      DBName: string(name='DBName'),
      accountName: string(name='AccountName'),
      operationExecuteTime: string(name='OperationExecuteTime'),
      SQLText: string(name='SQLText'),
      returnRowCounts: long(name='ReturnRowCounts'),
      executeCost: float(name='ExecuteCost'),
      DBRole: string(name='DBRole'),
      sourceIP: string(name='SourceIP'),
      sourcePort: integer(name='SourcePort'),
      executeState: string(name='ExecuteState'),
      operationClass: string(name='OperationClass'),
      operationType: string(name='OperationType'),
      scanRowCounts: long(name='ScanRowCounts'),
      SQLPlan: string(name='SQLPlan'),
    }
  ](name='Items'),
}

async function describeSQLLogsWithOptions(request: DescribeSQLLogsRequest, runtime: Util.RuntimeOptions): DescribeSQLLogsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSQLLogs', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeSQLLogs(request: DescribeSQLLogsRequest): DescribeSQLLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogsWithOptions(request, runtime);
}

model CreateECSDBInstanceRequest = {
  ownerId?: long(name='OwnerId'),
  regionId: string(name='RegionId'),
  zoneId: string(name='ZoneId'),
  engineVersion: string(name='EngineVersion'),
  engine: string(name='Engine'),
  instanceSpec: string(name='InstanceSpec'),
  segNodeNum: integer(name='SegNodeNum'),
  segStorageType: string(name='SegStorageType'),
  storageSize: integer(name='StorageSize'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  securityIPList?: string(name='SecurityIPList'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  usedTime?: string(name='UsedTime'),
  clientToken?: string(name='ClientToken'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  encryptionKey?: string(name='EncryptionKey'),
  encryptionType?: string(name='EncryptionType'),
}

model CreateECSDBInstanceResponse = {
  requestId: string(name='RequestId'),
  DBInstanceId: string(name='DBInstanceId'),
  orderId: string(name='OrderId'),
  connectionString: string(name='ConnectionString'),
  port: string(name='Port'),
}

async function createECSDBInstanceWithOptions(request: CreateECSDBInstanceRequest, runtime: Util.RuntimeOptions): CreateECSDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateECSDBInstance', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function createECSDBInstance(request: CreateECSDBInstanceRequest): CreateECSDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createECSDBInstanceWithOptions(request, runtime);
}

model DescribeDBClusterPerformanceRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  key: string(name='Key'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model DescribeDBClusterPerformanceResponse = {
  requestId: string(name='RequestId'),
  DBClusterId: string(name='DBClusterId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  performanceKeys: [
    {
      unit: string(name='Unit'),
      name: string(name='Name'),
      series: [
        {
          name: string(name='Name'),
          role: string(name='Role'),
          values: [
            {
              point: [ string ](name='Point'),
            }
          ](name='Values'),
        }
      ](name='Series'),
    }
  ](name='PerformanceKeys'),
}

async function describeDBClusterPerformanceWithOptions(request: DescribeDBClusterPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBClusterPerformanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterPerformance', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterPerformanceWithOptions(request, runtime);
}

model DescribeDBInstanceOnECSAttributeRequest = {
  ownerId?: long(name='OwnerId'),
  DBInstanceId: string(name='DBInstanceId'),
}

model DescribeDBInstanceOnECSAttributeResponse = {
  requestId: string(name='RequestId'),
  items: {
    DBInstanceAttribute: [
      {
        DBInstanceId: string(name='DBInstanceId'),
        payType: string(name='PayType'),
        regionId: string(name='RegionId'),
        engine: string(name='Engine'),
        engineVersion: string(name='EngineVersion'),
        DBInstanceClass: string(name='DBInstanceClass'),
        DBInstanceStatus: string(name='DBInstanceStatus'),
        DBInstanceDescription: string(name='DBInstanceDescription'),
        lockMode: string(name='LockMode'),
        creationTime: string(name='CreationTime'),
        expireTime: string(name='ExpireTime'),
        zoneId: string(name='ZoneId'),
        instanceNetworkType: string(name='InstanceNetworkType'),
        vpcId: string(name='VpcId'),
        connectionMode: string(name='ConnectionMode'),
        storageType: string(name='StorageType'),
        instanceDeployType: string(name='InstanceDeployType'),
        segNodeNum: integer(name='SegNodeNum'),
        memorySize: integer(name='MemorySize'),
        cpuCores: integer(name='CpuCores'),
        storageSize: integer(name='StorageSize'),
        vSwitchId: string(name='VSwitchId'),
        connectionString: string(name='ConnectionString'),
        port: string(name='Port'),
        encryptionType: string(name='EncryptionType'),
        encryptionKey: string(name='EncryptionKey'),
        tags: {
          tag: [
            {
              key: string(name='Key'),
              value: string(name='Value'),
            }
          ](name='Tag'),
        }(name='Tags'),
      }
    ](name='DBInstanceAttribute'),
  }(name='Items'),
}

async function describeDBInstanceOnECSAttributeWithOptions(request: DescribeDBInstanceOnECSAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceOnECSAttributeResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstanceOnECSAttribute', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeDBInstanceOnECSAttribute(request: DescribeDBInstanceOnECSAttributeRequest): DescribeDBInstanceOnECSAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceOnECSAttributeWithOptions(request, runtime);
}

model DescribeAvailableResourcesRequest = {
  region: string(name='Region'),
  zoneId: string(name='ZoneId'),
  chargeType?: string(name='ChargeType'),
}

model DescribeAvailableResourcesResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
  resources: [
    {
      zoneId: string(name='ZoneId'),
      supportedEngines: [
        {
          supportedEngineVersion: string(name='SupportedEngineVersion'),
          mode: string(name='Mode'),
          supportedInstanceClasses: [
            {
              displayClass: string(name='DisplayClass'),
              instanceClass: string(name='InstanceClass'),
              description: string(name='Description'),
              storageType: string(name='StorageType'),
              nodeCount: {
                minCount: string(name='MinCount'),
                maxCount: string(name='MaxCount'),
                step: string(name='Step'),
              }(name='NodeCount'),
              storageSize: {
                minCount: string(name='MinCount'),
                maxCount: string(name='MaxCount'),
                step: string(name='Step'),
              }(name='StorageSize'),
            }
          ](name='SupportedInstanceClasses'),
        }
      ](name='SupportedEngines'),
    }
  ](name='Resources'),
}

async function describeAvailableResourcesWithOptions(request: DescribeAvailableResourcesRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourcesResponse {
  Util.validateModel(request);
  return doRequest('DescribeAvailableResources', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeAvailableResources(request: DescribeAvailableResourcesRequest): DescribeAvailableResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourcesWithOptions(request, runtime);
}

model DescribeDBInstanceSSLRequest = {
  DBInstanceId: string(name='DBInstanceId'),
}

model DescribeDBInstanceSSLResponse = {
  requestId: string(name='RequestId'),
  DBInstanceId: string(name='DBInstanceId'),
  DBInstanceName: string(name='DBInstanceName'),
  certCommonName: string(name='CertCommonName'),
  SSLExpiredTime: string(name='SSLExpiredTime'),
  SSLEnabled: boolean(name='SSLEnabled'),
}

async function describeDBInstanceSSLWithOptions(request: DescribeDBInstanceSSLRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceSSLResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstanceSSL', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeDBInstanceSSL(request: DescribeDBInstanceSSLRequest): DescribeDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceSSLWithOptions(request, runtime);
}

model ModifyDBInstanceSSLRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  connectionString?: string(name='ConnectionString'),
  SSLEnabled: integer(name='SSLEnabled'),
}

model ModifyDBInstanceSSLResponse = {
  requestId: string(name='RequestId'),
}

async function modifyDBInstanceSSLWithOptions(request: ModifyDBInstanceSSLRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceSSLResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceSSL', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function modifyDBInstanceSSL(request: ModifyDBInstanceSSLRequest): ModifyDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceSSLWithOptions(request, runtime);
}

model DescribeTagsRequest = {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId: string(name='RegionId'),
  resourceType: string(name='ResourceType'),
}

model DescribeTagsResponse = {
  requestId: string(name='RequestId'),
  tags: [
    {
      tagKey: string(name='TagKey'),
      tagValue: string(name='TagValue'),
    }
  ](name='Tags'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  return doRequest('DescribeTags', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeSpecificationRequest = {
  ownerId?: long(name='OwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  storageType: string(name='StorageType'),
  cpuCores: integer(name='CpuCores'),
  totalNodeNum: integer(name='TotalNodeNum'),
}

model DescribeSpecificationResponse = {
  requestId: string(name='RequestId'),
  DBInstanceClass: [
    {
      text: string(name='Text'),
      value: string(name='Value'),
    }
  ](name='DBInstanceClass'),
  DBInstanceGroupCount: [
    {
      text: string(name='Text'),
      value: string(name='Value'),
    }
  ](name='DBInstanceGroupCount'),
  storageNotice: [
    {
      text: string(name='Text'),
      value: string(name='Value'),
    }
  ](name='StorageNotice'),
}

async function describeSpecificationWithOptions(request: DescribeSpecificationRequest, runtime: Util.RuntimeOptions): DescribeSpecificationResponse {
  Util.validateModel(request);
  return doRequest('DescribeSpecification', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeSpecification(request: DescribeSpecificationRequest): DescribeSpecificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSpecificationWithOptions(request, runtime);
}

model UpgradeDBVersionRequest = {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  DBInstanceId: string(name='DBInstanceId'),
  minorVersion?: string(name='MinorVersion'),
  majorVersion?: string(name='MajorVersion'),
  switchTimeMode?: string(name='SwitchTimeMode'),
  switchTime?: string(name='SwitchTime'),
}

model UpgradeDBVersionResponse = {
  requestId: string(name='RequestId'),
  DBInstanceId: string(name='DBInstanceId'),
  DBInstanceName: string(name='DBInstanceName'),
  taskId: string(name='TaskId'),
}

async function upgradeDBVersionWithOptions(request: UpgradeDBVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBVersionResponse {
  Util.validateModel(request);
  return doRequest('UpgradeDBVersion', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function upgradeDBVersion(request: UpgradeDBVersionRequest): UpgradeDBVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBVersionWithOptions(request, runtime);
}

model UpgradeDBInstanceRequest = {
  ownerId?: long(name='OwnerId'),
  regionId: string(name='RegionId'),
  DBInstanceClass: string(name='DBInstanceClass'),
  DBInstanceGroupCount: string(name='DBInstanceGroupCount'),
  DBInstanceId: string(name='DBInstanceId'),
  payType?: string(name='PayType'),
}

model UpgradeDBInstanceResponse = {
  requestId: string(name='RequestId'),
  DBInstanceId: string(name='DBInstanceId'),
  orderId: string(name='OrderId'),
}

async function upgradeDBInstanceWithOptions(request: UpgradeDBInstanceRequest, runtime: Util.RuntimeOptions): UpgradeDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('UpgradeDBInstance', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function upgradeDBInstance(request: UpgradeDBInstanceRequest): UpgradeDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBInstanceWithOptions(request, runtime);
}

model UntagResourcesRequest = {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId: string(name='RegionId'),
  resourceType: string(name='ResourceType'),
  resourceId: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
  all?: boolean(name='All'),
}

model UntagResourcesResponse = {
  requestId: string(name='RequestId'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  return doRequest('UntagResources', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model TagResourcesRequest = {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId: string(name='RegionId'),
  resourceType: string(name='ResourceType'),
  resourceId: [ string ](name='ResourceId'),
  tag: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponse = {
  requestId: string(name='RequestId'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  return doRequest('TagResources', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model ListTagResourcesRequest = {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId: string(name='RegionId'),
  resourceType: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  nextToken?: string(name='NextToken'),
}

model ListTagResourcesResponse = {
  requestId: string(name='RequestId'),
  nextToken: string(name='NextToken'),
  tagResources: {
    tagResource: [
      {
        tagKey: string(name='TagKey'),
        tagValue: string(name='TagValue'),
        resourceType: string(name='ResourceType'),
        resourceId: string(name='ResourceId'),
      }
    ](name='TagResource'),
  }(name='TagResources'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  return doRequest('ListTagResources', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model DescribeRdsVSwitchsRequest = {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeRdsVSwitchsResponse = {
  requestId: string(name='RequestId'),
  vSwitches: {
    vSwitch: [
      {
        vSwitchId: string(name='VSwitchId'),
        vSwitchName: string(name='VSwitchName'),
        izNo: string(name='IzNo'),
        bid: string(name='Bid'),
        aliUid: string(name='AliUid'),
        regionNo: string(name='RegionNo'),
        cidrBlock: string(name='CidrBlock'),
        isDefault: boolean(name='IsDefault'),
        status: string(name='Status'),
        gmtCreate: string(name='GmtCreate'),
        gmtModified: string(name='GmtModified'),
      }
    ](name='VSwitch'),
  }(name='VSwitches'),
}

async function describeRdsVSwitchsWithOptions(request: DescribeRdsVSwitchsRequest, runtime: Util.RuntimeOptions): DescribeRdsVSwitchsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRdsVSwitchs', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeRdsVSwitchs(request: DescribeRdsVSwitchsRequest): DescribeRdsVSwitchsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsVSwitchsWithOptions(request, runtime);
}

model DescribeRdsVpcsRequest = {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  zoneId?: string(name='ZoneId'),
}

model DescribeRdsVpcsResponse = {
  requestId: string(name='RequestId'),
  vpcs: {
    vpc: [
      {
        vpcId: string(name='VpcId'),
        vpcName: string(name='VpcName'),
        bid: string(name='Bid'),
        aliUid: string(name='AliUid'),
        regionNo: string(name='RegionNo'),
        cidrBlock: string(name='CidrBlock'),
        isDefault: boolean(name='IsDefault'),
        status: string(name='Status'),
        gmtCreate: string(name='GmtCreate'),
        gmtModified: string(name='GmtModified'),
        vSwitchs: [
          {
            vSwitchId: string(name='VSwitchId'),
            vSwitchName: string(name='VSwitchName'),
            izNo: string(name='IzNo'),
            cidrBlock: string(name='CidrBlock'),
            isDefault: boolean(name='IsDefault'),
            status: string(name='Status'),
            gmtCreate: string(name='GmtCreate'),
            gmtModified: string(name='GmtModified'),
          }
        ](name='VSwitchs'),
      }
    ](name='Vpc'),
  }(name='Vpcs'),
}

async function describeRdsVpcsWithOptions(request: DescribeRdsVpcsRequest, runtime: Util.RuntimeOptions): DescribeRdsVpcsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRdsVpcs', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeRdsVpcs(request: DescribeRdsVpcsRequest): DescribeRdsVpcsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsVpcsWithOptions(request, runtime);
}

model AddBuDBInstanceRelationRequest = {
  ownerId?: long(name='OwnerId'),
  DBInstanceId: string(name='DBInstanceId'),
  businessUnit: string(name='BusinessUnit'),
}

model AddBuDBInstanceRelationResponse = {
  requestId: string(name='RequestId'),
  businessUnit: string(name='BusinessUnit'),
  DBInstanceName: string(name='DBInstanceName'),
}

async function addBuDBInstanceRelationWithOptions(request: AddBuDBInstanceRelationRequest, runtime: Util.RuntimeOptions): AddBuDBInstanceRelationResponse {
  Util.validateModel(request);
  return doRequest('AddBuDBInstanceRelation', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function addBuDBInstanceRelation(request: AddBuDBInstanceRelationRequest): AddBuDBInstanceRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return addBuDBInstanceRelationWithOptions(request, runtime);
}

model DescribeSQLLogRecordsRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  queryKeywords?: string(name='QueryKeywords'),
  startTime: string(name='StartTime'),
  database?: string(name='Database'),
  user?: string(name='User'),
  form?: string(name='Form'),
  endTime: string(name='EndTime'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
}

model DescribeSQLLogRecordsResponse = {
  requestId: string(name='RequestId'),
  totalRecordCount: integer(name='TotalRecordCount'),
  pageNumber: integer(name='PageNumber'),
  pageRecordCount: integer(name='PageRecordCount'),
  items: {
    SQLRecord: [
      {
        DBName: string(name='DBName'),
        accountName: string(name='AccountName'),
        hostAddress: string(name='HostAddress'),
        SQLText: string(name='SQLText'),
        totalExecutionTimes: long(name='TotalExecutionTimes'),
        returnRowCounts: long(name='ReturnRowCounts'),
        executeTime: string(name='ExecuteTime'),
        threadID: string(name='ThreadID'),
      }
    ](name='SQLRecord'),
  }(name='Items'),
}

async function describeSQLLogRecordsWithOptions(request: DescribeSQLLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSQLLogRecordsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSQLLogRecords', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeSQLLogRecords(request: DescribeSQLLogRecordsRequest): DescribeSQLLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogRecordsWithOptions(request, runtime);
}

model ModifySQLCollectorPolicyRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  SQLCollectorStatus: string(name='SQLCollectorStatus'),
}

model ModifySQLCollectorPolicyResponse = {
  requestId: string(name='RequestId'),
}

async function modifySQLCollectorPolicyWithOptions(request: ModifySQLCollectorPolicyRequest, runtime: Util.RuntimeOptions): ModifySQLCollectorPolicyResponse {
  Util.validateModel(request);
  return doRequest('ModifySQLCollectorPolicy', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function modifySQLCollectorPolicy(request: ModifySQLCollectorPolicyRequest): ModifySQLCollectorPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySQLCollectorPolicyWithOptions(request, runtime);
}

model DescribeSQLLogFilesRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  fileName?: string(name='FileName'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
}

model DescribeSQLLogFilesResponse = {
  requestId: string(name='RequestId'),
  totalRecordCount: integer(name='TotalRecordCount'),
  pageNumber: integer(name='PageNumber'),
  pageRecordCount: integer(name='PageRecordCount'),
  items: {
    logFile: [
      {
        fileID: string(name='FileID'),
        logStatus: string(name='LogStatus'),
        logDownloadURL: string(name='LogDownloadURL'),
        logSize: string(name='LogSize'),
        logStartTime: string(name='LogStartTime'),
        logEndTime: string(name='LogEndTime'),
      }
    ](name='LogFile'),
  }(name='Items'),
}

async function describeSQLLogFilesWithOptions(request: DescribeSQLLogFilesRequest, runtime: Util.RuntimeOptions): DescribeSQLLogFilesResponse {
  Util.validateModel(request);
  return doRequest('DescribeSQLLogFiles', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeSQLLogFiles(request: DescribeSQLLogFilesRequest): DescribeSQLLogFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogFilesWithOptions(request, runtime);
}

model DescribeSQLCollectorPolicyRequest = {
  DBInstanceId: string(name='DBInstanceId'),
}

model DescribeSQLCollectorPolicyResponse = {
  requestId: string(name='RequestId'),
  SQLCollectorStatus: string(name='SQLCollectorStatus'),
}

async function describeSQLCollectorPolicyWithOptions(request: DescribeSQLCollectorPolicyRequest, runtime: Util.RuntimeOptions): DescribeSQLCollectorPolicyResponse {
  Util.validateModel(request);
  return doRequest('DescribeSQLCollectorPolicy', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeSQLCollectorPolicy(request: DescribeSQLCollectorPolicyRequest): DescribeSQLCollectorPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLCollectorPolicyWithOptions(request, runtime);
}

model DescribeSlowLogRecordsRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  SQLId?: long(name='SQLId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  DBName?: string(name='DBName'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
}

model DescribeSlowLogRecordsResponse = {
  requestId: string(name='RequestId'),
  engine: string(name='Engine'),
  totalRecordCount: integer(name='TotalRecordCount'),
  pageNumber: integer(name='PageNumber'),
  pageRecordCount: integer(name='PageRecordCount'),
  items: {
    SQLSlowRecord: [
      {
        hostAddress: string(name='HostAddress'),
        DBName: string(name='DBName'),
        SQLText: string(name='SQLText'),
        queryTimes: long(name='QueryTimes'),
        lockTimes: long(name='LockTimes'),
        parseRowCounts: long(name='ParseRowCounts'),
        returnRowCounts: long(name='ReturnRowCounts'),
        executionStartTime: string(name='ExecutionStartTime'),
      }
    ](name='SQLSlowRecord'),
  }(name='Items'),
}

async function describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogRecordsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSlowLogRecords', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogRecordsWithOptions(request, runtime);
}

model SwitchDBInstanceNetTypeRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  connectionStringPrefix: string(name='ConnectionStringPrefix'),
  port: string(name='Port'),
}

model SwitchDBInstanceNetTypeResponse = {
  requestId: string(name='RequestId'),
}

async function switchDBInstanceNetTypeWithOptions(request: SwitchDBInstanceNetTypeRequest, runtime: Util.RuntimeOptions): SwitchDBInstanceNetTypeResponse {
  Util.validateModel(request);
  return doRequest('SwitchDBInstanceNetType', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function switchDBInstanceNetType(request: SwitchDBInstanceNetTypeRequest): SwitchDBInstanceNetTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchDBInstanceNetTypeWithOptions(request, runtime);
}

model RestartDBInstanceRequest = {
  clientToken?: string(name='ClientToken'),
  DBInstanceId: string(name='DBInstanceId'),
}

model RestartDBInstanceResponse = {
  requestId: string(name='RequestId'),
}

async function restartDBInstanceWithOptions(request: RestartDBInstanceRequest, runtime: Util.RuntimeOptions): RestartDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('RestartDBInstance', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function restartDBInstance(request: RestartDBInstanceRequest): RestartDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDBInstanceWithOptions(request, runtime);
}

model ResetAccountPasswordRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  accountName: string(name='AccountName'),
  accountPassword: string(name='AccountPassword'),
}

model ResetAccountPasswordResponse = {
  requestId: string(name='RequestId'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  return doRequest('ResetAccountPassword', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model ReleaseInstancePublicConnectionRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  currentConnectionString: string(name='CurrentConnectionString'),
}

model ReleaseInstancePublicConnectionResponse = {
  requestId: string(name='RequestId'),
}

async function releaseInstancePublicConnectionWithOptions(request: ReleaseInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseInstancePublicConnectionResponse {
  Util.validateModel(request);
  return doRequest('ReleaseInstancePublicConnection', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstancePublicConnectionWithOptions(request, runtime);
}

model ModifySecurityIpsRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  securityIPList: string(name='SecurityIPList'),
  DBInstanceIPArrayName?: string(name='DBInstanceIPArrayName'),
  DBInstanceIPArrayAttribute?: string(name='DBInstanceIPArrayAttribute'),
}

model ModifySecurityIpsResponse = {
  requestId: string(name='RequestId'),
}

async function modifySecurityIpsWithOptions(request: ModifySecurityIpsRequest, runtime: Util.RuntimeOptions): ModifySecurityIpsResponse {
  Util.validateModel(request);
  return doRequest('ModifySecurityIps', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityIpsWithOptions(request, runtime);
}

model ModifyDBInstanceNetworkTypeRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  instanceNetworkType: string(name='InstanceNetworkType'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  privateIpAddress?: string(name='PrivateIpAddress'),
}

model ModifyDBInstanceNetworkTypeResponse = {
  requestId: string(name='RequestId'),
}

async function modifyDBInstanceNetworkTypeWithOptions(request: ModifyDBInstanceNetworkTypeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceNetworkTypeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceNetworkType', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function modifyDBInstanceNetworkType(request: ModifyDBInstanceNetworkTypeRequest): ModifyDBInstanceNetworkTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceNetworkTypeWithOptions(request, runtime);
}

model ModifyDBInstanceMaintainTimeRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model ModifyDBInstanceMaintainTimeResponse = {
  requestId: string(name='RequestId'),
}

async function modifyDBInstanceMaintainTimeWithOptions(request: ModifyDBInstanceMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceMaintainTimeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceMaintainTime', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function modifyDBInstanceMaintainTime(request: ModifyDBInstanceMaintainTimeRequest): ModifyDBInstanceMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceMaintainTimeWithOptions(request, runtime);
}

model ModifyDBInstanceDescriptionRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  DBInstanceDescription: string(name='DBInstanceDescription'),
}

model ModifyDBInstanceDescriptionResponse = {
  requestId: string(name='RequestId'),
}

async function modifyDBInstanceDescriptionWithOptions(request: ModifyDBInstanceDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceDescriptionResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceDescription', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function modifyDBInstanceDescription(request: ModifyDBInstanceDescriptionRequest): ModifyDBInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceDescriptionWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionStringRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  connectionStringPrefix: string(name='ConnectionStringPrefix'),
  port: string(name='Port'),
  currentConnectionString: string(name='CurrentConnectionString'),
}

model ModifyDBInstanceConnectionStringResponse = {
  requestId: string(name='RequestId'),
}

async function modifyDBInstanceConnectionStringWithOptions(request: ModifyDBInstanceConnectionStringRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionStringResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceConnectionString', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionStringWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionModeRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  connectionMode: string(name='ConnectionMode'),
}

model ModifyDBInstanceConnectionModeResponse = {
  requestId: string(name='RequestId'),
}

async function modifyDBInstanceConnectionModeWithOptions(request: ModifyDBInstanceConnectionModeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionModeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceConnectionMode', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function modifyDBInstanceConnectionMode(request: ModifyDBInstanceConnectionModeRequest): ModifyDBInstanceConnectionModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionModeWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  accountName: string(name='AccountName'),
  accountDescription: string(name='AccountDescription'),
}

model ModifyAccountDescriptionResponse = {
  requestId: string(name='RequestId'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  return doRequest('ModifyAccountDescription', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model DescribeResourceUsageRequest = {
  DBInstanceId: string(name='DBInstanceId'),
}

model DescribeResourceUsageResponse = {
  requestId: string(name='RequestId'),
  DBInstanceId: string(name='DBInstanceId'),
  engine: string(name='Engine'),
  diskUsed: long(name='DiskUsed'),
  dataSize: long(name='DataSize'),
  logSize: long(name='LogSize'),
  backupSize: long(name='BackupSize'),
}

async function describeResourceUsageWithOptions(request: DescribeResourceUsageRequest, runtime: Util.RuntimeOptions): DescribeResourceUsageResponse {
  Util.validateModel(request);
  return doRequest('DescribeResourceUsage', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeResourceUsage(request: DescribeResourceUsageRequest): DescribeResourceUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceUsageWithOptions(request, runtime);
}

model DescribeRegionsRequest = {
  region?: string(name='Region'),
}

model DescribeRegionsResponse = {
  requestId: string(name='RequestId'),
  regions: {
    region: [
      {
        regionId: string(name='RegionId'),
        zones: {
          zone: [
            {
              zoneId: string(name='ZoneId'),
              vpcEnabled: boolean(name='VpcEnabled'),
            }
          ](name='Zone'),
        }(name='Zones'),
      }
    ](name='Region'),
  }(name='Regions'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRegions', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeDBInstancesRequest = {
  ownerId?: long(name='OwnerId'),
  regionId: string(name='RegionId'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  DBInstanceIds?: string(name='DBInstanceIds'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
}

model DescribeDBInstancesResponse = {
  requestId: string(name='RequestId'),
  pageNumber: integer(name='PageNumber'),
  totalRecordCount: integer(name='TotalRecordCount'),
  pageRecordCount: integer(name='PageRecordCount'),
  items: {
    DBInstance: [
      {
        DBInstanceId: string(name='DBInstanceId'),
        DBInstanceDescription: string(name='DBInstanceDescription'),
        payType: string(name='PayType'),
        instanceNetworkType: string(name='InstanceNetworkType'),
        connectionMode: string(name='ConnectionMode'),
        regionId: string(name='RegionId'),
        zoneId: string(name='ZoneId'),
        expireTime: string(name='ExpireTime'),
        DBInstanceStatus: string(name='DBInstanceStatus'),
        engine: string(name='Engine'),
        engineVersion: string(name='EngineVersion'),
        DBInstanceNetType: string(name='DBInstanceNetType'),
        lockMode: string(name='LockMode'),
        lockReason: string(name='LockReason'),
        createTime: string(name='CreateTime'),
        vpcId: string(name='VpcId'),
        vSwitchId: string(name='VSwitchId'),
        instanceDeployType: string(name='InstanceDeployType'),
        tags: {
          tag: [
            {
              key: string(name='Key'),
              value: string(name='Value'),
            }
          ](name='Tag'),
        }(name='Tags'),
      }
    ](name='DBInstance'),
  }(name='Items'),
}

async function describeDBInstancesWithOptions(request: DescribeDBInstancesRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstances', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesWithOptions(request, runtime);
}

model DescribeDBInstancePerformanceRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  key: string(name='Key'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model DescribeDBInstancePerformanceResponse = {
  requestId: string(name='RequestId'),
  DBInstanceId: string(name='DBInstanceId'),
  engine: string(name='Engine'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  performanceKeys: [ string ] (name='PerformanceKeys'),
}

async function describeDBInstancePerformanceWithOptions(request: DescribeDBInstancePerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBInstancePerformanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstancePerformance', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeDBInstancePerformance(request: DescribeDBInstancePerformanceRequest): DescribeDBInstancePerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancePerformanceWithOptions(request, runtime);
}

model DescribeDBInstanceNetInfoRequest = {
  DBInstanceId: string(name='DBInstanceId'),
}

model DescribeDBInstanceNetInfoResponse = {
  requestId: string(name='RequestId'),
  instanceNetworkType: string(name='InstanceNetworkType'),
  DBInstanceNetInfos: {
    DBInstanceNetInfo: [
      {
        connectionString: string(name='ConnectionString'),
        IPAddress: string(name='IPAddress'),
        IPType: string(name='IPType'),
        port: string(name='Port'),
        VPCId: string(name='VPCId'),
        vSwitchId: string(name='VSwitchId'),
        vpcInstanceId: string(name='VpcInstanceId'),
      }
    ](name='DBInstanceNetInfo'),
  }(name='DBInstanceNetInfos'),
}

async function describeDBInstanceNetInfoWithOptions(request: DescribeDBInstanceNetInfoRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceNetInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstanceNetInfo', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeDBInstanceNetInfo(request: DescribeDBInstanceNetInfoRequest): DescribeDBInstanceNetInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceNetInfoWithOptions(request, runtime);
}

model DescribeDBInstanceIPArrayListRequest = {
  DBInstanceId: string(name='DBInstanceId'),
}

model DescribeDBInstanceIPArrayListResponse = {
  requestId: string(name='RequestId'),
  items: {
    DBInstanceIPArray: [
      {
        DBInstanceIPArrayName: string(name='DBInstanceIPArrayName'),
        DBInstanceIPArrayAttribute: string(name='DBInstanceIPArrayAttribute'),
        securityIPList: string(name='SecurityIPList'),
      }
    ](name='DBInstanceIPArray'),
  }(name='Items'),
}

async function describeDBInstanceIPArrayListWithOptions(request: DescribeDBInstanceIPArrayListRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceIPArrayListResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstanceIPArrayList', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeDBInstanceIPArrayList(request: DescribeDBInstanceIPArrayListRequest): DescribeDBInstanceIPArrayListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceIPArrayListWithOptions(request, runtime);
}

model DescribeDBInstanceAttributeRequest = {
  ownerId?: long(name='OwnerId'),
  DBInstanceId: string(name='DBInstanceId'),
}

model DescribeDBInstanceAttributeResponse = {
  requestId: string(name='RequestId'),
  items: {
    DBInstanceAttribute: [
      {
        DBInstanceId: string(name='DBInstanceId'),
        payType: string(name='PayType'),
        DBInstanceClassType: string(name='DBInstanceClassType'),
        regionId: string(name='RegionId'),
        connectionString: string(name='ConnectionString'),
        port: string(name='Port'),
        engine: string(name='Engine'),
        engineVersion: string(name='EngineVersion'),
        DBInstanceClass: string(name='DBInstanceClass'),
        DBInstanceCpuCores: integer(name='DBInstanceCpuCores'),
        DBInstanceMemory: long(name='DBInstanceMemory'),
        DBInstanceStorage: long(name='DBInstanceStorage'),
        DBInstanceDiskMBPS: long(name='DBInstanceDiskMBPS'),
        hostType: string(name='HostType'),
        DBInstanceGroupCount: string(name='DBInstanceGroupCount'),
        DBInstanceNetType: string(name='DBInstanceNetType'),
        DBInstanceStatus: string(name='DBInstanceStatus'),
        DBInstanceDescription: string(name='DBInstanceDescription'),
        lockMode: string(name='LockMode'),
        lockReason: string(name='LockReason'),
        readDelayTime: string(name='ReadDelayTime'),
        creationTime: string(name='CreationTime'),
        expireTime: string(name='ExpireTime'),
        maintainStartTime: string(name='MaintainStartTime'),
        maintainEndTime: string(name='MaintainEndTime'),
        availabilityValue: string(name='AvailabilityValue'),
        maxConnections: integer(name='MaxConnections'),
        securityIPList: string(name='SecurityIPList'),
        zoneId: string(name='ZoneId'),
        instanceNetworkType: string(name='InstanceNetworkType'),
        vpcId: string(name='VpcId'),
        connectionMode: string(name='ConnectionMode'),
        storageType: string(name='StorageType'),
        cpuCoresPerNode: integer(name='CpuCoresPerNode'),
        segmentCounts: integer(name='SegmentCounts'),
        storagePerNode: integer(name='StoragePerNode'),
        memoryPerNode: integer(name='MemoryPerNode'),
        storageUnit: string(name='StorageUnit'),
        memoryUnit: string(name='MemoryUnit'),
        tags: {
          tag: [
            {
              key: string(name='Key'),
              value: string(name='Value'),
            }
          ](name='Tag'),
        }(name='Tags'),
      }
    ](name='DBInstanceAttribute'),
  }(name='Items'),
}

async function describeDBInstanceAttributeWithOptions(request: DescribeDBInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceAttributeResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstanceAttribute', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceAttributeWithOptions(request, runtime);
}

model DescribeAccountsRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  accountName?: string(name='AccountName'),
}

model DescribeAccountsResponse = {
  requestId: string(name='RequestId'),
  accounts: {
    DBInstanceAccount: [
      {
        DBInstanceId: string(name='DBInstanceId'),
        accountName: string(name='AccountName'),
        accountStatus: string(name='AccountStatus'),
        accountDescription: string(name='AccountDescription'),
      }
    ](name='DBInstanceAccount'),
  }(name='Accounts'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  return doRequest('DescribeAccounts', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DeleteDBInstanceRequest = {
  ownerId?: long(name='OwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId: string(name='DBInstanceId'),
}

model DeleteDBInstanceResponse = {
  requestId: string(name='RequestId'),
}

async function deleteDBInstanceWithOptions(request: DeleteDBInstanceRequest, runtime: Util.RuntimeOptions): DeleteDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('DeleteDBInstance', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBInstanceWithOptions(request, runtime);
}

model DeleteDatabaseRequest = {
  DBInstanceId: string(name='DBInstanceId'),
  DBName?: string(name='DBName'),
}

model DeleteDatabaseResponse = {
  requestId: string(name='RequestId'),
}

async function deleteDatabaseWithOptions(request: DeleteDatabaseRequest, runtime: Util.RuntimeOptions): DeleteDatabaseResponse {
  Util.validateModel(request);
  return doRequest('DeleteDatabase', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDatabaseWithOptions(request, runtime);
}

model CreateDBInstanceRequest = {
  ownerId?: long(name='OwnerId'),
  regionId: string(name='RegionId'),
  zoneId: string(name='ZoneId'),
  engineVersion: string(name='EngineVersion'),
  engine: string(name='Engine'),
  DBInstanceClass: string(name='DBInstanceClass'),
  DBInstanceGroupCount: string(name='DBInstanceGroupCount'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  securityIPList: string(name='SecurityIPList'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  usedTime?: string(name='UsedTime'),
  clientToken: string(name='ClientToken'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  privateIpAddress?: string(name='PrivateIpAddress'),
}

model CreateDBInstanceResponse = {
  requestId: string(name='RequestId'),
  DBInstanceId: string(name='DBInstanceId'),
  orderId: string(name='OrderId'),
  connectionString: string(name='ConnectionString'),
  port: string(name='Port'),
}

async function createDBInstanceWithOptions(request: CreateDBInstanceRequest, runtime: Util.RuntimeOptions): CreateDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateDBInstance', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstanceWithOptions(request, runtime);
}

model CreateAccountRequest = {
  ownerId?: long(name='OwnerId'),
  DBInstanceId: string(name='DBInstanceId'),
  databaseName?: string(name='DatabaseName'),
  accountName: string(name='AccountName'),
  accountPassword: string(name='AccountPassword'),
  accountDescription?: string(name='AccountDescription'),
}

model CreateAccountResponse = {
  requestId: string(name='RequestId'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  return doRequest('CreateAccount', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model AllocateInstancePublicConnectionRequest = {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId'),
  connectionStringPrefix: string(name='ConnectionStringPrefix'),
  port: string(name='Port'),
}

model AllocateInstancePublicConnectionResponse = {
  requestId: string(name='RequestId'),
}

async function allocateInstancePublicConnectionWithOptions(request: AllocateInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateInstancePublicConnectionResponse {
  Util.validateModel(request);
  return doRequest('AllocateInstancePublicConnection', 'HTTPS', 'POST', '2016-05-03', 'AK', null, request, runtime);
}

async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateInstancePublicConnectionWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
