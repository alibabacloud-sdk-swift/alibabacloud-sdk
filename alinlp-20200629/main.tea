import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('alinlp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model GetSimilarityChMedicalRequest = {
  serviceCode: string(name='ServiceCode'),
  originQ: string(name='OriginQ'),
  originT: string(name='OriginT'),
}

model GetSimilarityChMedicalResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getSimilarityChMedicalWithOptions(request: GetSimilarityChMedicalRequest, runtime: Util.RuntimeOptions): GetSimilarityChMedicalResponse {
  Util.validateModel(request);
  return doRequest('GetSimilarityChMedical', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getSimilarityChMedical(request: GetSimilarityChMedicalRequest): GetSimilarityChMedicalResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSimilarityChMedicalWithOptions(request, runtime);
}

model GetCheckDuplicationChMedicalRequest = {
  serviceCode: string(name='ServiceCode'),
  originQ: string(name='OriginQ'),
  originT: string(name='OriginT'),
}

model GetCheckDuplicationChMedicalResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getCheckDuplicationChMedicalWithOptions(request: GetCheckDuplicationChMedicalRequest, runtime: Util.RuntimeOptions): GetCheckDuplicationChMedicalResponse {
  Util.validateModel(request);
  return doRequest('GetCheckDuplicationChMedical', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getCheckDuplicationChMedical(request: GetCheckDuplicationChMedicalRequest): GetCheckDuplicationChMedicalResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCheckDuplicationChMedicalWithOptions(request, runtime);
}

model GetMedicineChMedicalRequest = {
  serviceCode: string(name='ServiceCode'),
  name: string(name='Name'),
  factory?: string(name='Factory'),
  specification?: string(name='Specification'),
  unit?: string(name='Unit'),
}

model GetMedicineChMedicalResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getMedicineChMedicalWithOptions(request: GetMedicineChMedicalRequest, runtime: Util.RuntimeOptions): GetMedicineChMedicalResponse {
  Util.validateModel(request);
  return doRequest('GetMedicineChMedical', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getMedicineChMedical(request: GetMedicineChMedicalRequest): GetMedicineChMedicalResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMedicineChMedicalWithOptions(request, runtime);
}

model GetWeChGeneralRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  size?: string(name='Size'),
  type?: string(name='Type'),
  operation?: string(name='Operation'),
}

model GetWeChGeneralResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getWeChGeneralWithOptions(request: GetWeChGeneralRequest, runtime: Util.RuntimeOptions): GetWeChGeneralResponse {
  Util.validateModel(request);
  return doRequest('GetWeChGeneral', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWeChGeneral(request: GetWeChGeneralRequest): GetWeChGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWeChGeneralWithOptions(request, runtime);
}

model GetPosChGeneralRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  tokenizerId?: string(name='TokenizerId'),
  outType?: string(name='OutType'),
}

model GetPosChGeneralResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getPosChGeneralWithOptions(request: GetPosChGeneralRequest, runtime: Util.RuntimeOptions): GetPosChGeneralResponse {
  Util.validateModel(request);
  return doRequest('GetPosChGeneral', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getPosChGeneral(request: GetPosChGeneralRequest): GetPosChGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPosChGeneralWithOptions(request, runtime);
}

model GetWsChGeneralRequest = {
  tokenizerId?: string(name='TokenizerId'),
  text: string(name='Text'),
  outType?: string(name='OutType'),
  serviceCode: string(name='ServiceCode'),
}

model GetWsChGeneralResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getWsChGeneralWithOptions(request: GetWsChGeneralRequest, runtime: Util.RuntimeOptions): GetWsChGeneralResponse {
  Util.validateModel(request);
  return doRequest('GetWsChGeneral', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWsChGeneral(request: GetWsChGeneralRequest): GetWsChGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsChGeneralWithOptions(request, runtime);
}

model GetNerChEcomRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  lexerId?: string(name='LexerId'),
}

model GetNerChEcomResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getNerChEcomWithOptions(request: GetNerChEcomRequest, runtime: Util.RuntimeOptions): GetNerChEcomResponse {
  Util.validateModel(request);
  return doRequest('GetNerChEcom', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getNerChEcom(request: GetNerChEcomRequest): GetNerChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNerChEcomWithOptions(request, runtime);
}

model GetDpChGeneralStanfordRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
}

model GetDpChGeneralStanfordResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getDpChGeneralStanfordWithOptions(request: GetDpChGeneralStanfordRequest, runtime: Util.RuntimeOptions): GetDpChGeneralStanfordResponse {
  Util.validateModel(request);
  return doRequest('GetDpChGeneralStanford', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getDpChGeneralStanford(request: GetDpChGeneralStanfordRequest): GetDpChGeneralStanfordResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDpChGeneralStanfordWithOptions(request, runtime);
}

model GetDpChGeneralCTBRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
}

model GetDpChGeneralCTBResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getDpChGeneralCTBWithOptions(request: GetDpChGeneralCTBRequest, runtime: Util.RuntimeOptions): GetDpChGeneralCTBResponse {
  Util.validateModel(request);
  return doRequest('GetDpChGeneralCTB', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getDpChGeneralCTB(request: GetDpChGeneralCTBRequest): GetDpChGeneralCTBResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDpChGeneralCTBWithOptions(request, runtime);
}

model GetWeChEntertainmentRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  size?: string(name='Size'),
  type?: string(name='Type'),
  operation?: string(name='Operation'),
  tokenizerId: string(name='TokenizerId'),
}

model GetWeChEntertainmentResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getWeChEntertainmentWithOptions(request: GetWeChEntertainmentRequest, runtime: Util.RuntimeOptions): GetWeChEntertainmentResponse {
  Util.validateModel(request);
  return doRequest('GetWeChEntertainment', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWeChEntertainment(request: GetWeChEntertainmentRequest): GetWeChEntertainmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWeChEntertainmentWithOptions(request, runtime);
}

model GetEcEnGeneralRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
}

model GetEcEnGeneralResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getEcEnGeneralWithOptions(request: GetEcEnGeneralRequest, runtime: Util.RuntimeOptions): GetEcEnGeneralResponse {
  Util.validateModel(request);
  return doRequest('GetEcEnGeneral', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getEcEnGeneral(request: GetEcEnGeneralRequest): GetEcEnGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEcEnGeneralWithOptions(request, runtime);
}

model GetWeChSearchRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  size?: string(name='Size'),
  type?: string(name='Type'),
  operation?: string(name='Operation'),
  tokenizerId: string(name='TokenizerId'),
}

model GetWeChSearchResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getWeChSearchWithOptions(request: GetWeChSearchRequest, runtime: Util.RuntimeOptions): GetWeChSearchResponse {
  Util.validateModel(request);
  return doRequest('GetWeChSearch', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWeChSearch(request: GetWeChSearchRequest): GetWeChSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWeChSearchWithOptions(request, runtime);
}

model GetWeChCommentRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  size?: string(name='Size'),
  type?: string(name='Type'),
  operation?: string(name='Operation'),
  tokenizerId: string(name='TokenizerId'),
}

model GetWeChCommentResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getWeChCommentWithOptions(request: GetWeChCommentRequest, runtime: Util.RuntimeOptions): GetWeChCommentResponse {
  Util.validateModel(request);
  return doRequest('GetWeChComment', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWeChComment(request: GetWeChCommentRequest): GetWeChCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWeChCommentWithOptions(request, runtime);
}

model GetWsCustomizedChEcomContentRequest = {
  tokenizerId?: string(name='TokenizerId'),
  text: string(name='Text'),
  outType?: string(name='OutType'),
  serviceCode: string(name='ServiceCode'),
}

model GetWsCustomizedChEcomContentResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getWsCustomizedChEcomContentWithOptions(request: GetWsCustomizedChEcomContentRequest, runtime: Util.RuntimeOptions): GetWsCustomizedChEcomContentResponse {
  Util.validateModel(request);
  return doRequest('GetWsCustomizedChEcomContent', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWsCustomizedChEcomContent(request: GetWsCustomizedChEcomContentRequest): GetWsCustomizedChEcomContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedChEcomContentWithOptions(request, runtime);
}

model GetWsCustomizedChEcomTitleRequest = {
  tokenizerId?: string(name='TokenizerId'),
  text: string(name='Text'),
  outType?: string(name='OutType'),
  serviceCode: string(name='ServiceCode'),
}

model GetWsCustomizedChEcomTitleResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getWsCustomizedChEcomTitleWithOptions(request: GetWsCustomizedChEcomTitleRequest, runtime: Util.RuntimeOptions): GetWsCustomizedChEcomTitleResponse {
  Util.validateModel(request);
  return doRequest('GetWsCustomizedChEcomTitle', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWsCustomizedChEcomTitle(request: GetWsCustomizedChEcomTitleRequest): GetWsCustomizedChEcomTitleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedChEcomTitleWithOptions(request, runtime);
}

model GetWsCustomizedSeaEcomRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  language: string(name='Language'),
}

model GetWsCustomizedSeaEcomResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getWsCustomizedSeaEcomWithOptions(request: GetWsCustomizedSeaEcomRequest, runtime: Util.RuntimeOptions): GetWsCustomizedSeaEcomResponse {
  Util.validateModel(request);
  return doRequest('GetWsCustomizedSeaEcom', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWsCustomizedSeaEcom(request: GetWsCustomizedSeaEcomRequest): GetWsCustomizedSeaEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedSeaEcomWithOptions(request, runtime);
}

model GetWsCustomizedChEntertainmentRequest = {
  tokenizerId?: string(name='TokenizerId'),
  text: string(name='Text'),
  outType?: string(name='OutType'),
  serviceCode: string(name='ServiceCode'),
}

model GetWsCustomizedChEntertainmentResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getWsCustomizedChEntertainmentWithOptions(request: GetWsCustomizedChEntertainmentRequest, runtime: Util.RuntimeOptions): GetWsCustomizedChEntertainmentResponse {
  Util.validateModel(request);
  return doRequest('GetWsCustomizedChEntertainment', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWsCustomizedChEntertainment(request: GetWsCustomizedChEntertainmentRequest): GetWsCustomizedChEntertainmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedChEntertainmentWithOptions(request, runtime);
}

model GetWsCustomizedChEcomCommentRequest = {
  tokenizerId?: string(name='TokenizerId'),
  text: string(name='Text'),
  outType?: string(name='OutType'),
  serviceCode: string(name='ServiceCode'),
}

model GetWsCustomizedChEcomCommentResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getWsCustomizedChEcomCommentWithOptions(request: GetWsCustomizedChEcomCommentRequest, runtime: Util.RuntimeOptions): GetWsCustomizedChEcomCommentResponse {
  Util.validateModel(request);
  return doRequest('GetWsCustomizedChEcomComment', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWsCustomizedChEcomComment(request: GetWsCustomizedChEcomCommentRequest): GetWsCustomizedChEcomCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedChEcomCommentWithOptions(request, runtime);
}

model GetWsCustomizedChO2ORequest = {
  tokenizerId?: string(name='TokenizerId'),
  text: string(name='Text'),
  outType?: string(name='OutType'),
  serviceCode: string(name='ServiceCode'),
}

model GetWsCustomizedChO2OResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getWsCustomizedChO2OWithOptions(request: GetWsCustomizedChO2ORequest, runtime: Util.RuntimeOptions): GetWsCustomizedChO2OResponse {
  Util.validateModel(request);
  return doRequest('GetWsCustomizedChO2O', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWsCustomizedChO2O(request: GetWsCustomizedChO2ORequest): GetWsCustomizedChO2OResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedChO2OWithOptions(request, runtime);
}

model GetNerChMedicalRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
}

model GetNerChMedicalResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getNerChMedicalWithOptions(request: GetNerChMedicalRequest, runtime: Util.RuntimeOptions): GetNerChMedicalResponse {
  Util.validateModel(request);
  return doRequest('GetNerChMedical', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getNerChMedical(request: GetNerChMedicalRequest): GetNerChMedicalResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNerChMedicalWithOptions(request, runtime);
}

model GetNerCustomizedChEcomRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  lexerId?: string(name='LexerId'),
}

model GetNerCustomizedChEcomResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getNerCustomizedChEcomWithOptions(request: GetNerCustomizedChEcomRequest, runtime: Util.RuntimeOptions): GetNerCustomizedChEcomResponse {
  Util.validateModel(request);
  return doRequest('GetNerCustomizedChEcom', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getNerCustomizedChEcom(request: GetNerCustomizedChEcomRequest): GetNerCustomizedChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNerCustomizedChEcomWithOptions(request, runtime);
}

model GetWsCustomizedChGeneralRequest = {
  tokenizerId?: string(name='TokenizerId'),
  text: string(name='Text'),
  outType?: string(name='OutType'),
  serviceCode: string(name='ServiceCode'),
}

model GetWsCustomizedChGeneralResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getWsCustomizedChGeneralWithOptions(request: GetWsCustomizedChGeneralRequest, runtime: Util.RuntimeOptions): GetWsCustomizedChGeneralResponse {
  Util.validateModel(request);
  return doRequest('GetWsCustomizedChGeneral', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWsCustomizedChGeneral(request: GetWsCustomizedChGeneralRequest): GetWsCustomizedChGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedChGeneralWithOptions(request, runtime);
}

model GetSummaryChEcomRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
}

model GetSummaryChEcomResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getSummaryChEcomWithOptions(request: GetSummaryChEcomRequest, runtime: Util.RuntimeOptions): GetSummaryChEcomResponse {
  Util.validateModel(request);
  return doRequest('GetSummaryChEcom', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getSummaryChEcom(request: GetSummaryChEcomRequest): GetSummaryChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSummaryChEcomWithOptions(request, runtime);
}

model GetDpChEcomRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
}

model GetDpChEcomResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getDpChEcomWithOptions(request: GetDpChEcomRequest, runtime: Util.RuntimeOptions): GetDpChEcomResponse {
  Util.validateModel(request);
  return doRequest('GetDpChEcom', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getDpChEcom(request: GetDpChEcomRequest): GetDpChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDpChEcomWithOptions(request, runtime);
}

model GetWsCustomizedSeaGeneralRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  language: string(name='Language'),
}

model GetWsCustomizedSeaGeneralResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getWsCustomizedSeaGeneralWithOptions(request: GetWsCustomizedSeaGeneralRequest, runtime: Util.RuntimeOptions): GetWsCustomizedSeaGeneralResponse {
  Util.validateModel(request);
  return doRequest('GetWsCustomizedSeaGeneral', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWsCustomizedSeaGeneral(request: GetWsCustomizedSeaGeneralRequest): GetWsCustomizedSeaGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedSeaGeneralWithOptions(request, runtime);
}

model GetWeChEcomRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  size?: string(name='Size'),
  type?: string(name='Type'),
  operation?: string(name='Operation'),
  tokenizerId: string(name='TokenizerId'),
}

model GetWeChEcomResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getWeChEcomWithOptions(request: GetWeChEcomRequest, runtime: Util.RuntimeOptions): GetWeChEcomResponse {
  Util.validateModel(request);
  return doRequest('GetWeChEcom', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWeChEcom(request: GetWeChEcomRequest): GetWeChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWeChEcomWithOptions(request, runtime);
}

model GetTsChEcomRequest = {
  serviceCode: string(name='ServiceCode'),
  originQ: string(name='OriginQ'),
  originT: string(name='OriginT'),
  type: string(name='Type'),
}

model GetTsChEcomResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getTsChEcomWithOptions(request: GetTsChEcomRequest, runtime: Util.RuntimeOptions): GetTsChEcomResponse {
  Util.validateModel(request);
  return doRequest('GetTsChEcom', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getTsChEcom(request: GetTsChEcomRequest): GetTsChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTsChEcomWithOptions(request, runtime);
}

model GetEcChGeneralRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
}

model GetEcChGeneralResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getEcChGeneralWithOptions(request: GetEcChGeneralRequest, runtime: Util.RuntimeOptions): GetEcChGeneralResponse {
  Util.validateModel(request);
  return doRequest('GetEcChGeneral', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getEcChGeneral(request: GetEcChGeneralRequest): GetEcChGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEcChGeneralWithOptions(request, runtime);
}

model GetPosChEcomRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  tokenizerId?: string(name='TokenizerId'),
  outType?: string(name='OutType'),
}

model GetPosChEcomResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getPosChEcomWithOptions(request: GetPosChEcomRequest, runtime: Util.RuntimeOptions): GetPosChEcomResponse {
  Util.validateModel(request);
  return doRequest('GetPosChEcom', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getPosChEcom(request: GetPosChEcomRequest): GetPosChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPosChEcomWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
