import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('mhub', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model ListAppsByOwnerRequest = {
  osType?: integer(name='OsType'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  appName?: string(name='AppName'),
}

model ListAppsByOwnerResponse = {
  requestId: string(name='RequestId'),
  total: integer(name='Total'),
  ubsmsStatus: string(name='UbsmsStatus'),
  appInfos: {
    appInfo: [
      {
        appKey: string(name='AppKey'),
        name: string(name='Name'),
        type: integer(name='Type'),
        readonly: boolean(name='Readonly'),
        bundleId: string(name='BundleId'),
        packageName: string(name='PackageName'),
      }
    ](name='AppInfo'),
  }(name='AppInfos'),
}

async function listAppsByOwnerWithOptions(request: ListAppsByOwnerRequest, runtime: Util.RuntimeOptions): ListAppsByOwnerResponse {
  Util.validateModel(request);
  return doRequest('ListAppsByOwner', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function listAppsByOwner(request: ListAppsByOwnerRequest): ListAppsByOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppsByOwnerWithOptions(request, runtime);
}

model QueryUserServiceInfoRequest = {
  productId?: string(name='ProductId'),
  appKey?: string(name='AppKey'),
  service: string(name='Service'),
}

model QueryUserServiceInfoResponse = {
  requestId: string(name='RequestId'),
  success: string(name='Success'),
}

async function queryUserServiceInfoWithOptions(request: QueryUserServiceInfoRequest, runtime: Util.RuntimeOptions): QueryUserServiceInfoResponse {
  Util.validateModel(request);
  return doRequest('QueryUserServiceInfo', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function queryUserServiceInfo(request: QueryUserServiceInfoRequest): QueryUserServiceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUserServiceInfoWithOptions(request, runtime);
}

model UpdateUserServiceInfoRequest = {
  service: string(name='Service'),
  appKey?: string(name='AppKey'),
  productId?: string(name='ProductId'),
}

model UpdateUserServiceInfoResponse = {
  requestId: string(name='RequestId'),
  success: string(name='Success'),
}

async function updateUserServiceInfoWithOptions(request: UpdateUserServiceInfoRequest, runtime: Util.RuntimeOptions): UpdateUserServiceInfoResponse {
  Util.validateModel(request);
  return doRequest('UpdateUserServiceInfo', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function updateUserServiceInfo(request: UpdateUserServiceInfoRequest): UpdateUserServiceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserServiceInfoWithOptions(request, runtime);
}

model ListUserServiceInfosRequest = {
}

model ListUserServiceInfosResponse = {
  requestId: string(name='RequestId'),
  ubsmsStatus: string(name='UbsmsStatus'),
  serviceInfos: [
    {
      appKey: string(name='AppKey'),
      service: string(name='Service'),
      productId: string(name='ProductId'),
      modifyTime: string(name='ModifyTime'),
      productName: string(name='ProductName'),
      appName: string(name='AppName'),
      appType: integer(name='AppType'),
    }
  ](name='ServiceInfos'),
}

async function listUserServiceInfosWithOptions(request: ListUserServiceInfosRequest, runtime: Util.RuntimeOptions): ListUserServiceInfosResponse {
  Util.validateModel(request);
  return doRequest('ListUserServiceInfos', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function listUserServiceInfos(request: ListUserServiceInfosRequest): ListUserServiceInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserServiceInfosWithOptions(request, runtime);
}

model SpiPhysicalDeleteResourceRequest = {
  interrupt?: boolean(name='Interrupt'),
  invoker: string(name='Invoker'),
  pk: string(name='Pk'),
  bid: string(name='Bid'),
  hid: long(name='Hid'),
  country: string(name='Country'),
  taskIdentifier: string(name='TaskIdentifier'),
  taskExtraData: string(name='TaskExtraData'),
  gmtWakeup: string(name='GmtWakeup'),
  success?: boolean(name='Success'),
  message?: string(name='Message'),
}

model SpiPhysicalDeleteResourceResponse = {
  interrupt: boolean(name='Interrupt'),
  invoker: string(name='Invoker'),
  pk: string(name='Pk'),
  bid: string(name='Bid'),
  hid: long(name='Hid'),
  country: string(name='Country'),
  taskIdentifier: string(name='TaskIdentifier'),
  taskExtraData: string(name='TaskExtraData'),
  gmtWakeup: string(name='GmtWakeup'),
  success: boolean(name='Success'),
  message: string(name='Message'),
}

async function spiPhysicalDeleteResourceWithOptions(request: SpiPhysicalDeleteResourceRequest, runtime: Util.RuntimeOptions): SpiPhysicalDeleteResourceResponse {
  Util.validateModel(request);
  return doRequest('SpiPhysicalDeleteResource', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function spiPhysicalDeleteResource(request: SpiPhysicalDeleteResourceRequest): SpiPhysicalDeleteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return spiPhysicalDeleteResourceWithOptions(request, runtime);
}

model SpiLogicalDeleteResourceRequest = {
  interrupt?: boolean(name='Interrupt'),
  invoker: string(name='Invoker'),
  pk: string(name='Pk'),
  bid: string(name='Bid'),
  hid: long(name='Hid'),
  country: string(name='Country'),
  taskIdentifier: string(name='TaskIdentifier'),
  taskExtraData: string(name='TaskExtraData'),
  gmtWakeup: string(name='GmtWakeup'),
  success?: boolean(name='Success'),
  message?: string(name='Message'),
}

model SpiLogicalDeleteResourceResponse = {
  interrupt: boolean(name='Interrupt'),
  invoker: string(name='Invoker'),
  pk: string(name='Pk'),
  bid: string(name='Bid'),
  hid: long(name='Hid'),
  country: string(name='Country'),
  taskIdentifier: string(name='TaskIdentifier'),
  taskExtraData: string(name='TaskExtraData'),
  gmtWakeup: string(name='GmtWakeup'),
  success: boolean(name='Success'),
  message: string(name='Message'),
}

async function spiLogicalDeleteResourceWithOptions(request: SpiLogicalDeleteResourceRequest, runtime: Util.RuntimeOptions): SpiLogicalDeleteResourceResponse {
  Util.validateModel(request);
  return doRequest('SpiLogicalDeleteResource', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function spiLogicalDeleteResource(request: SpiLogicalDeleteResourceRequest): SpiLogicalDeleteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return spiLogicalDeleteResourceWithOptions(request, runtime);
}

model SpiCheckResourceRequest = {
  interrupt?: boolean(name='Interrupt'),
  invoker: string(name='Invoker'),
  pk: string(name='Pk'),
  bid: string(name='Bid'),
  hid: long(name='Hid'),
  country: string(name='Country'),
  taskIdentifier: string(name='TaskIdentifier'),
  taskExtraData: string(name='TaskExtraData'),
  gmtWakeup: string(name='GmtWakeup'),
  success?: boolean(name='Success'),
  message?: string(name='Message'),
  level?: long(name='Level'),
  url?: string(name='Url'),
  prompt?: string(name='Prompt'),
}

model SpiCheckResourceResponse = {
  interrupt: boolean(name='Interrupt'),
  invoker: string(name='Invoker'),
  pk: string(name='Pk'),
  bid: string(name='Bid'),
  hid: long(name='Hid'),
  country: string(name='Country'),
  taskIdentifier: string(name='TaskIdentifier'),
  taskExtraData: string(name='TaskExtraData'),
  gmtWakeup: string(name='GmtWakeup'),
  success: boolean(name='Success'),
  message: string(name='Message'),
  level: long(name='Level'),
  url: string(name='Url'),
  prompt: string(name='Prompt'),
}

async function spiCheckResourceWithOptions(request: SpiCheckResourceRequest, runtime: Util.RuntimeOptions): SpiCheckResourceResponse {
  Util.validateModel(request);
  return doRequest('SpiCheckResource', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function spiCheckResource(request: SpiCheckResourceRequest): SpiCheckResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return spiCheckResourceWithOptions(request, runtime);
}

model BuildSDKConfigRequest = {
  appKey: string(name='AppKey'),
  osType?: string(name='OsType'),
}

model BuildSDKConfigResponse = {
  requestId: string(name='RequestId'),
  content: string(name='Content'),
}

async function buildSDKConfigWithOptions(request: BuildSDKConfigRequest, runtime: Util.RuntimeOptions): BuildSDKConfigResponse {
  Util.validateModel(request);
  return doRequest('BuildSDKConfig', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function buildSDKConfig(request: BuildSDKConfigRequest): BuildSDKConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return buildSDKConfigWithOptions(request, runtime);
}

model TestFlightRequest = {
  appKey: long(name='AppKey'),
  mode: string(name='Mode'),
  deviceToken: string(name='DeviceToken'),
  bundleId: string(name='BundleId'),
  encodedCert?: string(name='EncodedCert'),
  password?: string(name='Password'),
}

model TestFlightResponse = {
  requestId: string(name='RequestId'),
  success: string(name='Success'),
  message: string(name='Message'),
}

async function testFlightWithOptions(request: TestFlightRequest, runtime: Util.RuntimeOptions): TestFlightResponse {
  Util.validateModel(request);
  return doRequest('TestFlight', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function testFlight(request: TestFlightRequest): TestFlightResponse {
  var runtime = new Util.RuntimeOptions{};
  return testFlightWithOptions(request, runtime);
}

model VerifyCertRequest = {
  appKey: long(name='AppKey'),
  certMode: string(name='CertMode'),
  encodedCert: string(name='EncodedCert'),
  password: string(name='Password'),
  bundleId: string(name='BundleId'),
  isCommit: boolean(name='IsCommit'),
}

model VerifyCertResponse = {
  requestId: string(name='RequestId'),
  parseMessage: string(name='ParseMessage'),
  certInfo: {
    appName: string(name='AppName'),
    certType: string(name='CertType'),
    certMode: string(name='CertMode'),
    expirationDate: string(name='ExpirationDate'),
    generateDate: string(name='GenerateDate'),
  }(name='CertInfo'),
}

async function verifyCertWithOptions(request: VerifyCertRequest, runtime: Util.RuntimeOptions): VerifyCertResponse {
  Util.validateModel(request);
  return doRequest('VerifyCert', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function verifyCert(request: VerifyCertRequest): VerifyCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyCertWithOptions(request, runtime);
}

model QueryVersionInfosRequest = {
  productID: string(name='ProductID'),
  OS: string(name='OS'),
}

model QueryVersionInfosResponse = {
  requestId: string(name='RequestId'),
  versionInfos: {
    versionInfo: [
      {
        OS: string(name='OS'),
        version: string(name='Version'),
        productID: string(name='ProductID'),
        createTime: string(name='CreateTime'),
        content: string(name='Content'),
      }
    ](name='VersionInfo'),
  }(name='VersionInfos'),
}

async function queryVersionInfosWithOptions(request: QueryVersionInfosRequest, runtime: Util.RuntimeOptions): QueryVersionInfosResponse {
  Util.validateModel(request);
  return doRequest('QueryVersionInfos', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function queryVersionInfos(request: QueryVersionInfosRequest): QueryVersionInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryVersionInfosWithOptions(request, runtime);
}

model QueryUserNoticeStatusRequest = {
}

model QueryUserNoticeStatusResponse = {
  requestId: string(name='RequestId'),
  status: boolean(name='Status'),
}

async function queryUserNoticeStatusWithOptions(request: QueryUserNoticeStatusRequest, runtime: Util.RuntimeOptions): QueryUserNoticeStatusResponse {
  Util.validateModel(request);
  return doRequest('QueryUserNoticeStatus', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function queryUserNoticeStatus(request: QueryUserNoticeStatusRequest): QueryUserNoticeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUserNoticeStatusWithOptions(request, runtime);
}

model QueryPackInfoRequest = {
  taskId: string(name='TaskId'),
}

model QueryPackInfoResponse = {
  requestId: string(name='RequestId'),
  packInfo: {
    OS: string(name='OS'),
    status: integer(name='Status'),
    taskId: string(name='TaskId'),
    createTime: string(name='CreateTime'),
    info: string(name='Info'),
  }(name='PackInfo'),
}

async function queryPackInfoWithOptions(request: QueryPackInfoRequest, runtime: Util.RuntimeOptions): QueryPackInfoResponse {
  Util.validateModel(request);
  return doRequest('QueryPackInfo', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function queryPackInfo(request: QueryPackInfoRequest): QueryPackInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPackInfoWithOptions(request, runtime);
}

model QueryPackHistoriesRequest = {
}

model QueryPackHistoriesResponse = {
  requestId: string(name='RequestId'),
  packInfos: {
    packInfo: [
      {
        OS: string(name='OS'),
        status: integer(name='Status'),
        taskId: string(name='TaskId'),
        createTime: string(name='CreateTime'),
        info: string(name='Info'),
      }
    ](name='PackInfo'),
  }(name='PackInfos'),
}

async function queryPackHistoriesWithOptions(request: QueryPackHistoriesRequest, runtime: Util.RuntimeOptions): QueryPackHistoriesResponse {
  Util.validateModel(request);
  return doRequest('QueryPackHistories', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function queryPackHistories(request: QueryPackHistoriesRequest): QueryPackHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPackHistoriesWithOptions(request, runtime);
}

model QueryLastestVersionInfoRequest = {
  productID: string(name='ProductID'),
}

model QueryLastestVersionInfoResponse = {
  requestId: string(name='RequestId'),
  versionInfos: {
    versionInfo: [
      {
        OS: string(name='OS'),
        version: string(name='Version'),
        productID: string(name='ProductID'),
        createTime: string(name='CreateTime'),
        content: string(name='Content'),
      }
    ](name='VersionInfo'),
  }(name='VersionInfos'),
}

async function queryLastestVersionInfoWithOptions(request: QueryLastestVersionInfoRequest, runtime: Util.RuntimeOptions): QueryLastestVersionInfoResponse {
  Util.validateModel(request);
  return doRequest('QueryLastestVersionInfo', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function queryLastestVersionInfo(request: QueryLastestVersionInfoRequest): QueryLastestVersionInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryLastestVersionInfoWithOptions(request, runtime);
}

model PackSDKRequest = {
  productID: string(name='ProductID'),
  OS: string(name='OS'),
}

model PackSDKResponse = {
  requestId: string(name='RequestId'),
  taskId: string(name='TaskId'),
}

async function packSDKWithOptions(request: PackSDKRequest, runtime: Util.RuntimeOptions): PackSDKResponse {
  Util.validateModel(request);
  return doRequest('PackSDK', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function packSDK(request: PackSDKRequest): PackSDKResponse {
  var runtime = new Util.RuntimeOptions{};
  return packSDKWithOptions(request, runtime);
}

model DownloadPackageRequest = {
  taskId: string(name='TaskId'),
}

model DownloadPackageResponse = {
  requestId: string(name='RequestId'),
  url: string(name='Url'),
}

async function downloadPackageWithOptions(request: DownloadPackageRequest, runtime: Util.RuntimeOptions): DownloadPackageResponse {
  Util.validateModel(request);
  return doRequest('DownloadPackage', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function downloadPackage(request: DownloadPackageRequest): DownloadPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadPackageWithOptions(request, runtime);
}

model QueryProductInfoRequest = {
  productId: string(name='ProductId'),
}

model QueryProductInfoResponse = {
  requestId: string(name='RequestId'),
  productInfo: {
    name: string(name='Name'),
    industryId: integer(name='IndustryId'),
    encodedIcon: string(name='EncodedIcon'),
    iconName: string(name='IconName'),
    readonly: boolean(name='Readonly'),
  }(name='ProductInfo'),
}

async function queryProductInfoWithOptions(request: QueryProductInfoRequest, runtime: Util.RuntimeOptions): QueryProductInfoResponse {
  Util.validateModel(request);
  return doRequest('QueryProductInfo', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function queryProductInfo(request: QueryProductInfoRequest): QueryProductInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductInfoWithOptions(request, runtime);
}

model QueryAppSecurityInfoRequest = {
  appKey: string(name='AppKey'),
}

model QueryAppSecurityInfoResponse = {
  requestId: string(name='RequestId'),
  appSecurityInfo: {
    appKey: string(name='AppKey'),
    appSecret: string(name='AppSecret'),
  }(name='AppSecurityInfo'),
}

async function queryAppSecurityInfoWithOptions(request: QueryAppSecurityInfoRequest, runtime: Util.RuntimeOptions): QueryAppSecurityInfoResponse {
  Util.validateModel(request);
  return doRequest('QueryAppSecurityInfo', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function queryAppSecurityInfo(request: QueryAppSecurityInfoRequest): QueryAppSecurityInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppSecurityInfoWithOptions(request, runtime);
}

model QueryAppInfoRequest = {
  appKey: string(name='AppKey'),
}

model QueryAppInfoResponse = {
  requestId: string(name='RequestId'),
  appInfo: {
    appKey: string(name='AppKey'),
    appName: string(name='AppName'),
    type: integer(name='Type'),
    readonly: boolean(name='Readonly'),
    bundleId: string(name='BundleId'),
    packageName: string(name='PackageName'),
    certDevelopAvail: boolean(name='CertDevelopAvail'),
    certDevelopExpiration: string(name='CertDevelopExpiration'),
    certProductAvail: boolean(name='CertProductAvail'),
    certProductExpiration: string(name='CertProductExpiration'),
  }(name='AppInfo'),
}

async function queryAppInfoWithOptions(request: QueryAppInfoRequest, runtime: Util.RuntimeOptions): QueryAppInfoResponse {
  Util.validateModel(request);
  return doRequest('QueryAppInfo', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function queryAppInfo(request: QueryAppInfoRequest): QueryAppInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppInfoWithOptions(request, runtime);
}

model ModifyProductRequest = {
  productId: string(name='ProductId'),
  name: string(name='Name'),
  industryId?: integer(name='IndustryId'),
  encodedIcon?: string(name='EncodedIcon'),
  iconName?: string(name='IconName'),
  removeIcon?: boolean(name='RemoveIcon'),
}

model ModifyProductResponse = {
  requestId: string(name='RequestId'),
}

async function modifyProductWithOptions(request: ModifyProductRequest, runtime: Util.RuntimeOptions): ModifyProductResponse {
  Util.validateModel(request);
  return doRequest('ModifyProduct', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function modifyProduct(request: ModifyProductRequest): ModifyProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProductWithOptions(request, runtime);
}

model ModifyAppRequest = {
  appKey: string(name='AppKey'),
  name?: string(name='Name'),
  industryId?: integer(name='IndustryId'),
  bundleId?: string(name='BundleId'),
  packageName?: string(name='PackageName'),
}

model ModifyAppResponse = {
  requestId: string(name='RequestId'),
}

async function modifyAppWithOptions(request: ModifyAppRequest, runtime: Util.RuntimeOptions): ModifyAppResponse {
  Util.validateModel(request);
  return doRequest('ModifyApp', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppWithOptions(request, runtime);
}

model ListProductsRequest = {
  offset?: integer(name='Offset'),
  size?: integer(name='Size'),
  simple?: boolean(name='Simple'),
}

model ListProductsResponse = {
  requestId: string(name='RequestId'),
  total: integer(name='Total'),
  ubsmsStatus: string(name='UbsmsStatus'),
  productInfos: {
    productInfo: [
      {
        productId: string(name='ProductId'),
        name: string(name='Name'),
        encodedIcon: string(name='EncodedIcon'),
        platforms: string(name='Platforms'),
        readonly: boolean(name='Readonly'),
        industryId: integer(name='IndustryId'),
      }
    ](name='ProductInfo'),
  }(name='ProductInfos'),
}

async function listProductsWithOptions(request: ListProductsRequest, runtime: Util.RuntimeOptions): ListProductsResponse {
  Util.validateModel(request);
  return doRequest('ListProducts', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function listProducts(request: ListProductsRequest): ListProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductsWithOptions(request, runtime);
}

model ListAppsRequest = {
  productId: string(name='ProductId'),
  page?: string(name='Page'),
  pageSize?: string(name='PageSize'),
}

model ListAppsResponse = {
  requestId: string(name='RequestId'),
  total: integer(name='Total'),
  ubsmsStatus: string(name='UbsmsStatus'),
  appInfos: {
    appInfo: [
      {
        appKey: string(name='AppKey'),
        name: string(name='Name'),
        type: integer(name='Type'),
        readonly: boolean(name='Readonly'),
        bundleId: string(name='BundleId'),
        packageName: string(name='PackageName'),
      }
    ](name='AppInfo'),
  }(name='AppInfos'),
}

async function listAppsWithOptions(request: ListAppsRequest, runtime: Util.RuntimeOptions): ListAppsResponse {
  Util.validateModel(request);
  return doRequest('ListApps', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppsWithOptions(request, runtime);
}

model DeleteProductRequest = {
  productId: string(name='ProductId'),
}

model DeleteProductResponse = {
  requestId: string(name='RequestId'),
  message: string(name='Message'),
}

async function deleteProductWithOptions(request: DeleteProductRequest, runtime: Util.RuntimeOptions): DeleteProductResponse {
  Util.validateModel(request);
  return doRequest('DeleteProduct', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductWithOptions(request, runtime);
}

model DeleteAppRequest = {
  appKey: string(name='AppKey'),
}

model DeleteAppResponse = {
  requestId: string(name='RequestId'),
}

async function deleteAppWithOptions(request: DeleteAppRequest, runtime: Util.RuntimeOptions): DeleteAppResponse {
  Util.validateModel(request);
  return doRequest('DeleteApp', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppWithOptions(request, runtime);
}

model CreateProductRequest = {
  name: string(name='Name'),
  industryId?: integer(name='IndustryId'),
  iconName?: string(name='IconName'),
  encodedIcon?: string(name='EncodedIcon'),
}

model CreateProductResponse = {
  requestId: string(name='RequestId'),
}

async function createProductWithOptions(request: CreateProductRequest, runtime: Util.RuntimeOptions): CreateProductResponse {
  Util.validateModel(request);
  return doRequest('CreateProduct', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function createProduct(request: CreateProductRequest): CreateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductWithOptions(request, runtime);
}

model CreateAppRequest = {
  productId: string(name='ProductId'),
  name: string(name='Name'),
  type?: integer(name='Type'),
  bundleId?: string(name='BundleId'),
  packageName?: string(name='PackageName'),
}

model CreateAppResponse = {
  requestId: string(name='RequestId'),
  appInfo: {
    productId: string(name='ProductId'),
    appKey: string(name='AppKey'),
    name: string(name='Name'),
    type: integer(name='Type'),
    bundleId: string(name='BundleId'),
    packageName: string(name='PackageName'),
    description: string(name='Description'),
    createTime: string(name='CreateTime'),
    modifyTime: string(name='ModifyTime'),
  }(name='AppInfo'),
}

async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  return doRequest('CreateApp', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
