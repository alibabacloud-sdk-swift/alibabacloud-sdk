import Util;
import RPCUtil;
import RPC;
import EndpointUtil;
import OSS;
import OpenPlatform;
import OSSUtil;
import FileForm;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'mt.cn-hangzhou.aliyuncs.com',
    ap-northeast-1 = 'mt.aliyuncs.com',
    ap-northeast-2-pop = 'mt.aliyuncs.com',
    ap-south-1 = 'mt.aliyuncs.com',
    ap-southeast-1 = 'mt.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'mt.aliyuncs.com',
    ap-southeast-3 = 'mt.aliyuncs.com',
    ap-southeast-5 = 'mt.aliyuncs.com',
    cn-beijing = 'mt.aliyuncs.com',
    cn-beijing-finance-1 = 'mt.aliyuncs.com',
    cn-beijing-finance-pop = 'mt.aliyuncs.com',
    cn-beijing-gov-1 = 'mt.aliyuncs.com',
    cn-beijing-nu16-b01 = 'mt.aliyuncs.com',
    cn-chengdu = 'mt.aliyuncs.com',
    cn-edge-1 = 'mt.aliyuncs.com',
    cn-fujian = 'mt.aliyuncs.com',
    cn-haidian-cm12-c01 = 'mt.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'mt.aliyuncs.com',
    cn-hangzhou-finance = 'mt.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'mt.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'mt.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'mt.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'mt.aliyuncs.com',
    cn-hangzhou-test-306 = 'mt.aliyuncs.com',
    cn-hongkong = 'mt.aliyuncs.com',
    cn-hongkong-finance-pop = 'mt.aliyuncs.com',
    cn-huhehaote = 'mt.aliyuncs.com',
    cn-north-2-gov-1 = 'mt.aliyuncs.com',
    cn-qingdao = 'mt.aliyuncs.com',
    cn-qingdao-nebula = 'mt.aliyuncs.com',
    cn-shanghai = 'mt.aliyuncs.com',
    cn-shanghai-et15-b01 = 'mt.aliyuncs.com',
    cn-shanghai-et2-b01 = 'mt.aliyuncs.com',
    cn-shanghai-finance-1 = 'mt.aliyuncs.com',
    cn-shanghai-inner = 'mt.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'mt.aliyuncs.com',
    cn-shenzhen = 'mt.aliyuncs.com',
    cn-shenzhen-finance-1 = 'mt.aliyuncs.com',
    cn-shenzhen-inner = 'mt.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'mt.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'mt.aliyuncs.com',
    cn-wuhan = 'mt.aliyuncs.com',
    cn-yushanfang = 'mt.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'mt.aliyuncs.com',
    cn-zhangjiakou = 'mt.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'mt.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'mt.aliyuncs.com',
    eu-central-1 = 'mt.aliyuncs.com',
    eu-west-1 = 'mt.aliyuncs.com',
    eu-west-1-oxs = 'mt.aliyuncs.com',
    me-east-1 = 'mt.aliyuncs.com',
    rus-west-1-pop = 'mt.aliyuncs.com',
    us-east-1 = 'mt.aliyuncs.com',
    us-west-1 = 'mt.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('alimt', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model OpenAlimtServiceRequest = {
  ownerId?: long(name='OwnerId'),
  type?: string(name='Type'),
}

model OpenAlimtServiceResponse = {
  requestId: string(name='RequestId'),
  orderId: string(name='OrderId'),
}

async function openAlimtService(request: OpenAlimtServiceRequest, runtime: Util.RuntimeOptions): OpenAlimtServiceResponse {
  Util.validateModel(request);
  return doRequest('OpenAlimtService', 'HTTPS', 'POST', '2018-10-12', 'AK,APP,PrivateKey,BearerToken', null, request, runtime);
}

async function openAlimtServiceSimply(request: OpenAlimtServiceRequest): OpenAlimtServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openAlimtService(request, runtime);
}

model CreateImageTranslateTaskRequest = {
  urlList: string(name='UrlList'),
  sourceLanguage: string(name='SourceLanguage'),
  targetLanguage: string(name='TargetLanguage'),
  extra?: string(name='Extra'),
  clientToken?: string(name='ClientToken'),
}

model CreateImageTranslateTaskResponse = {
  requestId: string(name='RequestId'),
  code: integer(name='Code'),
  message: string(name='Message'),
  data: {
    taskId: string(name='TaskId'),
  }(name='Data'),
}

async function createImageTranslateTask(request: CreateImageTranslateTaskRequest, runtime: Util.RuntimeOptions): CreateImageTranslateTaskResponse {
  Util.validateModel(request);
  return doRequest('CreateImageTranslateTask', 'HTTPS', 'POST', '2018-10-12', 'AK', null, request, runtime);
}

async function createImageTranslateTaskSimply(request: CreateImageTranslateTaskRequest): CreateImageTranslateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageTranslateTask(request, runtime);
}

model GetImageTranslateTaskRequest = {
  taskId: string(name='TaskId'),
}

model GetImageTranslateTaskResponse = {
  requestId: string(name='RequestId'),
  code: integer(name='Code'),
  message: string(name='Message'),
  data: {
    imageData: string(name='ImageData'),
  }(name='Data'),
}

async function getImageTranslateTask(request: GetImageTranslateTaskRequest, runtime: Util.RuntimeOptions): GetImageTranslateTaskResponse {
  Util.validateModel(request);
  return doRequest('GetImageTranslateTask', 'HTTPS', 'POST', '2018-10-12', 'AK', null, request, runtime);
}

async function getImageTranslateTaskSimply(request: GetImageTranslateTaskRequest): GetImageTranslateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImageTranslateTask(request, runtime);
}

model GetTitleIntelligenceRequest = {
  platform: string(name='Platform'),
  extra?: string(name='Extra'),
  catLevelThreeId: long(name='CatLevelThreeId'),
  catLevelTwoId: long(name='CatLevelTwoId'),
  keywords?: string(name='Keywords'),
}

model GetTitleIntelligenceResponse = {
  requestId: string(name='RequestId'),
  code: integer(name='Code'),
  message: string(name='Message'),
  data: {
    titles: string(name='Titles'),
  }(name='Data'),
}

async function getTitleIntelligence(request: GetTitleIntelligenceRequest, runtime: Util.RuntimeOptions): GetTitleIntelligenceResponse {
  Util.validateModel(request);
  return doRequest('GetTitleIntelligence', 'HTTPS', 'POST', '2018-10-12', 'AK', null, request, runtime);
}

async function getTitleIntelligenceSimply(request: GetTitleIntelligenceRequest): GetTitleIntelligenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTitleIntelligence(request, runtime);
}

model GetTitleGenerateRequest = {
  title: string(name='Title'),
  language: string(name='Language'),
  platform: string(name='Platform'),
  categoryId: string(name='CategoryId'),
  hotWords?: string(name='HotWords'),
  attributes?: string(name='Attributes'),
  extra?: string(name='Extra'),
}

model GetTitleGenerateResponse = {
  requestId: string(name='RequestId'),
  code: integer(name='Code'),
  message: string(name='Message'),
  data: {
    titles: string(name='Titles'),
  }(name='Data'),
}

async function getTitleGenerate(request: GetTitleGenerateRequest, runtime: Util.RuntimeOptions): GetTitleGenerateResponse {
  Util.validateModel(request);
  return doRequest('GetTitleGenerate', 'HTTPS', 'POST', '2018-10-12', 'AK', null, request, runtime);
}

async function getTitleGenerateSimply(request: GetTitleGenerateRequest): GetTitleGenerateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTitleGenerate(request, runtime);
}

model GetTitleDiagnoseRequest = {
  title: string(name='Title'),
  language: string(name='Language'),
  platform: string(name='Platform'),
  categoryId: string(name='CategoryId'),
  extra?: string(name='Extra'),
}

model GetTitleDiagnoseResponse = {
  requestId: string(name='RequestId'),
  code: integer(name='Code'),
  message: string(name='Message'),
  data: {
    containCoreClasses: string(name='ContainCoreClasses'),
    overLengthLimit: string(name='OverLengthLimit'),
    wordSpelledCorrectError: string(name='WordSpelledCorrectError'),
    allUppercaseWords: string(name='AllUppercaseWords'),
    noFirstUppercaseList: string(name='NoFirstUppercaseList'),
    duplicateWords: string(name='DuplicateWords'),
    disableWords: string(name='DisableWords'),
    wordCount: string(name='WordCount'),
    totalScore: string(name='TotalScore'),
    languageQualityScore: string(name='LanguageQualityScore'),
  }(name='Data'),
}

async function getTitleDiagnose(request: GetTitleDiagnoseRequest, runtime: Util.RuntimeOptions): GetTitleDiagnoseResponse {
  Util.validateModel(request);
  return doRequest('GetTitleDiagnose', 'HTTPS', 'POST', '2018-10-12', 'AK', null, request, runtime);
}

async function getTitleDiagnoseSimply(request: GetTitleDiagnoseRequest): GetTitleDiagnoseResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTitleDiagnose(request, runtime);
}

model GetImageDiagnoseRequest = {
  url: string(name='Url'),
  extra?: string(name='Extra'),
}

model GetImageDiagnoseResponse = {
  requestId: string(name='RequestId'),
  code: integer(name='Code'),
  message: string(name='Message'),
  data: {
    language: string(name='Language'),
  }(name='Data'),
}

async function getImageDiagnose(request: GetImageDiagnoseRequest, runtime: Util.RuntimeOptions): GetImageDiagnoseResponse {
  Util.validateModel(request);
  return doRequest('GetImageDiagnose', 'HTTPS', 'POST', '2018-10-12', 'AK', null, request, runtime);
}

async function getImageDiagnoseSimply(request: GetImageDiagnoseRequest): GetImageDiagnoseResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImageDiagnose(request, runtime);
}

model GetImageTranslateRequest = {
  url: string(name='Url'),
  sourceLanguage: string(name='SourceLanguage'),
  targetLanguage: string(name='TargetLanguage'),
  extra?: string(name='Extra'),
}

model GetImageTranslateResponse = {
  requestId: string(name='RequestId'),
  code: integer(name='Code'),
  message: string(name='Message'),
  data: {
    url: string(name='Url'),
    orc: string(name='Orc'),
    pictureEditor: string(name='PictureEditor'),
  }(name='Data'),
}

async function getImageTranslate(request: GetImageTranslateRequest, runtime: Util.RuntimeOptions): GetImageTranslateResponse {
  Util.validateModel(request);
  return doRequest('GetImageTranslate', 'HTTPS', 'POST', '2018-10-12', 'AK', null, request, runtime);
}

async function getImageTranslateSimply(request: GetImageTranslateRequest): GetImageTranslateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImageTranslate(request, runtime);
}

model GetDetectLanguageRequest = {
  sourceText: string(name='SourceText'),
}

model GetDetectLanguageResponse = {
  requestId: string(name='RequestId'),
  detectedLanguage: string(name='DetectedLanguage'),
}

async function getDetectLanguage(request: GetDetectLanguageRequest, runtime: Util.RuntimeOptions): GetDetectLanguageResponse {
  Util.validateModel(request);
  return doRequest('GetDetectLanguage', 'HTTPS', 'POST', '2018-10-12', 'AK', null, request, runtime);
}

async function getDetectLanguageSimply(request: GetDetectLanguageRequest): GetDetectLanguageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDetectLanguage(request, runtime);
}

model TranslateCertificateRequest = {
  sourceLanguage: string(name='SourceLanguage'),
  targetLanguage: string(name='TargetLanguage'),
  imageUrl: string(name='ImageUrl'),
  certificateType: string(name='CertificateType'),
  resultType?: string(name='ResultType'),
}

model TranslateCertificateResponse = {
  requestId: string(name='RequestId'),
  data: {
    translatedValues: [
      {
        key: string(name='Key'),
        value: string(name='Value'),
        valueTranslation: string(name='ValueTranslation'),
        keyTranslation: string(name='KeyTranslation'),
      }
    ](name='TranslatedValues'),
  }(name='Data'),
}

async function translateCertificate(request: TranslateCertificateRequest, runtime: Util.RuntimeOptions): TranslateCertificateResponse {
  Util.validateModel(request);
  return doRequest('TranslateCertificate', 'HTTPS', 'POST', '2018-10-12', 'AK', null, request, runtime);
}

async function translateCertificateSimply(request: TranslateCertificateRequest): TranslateCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return translateCertificate(request, runtime);
}

model TranslateCertificateAdvanceRequest = {
  imageUrlObject: readable(name='ImageUrlObject'),
  sourceLanguage: string(name='SourceLanguage'),
  targetLanguage: string(name='TargetLanguage'),
  certificateType: string(name='CertificateType'),
  resultType?: string(name='ResultType'),
}

async function translateCertificateAdvance(request: TranslateCertificateAdvanceRequest, runtime: Util.RuntimeOptions): TranslateCertificateResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'alimt',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  var translateCertificateReq = new TranslateCertificateRequest{};
  RPCUtil.convert(request, translateCertificateReq);

  authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  ossConfig.accessKeyId = authResponse.accessKeyId;
  ossConfig.endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
  ossClient = new OSS(ossConfig);

  fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageUrlObject,
    contentType = '',
  };
  ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  ossClient.postObject(uploadRequest, ossRuntime);
  translateCertificateReq.imageUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var translateCertificateResp = translateCertificate(translateCertificateReq, runtime);
  return translateCertificateResp;
}

model TranslateRequest = {
  formatType: string(name='FormatType'),
  targetLanguage: string(name='TargetLanguage'),
  sourceLanguage: string(name='SourceLanguage'),
  sourceText: string(name='SourceText'),
  scene: string(name='Scene'),
}

model TranslateResponse = {
  requestId: string(name='RequestId'),
  code: integer(name='Code'),
  message: string(name='Message'),
  data: {
    translated: string(name='Translated'),
    wordCount: string(name='WordCount'),
  }(name='Data'),
}

async function translate(request: TranslateRequest, runtime: Util.RuntimeOptions): TranslateResponse {
  Util.validateModel(request);
  return doRequest('Translate', 'HTTPS', 'POST', '2018-10-12', 'AK', null, request, runtime);
}

async function translateSimply(request: TranslateRequest): TranslateResponse {
  var runtime = new Util.RuntimeOptions{};
  return translate(request, runtime);
}

model CreateDocTranslateTaskRequest = {
  sourceLanguage: string(name='SourceLanguage'),
  targetLanguage: string(name='TargetLanguage'),
  fileUrl: string(name='FileUrl'),
  scene?: string(name='Scene'),
  callbackUrl?: string(name='CallbackUrl'),
  clientToken?: string(name='ClientToken'),
}

model CreateDocTranslateTaskResponse = {
  requestId: string(name='RequestId'),
  taskId: string(name='TaskId'),
  status: string(name='Status'),
}

async function createDocTranslateTask(request: CreateDocTranslateTaskRequest, runtime: Util.RuntimeOptions): CreateDocTranslateTaskResponse {
  Util.validateModel(request);
  return doRequest('CreateDocTranslateTask', 'HTTPS', 'POST', '2018-10-12', 'AK', null, request, runtime);
}

async function createDocTranslateTaskSimply(request: CreateDocTranslateTaskRequest): CreateDocTranslateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDocTranslateTask(request, runtime);
}

model CreateDocTranslateTaskAdvanceRequest = {
  fileUrlObject: readable(name='FileUrlObject'),
  sourceLanguage: string(name='SourceLanguage'),
  targetLanguage: string(name='TargetLanguage'),
  scene?: string(name='Scene'),
  callbackUrl?: string(name='CallbackUrl'),
  clientToken?: string(name='ClientToken'),
}

async function createDocTranslateTaskAdvance(request: CreateDocTranslateTaskAdvanceRequest, runtime: Util.RuntimeOptions): CreateDocTranslateTaskResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'alimt',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  var createDocTranslateTaskReq = new CreateDocTranslateTaskRequest{};
  RPCUtil.convert(request, createDocTranslateTaskReq);

  authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  ossConfig.accessKeyId = authResponse.accessKeyId;
  ossConfig.endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
  ossClient = new OSS(ossConfig);

  fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.fileUrlObject,
    contentType = '',
  };
  ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  ossClient.postObject(uploadRequest, ossRuntime);
  createDocTranslateTaskReq.fileUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var createDocTranslateTaskResp = createDocTranslateTask(createDocTranslateTaskReq, runtime);
  return createDocTranslateTaskResp;
}

model GetDocTranslateTaskRequest = {
  taskId: string(name='TaskId'),
}

model GetDocTranslateTaskResponse = {
  requestId: string(name='RequestId'),
  taskId: string(name='TaskId'),
  status: string(name='Status'),
  translateFileUrl: string(name='TranslateFileUrl'),
  translateErrorCode: string(name='TranslateErrorCode'),
  translateErrorMessage: string(name='TranslateErrorMessage'),
  pageCount: integer(name='PageCount'),
}

async function getDocTranslateTask(request: GetDocTranslateTaskRequest, runtime: Util.RuntimeOptions): GetDocTranslateTaskResponse {
  Util.validateModel(request);
  return doRequest('GetDocTranslateTask', 'HTTPS', 'GET', '2018-10-12', 'AK', request, null, runtime);
}

async function getDocTranslateTaskSimply(request: GetDocTranslateTaskRequest): GetDocTranslateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDocTranslateTask(request, runtime);
}

model TranslateGeneralRequest = {
  formatType: string(name='FormatType'),
  sourceLanguage: string(name='SourceLanguage'),
  targetLanguage: string(name='TargetLanguage'),
  sourceText: string(name='SourceText'),
  scene?: string(name='Scene'),
}

model TranslateGeneralResponse = {
  requestId: string(name='RequestId'),
  code: integer(name='Code'),
  message: string(name='Message'),
  data: {
    translated: string(name='Translated'),
    wordCount: string(name='WordCount'),
  }(name='Data'),
}

async function translateGeneral(request: TranslateGeneralRequest, runtime: Util.RuntimeOptions): TranslateGeneralResponse {
  Util.validateModel(request);
  return doRequest('TranslateGeneral', 'HTTPS', 'POST', '2018-10-12', 'AK', null, request, runtime);
}

async function translateGeneralSimply(request: TranslateGeneralRequest): TranslateGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return translateGeneral(request, runtime);
}

model TranslateECommerceRequest = {
  formatType: string(name='FormatType'),
  targetLanguage: string(name='TargetLanguage'),
  sourceLanguage: string(name='SourceLanguage'),
  sourceText: string(name='SourceText'),
  scene: string(name='Scene'),
}

model TranslateECommerceResponse = {
  requestId: string(name='RequestId'),
  code: integer(name='Code'),
  message: string(name='Message'),
  data: {
    translated: string(name='Translated'),
    wordCount: string(name='WordCount'),
  }(name='Data'),
}

async function translateECommerce(request: TranslateECommerceRequest, runtime: Util.RuntimeOptions): TranslateECommerceResponse {
  Util.validateModel(request);
  return doRequest('TranslateECommerce', 'HTTPS', 'POST', '2018-10-12', 'AK', null, request, runtime);
}

async function translateECommerceSimply(request: TranslateECommerceRequest): TranslateECommerceResponse {
  var runtime = new Util.RuntimeOptions{};
  return translateECommerce(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
