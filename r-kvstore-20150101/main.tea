/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
@endpointMap = {
    cn-qingdao = 'r-kvstore.aliyuncs.com',
    cn-beijing = 'r-kvstore.aliyuncs.com',
    cn-hangzhou = 'r-kvstore.aliyuncs.com',
    cn-shanghai = 'r-kvstore.aliyuncs.com',
    cn-shenzhen = 'r-kvstore.aliyuncs.com',
    cn-heyuan = 'r-kvstore.aliyuncs.com',
    ap-southeast-1 = 'r-kvstore.aliyuncs.com',
    us-west-1 = 'r-kvstore.aliyuncs.com',
    us-east-1 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-finance = 'r-kvstore.aliyuncs.com',
    cn-shanghai-finance-1 = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-finance-1 = 'r-kvstore.aliyuncs.com',
    cn-north-2-gov-1 = 'r-kvstore.aliyuncs.com',
    ap-northeast-2-pop = 'r-kvstore.aliyuncs.com',
    cn-beijing-finance-1 = 'r-kvstore.aliyuncs.com',
    cn-beijing-finance-pop = 'r-kvstore.aliyuncs.com',
    cn-beijing-gov-1 = 'r-kvstore.aliyuncs.com',
    cn-beijing-nu16-b01 = 'r-kvstore.aliyuncs.com',
    cn-edge-1 = 'r-kvstore.aliyuncs.com',
    cn-fujian = 'r-kvstore.aliyuncs.com',
    cn-haidian-cm12-c01 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-test-306 = 'r-kvstore.aliyuncs.com',
    cn-hongkong-finance-pop = 'r-kvstore.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'r-kvstore.aliyuncs.com',
    cn-qingdao-nebula = 'r-kvstore.aliyuncs.com',
    cn-shanghai-et15-b01 = 'r-kvstore.aliyuncs.com',
    cn-shanghai-et2-b01 = 'r-kvstore.aliyuncs.com',
    cn-shanghai-inner = 'r-kvstore.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-inner = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'r-kvstore.aliyuncs.com',
    cn-wuhan = 'r-kvstore.aliyuncs.com',
    cn-wulanchabu = 'r-kvstore.aliyuncs.com',
    cn-yushanfang = 'r-kvstore.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'r-kvstore.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'r-kvstore.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'r-kvstore.aliyuncs.com',
    eu-west-1-oxs = 'r-kvstore.aliyuncs.com',
    rus-west-1-pop = 'r-kvstore.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('r-kvstore', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateCacheAnalysisTaskRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model CreateCacheAnalysisTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCacheAnalysisTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCacheAnalysisTaskResponseBody(name='body'),
}

async function createCacheAnalysisTaskWithOptions(request: CreateCacheAnalysisTaskRequest, runtime: Util.RuntimeOptions): CreateCacheAnalysisTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCacheAnalysisTask', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCacheAnalysisTask(request: CreateCacheAnalysisTaskRequest): CreateCacheAnalysisTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCacheAnalysisTaskWithOptions(request, runtime);
}

model DescribeDedicatedClusterInstanceListRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  instanceStatus?: int32(name='InstanceStatus'),
  instanceNetType?: string(name='InstanceNetType'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  clusterId?: string(name='ClusterId'),
  dedicatedHostName?: string(name='DedicatedHostName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDedicatedClusterInstanceListResponseBody = {
  instances?: [ 
    {
      vpcId?: string(name='VpcId'),
      characterType?: int32(name='CharacterType'),
      vswitchId?: string(name='VswitchId'),
      maintainStartTime?: string(name='MaintainStartTime'),
      instanceClass?: string(name='InstanceClass'),
      connectionDomain?: string(name='ConnectionDomain'),
      createTime?: string(name='CreateTime'),
      maintainEndTime?: string(name='MaintainEndTime'),
      storageType?: string(name='StorageType'),
      instanceNodeList?: [ 
        {
          nodeIp?: string(name='NodeIp'),
          dedicatedHostName?: string(name='DedicatedHostName'),
          nodeType?: string(name='NodeType'),
          zoneId?: string(name='ZoneId'),
          instanceId?: string(name='InstanceId'),
          port?: int32(name='Port'),
          role?: string(name='Role'),
          nodeId?: int32(name='NodeId'),
        }
      ](name='InstanceNodeList'),
      instanceId?: string(name='InstanceId'),
      engineVersion?: string(name='EngineVersion'),
      regionId?: string(name='RegionId'),
      instanceName?: string(name='InstanceName'),
      zoneId?: string(name='ZoneId'),
      clusterName?: string(name='ClusterName'),
      instanceStatus?: string(name='InstanceStatus'),
      engine?: string(name='Engine'),
      shardCount?: int32(name='ShardCount'),
      customId?: string(name='CustomId'),
      clusterId?: string(name='ClusterId'),
    }
  ](name='Instances'),
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeDedicatedClusterInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedClusterInstanceListResponseBody(name='body'),
}

async function describeDedicatedClusterInstanceListWithOptions(request: DescribeDedicatedClusterInstanceListRequest, runtime: Util.RuntimeOptions): DescribeDedicatedClusterInstanceListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedClusterInstanceList', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedClusterInstanceList(request: DescribeDedicatedClusterInstanceListRequest): DescribeDedicatedClusterInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedClusterInstanceListWithOptions(request, runtime);
}

model DescribeRoleZoneInfoRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  product?: string(name='Product'),
  category?: string(name='Category'),
  queryType?: int32(name='QueryType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeRoleZoneInfoResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  node?: {
    nodeInfo?: [ 
    {
      currentMinorVersion?: string(name='CurrentMinorVersion'),
      insType?: int32(name='InsType'),
      isLatestVersion?: int32(name='IsLatestVersion'),
      insName?: string(name='InsName'),
      nodeType?: string(name='NodeType'),
      zoneId?: string(name='ZoneId'),
      role?: string(name='Role'),
      custinsId?: string(name='CustinsId'),
      nodeId?: string(name='NodeId'),
    }
  ](name='NodeInfo')
  }(name='Node'),
}

model DescribeRoleZoneInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoleZoneInfoResponseBody(name='body'),
}

async function describeRoleZoneInfoWithOptions(request: DescribeRoleZoneInfoRequest, runtime: Util.RuntimeOptions): DescribeRoleZoneInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRoleZoneInfo', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRoleZoneInfo(request: DescribeRoleZoneInfoRequest): DescribeRoleZoneInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoleZoneInfoWithOptions(request, runtime);
}

