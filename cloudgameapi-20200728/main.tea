import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloudgameapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model QueryTenantRequest = {
  param?: string(name='Param'),
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
}

model QueryTenantResponse = {
  requestId: string(name='RequestId'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  totalCount: integer(name='TotalCount'),
  data: [
    {
      tenantId: long(name='TenantId'),
      name: string(name='Name'),
      gmtCreate: string(name='GmtCreate'),
    }
  ](name='Data'),
}

async function queryTenantWithOptions(request: QueryTenantRequest, runtime: Util.RuntimeOptions): QueryTenantResponse {
  Util.validateModel(request);
  return doRequest('QueryTenant', 'HTTPS', 'POST', '2020-07-28', 'AK', null, request, runtime);
}

async function queryTenant(request: QueryTenantRequest): QueryTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTenantWithOptions(request, runtime);
}

model QueryProjectRequest = {
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model QueryProjectResponse = {
  requestId: string(name='RequestId'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  totalCount: integer(name='TotalCount'),
  data: [
    {
      tenantId: long(name='TenantId'),
      name: string(name='Name'),
      id: long(name='Id'),
    }
  ](name='Data'),
}

async function queryProjectWithOptions(request: QueryProjectRequest, runtime: Util.RuntimeOptions): QueryProjectResponse {
  Util.validateModel(request);
  return doRequest('QueryProject', 'HTTPS', 'POST', '2020-07-28', 'AK', null, request, runtime);
}

async function queryProject(request: QueryProjectRequest): QueryProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProjectWithOptions(request, runtime);
}

model QueryGameRequest = {
  projectId?: long(name='ProjectId'),
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
  tenantId?: long(name='TenantId'),
}

model QueryGameResponse = {
  requestId: string(name='RequestId'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  totalCount: integer(name='TotalCount'),
  data: [
    {
      tenantId: long(name='TenantId'),
      name: string(name='Name'),
      gmtCreate: string(name='GmtCreate'),
      projectId: long(name='ProjectId'),
      gameId: long(name='GameId'),
      version: string(name='Version'),
    }
  ](name='Data'),
}

async function queryGameWithOptions(request: QueryGameRequest, runtime: Util.RuntimeOptions): QueryGameResponse {
  Util.validateModel(request);
  return doRequest('QueryGame', 'HTTPS', 'POST', '2020-07-28', 'AK', null, request, runtime);
}

async function queryGame(request: QueryGameRequest): QueryGameResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGameWithOptions(request, runtime);
}

model BatchStopGameSessionsRequest = {
  projectId: string(name='ProjectId'),
  gameId?: string(name='GameId'),
  token?: string(name='Token'),
  reason?: string(name='Reason'),
  trackInfo?: string(name='TrackInfo'),
}

model BatchStopGameSessionsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  queueState: integer(name='QueueState'),
  message: string(name='Message'),
  gameId: string(name='GameId'),
  projectId: string(name='ProjectId'),
  trackInfo: string(name='TrackInfo'),
}

async function batchStopGameSessionsWithOptions(request: BatchStopGameSessionsRequest, runtime: Util.RuntimeOptions): BatchStopGameSessionsResponse {
  Util.validateModel(request);
  return doRequest('BatchStopGameSessions', 'HTTPS', 'POST', '2020-07-28', 'AK', null, request, runtime);
}

async function batchStopGameSessions(request: BatchStopGameSessionsRequest): BatchStopGameSessionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStopGameSessionsWithOptions(request, runtime);
}

model GetStopGameTokenRequest = {
  gameId: string(name='GameId'),
  accessKey: string(name='AccessKey'),
}

model GetStopGameTokenResponse = {
  requestId: string(name='RequestId'),
  token: string(name='Token'),
  expireTime: long(name='ExpireTime'),
}

async function getStopGameTokenWithOptions(request: GetStopGameTokenRequest, runtime: Util.RuntimeOptions): GetStopGameTokenResponse {
  Util.validateModel(request);
  return doRequest('GetStopGameToken', 'HTTPS', 'POST', '2020-07-28', 'AK', null, request, runtime);
}

async function getStopGameToken(request: GetStopGameTokenRequest): GetStopGameTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStopGameTokenWithOptions(request, runtime);
}

model BatchDispatchGameSlotRequest = {
  queueUserList?: string(name='QueueUserList'),
}

model BatchDispatchGameSlotResponse = {
  requestId: string(name='RequestId'),
  queueResultList: [
    {
      gameId: string(name='GameId'),
      gameSession: string(name='GameSession'),
      message: string(name='Message'),
      queueCode: integer(name='QueueCode'),
      queueState: integer(name='QueueState'),
      regionName: string(name='RegionName'),
      userId: string(name='UserId'),
    }
  ](name='QueueResultList'),
}

async function batchDispatchGameSlotWithOptions(request: BatchDispatchGameSlotRequest, runtime: Util.RuntimeOptions): BatchDispatchGameSlotResponse {
  Util.validateModel(request);
  return doRequest('BatchDispatchGameSlot', 'HTTPS', 'POST', '2020-07-28', 'AK', null, request, runtime);
}

async function batchDispatchGameSlot(request: BatchDispatchGameSlotRequest): BatchDispatchGameSlotResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDispatchGameSlotWithOptions(request, runtime);
}

model StopGameSessionRequest = {
  gameId: string(name='GameId'),
  accessKey: string(name='AccessKey'),
  userId: string(name='UserId'),
  bizParam?: string(name='BizParam'),
  gameSession: string(name='GameSession'),
  reason?: string(name='Reason'),
}

model StopGameSessionResponse = {
  requestId: string(name='RequestId'),
  gameId: string(name='GameId'),
  gameSession: string(name='GameSession'),
  queueState: integer(name='QueueState'),
  queueCode: integer(name='QueueCode'),
  message: string(name='Message'),
  success: boolean(name='Success'),
}

async function stopGameSessionWithOptions(request: StopGameSessionRequest, runtime: Util.RuntimeOptions): StopGameSessionResponse {
  Util.validateModel(request);
  return doRequest('StopGameSession', 'HTTPS', 'POST', '2020-07-28', 'AK', null, request, runtime);
}

async function stopGameSession(request: StopGameSessionRequest): StopGameSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopGameSessionWithOptions(request, runtime);
}

model DispatchGameSlotRequest = {
  gameId: string(name='GameId'),
  accessKey: string(name='AccessKey'),
  regionName?: string(name='RegionName'),
  userId: string(name='UserId'),
  bizParam?: string(name='BizParam'),
  cancel?: boolean(name='Cancel'),
  gameSession?: string(name='GameSession'),
  gameStartParam?: string(name='GameStartParam'),
  gameCommand?: string(name='GameCommand'),
  systemInfo?: string(name='SystemInfo'),
}

model DispatchGameSlotResponse = {
  requestId: string(name='RequestId'),
  gameId: string(name='GameId'),
  gameSession: string(name='GameSession'),
  queueState: integer(name='QueueState'),
  queueCode: integer(name='QueueCode'),
  message: string(name='Message'),
  regionName: string(name='RegionName'),
  userId: string(name='UserId'),
}

async function dispatchGameSlotWithOptions(request: DispatchGameSlotRequest, runtime: Util.RuntimeOptions): DispatchGameSlotResponse {
  Util.validateModel(request);
  return doRequest('DispatchGameSlot', 'HTTPS', 'POST', '2020-07-28', 'AK', null, request, runtime);
}

async function dispatchGameSlot(request: DispatchGameSlotRequest): DispatchGameSlotResponse {
  var runtime = new Util.RuntimeOptions{};
  return dispatchGameSlotWithOptions(request, runtime);
}

model GetGameCcuRequest = {
  gameId: string(name='GameId'),
  regionName?: string(name='RegionName'),
  accessKey: string(name='AccessKey'),
}

model GetGameCcuResponse = {
  requestId: string(name='RequestId'),
  dataList: [
    {
      ccu: long(name='Ccu'),
      gameId: string(name='GameId'),
      regionId: string(name='RegionId'),
    }
  ](name='DataList'),
}

async function getGameCcuWithOptions(request: GetGameCcuRequest, runtime: Util.RuntimeOptions): GetGameCcuResponse {
  Util.validateModel(request);
  return doRequest('GetGameCcu', 'HTTPS', 'POST', '2020-07-28', 'AK', null, request, runtime);
}

async function getGameCcu(request: GetGameCcuRequest): GetGameCcuResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGameCcuWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
