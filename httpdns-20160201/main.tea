import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('httpdns', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model GetResolveCountSummaryRequest = {
  granularity: string(name='Granularity'),
  timeSpan: integer(name='TimeSpan'),
}

model GetResolveCountSummaryResponse = {
  requestId: string(name='RequestId'),
  resolveSummary: {
    http: long(name='Http'),
    https: long(name='Https'),
    http6: long(name='Http6'),
    https6: long(name='Https6'),
  }(name='ResolveSummary'),
}

async function getResolveCountSummaryWithOptions(request: GetResolveCountSummaryRequest, runtime: Util.RuntimeOptions): GetResolveCountSummaryResponse {
  Util.validateModel(request);
  return doRequest('GetResolveCountSummary', 'HTTPS', 'POST', '2016-02-01', 'AK', null, request, runtime);
}

async function getResolveCountSummary(request: GetResolveCountSummaryRequest): GetResolveCountSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResolveCountSummaryWithOptions(request, runtime);
}

model ListDomainsRequest = {
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model ListDomainsResponse = {
  requestId: string(name='RequestId'),
  totalCount: long(name='TotalCount'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  domainInfos: {
    domainInfo: [
      {
        domainName: string(name='DomainName'),
        resolved: long(name='Resolved'),
        resolvedHttps: long(name='ResolvedHttps'),
        resolved6: long(name='Resolved6'),
        resolvedHttps6: long(name='ResolvedHttps6'),
      }
    ](name='DomainInfo'),
  }(name='DomainInfos'),
}

async function listDomainsWithOptions(request: ListDomainsRequest, runtime: Util.RuntimeOptions): ListDomainsResponse {
  Util.validateModel(request);
  return doRequest('ListDomains', 'HTTPS', 'POST', '2016-02-01', 'AK', null, request, runtime);
}

async function listDomains(request: ListDomainsRequest): ListDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDomainsWithOptions(request, runtime);
}

model GetResolveStatisticsRequest = {
  domainName: string(name='DomainName'),
  granularity: string(name='Granularity'),
  timeSpan: integer(name='TimeSpan'),
  protocolName?: string(name='ProtocolName'),
}

model GetResolveStatisticsResponse = {
  requestId: string(name='RequestId'),
  dataPoints: {
    dataPoint: [
      {
        time: integer(name='Time'),
        count: integer(name='Count'),
      }
    ](name='DataPoint'),
  }(name='DataPoints'),
}

async function getResolveStatisticsWithOptions(request: GetResolveStatisticsRequest, runtime: Util.RuntimeOptions): GetResolveStatisticsResponse {
  Util.validateModel(request);
  return doRequest('GetResolveStatistics', 'HTTPS', 'POST', '2016-02-01', 'AK', null, request, runtime);
}

async function getResolveStatistics(request: GetResolveStatisticsRequest): GetResolveStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResolveStatisticsWithOptions(request, runtime);
}

model GetAccountInfoRequest = {
}

model GetAccountInfoResponse = {
  requestId: string(name='RequestId'),
  accountInfo: {
    accountId: string(name='AccountId'),
    monthFreeCount: integer(name='MonthFreeCount'),
    monthHttpsResolveCount: integer(name='MonthHttpsResolveCount'),
    monthResolveCount: integer(name='MonthResolveCount'),
    signSecret: string(name='SignSecret'),
    unsignedEnabled: boolean(name='UnsignedEnabled'),
    signedCount: long(name='SignedCount'),
    unsignedCount: long(name='UnsignedCount'),
  }(name='AccountInfo'),
}

async function getAccountInfoWithOptions(request: GetAccountInfoRequest, runtime: Util.RuntimeOptions): GetAccountInfoResponse {
  Util.validateModel(request);
  return doRequest('GetAccountInfo', 'HTTPS', 'POST', '2016-02-01', 'AK', null, request, runtime);
}

async function getAccountInfo(request: GetAccountInfoRequest): GetAccountInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccountInfoWithOptions(request, runtime);
}

model DescribeDomainsRequest = {
  accountId?: string(name='AccountId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model DescribeDomainsResponse = {
  requestId: string(name='RequestId'),
  totalCount: long(name='TotalCount'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  domains: {
    domain: [
      {
        domainName: string(name='DomainName'),
      }
    ](name='Domain'),
  }(name='Domains'),
}

async function describeDomainsWithOptions(request: DescribeDomainsRequest, runtime: Util.RuntimeOptions): DescribeDomainsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomains', 'HTTPS', 'POST', '2016-02-01', 'AK', null, request, runtime);
}

async function describeDomains(request: DescribeDomainsRequest): DescribeDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsWithOptions(request, runtime);
}

model DeleteDomainRequest = {
  accountId?: string(name='AccountId'),
  domainName: string(name='DomainName'),
}

model DeleteDomainResponse = {
  requestId: string(name='RequestId'),
  domainName: string(name='DomainName'),
}

async function deleteDomainWithOptions(request: DeleteDomainRequest, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  return doRequest('DeleteDomain', 'HTTPS', 'POST', '2016-02-01', 'AK', null, request, runtime);
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainWithOptions(request, runtime);
}

model AddDomainRequest = {
  accountId?: string(name='AccountId'),
  domainName: string(name='DomainName'),
}

model AddDomainResponse = {
  requestId: string(name='RequestId'),
  domainName: string(name='DomainName'),
}

async function addDomainWithOptions(request: AddDomainRequest, runtime: Util.RuntimeOptions): AddDomainResponse {
  Util.validateModel(request);
  return doRequest('AddDomain', 'HTTPS', 'POST', '2016-02-01', 'AK', null, request, runtime);
}

async function addDomain(request: AddDomainRequest): AddDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDomainWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
