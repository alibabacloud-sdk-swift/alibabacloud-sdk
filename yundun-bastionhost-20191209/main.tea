/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  

  checkConfig(config);
  @endpoint = getEndpoint('yundun-bastionhost', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ConfigInstanceSecurityGroupsRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  authorizedSecurityGroups?: [ string ](name='AuthorizedSecurityGroups'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model ConfigInstanceSecurityGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
}

model ConfigInstanceSecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigInstanceSecurityGroupsResponseBody(name='body'),
}

async function configInstanceSecurityGroupsWithOptions(request: ConfigInstanceSecurityGroupsRequest, runtime: Util.RuntimeOptions): ConfigInstanceSecurityGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigInstanceSecurityGroups', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configInstanceSecurityGroups(request: ConfigInstanceSecurityGroupsRequest): ConfigInstanceSecurityGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return configInstanceSecurityGroupsWithOptions(request, runtime);
}

model ConfigInstanceWhiteListRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  whiteList?: [ string ](name='WhiteList'),
}

model ConfigInstanceWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
}

model ConfigInstanceWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigInstanceWhiteListResponseBody(name='body'),
}

async function configInstanceWhiteListWithOptions(request: ConfigInstanceWhiteListRequest, runtime: Util.RuntimeOptions): ConfigInstanceWhiteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigInstanceWhiteList', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configInstanceWhiteList(request: ConfigInstanceWhiteListRequest): ConfigInstanceWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return configInstanceWhiteListWithOptions(request, runtime);
}

model DescribeInstanceAttributeRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model DescribeInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  instanceAttribute?: {
    vpcId?: string(name='VpcId'),
    vswitchId?: string(name='VswitchId'),
    ports?: [ 
      {
        standardPort?: int32(name='StandardPort'),
        customPort?: int32(name='CustomPort'),
      }
    ](name='Ports'),
    authorizedSecurityGroups?: [ string ](name='AuthorizedSecurityGroups'),
    description?: string(name='Description'),
    privateExportIps?: [ string ](name='PrivateExportIps'),
    privateWhiteList?: [ string ](name='PrivateWhiteList'),
    expireTime?: long(name='ExpireTime'),
    eniInstanceId?: string(name='EniInstanceId'),
    modifyPasswordModule?: string(name='ModifyPasswordModule'),
    internetEndpoint?: string(name='InternetEndpoint'),
    instanceId?: string(name='InstanceId'),
    securityGroupIds?: [ string ](name='SecurityGroupIds'),
    regionId?: string(name='RegionId'),
    intranetEndpoint?: string(name='IntranetEndpoint'),
    publicExportIps?: [ string ](name='PublicExportIps'),
    startTime?: long(name='StartTime'),
    publicWhiteList?: [ string ](name='PublicWhiteList'),
    instanceStatus?: string(name='InstanceStatus'),
    licenseCode?: string(name='LicenseCode'),
    publicNetworkAccess?: boolean(name='PublicNetworkAccess'),
    storage?: long(name='Storage'),
  }(name='InstanceAttribute'),
}

model DescribeInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAttributeResponseBody(name='body'),
}

async function describeInstanceAttributeWithOptions(request: DescribeInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceAttribute', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceAttribute(request: DescribeInstanceAttributeRequest): DescribeInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAttributeWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  instanceStatus?: string(name='InstanceStatus'),
  resourceGroupId?: string(name='ResourceGroupId'),
  instanceId?: [ string ](name='InstanceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  instances?: [ 
    {
      regionId?: string(name='RegionId'),
      instanceId?: string(name='InstanceId'),
      instanceStatus?: string(name='InstanceStatus'),
      legacy?: boolean(name='Legacy'),
      vpcId?: string(name='VpcId'),
      vswitchId?: string(name='VswitchId'),
      intranetEndpoint?: string(name='IntranetEndpoint'),
      internetEndpoint?: string(name='InternetEndpoint'),
      startTime?: long(name='StartTime'),
      expireTime?: long(name='ExpireTime'),
      description?: string(name='Description'),
      licenseCode?: string(name='LicenseCode'),
      publicNetworkAccess?: boolean(name='PublicNetworkAccess'),
      imageVersion?: string(name='ImageVersion'),
    }
  ](name='Instances'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstances', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DisableInstancePublicAccessRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model DisableInstancePublicAccessResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
}

model DisableInstancePublicAccessResponse = {
  headers: map[string]string(name='headers'),
  body: DisableInstancePublicAccessResponseBody(name='body'),
}

async function disableInstancePublicAccessWithOptions(request: DisableInstancePublicAccessRequest, runtime: Util.RuntimeOptions): DisableInstancePublicAccessResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableInstancePublicAccess', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableInstancePublicAccess(request: DisableInstancePublicAccessRequest): DisableInstancePublicAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableInstancePublicAccessWithOptions(request, runtime);
}

model EnableInstancePublicAccessRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model EnableInstancePublicAccessResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
}

model EnableInstancePublicAccessResponse = {
  headers: map[string]string(name='headers'),
  body: EnableInstancePublicAccessResponseBody(name='body'),
}

async function enableInstancePublicAccessWithOptions(request: EnableInstancePublicAccessRequest, runtime: Util.RuntimeOptions): EnableInstancePublicAccessResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableInstancePublicAccess', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableInstancePublicAccess(request: EnableInstancePublicAccessRequest): EnableInstancePublicAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableInstancePublicAccessWithOptions(request, runtime);
}

model ListTagKeysRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model ListTagKeysResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  tagKeys?: [ 
    {
      tagCount?: int32(name='TagCount'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagKeys'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagKeys', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyInstanceAttributeRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  description?: string(name='Description'),
  regionId?: string(name='RegionId'),
}

model ModifyInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAttributeResponseBody(name='body'),
}

async function modifyInstanceAttributeWithOptions(request: ModifyInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceAttribute', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): ModifyInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAttributeWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  resourceId?: string(name='ResourceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceType?: string(name='ResourceType'),
  regionId?: string(name='RegionId'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: Util.RuntimeOptions): MoveResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MoveResourceGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model StartInstanceRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  vswitchId?: string(name='VswitchId'),
  regionId?: string(name='RegionId'),
  instanceSecurityGroups?: [ string ](name='InstanceSecurityGroups'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
}

model StartInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstanceWithOptions(request: StartInstanceRequest, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartInstance', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model TagResourcesRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

