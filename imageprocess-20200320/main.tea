import OSS;
import OpenPlatform;
import RPCUtil;
import RPC;
import OSSUtil;
import Util;
import FileForm;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('imageprocess', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DetectKneeKeypointXRayRequest = {
  imageUrl: string(name='ImageUrl'),
  dataFormat: string(name='DataFormat'),
  orgId: string(name='OrgId'),
  orgName: string(name='OrgName'),
  tracerId?: string(name='TracerId'),
}

model DetectKneeKeypointXRayResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageUrl: string(name='ImageUrl'),
    orgId: string(name='OrgId'),
    orgName: string(name='OrgName'),
    keyPoints: [
      {
        value: float(name='Value'),
        tag: {
          direction: string(name='Direction'),
          label: string(name='Label'),
        }(name='Tag'),
        coordinates: [ integer ](name='Coordinates'),
      }
    ](name='KeyPoints'),
  }(name='Data'),
}

async function detectKneeKeypointXRay(request: DetectKneeKeypointXRayRequest, runtime: Util.RuntimeOptions): DetectKneeKeypointXRayResponse {
  Util.validateModel(request);
  return doRequest('DetectKneeKeypointXRay', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model DetectKneeKeypointXRayAdvanceRequest = {
  imageUrlObject: readable(name='ImageUrlObject'),
  dataFormat: string(name='DataFormat'),
  orgId: string(name='OrgId'),
  orgName: string(name='OrgName'),
  tracerId?: string(name='TracerId'),
}

async function detectKneeKeypointXRayAdvance(request: DetectKneeKeypointXRayAdvanceRequest, runtime: Util.RuntimeOptions): DetectKneeKeypointXRayResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageprocess',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  var detectKneeKeypointXRayreq = new DetectKneeKeypointXRayRequest{};
  RPCUtil.convert(request, detectKneeKeypointXRayreq);
  authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  ossConfig.accessKeyId = authResponse.accessKeyId;
  ossConfig.endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
  ossClient = new OSS(ossConfig);

  fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageUrlObject,
    contentType = '',
  };
  ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  ossClient.postObject(uploadRequest, ossRuntime);
  detectKneeKeypointXRayreq.imageUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectKneeKeypointXRayResp = detectKneeKeypointXRay(detectKneeKeypointXRayreq, runtime);
  return detectKneeKeypointXRayResp;
}

model ClassifyFNFRequest = {
  imageUrl: string(name='ImageUrl'),
  dataFormat: string(name='DataFormat'),
  orgId: string(name='OrgId'),
  orgName: string(name='OrgName'),
  tracerId?: string(name='TracerId'),
}

model ClassifyFNFResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageUrl: string(name='ImageUrl'),
    orgId: string(name='OrgId'),
    orgName: string(name='OrgName'),
    fractures: [
      {
        value: float(name='Value'),
        tag: {
          label: string(name='Label'),
        }(name='Tag'),
        boxes: [ integer ](name='Boxes'),
      }
    ](name='Fractures'),
  }(name='Data'),
}

async function classifyFNF(request: ClassifyFNFRequest, runtime: Util.RuntimeOptions): ClassifyFNFResponse {
  Util.validateModel(request);
  return doRequest('ClassifyFNF', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model ClassifyFNFAdvanceRequest = {
  imageUrlObject: readable(name='ImageUrlObject'),
  dataFormat: string(name='DataFormat'),
  orgId: string(name='OrgId'),
  orgName: string(name='OrgName'),
  tracerId?: string(name='TracerId'),
}

async function classifyFNFAdvance(request: ClassifyFNFAdvanceRequest, runtime: Util.RuntimeOptions): ClassifyFNFResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageprocess',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  var classifyFNFreq = new ClassifyFNFRequest{};
  RPCUtil.convert(request, classifyFNFreq);
  authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  ossConfig.accessKeyId = authResponse.accessKeyId;
  ossConfig.endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
  ossClient = new OSS(ossConfig);

  fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageUrlObject,
    contentType = '',
  };
  ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  ossClient.postObject(uploadRequest, ossRuntime);
  classifyFNFreq.imageUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var classifyFNFResp = classifyFNF(classifyFNFreq, runtime);
  return classifyFNFResp;
}

model RunCTRegistrationRequest = {
  referenceList: [
    {
      referenceURL: string(name='ReferenceURL'),
    }
  ](name='ReferenceList'),
  dataFormat: string(name='DataFormat'),
  orgName: string(name='OrgName'),
  orgId: string(name='OrgId'),
  dataSourceType: string(name='DataSourceType'),
  floatingList: [
    {
      floatingURL: string(name='FloatingURL'),
    }
  ](name='FloatingList'),
}

model RunCTRegistrationResponse = {
  requestId: string(name='RequestId'),
  data: {
    DUrl: string(name='DUrl'),
    NUrl: string(name='NUrl'),
  }(name='Data'),
}

async function runCTRegistration(request: RunCTRegistrationRequest, runtime: Util.RuntimeOptions): RunCTRegistrationResponse {
  Util.validateModel(request);
  return doRequest('RunCTRegistration', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model DetectHipKeypointXRayRequest = {
  imageUrl: string(name='ImageUrl'),
  dataFormat: string(name='DataFormat'),
  orgId: string(name='OrgId'),
  orgName: string(name='OrgName'),
  tracerId?: string(name='TracerId'),
}

model DetectHipKeypointXRayResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageUrl: string(name='ImageUrl'),
    orgId: string(name='OrgId'),
    orgName: string(name='OrgName'),
    keyPoints: [
      {
        value: float(name='Value'),
        tag: {
          direction: string(name='Direction'),
          label: string(name='Label'),
        }(name='Tag'),
        coordinates: [ integer ](name='Coordinates'),
      }
    ](name='KeyPoints'),
  }(name='Data'),
}

async function detectHipKeypointXRay(request: DetectHipKeypointXRayRequest, runtime: Util.RuntimeOptions): DetectHipKeypointXRayResponse {
  Util.validateModel(request);
  return doRequest('DetectHipKeypointXRay', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model DetectHipKeypointXRayAdvanceRequest = {
  imageUrlObject: readable(name='ImageUrlObject'),
  dataFormat: string(name='DataFormat'),
  orgId: string(name='OrgId'),
  orgName: string(name='OrgName'),
  tracerId?: string(name='TracerId'),
}

async function detectHipKeypointXRayAdvance(request: DetectHipKeypointXRayAdvanceRequest, runtime: Util.RuntimeOptions): DetectHipKeypointXRayResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageprocess',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  var detectHipKeypointXRayreq = new DetectHipKeypointXRayRequest{};
  RPCUtil.convert(request, detectHipKeypointXRayreq);
  authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  ossConfig.accessKeyId = authResponse.accessKeyId;
  ossConfig.endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
  ossClient = new OSS(ossConfig);

  fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageUrlObject,
    contentType = '',
  };
  ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  ossClient.postObject(uploadRequest, ossRuntime);
  detectHipKeypointXRayreq.imageUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectHipKeypointXRayResp = detectHipKeypointXRay(detectHipKeypointXRayreq, runtime);
  return detectHipKeypointXRayResp;
}

model CalcCACSRequest = {
  URLList: [
    {
      URL: string(name='URL'),
    }
  ](name='URLList'),
  dataFormat: string(name='DataFormat'),
  orgName: string(name='OrgName'),
  orgId: string(name='OrgId'),
  dataSourceType: string(name='DataSourceType'),
}

model CalcCACSResponse = {
  requestId: string(name='RequestId'),
  data: {
    score: string(name='Score'),
  }(name='Data'),
}

async function calcCACS(request: CalcCACSRequest, runtime: Util.RuntimeOptions): CalcCACSResponse {
  Util.validateModel(request);
  return doRequest('CalcCACS', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model DetectKneeXRayRequest = {
  url: string(name='Url'),
  dataFormat: string(name='DataFormat'),
  orgName: string(name='OrgName'),
  orgId: string(name='OrgId'),
}

model DetectKneeXRayResponse = {
  requestId: string(name='RequestId'),
  data: {
    KLDetections: [
      {
        detections: [ float ](name='Detections'),
      }
    ](name='KLDetections'),
  }(name='Data'),
}

async function detectKneeXRay(request: DetectKneeXRayRequest, runtime: Util.RuntimeOptions): DetectKneeXRayResponse {
  Util.validateModel(request);
  return doRequest('DetectKneeXRay', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model DetectKneeXRayAdvanceRequest = {
  urlObject: readable(name='UrlObject'),
  dataFormat: string(name='DataFormat'),
  orgName: string(name='OrgName'),
  orgId: string(name='OrgId'),
}

async function detectKneeXRayAdvance(request: DetectKneeXRayAdvanceRequest, runtime: Util.RuntimeOptions): DetectKneeXRayResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageprocess',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  var detectKneeXRayreq = new DetectKneeXRayRequest{};
  RPCUtil.convert(request, detectKneeXRayreq);
  authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  ossConfig.accessKeyId = authResponse.accessKeyId;
  ossConfig.endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
  ossClient = new OSS(ossConfig);

  fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.urlObject,
    contentType = '',
  };
  ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  ossClient.postObject(uploadRequest, ossRuntime);
  detectKneeXRayreq.url = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectKneeXRayResp = detectKneeXRay(detectKneeXRayreq, runtime);
  return detectKneeXRayResp;
}

model DetectSpineMRIRequest = {
  URLList: [
    {
      URL: string(name='URL'),
    }
  ](name='URLList'),
  dataFormat: string(name='DataFormat'),
  orgName: string(name='OrgName'),
  orgId: string(name='OrgId'),
}

model DetectSpineMRIResponse = {
  requestId: string(name='RequestId'),
  data: {
    discs: [
      {
        disease: string(name='Disease'),
        identification: string(name='Identification'),
        location: [ float ](name='Location'),
      }
    ](name='Discs'),
    vertebras: [
      {
        disease: string(name='Disease'),
        identification: string(name='Identification'),
        location: [ float ](name='Location'),
      }
    ](name='Vertebras'),
  }(name='Data'),
}

async function detectSpineMRI(request: DetectSpineMRIRequest, runtime: Util.RuntimeOptions): DetectSpineMRIResponse {
  Util.validateModel(request);
  return doRequest('DetectSpineMRI', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model TranslateMedRequest = {
  fromLanguage: string(name='FromLanguage'),
  toLanguage: string(name='ToLanguage'),
  text: string(name='Text'),
}

model TranslateMedResponse = {
  requestId: string(name='RequestId'),
  data: {
    text: string(name='Text'),
    words: long(name='Words'),
  }(name='Data'),
}

async function translateMed(request: TranslateMedRequest, runtime: Util.RuntimeOptions): TranslateMedResponse {
  Util.validateModel(request);
  return doRequest('TranslateMed', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model DetectLungNoduleRequest = {
  URLList: [
    {
      URL: string(name='URL'),
    }
  ](name='URLList'),
  dataFormat: string(name='DataFormat'),
  orgName: string(name='OrgName'),
  orgId: string(name='OrgId'),
}

model DetectLungNoduleResponse = {
  requestId: string(name='RequestId'),
  data: {
    series: [
      {
        seriesInstanceUid: string(name='SeriesInstanceUid'),
        elements: [
          {
            category: string(name='Category'),
            confidence: float(name='Confidence'),
            diameter: float(name='Diameter'),
            lobe: string(name='Lobe'),
            lung: string(name='Lung'),
            x: float(name='X'),
            z: float(name='Z'),
            y: float(name='Y'),
            imageX: float(name='ImageX'),
            imageY: float(name='ImageY'),
            imageZ: float(name='ImageZ'),
          }
        ](name='Elements'),
        origin: [ float ](name='Origin'),
        spacing: [ float ](name='Spacing'),
      }
    ](name='Series'),
  }(name='Data'),
}

async function detectLungNodule(request: DetectLungNoduleRequest, runtime: Util.RuntimeOptions): DetectLungNoduleResponse {
  Util.validateModel(request);
  return doRequest('DetectLungNodule', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model DetectCovid19CadRequest = {
  URLList: [
    {
      URL: string(name='URL'),
    }
  ](name='URLList'),
  dataFormat: string(name='DataFormat'),
  orgName: string(name='OrgName'),
  orgId: string(name='OrgId'),
}

model DetectCovid19CadResponse = {
  requestId: string(name='RequestId'),
  data: {
    newProbability: string(name='NewProbability'),
    normalProbability: string(name='NormalProbability'),
    otherProbability: string(name='OtherProbability'),
    lesionRatio: string(name='LesionRatio'),
    mask: string(name='Mask'),
  }(name='Data'),
}

async function detectCovid19Cad(request: DetectCovid19CadRequest, runtime: Util.RuntimeOptions): DetectCovid19CadResponse {
  Util.validateModel(request);
  return doRequest('DetectCovid19Cad', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model GetAsyncJobResultRequest = {
  jobId: string(name='JobId'),
}

model GetAsyncJobResultResponse = {
  requestId: string(name='RequestId'),
  data: {
    jobId: string(name='JobId'),
    status: string(name='Status'),
    result: string(name='Result'),
    errorCode: string(name='ErrorCode'),
    errorMessage: string(name='ErrorMessage'),
  }(name='Data'),
}

async function getAsyncJobResult(request: GetAsyncJobResultRequest, runtime: Util.RuntimeOptions): GetAsyncJobResultResponse {
  Util.validateModel(request);
  return doRequest('GetAsyncJobResult', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
