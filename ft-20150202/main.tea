import Util;
import ROA;

import EndpointUtil;

extends ROA;

const version = '2015-02-02';

init(config: ROA.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'ft.aliyuncs.com',
    ap-south-1 = 'ft.aliyuncs.com',
    ap-southeast-1 = 'ft.aliyuncs.com',
    ap-southeast-2 = 'ft.aliyuncs.com',
    ap-southeast-3 = 'ft.aliyuncs.com',
    ap-southeast-5 = 'ft.aliyuncs.com',
    cn-beijing = 'ft.aliyuncs.com',
    cn-beijing-finance-1 = 'ft.aliyuncs.com',
    cn-beijing-finance-pop = 'ft.aliyuncs.com',
    cn-beijing-gov-1 = 'ft.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ft.aliyuncs.com',
    cn-chengdu = 'ft.aliyuncs.com',
    cn-edge-1 = 'ft.aliyuncs.com',
    cn-fujian = 'ft.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ft.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ft.aliyuncs.com',
    cn-hangzhou-finance = 'ft.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ft.aliyuncs.com',
    cn-hangzhou-test-306 = 'ft.aliyuncs.com',
    cn-hongkong-finance-pop = 'ft.aliyuncs.com',
    cn-huhehaote = 'ft.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'ft.aliyuncs.com',
    cn-qingdao = 'ft.aliyuncs.com',
    cn-qingdao-nebula = 'ft.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ft.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ft.aliyuncs.com',
    cn-shanghai-finance-1 = 'ft.aliyuncs.com',
    cn-shanghai-inner = 'ft.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ft.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ft.aliyuncs.com',
    cn-shenzhen-inner = 'ft.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ft.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ft.aliyuncs.com',
    cn-wuhan = 'ft.aliyuncs.com',
    cn-wulanchabu = 'ft.aliyuncs.com',
    cn-yushanfang = 'ft.aliyuncs.com',
    cn-zhangbei = 'ft.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ft.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ft.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ft.aliyuncs.com',
    eu-central-1 = 'ft.aliyuncs.com',
    eu-west-1 = 'ft.aliyuncs.com',
    eu-west-1-oxs = 'ft.aliyuncs.com',
    me-east-1 = 'ft.aliyuncs.com',
    rus-west-1-pop = 'ft.aliyuncs.com',
    us-west-1 = 'ft.aliyuncs.com',
  };

  checkConfig(config);
  @endpointHost = getEndpoint('ft', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpointHost);
}


model StartService2Request = {
  headers?: map[string]string(name='headers'),
}

model StartService2ResponseBody = {
  requestId: string(name='RequestId'),
  orderId: string(name='OrderId'),
  message: string(name='Message'),
  errorCode: string(name='ErrorCode'),
}

model StartService2Response = {
  headers: map[string]string(name='headers'),
  body: StartService2ResponseBody(name='body'),
}

async function startService2WithOptions(request: StartService2Request, runtime: Util.RuntimeOptions): StartService2Response {
  Util.validateModel(request);
  return doRequestWithAction('StartService2', '2015-02-02', 'HTTPS', 'POST', 'AK,APP,PrivateKey,BearerToken', `/service/open`, null, request.headers, null, runtime);
}

async function startService2(request: StartService2Request): StartService2Response {
  var runtime = new Util.RuntimeOptions{};
  return startService2WithOptions(request, runtime);
}

model RoaGzipRequest = {
  headers?: map[string]string(name='headers'),
}

model RoaGzipResponse = {
  headers: map[string]string(name='headers'),
}

async function roaGzipWithOptions(request: RoaGzipRequest, runtime: Util.RuntimeOptions): RoaGzipResponse {
  Util.validateModel(request);
  return doRequestWithAction('RoaGzip', '2015-02-02', 'HTTPS', 'POST', 'AK,PrivateKey', `/RoaGzip`, null, request.headers, null, runtime);
}

async function roaGzip(request: RoaGzipRequest): RoaGzipResponse {
  var runtime = new Util.RuntimeOptions{};
  return roaGzipWithOptions(request, runtime);
}

model RoaCommonRequest = {
  headers?: map[string]string(name='headers'),
}

model RoaCommonResponseBody = {
  headers: string(name='Headers'),
}

model RoaCommonResponse = {
  headers: map[string]string(name='headers'),
  body: RoaCommonResponseBody(name='body'),
}

async function roaCommonWithOptions(request: RoaCommonRequest, runtime: Util.RuntimeOptions): RoaCommonResponse {
  Util.validateModel(request);
  return doRequestWithAction('RoaCommon', '2015-02-02', 'HTTPS', 'GET', 'AK,PrivateKey', `/RoaCommon`, null, request.headers, null, runtime);
}

async function roaCommon(request: RoaCommonRequest): RoaCommonResponse {
  var runtime = new Util.RuntimeOptions{};
  return roaCommonWithOptions(request, runtime);
}

model ValidateAkProvenRequest = {
  headers?: map[string]string(name='headers'),
}

model ValidateAkProvenResponse = {
  headers: map[string]string(name='headers'),
}

async function validateAkProvenWithOptions(request: ValidateAkProvenRequest, runtime: Util.RuntimeOptions): ValidateAkProvenResponse {
  Util.validateModel(request);
  return doRequestWithAction('ValidateAkProven', '2015-02-02', 'HTTPS', 'POST', 'AK,APP,PrivateKey', `/ak/proven`, null, request.headers, null, runtime);
}

async function validateAkProven(request: ValidateAkProvenRequest): ValidateAkProvenResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateAkProvenWithOptions(request, runtime);
}

model RoaIllegalDynamicHostHttpApiQuery = {
  proxyOriginalSourceIp?: string(name='proxy_original_source_ip'),
  proxyOriginalSecurityTransport?: boolean(name='proxy_original_security_transport'),
  regionId?: string(name='RegionId'),
}

model RoaIllegalDynamicHostHttpApiRequest = {
  headers?: map[string]string(name='headers'),
  query?: RoaIllegalDynamicHostHttpApiQuery(name='query'),
}

model RoaIllegalDynamicHostHttpApiResponseBody = {
  requestId: string(name='RequestId'),
}

model RoaIllegalDynamicHostHttpApiResponse = {
  headers: map[string]string(name='headers'),
  body: RoaIllegalDynamicHostHttpApiResponseBody(name='body'),
}

async function roaIllegalDynamicHostHttpApiWithOptions(request: RoaIllegalDynamicHostHttpApiRequest, runtime: Util.RuntimeOptions): RoaIllegalDynamicHostHttpApiResponse {
  Util.validateModel(request);
  return doRequestWithAction('RoaIllegalDynamicHostHttpApi', '2015-02-02', 'HTTPS', 'POST', 'AK', `/web/getData/dynamic/illegal`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function roaIllegalDynamicHostHttpApi(request: RoaIllegalDynamicHostHttpApiRequest): RoaIllegalDynamicHostHttpApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return roaIllegalDynamicHostHttpApiWithOptions(request, runtime);
}

model RoaDynamicHostHttpApiQuery = {
  proxyOriginalSourceIp?: string(name='proxy_original_source_ip'),
  proxyOriginalSecurityTransport?: boolean(name='proxy_original_security_transport'),
  regionId?: string(name='RegionId'),
}

model RoaDynamicHostHttpApiRequest = {
  headers?: map[string]string(name='headers'),
  query?: RoaDynamicHostHttpApiQuery(name='query'),
}

model RoaDynamicHostHttpApiResponseBody = {
  requestId: string(name='RequestId'),
}

model RoaDynamicHostHttpApiResponse = {
  headers: map[string]string(name='headers'),
  body: RoaDynamicHostHttpApiResponseBody(name='body'),
}

async function roaDynamicHostHttpApiWithOptions(request: RoaDynamicHostHttpApiRequest, runtime: Util.RuntimeOptions): RoaDynamicHostHttpApiResponse {
  Util.validateModel(request);
  return doRequestWithAction('RoaDynamicHostHttpApi', '2015-02-02', 'HTTPS', 'POST', 'AK', `/web/getData/dynamic`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function roaDynamicHostHttpApi(request: RoaDynamicHostHttpApiRequest): RoaDynamicHostHttpApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return roaDynamicHostHttpApiWithOptions(request, runtime);
}

model RoaHttpIgnoreHttpsApiRequest = {
  headers?: map[string]string(name='headers'),
}

model RoaHttpIgnoreHttpsApiResponseBody = {
  requestId: string(name='RequestId'),
}

model RoaHttpIgnoreHttpsApiResponse = {
  headers: map[string]string(name='headers'),
  body: RoaHttpIgnoreHttpsApiResponseBody(name='body'),
}

async function roaHttpIgnoreHttpsApiWithOptions(request: RoaHttpIgnoreHttpsApiRequest, runtime: Util.RuntimeOptions): RoaHttpIgnoreHttpsApiResponse {
  Util.validateModel(request);
  return doRequestWithAction('RoaHttpIgnoreHttpsApi', '2015-02-02', 'HTTPS', 'POST', 'AK', `/ignorehttps`, null, request.headers, null, runtime);
}

async function roaHttpIgnoreHttpsApi(request: RoaHttpIgnoreHttpsApiRequest): RoaHttpIgnoreHttpsApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return roaHttpIgnoreHttpsApiWithOptions(request, runtime);
}

model RoaAnonymousApiRequest = {
  headers?: map[string]string(name='headers'),
}

model RoaAnonymousApiResponseBody = {
  headers: string(name='Headers'),
}

model RoaAnonymousApiResponse = {
  headers: map[string]string(name='headers'),
  body: RoaAnonymousApiResponseBody(name='body'),
}

async function roaAnonymousApiWithOptions(request: RoaAnonymousApiRequest, runtime: Util.RuntimeOptions): RoaAnonymousApiResponse {
  Util.validateModel(request);
  return doRequestWithAction('RoaAnonymousApi', '2015-02-02', 'HTTPS', 'GET', 'Anonymous', `/RoaAnonymousApi`, null, request.headers, null, runtime);
}

async function roaAnonymousApi(request: RoaAnonymousApiRequest): RoaAnonymousApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return roaAnonymousApiWithOptions(request, runtime);
}

model RoaHttpApiRequest = {
  headers?: map[string]string(name='headers'),
}

model RoaHttpApiResponse = {
  headers: map[string]string(name='headers'),
}

async function roaHttpApiWithOptions(request: RoaHttpApiRequest, runtime: Util.RuntimeOptions): RoaHttpApiResponse {
  Util.validateModel(request);
  return doRequestWithAction('RoaHttpApi', '2015-02-02', 'HTTPS', 'POST', 'AK,APP', `/web/getData`, null, request.headers, null, runtime);
}

async function roaHttpApi(request: RoaHttpApiRequest): RoaHttpApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return roaHttpApiWithOptions(request, runtime);
}

model RoaDubboApiQuery = {
  proxyOriginalSourceIp?: string(name='proxy_original_source_ip'),
  proxyOriginalSecurityTransport?: boolean(name='proxy_original_security_transport'),
}

model RoaDubboApiRequest = {
  headers?: map[string]string(name='headers'),
  query?: RoaDubboApiQuery(name='query'),
}

model RoaDubboApiResponseBody = {
  regionId: string(name='RegionId'),
  success: string(name='Success'),
  callerUid: string(name='callerUid'),
  callerBid: string(name='callerBid'),
  proxyTrustTransportInfo: string(name='proxy_trust_transport_info'),
  akMfaPresent: string(name='ak_mfa_present'),
  callerType: string(name='callerType'),
  callerParentId: string(name='callerParentId'),
  resourceOwnerId: string(name='resourceOwnerId'),
  appIp: string(name='app_ip'),
  proxyOriginalSourceIp: string(name='proxy_original_source_ip'),
  proxyOriginalSecurityTransport: string(name='proxy_original_security_transport'),
  securityTransport: string(name='security_transport'),
  requestId: string(name='requestId'),
}

model RoaDubboApiResponse = {
  headers: map[string]string(name='headers'),
  body: RoaDubboApiResponseBody(name='body'),
}

async function roaDubboApiWithOptions(request: RoaDubboApiRequest, runtime: Util.RuntimeOptions): RoaDubboApiResponse {
  Util.validateModel(request);
  return doRequestWithAction('RoaDubboApi', '2015-02-02', 'HTTPS', 'GET', 'AK,PrivateKey', `/RoaDubboApi`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function roaDubboApi(request: RoaDubboApiRequest): RoaDubboApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return roaDubboApiWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
