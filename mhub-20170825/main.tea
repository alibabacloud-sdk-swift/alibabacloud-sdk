import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('mhub', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model OpenEmasServiceRequest = {
  ownerId?: long(name='OwnerId'),
}

model OpenEmasServiceResponse = {
  requestId: string(name='RequestId'),
  orderId: string(name='OrderId'),
}

async function openEmasServiceWithOptions(request: OpenEmasServiceRequest, runtime: Util.RuntimeOptions): OpenEmasServiceResponse {
  Util.validateModel(request);
  return doRequest('OpenEmasService', 'HTTPS', 'POST', '2017-08-25', 'AK,APP,PrivateKey,BearerToken', null, request, runtime);
}

async function openEmasService(request: OpenEmasServiceRequest): OpenEmasServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openEmasServiceWithOptions(request, runtime);
}

model QueryVersionInfosRequest = {
  productID: string(name='ProductID'),
  OS: string(name='OS'),
}

model QueryVersionInfosResponse = {
  requestId: string(name='RequestId'),
  versionInfos: {
    versionInfo: [
      {
        OS: string(name='OS'),
        version: string(name='Version'),
        productID: integer(name='ProductID'),
        createTime: string(name='CreateTime'),
        content: string(name='Content'),
      }
    ](name='VersionInfo'),
  }(name='VersionInfos'),
}

async function queryVersionInfosWithOptions(request: QueryVersionInfosRequest, runtime: Util.RuntimeOptions): QueryVersionInfosResponse {
  Util.validateModel(request);
  return doRequest('QueryVersionInfos', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function queryVersionInfos(request: QueryVersionInfosRequest): QueryVersionInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryVersionInfosWithOptions(request, runtime);
}

model QueryProductInfoRequest = {
  productId: string(name='ProductId'),
}

model QueryProductInfoResponse = {
  requestId: string(name='RequestId'),
  productInfo: {
    name: string(name='Name'),
    industryId: integer(name='IndustryId'),
    encodedIcon: string(name='EncodedIcon'),
    iconName: string(name='IconName'),
    readonly: boolean(name='Readonly'),
  }(name='ProductInfo'),
}

async function queryProductInfoWithOptions(request: QueryProductInfoRequest, runtime: Util.RuntimeOptions): QueryProductInfoResponse {
  Util.validateModel(request);
  return doRequest('QueryProductInfo', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function queryProductInfo(request: QueryProductInfoRequest): QueryProductInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductInfoWithOptions(request, runtime);
}

model QueryAppSecurityInfoRequest = {
  appKey: string(name='AppKey'),
}

model QueryAppSecurityInfoResponse = {
  requestId: string(name='RequestId'),
  appSecurityInfo: {
    appKey: string(name='AppKey'),
    appSecret: string(name='AppSecret'),
  }(name='AppSecurityInfo'),
}

async function queryAppSecurityInfoWithOptions(request: QueryAppSecurityInfoRequest, runtime: Util.RuntimeOptions): QueryAppSecurityInfoResponse {
  Util.validateModel(request);
  return doRequest('QueryAppSecurityInfo', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function queryAppSecurityInfo(request: QueryAppSecurityInfoRequest): QueryAppSecurityInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppSecurityInfoWithOptions(request, runtime);
}

model QueryAppInfoRequest = {
  appKey: string(name='AppKey'),
}

model QueryAppInfoResponse = {
  requestId: string(name='RequestId'),
  appInfo: {
    appKey: string(name='AppKey'),
    appName: string(name='AppName'),
    type: integer(name='Type'),
    readonly: boolean(name='Readonly'),
    bundleId: string(name='BundleId'),
    packageName: string(name='PackageName'),
    certDevelopAvail: boolean(name='CertDevelopAvail'),
    certDevelopExpiration: string(name='CertDevelopExpiration'),
    certProductAvail: boolean(name='CertProductAvail'),
    certProductExpiration: string(name='CertProductExpiration'),
    encodedIcon: string(name='EncodedIcon'),
    industryId: integer(name='IndustryId'),
    createTime: integer(name='CreateTime'),
    productId: long(name='ProductId'),
    status: integer(name='Status'),
  }(name='AppInfo'),
}

async function queryAppInfoWithOptions(request: QueryAppInfoRequest, runtime: Util.RuntimeOptions): QueryAppInfoResponse {
  Util.validateModel(request);
  return doRequest('QueryAppInfo', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function queryAppInfo(request: QueryAppInfoRequest): QueryAppInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppInfoWithOptions(request, runtime);
}

model ModifyProductRequest = {
  productId: string(name='ProductId'),
  name: string(name='Name'),
  industryId?: integer(name='IndustryId'),
  encodedIcon?: string(name='EncodedIcon'),
  iconName?: string(name='IconName'),
  removeIcon?: boolean(name='RemoveIcon'),
}

model ModifyProductResponse = {
  requestId: string(name='RequestId'),
}

async function modifyProductWithOptions(request: ModifyProductRequest, runtime: Util.RuntimeOptions): ModifyProductResponse {
  Util.validateModel(request);
  return doRequest('ModifyProduct', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function modifyProduct(request: ModifyProductRequest): ModifyProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProductWithOptions(request, runtime);
}

model ModifyAppRequest = {
  appKey: string(name='AppKey'),
  name?: string(name='Name'),
  bundleId?: string(name='BundleId'),
  packageName?: string(name='PackageName'),
  encodedIcon?: string(name='EncodedIcon'),
  industryId?: integer(name='IndustryId'),
}

model ModifyAppResponse = {
  requestId: string(name='RequestId'),
}

async function modifyAppWithOptions(request: ModifyAppRequest, runtime: Util.RuntimeOptions): ModifyAppResponse {
  Util.validateModel(request);
  return doRequest('ModifyApp', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppWithOptions(request, runtime);
}

model ListProductsRequest = {
  offset?: integer(name='Offset'),
  size?: integer(name='Size'),
  simple?: boolean(name='Simple'),
  productName?: string(name='ProductName'),
}

model ListProductsResponse = {
  requestId: string(name='RequestId'),
  total: integer(name='Total'),
  ubsmsStatus: string(name='UbsmsStatus'),
  productInfos: {
    productInfo: [
      {
        productId: integer(name='ProductId'),
        name: string(name='Name'),
        encodedIcon: string(name='EncodedIcon'),
        platforms: string(name='Platforms'),
        readonly: boolean(name='Readonly'),
        industryId: integer(name='IndustryId'),
        createTime: string(name='CreateTime'),
      }
    ](name='ProductInfo'),
  }(name='ProductInfos'),
}

async function listProductsWithOptions(request: ListProductsRequest, runtime: Util.RuntimeOptions): ListProductsResponse {
  Util.validateModel(request);
  return doRequest('ListProducts', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function listProducts(request: ListProductsRequest): ListProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductsWithOptions(request, runtime);
}

model ListAppsRequest = {
  productId: string(name='ProductId'),
  page?: string(name='Page'),
  pageSize?: string(name='PageSize'),
  osType?: integer(name='OsType'),
}

model ListAppsResponse = {
  requestId: string(name='RequestId'),
  total: integer(name='Total'),
  ubsmsStatus: string(name='UbsmsStatus'),
  appInfos: {
    appInfo: [
      {
        appKey: string(name='AppKey'),
        name: string(name='Name'),
        type: integer(name='Type'),
        readonly: boolean(name='Readonly'),
        bundleId: string(name='BundleId'),
        packageName: string(name='PackageName'),
        encodedIcon: string(name='EncodedIcon'),
        industryId: integer(name='IndustryId'),
      }
    ](name='AppInfo'),
  }(name='AppInfos'),
}

async function listAppsWithOptions(request: ListAppsRequest, runtime: Util.RuntimeOptions): ListAppsResponse {
  Util.validateModel(request);
  return doRequest('ListApps', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppsWithOptions(request, runtime);
}

model DeleteProductRequest = {
  productId: string(name='ProductId'),
}

model DeleteProductResponse = {
  requestId: string(name='RequestId'),
  message: string(name='Message'),
}

async function deleteProductWithOptions(request: DeleteProductRequest, runtime: Util.RuntimeOptions): DeleteProductResponse {
  Util.validateModel(request);
  return doRequest('DeleteProduct', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductWithOptions(request, runtime);
}

model DeleteAppRequest = {
  appKey: string(name='AppKey'),
}

model DeleteAppResponse = {
  requestId: string(name='RequestId'),
}

async function deleteAppWithOptions(request: DeleteAppRequest, runtime: Util.RuntimeOptions): DeleteAppResponse {
  Util.validateModel(request);
  return doRequest('DeleteApp', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppWithOptions(request, runtime);
}

model CreateProductRequest = {
  name: string(name='Name'),
  industryId?: integer(name='IndustryId'),
  iconName?: string(name='IconName'),
  encodedIcon?: string(name='EncodedIcon'),
}

model CreateProductResponse = {
  requestId: string(name='RequestId'),
  productId: long(name='ProductId'),
}

async function createProductWithOptions(request: CreateProductRequest, runtime: Util.RuntimeOptions): CreateProductResponse {
  Util.validateModel(request);
  return doRequest('CreateProduct', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function createProduct(request: CreateProductRequest): CreateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductWithOptions(request, runtime);
}

model CreateAppRequest = {
  productId: string(name='ProductId'),
  name: string(name='Name'),
  type?: integer(name='Type'),
  bundleId?: string(name='BundleId'),
  packageName?: string(name='PackageName'),
  encodedIcon?: string(name='EncodedIcon'),
  industryId?: string(name='IndustryId'),
}

model CreateAppResponse = {
  requestId: string(name='RequestId'),
  appInfo: {
    productId: integer(name='ProductId'),
    appKey: string(name='AppKey'),
    name: string(name='Name'),
    type: integer(name='Type'),
    bundleId: string(name='BundleId'),
    packageName: string(name='PackageName'),
    description: string(name='Description'),
    createTime: string(name='CreateTime'),
    modifyTime: string(name='ModifyTime'),
  }(name='AppInfo'),
}

async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  return doRequest('CreateApp', 'HTTPS', 'POST', '2017-08-25', 'AK', null, request, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
