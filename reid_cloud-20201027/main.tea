/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  

  checkConfig(config);
  @endpoint = getEndpoint('reid_cloud', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ExtractFaceFeatureCRORequest {
  tenantCode?: string(name='TenantCode', description='租户Id'),
  sceneId?: string(name='SceneId', description='场景Id'),
  image?: string(name='Image', description='image'),
  version?: string(name='Version', description='version'),
}

model ExtractFaceFeatureCROResponseBody = {
  success?: boolean(name='Success', description='是否成功'),
  errCode?: {
    errorMsg?: string(name='ErrorMsg', description='错误消息'),
    errorCode?: float(name='ErrorCode', description='错误码'),
    errorName?: string(name='ErrorName', description='错误名'),
  }(name='ErrCode', description='错误信息'),
  message?: string(name='Message', description='错误信息'),
  result?: [ float ](name='Result', description='数据对象'),
  requestId?: string(name='RequestId'),
}

model ExtractFaceFeatureCROResponse = {
  headers: map[string]string(name='headers'),
  body: ExtractFaceFeatureCROResponseBody(name='body'),
}

async function extractFaceFeatureCROWithOptions(request: ExtractFaceFeatureCRORequest, runtime: Util.RuntimeOptions): ExtractFaceFeatureCROResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ExtractFaceFeatureCRO', '2020-10-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function extractFaceFeatureCRO(request: ExtractFaceFeatureCRORequest): ExtractFaceFeatureCROResponse {
  var runtime = new Util.RuntimeOptions{};
  return extractFaceFeatureCROWithOptions(request, runtime);
}

model ExtractFaceAttributeCRORequest {
  tenantId?: string(name='TenantId', description='租户Id'),
  sceneId?: string(name='SceneId', description='场景Id'),
  image?: string(name='Image', description='图片地址'),
  types?: [ string ](name='Types', description='请求属性列表'),
}

model ExtractFaceAttributeCROResponseBody = {
  success?: boolean(name='Success', description='是否成功'),
  errCode?: string(name='ErrCode', description='错误code	'),
  message?: string(name='Message', description='错误消息'),
  result?: [ 
    {
      gender?: {
        score?: float(name='Score'),
        value?: string(name='Value'),
      }(name='Gender', description='性别'),
      genderScore?: float(name='GenderScore', description='性别置信度'),
      headpose?: {
        pitchAngle?: float(name='PitchAngle', description='上下角度'),
        rollAngle?: float(name='RollAngle', description='旋转角度'),
        yawAngle?: float(name='YawAngle', description='左右角度'),
      }(name='Headpose', description='人脸角度'),
      facetype?: string(name='Facetype', description='人脸类型'),
      blur?: float(name='Blur', description='人脸模糊分'),
      age?: float(name='Age', description='年龄'),
      faceRect?: {
        top?: int32(name='Top', description='上'),
        left?: int32(name='Left', description='左'),
        width?: int32(name='Width', description='宽'),
        height?: int32(name='Height', description='高'),
      }(name='FaceRect', description='人脸矩形框的位置'),
      facequal?: float(name='Facequal', description='质量分'),
      facerank?: float(name='Facerank', description='质量分'),
      genderValue?: int32(name='GenderValue', description='性别值'),
      mask?: {
        score?: float(name='Score'),
        value?: string(name='Value'),
      }(name='Mask'),
    }
  ](name='Result', description='返回结果'),
  requestId?: string(name='RequestId'),
}

model ExtractFaceAttributeCROResponse = {
  headers: map[string]string(name='headers'),
  body: ExtractFaceAttributeCROResponseBody(name='body'),
}

async function extractFaceAttributeCROWithOptions(request: ExtractFaceAttributeCRORequest, runtime: Util.RuntimeOptions): ExtractFaceAttributeCROResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExtractFaceAttributeCRO', '2020-10-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function extractFaceAttributeCRO(request: ExtractFaceAttributeCRORequest): ExtractFaceAttributeCROResponse {
  var runtime = new Util.RuntimeOptions{};
  return extractFaceAttributeCROWithOptions(request, runtime);
}

