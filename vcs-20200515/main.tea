import Util;
import RPCUtil;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('vcs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model GetMonitorListRequest = {
  corpId: string(name='CorpId'),
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
}

model GetMonitorListResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNo: integer(name='PageNo'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        taskId: string(name='TaskId'),
        status: string(name='Status'),
        monitorType: string(name='MonitorType'),
        ruleName: string(name='RuleName'),
        algorithmVendor: string(name='AlgorithmVendor'),
        createDate: string(name='CreateDate'),
        modifiedDate: string(name='ModifiedDate'),
        deviceList: string(name='DeviceList'),
        attributes: string(name='Attributes'),
        ruleExpression: string(name='RuleExpression'),
        notifierType: string(name='NotifierType'),
        notifierExtra: string(name='NotifierExtra'),
        description: string(name='Description'),
        expression: string(name='Expression'),
        imageMatch: string(name='ImageMatch'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function getMonitorListWithOptions(request: GetMonitorListRequest, runtime: Util.RuntimeOptions): GetMonitorListResponse {
  Util.validateModel(request);
  return doRequest('GetMonitorList', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getMonitorList(request: GetMonitorListRequest): GetMonitorListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMonitorListWithOptions(request, runtime);
}

model ListDeviceGroupsRequest = {
  deviceCodeList?: string(name='DeviceCodeList'),
  corpIdList?: string(name='CorpIdList'),
  name?: string(name='Name'),
  isPage: integer(name='IsPage'),
  pageNum: integer(name='PageNum'),
  pageSize: integer(name='PageSize'),
  group?: string(name='Group'),
}

model ListDeviceGroupsResponse = {
  requestId: string(name='RequestId'),
  code: string(name='Code'),
  message: string(name='Message'),
  data: [
    {
      totalCount: string(name='TotalCount'),
      list: [
        {
          deviceGroup: string(name='DeviceGroup'),
          deviceName: string(name='DeviceName'),
          deviceCode: string(name='DeviceCode'),
          bitRate: string(name='BitRate'),
          codingFormat: string(name='CodingFormat'),
          resolvingPower: string(name='ResolvingPower'),
          dataSourceType: string(name='DataSourceType'),
          regionName: string(name='RegionName'),
          regionId: string(name='RegionId'),
          installAddress: string(name='InstallAddress'),
          deviceSn: string(name='DeviceSn'),
          deviceStatus: string(name='DeviceStatus'),
          deviceStreamStatus: string(name='DeviceStreamStatus'),
          deviceComputeStatus: string(name='DeviceComputeStatus'),
        }
      ](name='List'),
    }
  ](name='Data'),
}

async function listDeviceGroupsWithOptions(request: ListDeviceGroupsRequest, runtime: Util.RuntimeOptions): ListDeviceGroupsResponse {
  Util.validateModel(request);
  return doRequest('ListDeviceGroups', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listDeviceGroups(request: ListDeviceGroupsRequest): ListDeviceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceGroupsWithOptions(request, runtime);
}

model SearchObjectRequest = {
  corpId: string(name='CorpId'),
  objectType: string(name='ObjectType'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  deviceList?: map[string]any(name='DeviceList'),
  picUrl?: string(name='PicUrl'),
  conditions?: map[string]any(name='Conditions'),
  algorithmType?: string(name='AlgorithmType'),
  imagePath?: map[string]any(name='ImagePath'),
}

model SearchObjectShrinkRequest = {
  corpId: string(name='CorpId'),
  objectType: string(name='ObjectType'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  deviceListShrink?: string(name='DeviceList'),
  picUrl?: string(name='PicUrl'),
  conditionsShrink?: string(name='Conditions'),
  algorithmType?: string(name='AlgorithmType'),
  imagePathShrink?: string(name='ImagePath'),
}

model SearchObjectResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        compareResult: string(name='CompareResult'),
        deviceID: string(name='DeviceID'),
        shotTime: long(name='ShotTime'),
        leftTopX: integer(name='LeftTopX'),
        leftTopY: integer(name='LeftTopY'),
        rightBtmX: integer(name='RightBtmX'),
        rightBtmY: integer(name='RightBtmY'),
        score: float(name='Score'),
        sourceID: string(name='SourceID'),
        sourceImagePath: string(name='SourceImagePath'),
        sourceImageUrl: string(name='SourceImageUrl'),
        targetImagePath: string(name='TargetImagePath'),
        targetImageUrl: string(name='TargetImageUrl'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function searchObjectWithOptions(tmp: SearchObjectRequest, runtime: Util.RuntimeOptions): SearchObjectResponse {
  Util.validateModel(tmp);
  var request = new SearchObjectShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.deviceList)) {
    request.deviceListShrink = Util.toJSONString(tmp.deviceList);
  }

  if (!Util.isUnset(tmp.conditions)) {
    request.conditionsShrink = Util.toJSONString(tmp.conditions);
  }

  if (!Util.isUnset(tmp.imagePath)) {
    request.imagePathShrink = Util.toJSONString(tmp.imagePath);
  }

  return doRequest('SearchObject', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function searchObject(request: SearchObjectRequest): SearchObjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchObjectWithOptions(request, runtime);
}

model DescribeDevicesRequest = {
  pageNum: integer(name='PageNum'),
  pageSize: integer(name='PageSize'),
  corpIdList: string(name='CorpIdList'),
}

model DescribeDevicesResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNum: integer(name='PageNum'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        inProtocol: string(name='InProtocol'),
        createTime: string(name='CreateTime'),
        deviceAddress: string(name='DeviceAddress'),
        deviceId: string(name='DeviceId'),
        deviceName: string(name='DeviceName'),
        deviceType: string(name='DeviceType'),
        latitude: string(name='Latitude'),
        longitude: string(name='Longitude'),
        status: string(name='Status'),
        vendor: string(name='Vendor'),
        corpId: string(name='CorpId'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function describeDevicesWithOptions(request: DescribeDevicesRequest, runtime: Util.RuntimeOptions): DescribeDevicesResponse {
  Util.validateModel(request);
  return doRequest('DescribeDevices', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function describeDevices(request: DescribeDevicesRequest): DescribeDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDevicesWithOptions(request, runtime);
}

model GetProfileListRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  name?: string(name='Name'),
  catalogId?: long(name='CatalogId'),
  idNumber?: string(name='IdNumber'),
  faceUrl?: string(name='FaceUrl'),
  liveAddress?: string(name='LiveAddress'),
  gender?: integer(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  sceneType?: string(name='SceneType'),
  bizId?: string(name='BizId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  personIdList?: map[string]any(name='PersonIdList'),
  profileIdList?: map[string]any(name='ProfileIdList'),
  matchingRateThreshold?: string(name='MatchingRateThreshold'),
  faceImageId?: string(name='FaceImageId'),
}

model GetProfileListShrinkRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  name?: string(name='Name'),
  catalogId?: long(name='CatalogId'),
  idNumber?: string(name='IdNumber'),
  faceUrl?: string(name='FaceUrl'),
  liveAddress?: string(name='LiveAddress'),
  gender?: integer(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  sceneType?: string(name='SceneType'),
  bizId?: string(name='BizId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  personIdListShrink?: string(name='PersonIdList'),
  profileIdListShrink?: string(name='ProfileIdList'),
  matchingRateThreshold?: string(name='MatchingRateThreshold'),
  faceImageId?: string(name='FaceImageId'),
}

model GetProfileListResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: long(name='PageNumber'),
    pageSize: long(name='PageSize'),
    success: boolean(name='Success'),
    total: long(name='Total'),
    records: [
      {
        sceneType: string(name='SceneType'),
        bizId: string(name='BizId'),
        faceUrl: string(name='FaceUrl'),
        gender: string(name='Gender'),
        idNumber: string(name='IdNumber'),
        isvSubId: string(name='IsvSubId'),
        searchMatchingRate: string(name='SearchMatchingRate'),
        personId: string(name='PersonId'),
        catalogId: integer(name='CatalogId'),
        profileId: integer(name='ProfileId'),
        name: string(name='Name'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function getProfileListWithOptions(tmp: GetProfileListRequest, runtime: Util.RuntimeOptions): GetProfileListResponse {
  Util.validateModel(tmp);
  var request = new GetProfileListShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.personIdList)) {
    request.personIdListShrink = Util.toJSONString(tmp.personIdList);
  }

  if (!Util.isUnset(tmp.profileIdList)) {
    request.profileIdListShrink = Util.toJSONString(tmp.profileIdList);
  }

  return doRequest('GetProfileList', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getProfileList(request: GetProfileListRequest): GetProfileListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProfileListWithOptions(request, runtime);
}

model GetProfileDetailRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  profileId: long(name='ProfileId'),
}

model GetProfileDetailResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    liveAddress: string(name='LiveAddress'),
    sceneType: string(name='SceneType'),
    bizId: string(name='BizId'),
    faceUrl: string(name='FaceUrl'),
    gender: string(name='Gender'),
    idNumber: string(name='IdNumber'),
    isvSubId: string(name='IsvSubId'),
    phoneNo: string(name='PhoneNo'),
    plateNo: string(name='PlateNo'),
    catalogId: integer(name='CatalogId'),
    profileId: integer(name='ProfileId'),
    name: string(name='Name'),
    personId: string(name='PersonId'),
  }(name='Data'),
}

async function getProfileDetailWithOptions(request: GetProfileDetailRequest, runtime: Util.RuntimeOptions): GetProfileDetailResponse {
  Util.validateModel(request);
  return doRequest('GetProfileDetail', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getProfileDetail(request: GetProfileDetailRequest): GetProfileDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProfileDetailWithOptions(request, runtime);
}

model DeleteProfileCatalogRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  catalogId: string(name='CatalogId'),
}

model DeleteProfileCatalogResponse = {
  code: string(name='Code'),
  data: boolean(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function deleteProfileCatalogWithOptions(request: DeleteProfileCatalogRequest, runtime: Util.RuntimeOptions): DeleteProfileCatalogResponse {
  Util.validateModel(request);
  return doRequest('DeleteProfileCatalog', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function deleteProfileCatalog(request: DeleteProfileCatalogRequest): DeleteProfileCatalogResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProfileCatalogWithOptions(request, runtime);
}

model BindPersonRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  personMatchingRate: string(name='PersonMatchingRate'),
  personId: string(name='PersonId'),
  profileId: long(name='ProfileId'),
}

model BindPersonResponse = {
  code: string(name='Code'),
  data: boolean(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function bindPersonWithOptions(request: BindPersonRequest, runtime: Util.RuntimeOptions): BindPersonResponse {
  Util.validateModel(request);
  return doRequest('BindPerson', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function bindPerson(request: BindPersonRequest): BindPersonResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindPersonWithOptions(request, runtime);
}

model UpdateProfileRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  name?: string(name='Name'),
  catalogId: long(name='CatalogId'),
  idNumber?: string(name='IdNumber'),
  faceUrl?: string(name='FaceUrl'),
  liveAddress?: string(name='LiveAddress'),
  gender?: integer(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  sceneType?: string(name='SceneType'),
  bizId?: string(name='BizId'),
  profileId: long(name='ProfileId'),
}

model UpdateProfileResponse = {
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function updateProfileWithOptions(request: UpdateProfileRequest, runtime: Util.RuntimeOptions): UpdateProfileResponse {
  Util.validateModel(request);
  return doRequest('UpdateProfile', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function updateProfile(request: UpdateProfileRequest): UpdateProfileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProfileWithOptions(request, runtime);
}

model UnbindPersonRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  profileId: long(name='ProfileId'),
}

model UnbindPersonResponse = {
  code: string(name='Code'),
  data: boolean(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function unbindPersonWithOptions(request: UnbindPersonRequest, runtime: Util.RuntimeOptions): UnbindPersonResponse {
  Util.validateModel(request);
  return doRequest('UnbindPerson', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function unbindPerson(request: UnbindPersonRequest): UnbindPersonResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindPersonWithOptions(request, runtime);
}

model AddProfileRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  name: string(name='Name'),
  catalogId: long(name='CatalogId'),
  idNumber?: string(name='IdNumber'),
  faceUrl?: string(name='FaceUrl'),
  liveAddress?: string(name='LiveAddress'),
  gender?: integer(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  sceneType?: string(name='SceneType'),
  bizId?: string(name='BizId'),
}

model AddProfileResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    liveAddress: string(name='LiveAddress'),
    sceneType: string(name='SceneType'),
    bizId: string(name='BizId'),
    faceUrl: string(name='FaceUrl'),
    gender: string(name='Gender'),
    idNumber: string(name='IdNumber'),
    isvSubId: string(name='IsvSubId'),
    phoneNo: string(name='PhoneNo'),
    plateNo: string(name='PlateNo'),
    catalogId: integer(name='CatalogId'),
    profileId: integer(name='ProfileId'),
    name: string(name='Name'),
  }(name='Data'),
}

async function addProfileWithOptions(request: AddProfileRequest, runtime: Util.RuntimeOptions): AddProfileResponse {
  Util.validateModel(request);
  return doRequest('AddProfile', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function addProfile(request: AddProfileRequest): AddProfileResponse {
  var runtime = new Util.RuntimeOptions{};
  return addProfileWithOptions(request, runtime);
}

model UpdateProfileCatalogRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  catalogId: long(name='CatalogId'),
  catalogName: string(name='CatalogName'),
}

model UpdateProfileCatalogResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    isvSubId: string(name='IsvSubId'),
    parentCatalogId: string(name='ParentCatalogId'),
    profileCount: long(name='ProfileCount'),
    catalogId: long(name='CatalogId'),
    catalogName: string(name='CatalogName'),
  }(name='Data'),
}

async function updateProfileCatalogWithOptions(request: UpdateProfileCatalogRequest, runtime: Util.RuntimeOptions): UpdateProfileCatalogResponse {
  Util.validateModel(request);
  return doRequest('UpdateProfileCatalog', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function updateProfileCatalog(request: UpdateProfileCatalogRequest): UpdateProfileCatalogResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProfileCatalogWithOptions(request, runtime);
}

model AddProfileCatalogRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  catalogName: string(name='CatalogName'),
  parentCatalogId?: long(name='ParentCatalogId'),
}

model AddProfileCatalogResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    catalogId: long(name='CatalogId'),
    catalogName: string(name='CatalogName'),
    isvSubId: string(name='IsvSubId'),
  }(name='Data'),
}

async function addProfileCatalogWithOptions(request: AddProfileCatalogRequest, runtime: Util.RuntimeOptions): AddProfileCatalogResponse {
  Util.validateModel(request);
  return doRequest('AddProfileCatalog', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function addProfileCatalog(request: AddProfileCatalogRequest): AddProfileCatalogResponse {
  var runtime = new Util.RuntimeOptions{};
  return addProfileCatalogWithOptions(request, runtime);
}

model GetCatalogListRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
}

model GetCatalogListResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: [
    {
      isvSubId: string(name='IsvSubId'),
      parentCatalogId: long(name='ParentCatalogId'),
      profileCount: long(name='ProfileCount'),
      catalogId: long(name='CatalogId'),
      catalogName: string(name='CatalogName'),
    }
  ](name='Data'),
}

async function getCatalogListWithOptions(request: GetCatalogListRequest, runtime: Util.RuntimeOptions): GetCatalogListResponse {
  Util.validateModel(request);
  return doRequest('GetCatalogList', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getCatalogList(request: GetCatalogListRequest): GetCatalogListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCatalogListWithOptions(request, runtime);
}

model DeleteProfileRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  profileId: long(name='ProfileId'),
}

model DeleteProfileResponse = {
  code: string(name='Code'),
  data: boolean(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function deleteProfileWithOptions(request: DeleteProfileRequest, runtime: Util.RuntimeOptions): DeleteProfileResponse {
  Util.validateModel(request);
  return doRequest('DeleteProfile', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function deleteProfile(request: DeleteProfileRequest): DeleteProfileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProfileWithOptions(request, runtime);
}

model UnbindCorpGroupRequest = {
  corpId: string(name='CorpId'),
  corpGroupId: string(name='CorpGroupId'),
}

model UnbindCorpGroupResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function unbindCorpGroupWithOptions(request: UnbindCorpGroupRequest, runtime: Util.RuntimeOptions): UnbindCorpGroupResponse {
  Util.validateModel(request);
  return doRequest('UnbindCorpGroup', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function unbindCorpGroup(request: UnbindCorpGroupRequest): UnbindCorpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindCorpGroupWithOptions(request, runtime);
}

model BindCorpGroupRequest = {
  corpId: string(name='CorpId'),
  corpGroupId: string(name='CorpGroupId'),
}

model BindCorpGroupResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function bindCorpGroupWithOptions(request: BindCorpGroupRequest, runtime: Util.RuntimeOptions): BindCorpGroupResponse {
  Util.validateModel(request);
  return doRequest('BindCorpGroup', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function bindCorpGroup(request: BindCorpGroupRequest): BindCorpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindCorpGroupWithOptions(request, runtime);
}

model ListUserGroupsRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
}

model ListUserGroupsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: [
    {
      creator: string(name='Creator'),
      userGroupName: string(name='UserGroupName'),
      isvSubId: string(name='IsvSubId'),
      userGroupId: long(name='UserGroupId'),
      userCount: long(name='UserCount'),
      createTime: string(name='CreateTime'),
      updateTime: string(name='UpdateTime'),
      parentUserGroupId: long(name='ParentUserGroupId'),
    }
  ](name='Data'),
}

async function listUserGroupsWithOptions(request: ListUserGroupsRequest, runtime: Util.RuntimeOptions): ListUserGroupsResponse {
  Util.validateModel(request);
  return doRequest('ListUserGroups', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listUserGroups(request: ListUserGroupsRequest): ListUserGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserGroupsWithOptions(request, runtime);
}

model GetPersonListRequest = {
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  faceUrl?: string(name='FaceUrl'),
  corpIdList?: map[string]any(name='CorpIdList'),
  faceMatchingRateThreshold?: string(name='FaceMatchingRateThreshold'),
  corpId?: string(name='CorpId'),
  personIdList?: map[string]any(name='PersonIdList'),
}

model GetPersonListShrinkRequest = {
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  faceUrl?: string(name='FaceUrl'),
  corpIdListShrink?: string(name='CorpIdList'),
  faceMatchingRateThreshold?: string(name='FaceMatchingRateThreshold'),
  corpId?: string(name='CorpId'),
  personIdListShrink?: string(name='PersonIdList'),
}

model GetPersonListResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: long(name='PageNumber'),
    pageSize: long(name='PageSize'),
    totalCount: long(name='TotalCount'),
    records: [
      {
        faceUrl: string(name='FaceUrl'),
        firstShotTime: long(name='FirstShotTime'),
        personId: string(name='PersonId'),
        searchMatchingRate: string(name='SearchMatchingRate'),
        lastShotTime: long(name='LastShotTime'),
        propertyTagList: [
          {
            code: string(name='Code'),
            tagCodeName: string(name='TagCodeName'),
            tagName: string(name='TagName'),
            value: string(name='Value'),
          }
        ](name='PropertyTagList'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function getPersonListWithOptions(tmp: GetPersonListRequest, runtime: Util.RuntimeOptions): GetPersonListResponse {
  Util.validateModel(tmp);
  var request = new GetPersonListShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.corpIdList)) {
    request.corpIdListShrink = Util.toJSONString(tmp.corpIdList);
  }

  if (!Util.isUnset(tmp.personIdList)) {
    request.personIdListShrink = Util.toJSONString(tmp.personIdList);
  }

  return doRequest('GetPersonList', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getPersonList(request: GetPersonListRequest): GetPersonListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPersonListWithOptions(request, runtime);
}

model ListUsersRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  userName?: string(name='UserName'),
  userGroupId?: long(name='UserGroupId'),
  idNumber?: string(name='IdNumber'),
  faceImageUrl?: string(name='FaceImageUrl'),
  address?: string(name='Address'),
  age?: integer(name='Age'),
  gender?: integer(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  attachment?: string(name='Attachment'),
  bizId?: string(name='BizId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  personList?: map[string]any(name='PersonList'),
  userList?: map[string]any(name='UserList'),
  matchingRateThreshold?: string(name='MatchingRateThreshold'),
}

model ListUsersShrinkRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  userName?: string(name='UserName'),
  userGroupId?: long(name='UserGroupId'),
  idNumber?: string(name='IdNumber'),
  faceImageUrl?: string(name='FaceImageUrl'),
  address?: string(name='Address'),
  age?: integer(name='Age'),
  gender?: integer(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  attachment?: string(name='Attachment'),
  bizId?: string(name='BizId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  personListShrink?: string(name='PersonList'),
  userListShrink?: string(name='UserList'),
  matchingRateThreshold?: string(name='MatchingRateThreshold'),
}

model ListUsersResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: long(name='PageNumber'),
    pageSize: long(name='PageSize'),
    success: long(name='Success'),
    total: long(name='Total'),
    records: [
      {
        userGroupId: integer(name='UserGroupId'),
        age: string(name='Age'),
        attachment: string(name='Attachment'),
        bizId: string(name='BizId'),
        faceImageUrl: string(name='FaceImageUrl'),
        gender: string(name='Gender'),
        idNumber: string(name='IdNumber'),
        userId: integer(name='UserId'),
        userName: string(name='UserName'),
        isvSubId: string(name='IsvSubId'),
        matchingRate: string(name='MatchingRate'),
        personId: string(name='PersonId'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listUsersWithOptions(tmp: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(tmp);
  var request = new ListUsersShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.personList)) {
    request.personListShrink = Util.toJSONString(tmp.personList);
  }

  if (!Util.isUnset(tmp.userList)) {
    request.userListShrink = Util.toJSONString(tmp.userList);
  }

  return doRequest('ListUsers', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model CreateUserRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  userName: string(name='UserName'),
  userGroupId: long(name='UserGroupId'),
  idNumber?: string(name='IdNumber'),
  faceImageUrl?: string(name='FaceImageUrl'),
  address?: string(name='Address'),
  age?: integer(name='Age'),
  gender?: integer(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  attachment?: string(name='Attachment'),
  bizId?: string(name='BizId'),
}

model CreateUserResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    userId: integer(name='UserId'),
    isvSubId: string(name='IsvSubId'),
    userName: string(name='UserName'),
    userGroupId: integer(name='UserGroupId'),
    idNumber: string(name='IdNumber'),
    faceImageUrl: string(name='FaceImageUrl'),
    address: string(name='Address'),
    age: string(name='Age'),
    gender: string(name='Gender'),
    plateNo: string(name='PlateNo'),
    phoneNo: string(name='PhoneNo'),
    attachment: string(name='Attachment'),
    bizId: string(name='BizId'),
  }(name='Data'),
}

async function createUserWithOptions(request: CreateUserRequest, runtime: Util.RuntimeOptions): CreateUserResponse {
  Util.validateModel(request);
  return doRequest('CreateUser', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserWithOptions(request, runtime);
}

model BindUserRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  matchingRate: string(name='MatchingRate'),
  personId: string(name='PersonId'),
  userId: long(name='UserId'),
}

model BindUserResponse = {
  code: string(name='Code'),
  data: boolean(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function bindUserWithOptions(request: BindUserRequest, runtime: Util.RuntimeOptions): BindUserResponse {
  Util.validateModel(request);
  return doRequest('BindUser', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function bindUser(request: BindUserRequest): BindUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindUserWithOptions(request, runtime);
}

model GetUserDetailRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  userId: long(name='UserId'),
  needFaceDetail?: boolean(name='NeedFaceDetail'),
}

model GetUserDetailResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    address: string(name='Address'),
    age: string(name='Age'),
    attachment: string(name='Attachment'),
    bizId: string(name='BizId'),
    faceImageUrl: string(name='FaceImageUrl'),
    gender: string(name='Gender'),
    idNumber: string(name='IdNumber'),
    phoneNo: string(name='PhoneNo'),
    plateNo: string(name='PlateNo'),
    userGroupId: integer(name='UserGroupId'),
    userId: integer(name='UserId'),
    userName: string(name='UserName'),
    isvSubId: string(name='IsvSubId'),
  }(name='Data'),
}

async function getUserDetailWithOptions(request: GetUserDetailRequest, runtime: Util.RuntimeOptions): GetUserDetailResponse {
  Util.validateModel(request);
  return doRequest('GetUserDetail', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getUserDetail(request: GetUserDetailRequest): GetUserDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserDetailWithOptions(request, runtime);
}

model UploadImageRequest = {
  imageUrl: string(name='ImageUrl'),
}

model UploadImageResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function uploadImageWithOptions(request: UploadImageRequest, runtime: Util.RuntimeOptions): UploadImageResponse {
  Util.validateModel(request);
  return doRequest('UploadImage', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function uploadImage(request: UploadImageRequest): UploadImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadImageWithOptions(request, runtime);
}

model UpdateUserGroupRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  userGroupId: long(name='UserGroupId'),
  userGroupName: string(name='UserGroupName'),
}

model UpdateUserGroupResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    userGroupId: long(name='UserGroupId'),
    isvSubId: string(name='IsvSubId'),
    userGroupName: string(name='UserGroupName'),
    userCount: long(name='UserCount'),
    parentUserGroupId: string(name='ParentUserGroupId'),
  }(name='Data'),
}

async function updateUserGroupWithOptions(request: UpdateUserGroupRequest, runtime: Util.RuntimeOptions): UpdateUserGroupResponse {
  Util.validateModel(request);
  return doRequest('UpdateUserGroup', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function updateUserGroup(request: UpdateUserGroupRequest): UpdateUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserGroupWithOptions(request, runtime);
}

model CreateUserGroupRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  userGroupName: string(name='UserGroupName'),
  parentUserGroupId?: long(name='ParentUserGroupId'),
}

model CreateUserGroupResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    userGroupName: string(name='UserGroupName'),
    isvSubId: string(name='IsvSubId'),
    userGroupId: long(name='UserGroupId'),
  }(name='Data'),
}

async function createUserGroupWithOptions(request: CreateUserGroupRequest, runtime: Util.RuntimeOptions): CreateUserGroupResponse {
  Util.validateModel(request);
  return doRequest('CreateUserGroup', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function createUserGroup(request: CreateUserGroupRequest): CreateUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserGroupWithOptions(request, runtime);
}

model UnbindUserRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  userId: long(name='UserId'),
}

model UnbindUserResponse = {
  code: string(name='Code'),
  data: boolean(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function unbindUserWithOptions(request: UnbindUserRequest, runtime: Util.RuntimeOptions): UnbindUserResponse {
  Util.validateModel(request);
  return doRequest('UnbindUser', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function unbindUser(request: UnbindUserRequest): UnbindUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindUserWithOptions(request, runtime);
}

model UpdateUserRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  userName?: string(name='UserName'),
  userGroupId: long(name='UserGroupId'),
  idNumber?: string(name='IdNumber'),
  faceImageUrl?: string(name='FaceImageUrl'),
  faceImageContent?: string(name='FaceImageContent'),
  address?: string(name='Address'),
  age?: integer(name='Age'),
  gender?: integer(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  attachment?: string(name='Attachment'),
  bizId?: string(name='BizId'),
  userId: long(name='UserId'),
}

model UpdateUserResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function updateUserWithOptions(request: UpdateUserRequest, runtime: Util.RuntimeOptions): UpdateUserResponse {
  Util.validateModel(request);
  return doRequest('UpdateUser', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserWithOptions(request, runtime);
}

model DeleteUserRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  userId: long(name='UserId'),
}

model DeleteUserResponse = {
  code: string(name='Code'),
  data: boolean(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function deleteUserWithOptions(request: DeleteUserRequest, runtime: Util.RuntimeOptions): DeleteUserResponse {
  Util.validateModel(request);
  return doRequest('DeleteUser', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserWithOptions(request, runtime);
}

model DeleteUserGroupRequest = {
  corpId?: string(name='CorpId'),
  isvSubId: string(name='IsvSubId'),
  userGroupId: string(name='UserGroupId'),
}

model DeleteUserGroupResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: boolean(name='Data'),
}

async function deleteUserGroupWithOptions(request: DeleteUserGroupRequest, runtime: Util.RuntimeOptions): DeleteUserGroupResponse {
  Util.validateModel(request);
  return doRequest('DeleteUserGroup', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function deleteUserGroup(request: DeleteUserGroupRequest): DeleteUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserGroupWithOptions(request, runtime);
}

model ListPersonVisitCountRequest = {
  corpId: string(name='CorpId'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  aggregateType: string(name='AggregateType'),
  tagCode: string(name='TagCode'),
  timeAggregateType: string(name='TimeAggregateType'),
  minVal?: integer(name='MinVal'),
  maxVal?: integer(name='MaxVal'),
  countType?: string(name='CountType'),
}

model ListPersonVisitCountResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  pageNo: string(name='PageNo'),
  pageSize: string(name='PageSize'),
  requestId: string(name='RequestId'),
  success: string(name='Success'),
  totalCount: string(name='TotalCount'),
  data: [
    {
      corpId: string(name='CorpId'),
      deviceId: string(name='DeviceId'),
      groupId: string(name='GroupId'),
      personId: string(name='PersonId'),
      tagCode: string(name='TagCode'),
      tagMetrics: string(name='TagMetrics'),
      hourId: string(name='HourId'),
      dayId: string(name='DayId'),
    }
  ](name='Data'),
}

async function listPersonVisitCountWithOptions(request: ListPersonVisitCountRequest, runtime: Util.RuntimeOptions): ListPersonVisitCountResponse {
  Util.validateModel(request);
  return doRequest('ListPersonVisitCount', 'HTTPS', 'POST', '2020-05-15', 'AK,APP', null, request, runtime);
}

async function listPersonVisitCount(request: ListPersonVisitCountRequest): ListPersonVisitCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPersonVisitCountWithOptions(request, runtime);
}

model ListEventAlgorithmDetailsRequest = {
  corpId: string(name='CorpId'),
  eventType: string(name='EventType'),
  dataSourceId?: string(name='DataSourceId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  sourceId?: string(name='SourceId'),
  recordId?: string(name='RecordId'),
  eventValue?: string(name='EventValue'),
  extendValue?: string(name='ExtendValue'),
}

model ListEventAlgorithmDetailsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  requestId: string(name='RequestId'),
  success: string(name='Success'),
  totalCount: integer(name='TotalCount'),
  data: [
    {
      corpId: string(name='CorpId'),
      dataSourceId: string(name='DataSourceId'),
      eventType: string(name='EventType'),
      eventValue: string(name='EventValue'),
      extendValue: string(name='ExtendValue'),
      extraExtendValue: string(name='ExtraExtendValue'),
      faceCount: string(name='FaceCount'),
      leftTopX: string(name='LeftTopX'),
      leftTopY: string(name='LeftTopY'),
      picUrlPath: string(name='PicUrlPath'),
      pointX: string(name='PointX'),
      pointY: string(name='PointY'),
      recordId: string(name='RecordId'),
      rightBottomX: string(name='RightBottomX'),
      rightBottomY: string(name='RightBottomY'),
      shotTime: string(name='ShotTime'),
      sourceId: string(name='SourceId'),
      targetPicUrlPath: string(name='TargetPicUrlPath'),
    }
  ](name='Data'),
}

async function listEventAlgorithmDetailsWithOptions(request: ListEventAlgorithmDetailsRequest, runtime: Util.RuntimeOptions): ListEventAlgorithmDetailsResponse {
  Util.validateModel(request);
  return doRequest('ListEventAlgorithmDetails', 'HTTPS', 'POST', '2020-05-15', 'AK,APP', null, request, runtime);
}

async function listEventAlgorithmDetails(request: ListEventAlgorithmDetailsRequest): ListEventAlgorithmDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEventAlgorithmDetailsWithOptions(request, runtime);
}

model ListCorpMetricsRequest = {
  corpId: string(name='CorpId'),
  tagCode: string(name='TagCode'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
  userGroupList?: string(name='UserGroupList'),
  deviceGroupList?: string(name='DeviceGroupList'),
  deviceIdList?: string(name='DeviceIdList'),
}

model ListCorpMetricsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  requestId: string(name='RequestId'),
  success: string(name='Success'),
  totalCount: integer(name='TotalCount'),
  data: [
    {
      corpId: string(name='CorpId'),
      tagCode: string(name='TagCode'),
      tagMetrics: string(name='TagMetrics'),
      tagValue: string(name='TagValue'),
      deviceGroupId: string(name='DeviceGroupId'),
      deviceId: string(name='DeviceId'),
      userGroupId: string(name='UserGroupId'),
      personId: string(name='PersonId'),
      dateId: string(name='DateId'),
    }
  ](name='Data'),
}

async function listCorpMetricsWithOptions(request: ListCorpMetricsRequest, runtime: Util.RuntimeOptions): ListCorpMetricsResponse {
  Util.validateModel(request);
  return doRequest('ListCorpMetrics', 'HTTPS', 'POST', '2020-05-15', 'AK,APP', null, request, runtime);
}

async function listCorpMetrics(request: ListCorpMetricsRequest): ListCorpMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpMetricsWithOptions(request, runtime);
}

model ListPersonTraceRequest = {
  startTime: string(name='StartTime'),
  corpId?: string(name='CorpId'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
  endTime: string(name='EndTime'),
  dataSourceId?: string(name='DataSourceId'),
  personId?: string(name='PersonId'),
  groupId: string(name='GroupId'),
}

model ListPersonTraceResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  success: string(name='Success'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  data: [
    {
      date: string(name='Date'),
      lastTime: string(name='LastTime'),
      startTime: string(name='StartTime'),
      endSourceImage: string(name='EndSourceImage'),
      deviceId: string(name='DeviceId'),
      startTargetImage: string(name='StartTargetImage'),
      groupId: string(name='GroupId'),
      personId: string(name='PersonId'),
      startSourceImage: string(name='StartSourceImage'),
      corpId: string(name='CorpId'),
      endTargetImage: string(name='EndTargetImage'),
    }
  ](name='Data'),
}

async function listPersonTraceWithOptions(request: ListPersonTraceRequest, runtime: Util.RuntimeOptions): ListPersonTraceResponse {
  Util.validateModel(request);
  return doRequest('ListPersonTrace', 'HTTPS', 'POST', '2020-05-15', 'AK,APP', null, request, runtime);
}

async function listPersonTrace(request: ListPersonTraceRequest): ListPersonTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPersonTraceWithOptions(request, runtime);
}

model ListCorpGroupMetricsRequest = {
  startTime: string(name='StartTime'),
  tagCode: string(name='TagCode'),
  endTime: string(name='EndTime'),
  groupId: string(name='GroupId'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
  deviceId?: string(name='DeviceId'),
  corpId?: string(name='CorpId'),
  userGroup?: string(name='UserGroup'),
  deviceGroup?: string(name='DeviceGroup'),
}

model ListCorpGroupMetricsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  totalCount: integer(name='TotalCount'),
  success: string(name='Success'),
  data: [
    {
      dateId: string(name='DateId'),
      tagMetrics: string(name='TagMetrics'),
      tagCode: string(name='TagCode'),
      tagValue: string(name='TagValue'),
      corpGroupId: string(name='CorpGroupId'),
      corpId: string(name='CorpId'),
      deviceGroupId: string(name='DeviceGroupId'),
      deviceId: string(name='DeviceId'),
      userGroupId: string(name='UserGroupId'),
      personID: string(name='PersonID'),
    }
  ](name='Data'),
}

async function listCorpGroupMetricsWithOptions(request: ListCorpGroupMetricsRequest, runtime: Util.RuntimeOptions): ListCorpGroupMetricsResponse {
  Util.validateModel(request);
  return doRequest('ListCorpGroupMetrics', 'HTTPS', 'POST', '2020-05-15', 'AK,APP', null, request, runtime);
}

async function listCorpGroupMetrics(request: ListCorpGroupMetricsRequest): ListCorpGroupMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpGroupMetricsWithOptions(request, runtime);
}

model GetFaceModelResultRequest = {
  pictureId: string(name='PictureId'),
  pictureContent?: string(name='PictureContent'),
  pictureUrl?: string(name='PictureUrl'),
}

model GetFaceModelResultResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    records: [
      {
        mustacheStyle: string(name='MustacheStyle'),
        faceStyle: string(name='FaceStyle'),
        capStyle: integer(name='CapStyle'),
        skinColor: integer(name='SkinColor'),
        rightBottomY: float(name='RightBottomY'),
        rightBottomX: float(name='RightBottomX'),
        hairStyle: integer(name='HairStyle'),
        genderCode: integer(name='GenderCode'),
        respiratorColor: integer(name='RespiratorColor'),
        ethicCode: integer(name='EthicCode'),
        ageLowerLimit: integer(name='AgeLowerLimit'),
        leftTopY: float(name='LeftTopY'),
        leftTopX: float(name='LeftTopX'),
        hairColor: integer(name='HairColor'),
        ageUpLimit: integer(name='AgeUpLimit'),
        glassStyle: integer(name='GlassStyle'),
        glassColor: integer(name='GlassColor'),
        capColor: integer(name='CapColor'),
        capColorReliability: string(name='CapColorReliability'),
        respiratorColorReliability: string(name='RespiratorColorReliability'),
        ethicCodeReliability: string(name='EthicCodeReliability'),
        genderCodeReliability: string(name='GenderCodeReliability'),
        glassColorReliability: string(name='GlassColorReliability'),
        skinColorReliability: string(name='SkinColorReliability'),
        mustacheStyleReliability: string(name='MustacheStyleReliability'),
        capStyleReliability: string(name='CapStyleReliability'),
        faceStyleReliability: string(name='FaceStyleReliability'),
        glassStyleReliability: string(name='GlassStyleReliability'),
        ageUpLimitReliability: string(name='AgeUpLimitReliability'),
        hairStyleReliability: string(name='HairStyleReliability'),
        ageLowerLimitReliability: string(name='AgeLowerLimitReliability'),
        hairColorReliability: string(name='HairColorReliability'),
        featureData: [ float ](name='FeatureData'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function getFaceModelResultWithOptions(request: GetFaceModelResultRequest, runtime: Util.RuntimeOptions): GetFaceModelResultResponse {
  Util.validateModel(request);
  return doRequest('GetFaceModelResult', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getFaceModelResult(request: GetFaceModelResultRequest): GetFaceModelResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFaceModelResultWithOptions(request, runtime);
}

model CreateCorpGroupRequest = {
  corpId: string(name='CorpId'),
  groupId: string(name='GroupId'),
  clientToken: string(name='ClientToken'),
}

model CreateCorpGroupResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function createCorpGroupWithOptions(request: CreateCorpGroupRequest, runtime: Util.RuntimeOptions): CreateCorpGroupResponse {
  Util.validateModel(request);
  return doRequest('CreateCorpGroup', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function createCorpGroup(request: CreateCorpGroupRequest): CreateCorpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCorpGroupWithOptions(request, runtime);
}

model ListCorpGroupsRequest = {
  corpId: string(name='CorpId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
}

model ListCorpGroupsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: long(name='PageNumber'),
    pageSize: long(name='PageSize'),
    totalCount: long(name='TotalCount'),
    totalPage: long(name='TotalPage'),
    records: [ string ](name='Records'),
  }(name='Data'),
}

async function listCorpGroupsWithOptions(request: ListCorpGroupsRequest, runtime: Util.RuntimeOptions): ListCorpGroupsResponse {
  Util.validateModel(request);
  return doRequest('ListCorpGroups', 'HTTPS', 'POST', '2020-05-15', 'AK,APP', null, request, runtime);
}

async function listCorpGroups(request: ListCorpGroupsRequest): ListCorpGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpGroupsWithOptions(request, runtime);
}

model DeleteCorpGroupRequest = {
  corpId: string(name='CorpId'),
  groupId: string(name='GroupId'),
}

model DeleteCorpGroupResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function deleteCorpGroupWithOptions(request: DeleteCorpGroupRequest, runtime: Util.RuntimeOptions): DeleteCorpGroupResponse {
  Util.validateModel(request);
  return doRequest('DeleteCorpGroup', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function deleteCorpGroup(request: DeleteCorpGroupRequest): DeleteCorpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCorpGroupWithOptions(request, runtime);
}

model InvokeMotorModelRequest = {
  picId: string(name='PicId'),
  corpId: string(name='CorpId'),
  picPath?: string(name='PicPath'),
  picUrl?: string(name='PicUrl'),
}

model InvokeMotorModelResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    structList: string(name='StructList'),
  }(name='Data'),
}

async function invokeMotorModelWithOptions(request: InvokeMotorModelRequest, runtime: Util.RuntimeOptions): InvokeMotorModelResponse {
  Util.validateModel(request);
  return doRequest('InvokeMotorModel', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function invokeMotorModel(request: InvokeMotorModelRequest): InvokeMotorModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeMotorModelWithOptions(request, runtime);
}

model GetDeviceConfigRequest = {
  deviceSn: string(name='DeviceSn'),
  deviceTimeStamp: string(name='DeviceTimeStamp'),
}

model GetDeviceConfigResponse = {
  audioEnable: boolean(name='AudioEnable'),
  audioFormat: string(name='AudioFormat'),
  bitRate: string(name='BitRate'),
  code: string(name='Code'),
  deviceAddress: string(name='DeviceAddress'),
  deviceName: string(name='DeviceName'),
  encodeFormat: string(name='EncodeFormat'),
  frameRate: string(name='FrameRate'),
  govLength: integer(name='GovLength'),
  latitude: string(name='Latitude'),
  longitude: string(name='Longitude'),
  message: string(name='Message'),
  OSDTimeEnable: string(name='OSDTimeEnable'),
  OSDTimeType: string(name='OSDTimeType'),
  OSDTimeX: string(name='OSDTimeX'),
  OSDTimeY: string(name='OSDTimeY'),
  requestId: string(name='RequestId'),
  resolution: string(name='Resolution'),
  retryInterval: string(name='RetryInterval'),
  deviceId: string(name='DeviceId'),
  userName: string(name='UserName'),
  passWord: string(name='PassWord'),
  protocol: string(name='Protocol'),
  serverId: string(name='ServerId'),
  serverPort: string(name='ServerPort'),
  serverIp: string(name='ServerIp'),
  OSDList: [
    {
      text: string(name='Text'),
      leftTopX: string(name='LeftTopX'),
      leftTopY: string(name='LeftTopY'),
    }
  ](name='OSDList'),
}

async function getDeviceConfigWithOptions(request: GetDeviceConfigRequest, runtime: Util.RuntimeOptions): GetDeviceConfigResponse {
  Util.validateModel(request);
  return doRequest('GetDeviceConfig', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getDeviceConfig(request: GetDeviceConfigRequest): GetDeviceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceConfigWithOptions(request, runtime);
}

model SyncDeviceTimeRequest = {
  deviceSn: string(name='DeviceSn'),
  deviceTimeStamp: string(name='DeviceTimeStamp'),
}

model SyncDeviceTimeResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  NTPServer: string(name='NTPServer'),
  requestId: string(name='RequestId'),
  retryInterval: string(name='RetryInterval'),
  syncInterval: string(name='SyncInterval'),
  timeStamp: string(name='TimeStamp'),
}

async function syncDeviceTimeWithOptions(request: SyncDeviceTimeRequest, runtime: Util.RuntimeOptions): SyncDeviceTimeResponse {
  Util.validateModel(request);
  return doRequest('SyncDeviceTime', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function syncDeviceTime(request: SyncDeviceTimeRequest): SyncDeviceTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncDeviceTimeWithOptions(request, runtime);
}

model RegisterDeviceRequest = {
  deviceSn: string(name='DeviceSn'),
  deviceId?: string(name='DeviceId'),
  serverId?: string(name='ServerId'),
  deviceTimeStamp: string(name='DeviceTimeStamp'),
}

model RegisterDeviceResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  retryInterval: string(name='RetryInterval'),
}

async function registerDeviceWithOptions(request: RegisterDeviceRequest, runtime: Util.RuntimeOptions): RegisterDeviceResponse {
  Util.validateModel(request);
  return doRequest('RegisterDevice', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function registerDevice(request: RegisterDeviceRequest): RegisterDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerDeviceWithOptions(request, runtime);
}

model ReportDeviceCapacityRequest = {
  longitude?: string(name='Longitude'),
  latitude?: string(name='Latitude'),
  audioFormat?: string(name='AudioFormat'),
  presetNum?: string(name='PresetNum'),
  PTZCapacity?: string(name='PTZCapacity'),
  deviceSn: string(name='DeviceSn'),
  streamCapacities: [
    {
      encodeFormat: string(name='EncodeFormat'),
      resolution: string(name='Resolution'),
      maxFrameRate: string(name='MaxFrameRate'),
      maxStream: string(name='MaxStream'),
      bitrateRange: string(name='BitrateRange'),
      govLengthRange: string(name='GovLengthRange'),
    }
  ](name='StreamCapacities'),
  deviceTimeStamp: string(name='DeviceTimeStamp'),
}

model ReportDeviceCapacityResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  retryInterval: string(name='RetryInterval'),
}

async function reportDeviceCapacityWithOptions(request: ReportDeviceCapacityRequest, runtime: Util.RuntimeOptions): ReportDeviceCapacityResponse {
  Util.validateModel(request);
  return doRequest('ReportDeviceCapacity', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function reportDeviceCapacity(request: ReportDeviceCapacityRequest): ReportDeviceCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportDeviceCapacityWithOptions(request, runtime);
}

model SaveVideoSummaryTaskVideoRequest = {
  corpId: string(name='CorpId'),
  taskId: long(name='TaskId'),
  saveVideo: boolean(name='SaveVideo'),
}

model SaveVideoSummaryTaskVideoResponse = {
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function saveVideoSummaryTaskVideoWithOptions(request: SaveVideoSummaryTaskVideoRequest, runtime: Util.RuntimeOptions): SaveVideoSummaryTaskVideoResponse {
  Util.validateModel(request);
  return doRequest('SaveVideoSummaryTaskVideo', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function saveVideoSummaryTaskVideo(request: SaveVideoSummaryTaskVideoRequest): SaveVideoSummaryTaskVideoResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveVideoSummaryTaskVideoWithOptions(request, runtime);
}

model ListBodyAlgorithmResultsRequest = {
  corpId: string(name='CorpId'),
  algorithmType: string(name='AlgorithmType'),
  dataSourceId?: string(name='DataSourceId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
  capStyle?: string(name='CapStyle'),
}

model ListBodyAlgorithmResultsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        capStyle: string(name='CapStyle'),
        corpId: string(name='CorpId'),
        dataSourceId: string(name='DataSourceId'),
        personId: string(name='PersonId'),
        genderCode: string(name='GenderCode'),
        hairStyle: string(name='HairStyle'),
        leftTopX: float(name='LeftTopX'),
        leftTopY: float(name='LeftTopY'),
        maxAge: string(name='MaxAge'),
        minAge: string(name='MinAge'),
        picUrlPath: string(name='PicUrlPath'),
        rightBottomX: float(name='RightBottomX'),
        rightBottomY: float(name='RightBottomY'),
        shotTime: string(name='ShotTime'),
        targetPicUrlPath: string(name='TargetPicUrlPath'),
        coatLength: string(name='CoatLength'),
        coatStyle: string(name='CoatStyle'),
        trousersLength: string(name='TrousersLength'),
        trousersStyle: string(name='TrousersStyle'),
        coatColor: string(name='CoatColor'),
        trousersColor: string(name='TrousersColor'),
        sourceId: string(name='SourceId'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listBodyAlgorithmResultsWithOptions(request: ListBodyAlgorithmResultsRequest, runtime: Util.RuntimeOptions): ListBodyAlgorithmResultsResponse {
  Util.validateModel(request);
  return doRequest('ListBodyAlgorithmResults', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listBodyAlgorithmResults(request: ListBodyAlgorithmResultsRequest): ListBodyAlgorithmResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBodyAlgorithmResultsWithOptions(request, runtime);
}

model AddDataSourceRequest = {
  corpId: string(name='CorpId'),
  dataSourceName: string(name='DataSourceName'),
  dataSourceType: string(name='DataSourceType'),
  description?: string(name='Description'),
  fileRetentionDays?: integer(name='FileRetentionDays'),
}

model AddDataSourceResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  data: {
    dataSourceId: string(name='DataSourceId'),
    kafkaTopic: string(name='KafkaTopic'),
    ossPath: string(name='OssPath'),
  }(name='Data'),
}

async function addDataSourceWithOptions(request: AddDataSourceRequest, runtime: Util.RuntimeOptions): AddDataSourceResponse {
  Util.validateModel(request);
  return doRequest('AddDataSource', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function addDataSource(request: AddDataSourceRequest): AddDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDataSourceWithOptions(request, runtime);
}

model GetVideoComposeResultRequest = {
  corpId: string(name='CorpId'),
  taskRequestId: string(name='TaskRequestId'),
}

model GetVideoComposeResultResponse = {
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  videoUrl: string(name='VideoUrl'),
  code: string(name='Code'),
  status: string(name='Status'),
}

async function getVideoComposeResultWithOptions(request: GetVideoComposeResultRequest, runtime: Util.RuntimeOptions): GetVideoComposeResultResponse {
  Util.validateModel(request);
  return doRequest('GetVideoComposeResult', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getVideoComposeResult(request: GetVideoComposeResultRequest): GetVideoComposeResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoComposeResultWithOptions(request, runtime);
}

model CreateVideoComposeTaskRequest = {
  corpId: string(name='CorpId'),
  bucketName: string(name='BucketName'),
  domainName?: string(name='DomainName'),
  imageFileNames: string(name='ImageFileNames'),
  audioFileName: string(name='AudioFileName'),
  imageParameters: string(name='ImageParameters'),
  videoFormat?: string(name='VideoFormat'),
  videoFrameRate?: integer(name='VideoFrameRate'),
}

model CreateVideoComposeTaskResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  domainName: string(name='DomainName'),
  bucketName: string(name='BucketName'),
}

async function createVideoComposeTaskWithOptions(request: CreateVideoComposeTaskRequest, runtime: Util.RuntimeOptions): CreateVideoComposeTaskResponse {
  Util.validateModel(request);
  return doRequest('CreateVideoComposeTask', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function createVideoComposeTask(request: CreateVideoComposeTaskRequest): CreateVideoComposeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVideoComposeTaskWithOptions(request, runtime);
}

model DeleteDataSourceRequest = {
  corpId: string(name='CorpId'),
  dataSourceId: string(name='DataSourceId'),
}

model DeleteDataSourceResponse = {
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
}

async function deleteDataSourceWithOptions(request: DeleteDataSourceRequest, runtime: Util.RuntimeOptions): DeleteDataSourceResponse {
  Util.validateModel(request);
  return doRequest('DeleteDataSource', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceWithOptions(request, runtime);
}

model UploadFileRequest = {
  fileType: string(name='FileType'),
  MD5?: string(name='MD5'),
  corpId: string(name='CorpId'),
  fileContent?: string(name='FileContent'),
  fileName: string(name='FileName'),
  fileAliasName?: string(name='FileAliasName'),
  dataSourceId: string(name='DataSourceId'),
  filePath?: string(name='FilePath'),
}

model UploadFileResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    records: [
      {
        ossPath: string(name='OssPath'),
        sourceId: string(name='SourceId'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function uploadFileWithOptions(request: UploadFileRequest, runtime: Util.RuntimeOptions): UploadFileResponse {
  Util.validateModel(request);
  return doRequest('UploadFile', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function uploadFile(request: UploadFileRequest): UploadFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadFileWithOptions(request, runtime);
}

model ListEventAlgorithmResultsRequest = {
  corpId: string(name='CorpId'),
  eventType: string(name='EventType'),
  dataSourceId?: string(name='DataSourceId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
  extendValue?: string(name='ExtendValue'),
}

model ListEventAlgorithmResultsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  extendValue: string(name='ExtendValue'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        capStyle: string(name='CapStyle'),
        corpId: string(name='CorpId'),
        dataSourceId: string(name='DataSourceId'),
        eventType: string(name='EventType'),
        faceCount: string(name='FaceCount'),
        picUrlPath: string(name='PicUrlPath'),
        shotTime: string(name='ShotTime'),
        targetPicUrlPath: string(name='TargetPicUrlPath'),
        recordId: string(name='RecordId'),
        extendValue: string(name='ExtendValue'),
        extendValueTwo: string(name='ExtendValueTwo'),
        extendValueThree: string(name='ExtendValueThree'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listEventAlgorithmResultsWithOptions(request: ListEventAlgorithmResultsRequest, runtime: Util.RuntimeOptions): ListEventAlgorithmResultsResponse {
  Util.validateModel(request);
  return doRequest('ListEventAlgorithmResults', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listEventAlgorithmResults(request: ListEventAlgorithmResultsRequest): ListEventAlgorithmResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEventAlgorithmResultsWithOptions(request, runtime);
}

model DeleteVideoSummaryTaskRequest = {
  corpId: string(name='CorpId'),
  taskId: string(name='TaskId'),
}

model DeleteVideoSummaryTaskResponse = {
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function deleteVideoSummaryTaskWithOptions(request: DeleteVideoSummaryTaskRequest, runtime: Util.RuntimeOptions): DeleteVideoSummaryTaskResponse {
  Util.validateModel(request);
  return doRequest('DeleteVideoSummaryTask', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function deleteVideoSummaryTask(request: DeleteVideoSummaryTaskRequest): DeleteVideoSummaryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVideoSummaryTaskWithOptions(request, runtime);
}

model GetVideoSummaryTaskResultRequest = {
  corpId: string(name='CorpId'),
  taskId: string(name='TaskId'),
}

model GetVideoSummaryTaskResultResponse = {
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function getVideoSummaryTaskResultWithOptions(request: GetVideoSummaryTaskResultRequest, runtime: Util.RuntimeOptions): GetVideoSummaryTaskResultResponse {
  Util.validateModel(request);
  return doRequest('GetVideoSummaryTaskResult', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getVideoSummaryTaskResult(request: GetVideoSummaryTaskResultRequest): GetVideoSummaryTaskResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoSummaryTaskResultWithOptions(request, runtime);
}

model CreateVideoSummaryTaskRequest = {
  corpId: string(name='CorpId'),
  deviceId: string(name='DeviceId'),
  startTimeStamp: long(name='StartTimeStamp'),
  endTimeStamp: long(name='EndTimeStamp'),
  optionList?: string(name='OptionList'),
  liveVideoSummary?: string(name='LiveVideoSummary'),
}

model CreateVideoSummaryTaskResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function createVideoSummaryTaskWithOptions(request: CreateVideoSummaryTaskRequest, runtime: Util.RuntimeOptions): CreateVideoSummaryTaskResponse {
  Util.validateModel(request);
  return doRequest('CreateVideoSummaryTask', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function createVideoSummaryTask(request: CreateVideoSummaryTaskRequest): CreateVideoSummaryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVideoSummaryTaskWithOptions(request, runtime);
}

model ListMotorAlgorithmResultsRequest = {
  corpId: string(name='CorpId'),
  algorithmType: string(name='AlgorithmType'),
  dataSourceId?: string(name='DataSourceId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
  plateNumber?: string(name='PlateNumber'),
}

model ListMotorAlgorithmResultsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        corpId: string(name='CorpId'),
        dataSourceId: string(name='DataSourceId'),
        leftTopX: float(name='LeftTopX'),
        leftTopY: float(name='LeftTopY'),
        motorId: string(name='MotorId'),
        picUrlPath: string(name='PicUrlPath'),
        plateNumber: string(name='PlateNumber'),
        rightBottomX: float(name='RightBottomX'),
        rightBottomY: float(name='RightBottomY'),
        shotTime: string(name='ShotTime'),
        targetPicUrlPath: string(name='TargetPicUrlPath'),
        motorStyle: string(name='MotorStyle'),
        motorModel: string(name='MotorModel'),
        motorColor: string(name='MotorColor'),
        motorClass: string(name='MotorClass'),
        motorBrand: string(name='MotorBrand'),
        plateColor: string(name='PlateColor'),
        plateClass: string(name='PlateClass'),
        safetyBelt: string(name='SafetyBelt'),
        calling: string(name='Calling'),
        sourceId: string(name='SourceId'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listMotorAlgorithmResultsWithOptions(request: ListMotorAlgorithmResultsRequest, runtime: Util.RuntimeOptions): ListMotorAlgorithmResultsResponse {
  Util.validateModel(request);
  return doRequest('ListMotorAlgorithmResults', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listMotorAlgorithmResults(request: ListMotorAlgorithmResultsRequest): ListMotorAlgorithmResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMotorAlgorithmResultsWithOptions(request, runtime);
}

model ListFaceAlgorithmResultsRequest = {
  corpId: string(name='CorpId'),
  algorithmType: string(name='AlgorithmType'),
  dataSourceId?: string(name='DataSourceId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
}

model ListFaceAlgorithmResultsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        faceId: string(name='FaceId'),
        corpId: string(name='CorpId'),
        dataSourceId: string(name='DataSourceId'),
        shotTime: string(name='ShotTime'),
        genderCode: string(name='GenderCode'),
        minAge: string(name='MinAge'),
        maxAge: string(name='MaxAge'),
        capStyle: string(name='CapStyle'),
        hairStyle: string(name='HairStyle'),
        leftTopX: float(name='LeftTopX'),
        leftTopY: float(name='LeftTopY'),
        rightBottomX: float(name='RightBottomX'),
        rightBottomY: float(name='RightBottomY'),
        picUrlPath: string(name='PicUrlPath'),
        targetPicUrlPath: string(name='TargetPicUrlPath'),
        sourceId: string(name='SourceId'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listFaceAlgorithmResultsWithOptions(request: ListFaceAlgorithmResultsRequest, runtime: Util.RuntimeOptions): ListFaceAlgorithmResultsResponse {
  Util.validateModel(request);
  return doRequest('ListFaceAlgorithmResults', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listFaceAlgorithmResults(request: ListFaceAlgorithmResultsRequest): ListFaceAlgorithmResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFaceAlgorithmResultsWithOptions(request, runtime);
}

model ListMetricsRequest = {
  corpId: string(name='CorpId'),
  tagCode: string(name='TagCode'),
  aggregateType: string(name='AggregateType'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
}

model ListMetricsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        dateTime: string(name='DateTime'),
        tagCode: string(name='TagCode'),
        tagValue: string(name='TagValue'),
        tagMetric: string(name='TagMetric'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listMetricsWithOptions(request: ListMetricsRequest, runtime: Util.RuntimeOptions): ListMetricsResponse {
  Util.validateModel(request);
  return doRequest('ListMetrics', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listMetrics(request: ListMetricsRequest): ListMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMetricsWithOptions(request, runtime);
}

model DeleteRecordsRequest = {
  corpId?: string(name='CorpId'),
  algorithmType?: string(name='AlgorithmType'),
  attributeName?: string(name='AttributeName'),
  operatorType?: string(name='OperatorType'),
  value?: string(name='Value'),
}

model DeleteRecordsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function deleteRecordsWithOptions(request: DeleteRecordsRequest, runtime: Util.RuntimeOptions): DeleteRecordsResponse {
  Util.validateModel(request);
  return doRequest('DeleteRecords', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function deleteRecords(request: DeleteRecordsRequest): DeleteRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRecordsWithOptions(request, runtime);
}

model RecognizeFaceQualityRequest = {
  corpId?: string(name='CorpId'),
  picContent?: string(name='PicContent'),
  picFormat?: string(name='PicFormat'),
  picUrl?: string(name='PicUrl'),
}

model RecognizeFaceQualityResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    qualityScore: string(name='QualityScore'),
    description: string(name='Description'),
    attributes: {
      leftTopX: integer(name='LeftTopX'),
      leftTopY: integer(name='LeftTopY'),
      rightBottomX: integer(name='RightBottomX'),
      rightBottomY: integer(name='RightBottomY'),
      targetImageStoragePath: string(name='TargetImageStoragePath'),
      faceStyle: string(name='FaceStyle'),
      faceQuality: string(name='FaceQuality'),
      faceScore: string(name='FaceScore'),
    }(name='Attributes'),
  }(name='Data'),
}

async function recognizeFaceQualityWithOptions(request: RecognizeFaceQualityRequest, runtime: Util.RuntimeOptions): RecognizeFaceQualityResponse {
  Util.validateModel(request);
  return doRequest('RecognizeFaceQuality', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function recognizeFaceQuality(request: RecognizeFaceQualityRequest): RecognizeFaceQualityResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeFaceQualityWithOptions(request, runtime);
}

model ListPersonsRequest = {
  corpId?: string(name='CorpId'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  algorithmType?: string(name='AlgorithmType'),
}

model ListPersonsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNo: string(name='PageNo'),
    pageSize: string(name='PageSize'),
    totalCount: string(name='TotalCount'),
    totalPage: string(name='TotalPage'),
    records: [
      {
        firstAppearTime: string(name='FirstAppearTime'),
        personId: string(name='PersonId'),
        picUrl: string(name='PicUrl'),
        tagList: [
          {
            tagCode: string(name='TagCode'),
            tagName: string(name='TagName'),
            tagValue: string(name='TagValue'),
            tagValueId: string(name='TagValueId'),
          }
        ](name='TagList'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listPersonsWithOptions(request: ListPersonsRequest, runtime: Util.RuntimeOptions): ListPersonsResponse {
  Util.validateModel(request);
  return doRequest('ListPersons', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listPersons(request: ListPersonsRequest): ListPersonsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPersonsWithOptions(request, runtime);
}

model GetPersonDetailRequest = {
  corpId?: string(name='CorpId'),
  personID?: string(name='PersonID'),
  algorithmType?: string(name='AlgorithmType'),
}

model GetPersonDetailResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    picUrl: string(name='PicUrl'),
    personId: string(name='PersonId'),
    tagList: [
      {
        tagCode: string(name='TagCode'),
        tagName: string(name='TagName'),
        tagValue: string(name='TagValue'),
        tagValueId: string(name='TagValueId'),
      }
    ](name='TagList'),
  }(name='Data'),
}

async function getPersonDetailWithOptions(request: GetPersonDetailRequest, runtime: Util.RuntimeOptions): GetPersonDetailResponse {
  Util.validateModel(request);
  return doRequest('GetPersonDetail', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getPersonDetail(request: GetPersonDetailRequest): GetPersonDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPersonDetailWithOptions(request, runtime);
}

model GetFaceOptionsRequest = {
  corpId?: string(name='CorpId'),
}

model GetFaceOptionsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: [
    {
      key: string(name='Key'),
      name: string(name='Name'),
      optionList: [
        {
          key: string(name='Key'),
          name: string(name='Name'),
        }
      ](name='OptionList'),
    }
  ](name='Data'),
}

async function getFaceOptionsWithOptions(request: GetFaceOptionsRequest, runtime: Util.RuntimeOptions): GetFaceOptionsResponse {
  Util.validateModel(request);
  return doRequest('GetFaceOptions', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getFaceOptions(request: GetFaceOptionsRequest): GetFaceOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFaceOptionsWithOptions(request, runtime);
}

model GetBodyOptionsRequest = {
  corpId?: string(name='CorpId'),
}

model GetBodyOptionsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: [
    {
      key: string(name='Key'),
      name: string(name='Name'),
      optionList: [
        {
          key: string(name='Key'),
          name: string(name='Name'),
        }
      ](name='OptionList'),
    }
  ](name='Data'),
}

async function getBodyOptionsWithOptions(request: GetBodyOptionsRequest, runtime: Util.RuntimeOptions): GetBodyOptionsResponse {
  Util.validateModel(request);
  return doRequest('GetBodyOptions', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getBodyOptions(request: GetBodyOptionsRequest): GetBodyOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBodyOptionsWithOptions(request, runtime);
}

model StopMonitorRequest = {
  taskId: string(name='TaskId'),
  algorithmVendor: string(name='AlgorithmVendor'),
}

model StopMonitorResponse = {
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function stopMonitorWithOptions(request: StopMonitorRequest, runtime: Util.RuntimeOptions): StopMonitorResponse {
  Util.validateModel(request);
  return doRequest('StopMonitor', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function stopMonitor(request: StopMonitorRequest): StopMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopMonitorWithOptions(request, runtime);
}

model SearchBodyRequest = {
  corpId: string(name='CorpId'),
  gbId?: string(name='GbId'),
  startTimeStamp: long(name='StartTimeStamp'),
  endTimeStamp: long(name='EndTimeStamp'),
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
  optionList?: map[string]any(name='OptionList'),
}

model SearchBodyShrinkRequest = {
  corpId: string(name='CorpId'),
  gbId?: string(name='GbId'),
  startTimeStamp: long(name='StartTimeStamp'),
  endTimeStamp: long(name='EndTimeStamp'),
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
  optionListShrink?: string(name='OptionList'),
}

model SearchBodyResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNo: integer(name='PageNo'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        gbId: string(name='GbId'),
        imageUrl: string(name='ImageUrl'),
        leftTopX: float(name='LeftTopX'),
        leftTopY: float(name='LeftTopY'),
        rightBottomX: float(name='RightBottomX'),
        rightBottomY: float(name='RightBottomY'),
        score: float(name='Score'),
        targetImageUrl: string(name='TargetImageUrl'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function searchBodyWithOptions(tmp: SearchBodyRequest, runtime: Util.RuntimeOptions): SearchBodyResponse {
  Util.validateModel(tmp);
  var request = new SearchBodyShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.optionList)) {
    request.optionListShrink = Util.toJSONString(tmp.optionList);
  }

  return doRequest('SearchBody', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function searchBody(request: SearchBodyRequest): SearchBodyResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchBodyWithOptions(request, runtime);
}

model AddMonitorRequest = {
  corpId: string(name='CorpId'),
  monitorType: string(name='MonitorType'),
  description?: string(name='Description'),
  batchIndicator?: integer(name='BatchIndicator'),
  algorithmVendor: string(name='AlgorithmVendor'),
  notifierType?: string(name='NotifierType'),
  notifierUrl?: string(name='NotifierUrl'),
  notifierAppSecret?: string(name='NotifierAppSecret'),
  notifierTimeOut?: integer(name='NotifierTimeOut'),
  notifierExtendValues?: string(name='NotifierExtendValues'),
}

model AddMonitorResponse = {
  requestId: string(name='RequestId'),
  code: string(name='Code'),
  message: string(name='Message'),
  data: {
    taskId: string(name='TaskId'),
  }(name='Data'),
}

async function addMonitorWithOptions(request: AddMonitorRequest, runtime: Util.RuntimeOptions): AddMonitorResponse {
  Util.validateModel(request);
  return doRequest('AddMonitor', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function addMonitor(request: AddMonitorRequest): AddMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMonitorWithOptions(request, runtime);
}

model GetMonitorResultRequest = {
  corpId: string(name='CorpId'),
  taskId?: string(name='TaskId'),
  minRecordId?: string(name='MinRecordId'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  algorithmVendor?: string(name='AlgorithmVendor'),
}

model GetMonitorResultResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    maxId: string(name='MaxId'),
    records: [
      {
        rightBottomY: string(name='RightBottomY'),
        rightBottomX: string(name='RightBottomX'),
        leftUpY: string(name='LeftUpY'),
        leftUpX: string(name='LeftUpX'),
        gbId: string(name='GbId'),
        score: string(name='Score'),
        picUrl: string(name='PicUrl'),
        shotTime: string(name='ShotTime'),
        monitorPicUrl: string(name='MonitorPicUrl'),
        targetPicUrl: string(name='TargetPicUrl'),
        taskId: string(name='TaskId'),
        extendInfo: {
          plateNo: string(name='PlateNo'),
        }(name='ExtendInfo'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function getMonitorResultWithOptions(request: GetMonitorResultRequest, runtime: Util.RuntimeOptions): GetMonitorResultResponse {
  Util.validateModel(request);
  return doRequest('GetMonitorResult', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getMonitorResult(request: GetMonitorResultRequest): GetMonitorResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMonitorResultWithOptions(request, runtime);
}

model UpdateMonitorRequest = {
  corpId?: string(name='CorpId'),
  taskId: string(name='TaskId'),
  ruleName?: string(name='RuleName'),
  deviceOperateType?: string(name='DeviceOperateType'),
  deviceList?: string(name='DeviceList'),
  picOperateType?: string(name='PicOperateType'),
  picList?: string(name='PicList'),
  attributeOperateType?: string(name='AttributeOperateType'),
  attributeName?: string(name='AttributeName'),
  attributeValueList?: string(name='AttributeValueList'),
  description?: string(name='Description'),
  ruleExpression?: string(name='RuleExpression'),
  algorithmVendor: string(name='AlgorithmVendor'),
  notifierType?: string(name='NotifierType'),
  notifierUrl?: string(name='NotifierUrl'),
  notifierAppSecret?: string(name='NotifierAppSecret'),
  notifierTimeOut?: integer(name='NotifierTimeOut'),
  notifierExtendValues?: string(name='NotifierExtendValues'),
}

model UpdateMonitorResponse = {
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function updateMonitorWithOptions(request: UpdateMonitorRequest, runtime: Util.RuntimeOptions): UpdateMonitorResponse {
  Util.validateModel(request);
  return doRequest('UpdateMonitor', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function updateMonitor(request: UpdateMonitorRequest): UpdateMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMonitorWithOptions(request, runtime);
}

model GetDeviceVideoUrlRequest = {
  corpId: string(name='CorpId'),
  gbId?: string(name='GbId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  deviceId?: string(name='DeviceId'),
  outProtocol?: string(name='OutProtocol'),
}

model GetDeviceVideoUrlResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  url: string(name='Url'),
  outProtocol: string(name='OutProtocol'),
}

async function getDeviceVideoUrlWithOptions(request: GetDeviceVideoUrlRequest, runtime: Util.RuntimeOptions): GetDeviceVideoUrlResponse {
  Util.validateModel(request);
  return doRequest('GetDeviceVideoUrl', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getDeviceVideoUrl(request: GetDeviceVideoUrlRequest): GetDeviceVideoUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceVideoUrlWithOptions(request, runtime);
}

model GetInventoryRequest = {
  commodityCode?: string(name='CommodityCode'),
}

model GetInventoryResponse = {
  success: boolean(name='Success'),
  data: {
    resultObject: [
      {
        buyerId: string(name='BuyerId'),
        commodityCode: string(name='CommodityCode'),
        currentInventory: string(name='CurrentInventory'),
        validEndTime: string(name='ValidEndTime'),
        validStartTime: string(name='ValidStartTime'),
        instanceId: string(name='InstanceId'),
        inventoryId: string(name='InventoryId'),
      }
    ](name='ResultObject'),
  }(name='Data'),
}

async function getInventoryWithOptions(request: GetInventoryRequest, runtime: Util.RuntimeOptions): GetInventoryResponse {
  Util.validateModel(request);
  return doRequest('GetInventory', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getInventory(request: GetInventoryRequest): GetInventoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInventoryWithOptions(request, runtime);
}

model RecognizeImageRequest = {
  corpId: string(name='CorpId'),
  picContent?: string(name='PicContent'),
  picFormat: string(name='PicFormat'),
  picUrl?: string(name='PicUrl'),
}

model RecognizeImageResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    bodyList: [
      {
        feature: string(name='Feature'),
        fileName: string(name='FileName'),
        imageBaseSixFour: string(name='ImageBaseSixFour'),
        leftTopX: string(name='LeftTopX'),
        leftTopY: string(name='LeftTopY'),
        localFeature: string(name='LocalFeature'),
        respiratorColor: string(name='RespiratorColor'),
        rightBottomX: string(name='RightBottomX'),
        rightBottomY: string(name='RightBottomY'),
      }
    ](name='BodyList'),
    faceList: [
      {
        feature: string(name='Feature'),
        fileName: string(name='FileName'),
        imageBaseSixFour: string(name='ImageBaseSixFour'),
        leftTopX: string(name='LeftTopX'),
        leftTopY: string(name='LeftTopY'),
        localFeature: string(name='LocalFeature'),
        respiratorColor: string(name='RespiratorColor'),
        rightBottomX: string(name='RightBottomX'),
        rightBottomY: string(name='RightBottomY'),
      }
    ](name='FaceList'),
  }(name='Data'),
}

async function recognizeImageWithOptions(request: RecognizeImageRequest, runtime: Util.RuntimeOptions): RecognizeImageResponse {
  Util.validateModel(request);
  return doRequest('RecognizeImage', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function recognizeImage(request: RecognizeImageRequest): RecognizeImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeImageWithOptions(request, runtime);
}

model ListCorpsRequest = {
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  corpName?: string(name='CorpName'),
}

model ListCorpsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        corpId: string(name='CorpId'),
        corpName: string(name='CorpName'),
        description: string(name='Description'),
        createDate: string(name='CreateDate'),
        parentCorpId: string(name='ParentCorpId'),
        appName: string(name='AppName'),
        deviceCount: integer(name='DeviceCount'),
        isvSubId: string(name='IsvSubId'),
        acuUsed: integer(name='AcuUsed'),
        iconPath: string(name='IconPath'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listCorpsWithOptions(request: ListCorpsRequest, runtime: Util.RuntimeOptions): ListCorpsResponse {
  Util.validateModel(request);
  return doRequest('ListCorps', 'HTTPS', 'POST', '2020-05-15', 'AK,APP', null, request, runtime);
}

async function listCorps(request: ListCorpsRequest): ListCorpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpsWithOptions(request, runtime);
}

model UpdateCorpRequest = {
  corpId?: string(name='CorpId'),
  corpName?: string(name='CorpName'),
  appName?: string(name='AppName'),
  parentCorpId?: string(name='ParentCorpId'),
  description?: string(name='Description'),
  isvSubId?: string(name='IsvSubId'),
  iconPath?: string(name='IconPath'),
}

model UpdateCorpResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function updateCorpWithOptions(request: UpdateCorpRequest, runtime: Util.RuntimeOptions): UpdateCorpResponse {
  Util.validateModel(request);
  return doRequest('UpdateCorp', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function updateCorp(request: UpdateCorpRequest): UpdateCorpResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCorpWithOptions(request, runtime);
}

model UpdateDeviceRequest = {
  gbId?: string(name='GbId'),
  deviceName?: string(name='DeviceName'),
  deviceType?: string(name='DeviceType'),
  deviceAddress?: string(name='DeviceAddress'),
  deviceSite?: string(name='DeviceSite'),
  deviceDirection?: string(name='DeviceDirection'),
  deviceResolution?: string(name='DeviceResolution'),
  bitRate?: string(name='BitRate'),
  corpId?: string(name='CorpId'),
  vendor?: string(name='Vendor'),
}

model UpdateDeviceResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function updateDeviceWithOptions(request: UpdateDeviceRequest, runtime: Util.RuntimeOptions): UpdateDeviceResponse {
  Util.validateModel(request);
  return doRequest('UpdateDevice', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function updateDevice(request: UpdateDeviceRequest): UpdateDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceWithOptions(request, runtime);
}

model ListDevicesRequest = {
  corpId?: string(name='CorpId'),
  gbId?: string(name='GbId'),
  deviceName?: string(name='DeviceName'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model ListDevicesResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        accessProtocolType: string(name='AccessProtocolType'),
        bitRate: string(name='BitRate'),
        coverImageUrl: string(name='CoverImageUrl'),
        gbId: string(name='GbId'),
        deviceAddress: string(name='DeviceAddress'),
        deviceDirection: string(name='DeviceDirection'),
        deviceSite: string(name='DeviceSite'),
        latitude: string(name='Latitude'),
        longitude: string(name='Longitude'),
        deviceName: string(name='DeviceName'),
        resolution: string(name='Resolution'),
        sipGBId: string(name='SipGBId'),
        sipPassword: string(name='SipPassword'),
        sipServerIp: string(name='SipServerIp'),
        sipServerPort: string(name='SipServerPort'),
        status: integer(name='Status'),
        deviceType: string(name='DeviceType'),
        vendor: string(name='Vendor'),
        createTime: string(name='CreateTime'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listDevicesWithOptions(request: ListDevicesRequest, runtime: Util.RuntimeOptions): ListDevicesResponse {
  Util.validateModel(request);
  return doRequest('ListDevices', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listDevices(request: ListDevicesRequest): ListDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDevicesWithOptions(request, runtime);
}

model GetDeviceLiveUrlRequest = {
  deviceId?: string(name='DeviceId'),
  streamType?: integer(name='StreamType'),
  outProtocol?: string(name='OutProtocol'),
  corpId?: string(name='CorpId'),
  gbId?: string(name='GbId'),
}

model GetDeviceLiveUrlResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  url: string(name='Url'),
  outProtocol: string(name='OutProtocol'),
  streamType: integer(name='StreamType'),
}

async function getDeviceLiveUrlWithOptions(request: GetDeviceLiveUrlRequest, runtime: Util.RuntimeOptions): GetDeviceLiveUrlResponse {
  Util.validateModel(request);
  return doRequest('GetDeviceLiveUrl', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getDeviceLiveUrl(request: GetDeviceLiveUrlRequest): GetDeviceLiveUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceLiveUrlWithOptions(request, runtime);
}

model SearchFaceRequest = {
  corpId: string(name='CorpId'),
  gbId?: string(name='GbId'),
  startTimeStamp: long(name='StartTimeStamp'),
  endTimeStamp: long(name='EndTimeStamp'),
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
  optionList?: map[string]any(name='OptionList'),
}

model SearchFaceShrinkRequest = {
  corpId: string(name='CorpId'),
  gbId?: string(name='GbId'),
  startTimeStamp: long(name='StartTimeStamp'),
  endTimeStamp: long(name='EndTimeStamp'),
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
  optionListShrink?: string(name='OptionList'),
}

model SearchFaceResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNo: integer(name='PageNo'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        gbId: string(name='GbId'),
        imageUrl: string(name='ImageUrl'),
        leftTopX: float(name='LeftTopX'),
        leftTopY: float(name='LeftTopY'),
        matchSuggestion: string(name='MatchSuggestion'),
        rightBottomX: float(name='RightBottomX'),
        rightBottomY: float(name='RightBottomY'),
        score: float(name='Score'),
        targetImageUrl: string(name='TargetImageUrl'),
        sourceId: string(name='SourceId'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function searchFaceWithOptions(tmp: SearchFaceRequest, runtime: Util.RuntimeOptions): SearchFaceResponse {
  Util.validateModel(tmp);
  var request = new SearchFaceShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.optionList)) {
    request.optionListShrink = Util.toJSONString(tmp.optionList);
  }

  return doRequest('SearchFace', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function searchFace(request: SearchFaceRequest): SearchFaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchFaceWithOptions(request, runtime);
}

model AddDeviceRequest = {
  gbId?: string(name='GbId'),
  deviceName?: string(name='DeviceName'),
  deviceType?: string(name='DeviceType'),
  deviceAddress?: string(name='DeviceAddress'),
  deviceSite?: string(name='DeviceSite'),
  deviceDirection?: string(name='DeviceDirection'),
  deviceResolution?: string(name='DeviceResolution'),
  bitRate?: string(name='BitRate'),
  corpId?: string(name='CorpId'),
  vendor?: string(name='Vendor'),
}

model AddDeviceResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function addDeviceWithOptions(request: AddDeviceRequest, runtime: Util.RuntimeOptions): AddDeviceResponse {
  Util.validateModel(request);
  return doRequest('AddDevice', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function addDevice(request: AddDeviceRequest): AddDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDeviceWithOptions(request, runtime);
}

model CreateCorpRequest = {
  corpName: string(name='CorpName'),
  appName: string(name='AppName'),
  parentCorpId?: string(name='ParentCorpId'),
  description?: string(name='Description'),
  algorithmType?: string(name='AlgorithmType'),
  isvSubId?: string(name='IsvSubId'),
  iconPath?: string(name='IconPath'),
}

model CreateCorpResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  corpId: string(name='CorpId'),
}

async function createCorpWithOptions(request: CreateCorpRequest, runtime: Util.RuntimeOptions): CreateCorpResponse {
  Util.validateModel(request);
  return doRequest('CreateCorp', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function createCorp(request: CreateCorpRequest): CreateCorpResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCorpWithOptions(request, runtime);
}

model DeleteDeviceRequest = {
  corpId?: string(name='CorpId'),
  gbId?: string(name='GbId'),
}

model DeleteDeviceResponse = {
  requestId: string(name='RequestId'),
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
}

async function deleteDeviceWithOptions(request: DeleteDeviceRequest, runtime: Util.RuntimeOptions): DeleteDeviceResponse {
  Util.validateModel(request);
  return doRequest('DeleteDevice', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
