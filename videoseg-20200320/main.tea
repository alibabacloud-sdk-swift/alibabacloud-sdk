import OSS;
import OpenPlatform;
import RPCUtil;
import RPC;
import OSSUtil;
import Util;
import FileForm;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('videoseg', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model SegmentHalfBodyRequest = {
  videoUrl: string(name='VideoUrl'),
}

model SegmentHalfBodyResponse = {
  requestId: string(name='RequestId'),
  data: {
    videoUrl: string(name='VideoUrl'),
  }(name='Data'),
}

async function segmentHalfBody(request: SegmentHalfBodyRequest, runtime: Util.RuntimeOptions): SegmentHalfBodyResponse {
  Util.validateModel(request);
  return doRequest('SegmentHalfBody', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model SegmentHalfBodyAdvanceRequest = {
  videoUrlObject: readable(name='VideoUrlObject'),
}

async function segmentHalfBodyAdvance(request: SegmentHalfBodyAdvanceRequest, runtime: Util.RuntimeOptions): SegmentHalfBodyResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'videoseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.videoUrlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentHalfBodyreq = new SegmentHalfBodyRequest{};
  RPCUtil.convert(request, segmentHalfBodyreq);
  segmentHalfBodyreq.videoUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentHalfBodyResp = segmentHalfBody(segmentHalfBodyreq, runtime);
  return segmentHalfBodyResp;
}

model SegmentVideoBodyRequest = {
  videoUrl: string(name='VideoUrl'),
}

model SegmentVideoBodyResponse = {
  requestId: string(name='RequestId'),
  data: {
    videoUrl: string(name='VideoUrl'),
  }(name='Data'),
}

async function segmentVideoBody(request: SegmentVideoBodyRequest, runtime: Util.RuntimeOptions): SegmentVideoBodyResponse {
  Util.validateModel(request);
  return doRequest('SegmentVideoBody', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model SegmentVideoBodyAdvanceRequest = {
  videoUrlObject: readable(name='VideoUrlObject'),
}

async function segmentVideoBodyAdvance(request: SegmentVideoBodyAdvanceRequest, runtime: Util.RuntimeOptions): SegmentVideoBodyResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'videoseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.videoUrlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentVideoBodyreq = new SegmentVideoBodyRequest{};
  RPCUtil.convert(request, segmentVideoBodyreq);
  segmentVideoBodyreq.videoUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentVideoBodyResp = segmentVideoBody(segmentVideoBodyreq, runtime);
  return segmentVideoBodyResp;
}

model GetAsyncJobResultRequest = {
  jobId: string(name='JobId'),
}

model GetAsyncJobResultResponse = {
  requestId: string(name='RequestId'),
  data: {
    jobId: string(name='JobId'),
    status: string(name='Status'),
    result: string(name='Result'),
    errorCode: string(name='ErrorCode'),
    errorMessage: string(name='ErrorMessage'),
  }(name='Data'),
}

async function getAsyncJobResult(request: GetAsyncJobResultRequest, runtime: Util.RuntimeOptions): GetAsyncJobResultResponse {
  Util.validateModel(request);
  return doRequest('GetAsyncJobResult', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
