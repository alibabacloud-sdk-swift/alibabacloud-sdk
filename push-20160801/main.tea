import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'cloudpush.aliyuncs.com',
    ap-northeast-2-pop = 'cloudpush.aliyuncs.com',
    ap-south-1 = 'cloudpush.aliyuncs.com',
    ap-southeast-1 = 'cloudpush.aliyuncs.com',
    ap-southeast-2 = 'cloudpush.aliyuncs.com',
    ap-southeast-3 = 'cloudpush.aliyuncs.com',
    ap-southeast-5 = 'cloudpush.aliyuncs.com',
    cn-beijing = 'cloudpush.aliyuncs.com',
    cn-beijing-finance-1 = 'cloudpush.aliyuncs.com',
    cn-beijing-finance-pop = 'cloudpush.aliyuncs.com',
    cn-beijing-gov-1 = 'cloudpush.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cloudpush.aliyuncs.com',
    cn-chengdu = 'cloudpush.aliyuncs.com',
    cn-edge-1 = 'cloudpush.aliyuncs.com',
    cn-fujian = 'cloudpush.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cloudpush.aliyuncs.com',
    cn-hangzhou = 'cloudpush.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-finance = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cloudpush.aliyuncs.com',
    cn-hangzhou-test-306 = 'cloudpush.aliyuncs.com',
    cn-hongkong = 'cloudpush.aliyuncs.com',
    cn-hongkong-finance-pop = 'cloudpush.aliyuncs.com',
    cn-huhehaote = 'cloudpush.aliyuncs.com',
    cn-north-2-gov-1 = 'cloudpush.aliyuncs.com',
    cn-qingdao = 'cloudpush.aliyuncs.com',
    cn-qingdao-nebula = 'cloudpush.aliyuncs.com',
    cn-shanghai = 'cloudpush.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cloudpush.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cloudpush.aliyuncs.com',
    cn-shanghai-finance-1 = 'cloudpush.aliyuncs.com',
    cn-shanghai-inner = 'cloudpush.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cloudpush.aliyuncs.com',
    cn-shenzhen = 'cloudpush.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cloudpush.aliyuncs.com',
    cn-shenzhen-inner = 'cloudpush.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cloudpush.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cloudpush.aliyuncs.com',
    cn-wuhan = 'cloudpush.aliyuncs.com',
    cn-yushanfang = 'cloudpush.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cloudpush.aliyuncs.com',
    cn-zhangjiakou = 'cloudpush.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cloudpush.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cloudpush.aliyuncs.com',
    eu-central-1 = 'cloudpush.aliyuncs.com',
    eu-west-1 = 'cloudpush.aliyuncs.com',
    eu-west-1-oxs = 'cloudpush.aliyuncs.com',
    me-east-1 = 'cloudpush.aliyuncs.com',
    rus-west-1-pop = 'cloudpush.aliyuncs.com',
    us-east-1 = 'cloudpush.aliyuncs.com',
    us-west-1 = 'cloudpush.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('push', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model QueryPushRecordsRequest = {
  appKey: long(name='AppKey'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pushType?: string(name='PushType'),
  target?: string(name='Target'),
  source?: string(name='Source'),
  keyword?: string(name='Keyword'),
  nextToken?: string(name='NextToken'),
  pageSize?: integer(name='PageSize'),
}

model QueryPushRecordsResponse = {
  requestId: string(name='RequestId'),
  nextToken: string(name='NextToken'),
  pageSize: integer(name='PageSize'),
  pushInfos: {
    pushInfo: [
      {
        appKey: long(name='AppKey'),
        messageId: string(name='MessageId'),
        pushType: string(name='PushType'),
        deviceType: string(name='DeviceType'),
        target: string(name='Target'),
        source: string(name='Source'),
        pushTime: string(name='PushTime'),
        title: string(name='Title'),
        body: string(name='Body'),
        status: string(name='Status'),
      }
    ](name='PushInfo'),
  }(name='PushInfos'),
}

async function queryPushRecordsWithOptions(request: QueryPushRecordsRequest, runtime: Util.RuntimeOptions): QueryPushRecordsResponse {
  Util.validateModel(request);
  return doRequest('QueryPushRecords', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function queryPushRecords(request: QueryPushRecordsRequest): QueryPushRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPushRecordsWithOptions(request, runtime);
}

model ContinuouslyPushRequest = {
  appKey: long(name='AppKey'),
  messageId: string(name='MessageId'),
  target: string(name='Target'),
  targetValue: string(name='TargetValue'),
}

model ContinuouslyPushResponse = {
  requestId: string(name='RequestId'),
  messageId: string(name='MessageId'),
}

async function continuouslyPushWithOptions(request: ContinuouslyPushRequest, runtime: Util.RuntimeOptions): ContinuouslyPushResponse {
  Util.validateModel(request);
  return doRequest('ContinuouslyPush', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function continuouslyPush(request: ContinuouslyPushRequest): ContinuouslyPushResponse {
  var runtime = new Util.RuntimeOptions{};
  return continuouslyPushWithOptions(request, runtime);
}

model CompleteContinuouslyPushRequest = {
  appKey: long(name='AppKey'),
  messageId: string(name='MessageId'),
}

model CompleteContinuouslyPushResponse = {
  requestId: string(name='RequestId'),
  messageId: string(name='MessageId'),
}

async function completeContinuouslyPushWithOptions(request: CompleteContinuouslyPushRequest, runtime: Util.RuntimeOptions): CompleteContinuouslyPushResponse {
  Util.validateModel(request);
  return doRequest('CompleteContinuouslyPush', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function completeContinuouslyPush(request: CompleteContinuouslyPushRequest): CompleteContinuouslyPushResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeContinuouslyPushWithOptions(request, runtime);
}

model MassPushRequest = {
  appKey: long(name='AppKey'),
  pushTask: [
    {
      pushType: string(name='PushType'),
      deviceType: string(name='DeviceType'),
      target: string(name='Target'),
      targetValue: string(name='TargetValue'),
      title?: string(name='Title'),
      body: string(name='Body'),
      jobKey?: string(name='JobKey'),
      sendSpeed?: integer(name='SendSpeed'),
      storeOffline?: boolean(name='StoreOffline'),
      pushTime?: string(name='PushTime'),
      expireTime?: string(name='ExpireTime'),
      iOSApnsEnv?: string(name='iOSApnsEnv'),
      iOSRemind?: boolean(name='iOSRemind'),
      iOSRemindBody?: string(name='iOSRemindBody'),
      iOSBadge?: integer(name='iOSBadge'),
      iOSBadgeAutoIncrement?: boolean(name='iOSBadgeAutoIncrement'),
      iOSSilentNotification?: boolean(name='iOSSilentNotification'),
      iOSMusic?: string(name='iOSMusic'),
      iOSSubtitle?: string(name='iOSSubtitle'),
      iOSNotificationCategory?: string(name='iOSNotificationCategory'),
      iOSMutableContent?: boolean(name='iOSMutableContent'),
      iOSExtParameters?: string(name='iOSExtParameters'),
      androidNotifyType?: string(name='AndroidNotifyType'),
      androidOpenType?: string(name='AndroidOpenType'),
      androidActivity?: string(name='AndroidActivity'),
      androidMusic?: string(name='AndroidMusic'),
      androidOpenUrl?: string(name='AndroidOpenUrl'),
      androidXiaoMiActivity?: string(name='AndroidXiaoMiActivity'),
      androidXiaoMiNotifyTitle?: string(name='AndroidXiaoMiNotifyTitle'),
      androidXiaoMiNotifyBody?: string(name='AndroidXiaoMiNotifyBody'),
      androidPopupActivity?: string(name='AndroidPopupActivity'),
      androidPopupTitle?: string(name='AndroidPopupTitle'),
      androidPopupBody?: string(name='AndroidPopupBody'),
      androidNotificationBarType?: integer(name='AndroidNotificationBarType'),
      androidNotificationBarPriority?: integer(name='AndroidNotificationBarPriority'),
      androidExtParameters?: string(name='AndroidExtParameters'),
      androidRemind?: boolean(name='AndroidRemind'),
      androidNotificationChannel?: string(name='AndroidNotificationChannel'),
      androidNotificationXiaomiChannel?: string(name='AndroidNotificationXiaomiChannel'),
      androidNotificationVivoChannel?: string(name='AndroidNotificationVivoChannel'),
    }
  ](name='PushTask'),
}

model MassPushResponse = {
  requestId: string(name='RequestId'),
  messageIds: {
    messageId: [ string ](name='MessageId'),
  }(name='MessageIds'),
}

async function massPushWithOptions(request: MassPushRequest, runtime: Util.RuntimeOptions): MassPushResponse {
  Util.validateModel(request);
  return doRequest('MassPush', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function massPush(request: MassPushRequest): MassPushResponse {
  var runtime = new Util.RuntimeOptions{};
  return massPushWithOptions(request, runtime);
}

model QueryDevicesByAliasRequest = {
  appKey: long(name='AppKey'),
  alias: string(name='Alias'),
}

model QueryDevicesByAliasResponse = {
  requestId: string(name='RequestId'),
  deviceIds: {
    deviceId: [ string ](name='DeviceId'),
  }(name='DeviceIds'),
}

async function queryDevicesByAliasWithOptions(request: QueryDevicesByAliasRequest, runtime: Util.RuntimeOptions): QueryDevicesByAliasResponse {
  Util.validateModel(request);
  return doRequest('QueryDevicesByAlias', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function queryDevicesByAlias(request: QueryDevicesByAliasRequest): QueryDevicesByAliasResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicesByAliasWithOptions(request, runtime);
}

model QueryDevicesByAccountRequest = {
  appKey: long(name='AppKey'),
  account: string(name='Account'),
}

model QueryDevicesByAccountResponse = {
  requestId: string(name='RequestId'),
  deviceIds: {
    deviceId: [ string ](name='DeviceId'),
  }(name='DeviceIds'),
}

async function queryDevicesByAccountWithOptions(request: QueryDevicesByAccountRequest, runtime: Util.RuntimeOptions): QueryDevicesByAccountResponse {
  Util.validateModel(request);
  return doRequest('QueryDevicesByAccount', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function queryDevicesByAccount(request: QueryDevicesByAccountRequest): QueryDevicesByAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicesByAccountWithOptions(request, runtime);
}

model UnbindPhoneRequest = {
  appKey: long(name='AppKey'),
  deviceId: string(name='DeviceId'),
}

model UnbindPhoneResponse = {
  requestId: string(name='RequestId'),
}

async function unbindPhoneWithOptions(request: UnbindPhoneRequest, runtime: Util.RuntimeOptions): UnbindPhoneResponse {
  Util.validateModel(request);
  return doRequest('UnbindPhone', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function unbindPhone(request: UnbindPhoneRequest): UnbindPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindPhoneWithOptions(request, runtime);
}

model BindPhoneRequest = {
  appKey: long(name='AppKey'),
  deviceId: string(name='DeviceId'),
  phoneNumber: string(name='PhoneNumber'),
}

model BindPhoneResponse = {
  requestId: string(name='RequestId'),
}

async function bindPhoneWithOptions(request: BindPhoneRequest, runtime: Util.RuntimeOptions): BindPhoneResponse {
  Util.validateModel(request);
  return doRequest('BindPhone', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function bindPhone(request: BindPhoneRequest): BindPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindPhoneWithOptions(request, runtime);
}

model RemoveTagRequest = {
  appKey: long(name='AppKey'),
  tagName: string(name='TagName'),
}

model RemoveTagResponse = {
  requestId: string(name='RequestId'),
}

async function removeTagWithOptions(request: RemoveTagRequest, runtime: Util.RuntimeOptions): RemoveTagResponse {
  Util.validateModel(request);
  return doRequest('RemoveTag', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function removeTag(request: RemoveTagRequest): RemoveTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTagWithOptions(request, runtime);
}

model CheckDevicesRequest = {
  appKey: long(name='AppKey'),
  deviceIds: string(name='DeviceIds'),
}

model CheckDevicesResponse = {
  requestId: string(name='RequestId'),
  deviceCheckInfos: {
    deviceCheckInfo: [
      {
        deviceId: string(name='DeviceId'),
        available: boolean(name='Available'),
      }
    ](name='DeviceCheckInfo'),
  }(name='DeviceCheckInfos'),
}

async function checkDevicesWithOptions(request: CheckDevicesRequest, runtime: Util.RuntimeOptions): CheckDevicesResponse {
  Util.validateModel(request);
  return doRequest('CheckDevices', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function checkDevices(request: CheckDevicesRequest): CheckDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDevicesWithOptions(request, runtime);
}

model CheckDeviceRequest = {
  appKey: long(name='AppKey'),
  deviceId: string(name='DeviceId'),
}

model CheckDeviceResponse = {
  requestId: string(name='RequestId'),
  available: boolean(name='Available'),
}

async function checkDeviceWithOptions(request: CheckDeviceRequest, runtime: Util.RuntimeOptions): CheckDeviceResponse {
  Util.validateModel(request);
  return doRequest('CheckDevice', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function checkDevice(request: CheckDeviceRequest): CheckDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDeviceWithOptions(request, runtime);
}

model UnbindTagRequest = {
  appKey: long(name='AppKey'),
  clientKey: string(name='ClientKey'),
  keyType: string(name='KeyType'),
  tagName: string(name='TagName'),
}

model UnbindTagResponse = {
  requestId: string(name='RequestId'),
}

async function unbindTagWithOptions(request: UnbindTagRequest, runtime: Util.RuntimeOptions): UnbindTagResponse {
  Util.validateModel(request);
  return doRequest('UnbindTag', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function unbindTag(request: UnbindTagRequest): UnbindTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindTagWithOptions(request, runtime);
}

model UnbindAliasRequest = {
  appKey: long(name='AppKey'),
  deviceId: string(name='DeviceId'),
  aliasName?: string(name='AliasName'),
  unbindAll?: boolean(name='UnbindAll'),
}

model UnbindAliasResponse = {
  requestId: string(name='RequestId'),
}

async function unbindAliasWithOptions(request: UnbindAliasRequest, runtime: Util.RuntimeOptions): UnbindAliasResponse {
  Util.validateModel(request);
  return doRequest('UnbindAlias', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function unbindAlias(request: UnbindAliasRequest): UnbindAliasResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindAliasWithOptions(request, runtime);
}

model QueryUniqueDeviceStatRequest = {
  appKey: long(name='AppKey'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  granularity: string(name='Granularity'),
}

model QueryUniqueDeviceStatResponse = {
  requestId: string(name='RequestId'),
  appDeviceStats: {
    appDeviceStat: [
      {
        time: string(name='Time'),
        count: long(name='Count'),
      }
    ](name='AppDeviceStat'),
  }(name='AppDeviceStats'),
}

async function queryUniqueDeviceStatWithOptions(request: QueryUniqueDeviceStatRequest, runtime: Util.RuntimeOptions): QueryUniqueDeviceStatResponse {
  Util.validateModel(request);
  return doRequest('QueryUniqueDeviceStat', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function queryUniqueDeviceStat(request: QueryUniqueDeviceStatRequest): QueryUniqueDeviceStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUniqueDeviceStatWithOptions(request, runtime);
}

model QueryTagsRequest = {
  appKey: long(name='AppKey'),
  clientKey: string(name='ClientKey'),
  keyType: string(name='KeyType'),
}

model QueryTagsResponse = {
  requestId: string(name='RequestId'),
  tagInfos: {
    tagInfo: [
      {
        tagName: string(name='TagName'),
      }
    ](name='TagInfo'),
  }(name='TagInfos'),
}

async function queryTagsWithOptions(request: QueryTagsRequest, runtime: Util.RuntimeOptions): QueryTagsResponse {
  Util.validateModel(request);
  return doRequest('QueryTags', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function queryTags(request: QueryTagsRequest): QueryTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTagsWithOptions(request, runtime);
}

model QueryPushStatByMsgRequest = {
  appKey: long(name='AppKey'),
  messageId: long(name='MessageId'),
}

model QueryPushStatByMsgResponse = {
  requestId: string(name='RequestId'),
  pushStats: {
    pushStat: [
      {
        messageId: string(name='MessageId'),
        acceptCount: long(name='AcceptCount'),
        sentCount: long(name='SentCount'),
        receivedCount: long(name='ReceivedCount'),
        openedCount: long(name='OpenedCount'),
        deletedCount: long(name='DeletedCount'),
        smsSentCount: long(name='SmsSentCount'),
        smsSkipCount: long(name='SmsSkipCount'),
        smsFailedCount: long(name='SmsFailedCount'),
        smsReceiveSuccessCount: long(name='SmsReceiveSuccessCount'),
        smsReceiveFailedCount: long(name='SmsReceiveFailedCount'),
      }
    ](name='PushStat'),
  }(name='PushStats'),
}

async function queryPushStatByMsgWithOptions(request: QueryPushStatByMsgRequest, runtime: Util.RuntimeOptions): QueryPushStatByMsgResponse {
  Util.validateModel(request);
  return doRequest('QueryPushStatByMsg', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function queryPushStatByMsg(request: QueryPushStatByMsgRequest): QueryPushStatByMsgResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPushStatByMsgWithOptions(request, runtime);
}

model QueryPushStatByAppRequest = {
  appKey: long(name='AppKey'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  granularity: string(name='Granularity'),
}

model QueryPushStatByAppResponse = {
  requestId: string(name='RequestId'),
  appPushStats: {
    appPushStat: [
      {
        time: string(name='Time'),
        acceptCount: long(name='AcceptCount'),
        sentCount: long(name='SentCount'),
        receivedCount: long(name='ReceivedCount'),
        openedCount: long(name='OpenedCount'),
        deletedCount: long(name='DeletedCount'),
        smsSentCount: long(name='SmsSentCount'),
        smsSkipCount: long(name='SmsSkipCount'),
        smsFailedCount: long(name='SmsFailedCount'),
        smsReceiveSuccessCount: long(name='SmsReceiveSuccessCount'),
        smsReceiveFailedCount: long(name='SmsReceiveFailedCount'),
      }
    ](name='AppPushStat'),
  }(name='AppPushStats'),
}

async function queryPushStatByAppWithOptions(request: QueryPushStatByAppRequest, runtime: Util.RuntimeOptions): QueryPushStatByAppResponse {
  Util.validateModel(request);
  return doRequest('QueryPushStatByApp', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function queryPushStatByApp(request: QueryPushStatByAppRequest): QueryPushStatByAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPushStatByAppWithOptions(request, runtime);
}

model QueryDeviceStatRequest = {
  appKey: long(name='AppKey'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  deviceType: string(name='DeviceType'),
  queryType: string(name='QueryType'),
}

model QueryDeviceStatResponse = {
  requestId: string(name='RequestId'),
  appDeviceStats: {
    appDeviceStat: [
      {
        time: string(name='Time'),
        count: long(name='Count'),
        deviceType: string(name='DeviceType'),
      }
    ](name='AppDeviceStat'),
  }(name='AppDeviceStats'),
}

async function queryDeviceStatWithOptions(request: QueryDeviceStatRequest, runtime: Util.RuntimeOptions): QueryDeviceStatResponse {
  Util.validateModel(request);
  return doRequest('QueryDeviceStat', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function queryDeviceStat(request: QueryDeviceStatRequest): QueryDeviceStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceStatWithOptions(request, runtime);
}

model QueryDeviceInfoRequest = {
  appKey: long(name='AppKey'),
  deviceId: string(name='DeviceId'),
}

model QueryDeviceInfoResponse = {
  requestId: string(name='RequestId'),
  deviceInfo: {
    deviceId: string(name='DeviceId'),
    deviceType: string(name='DeviceType'),
    account: string(name='Account'),
    deviceToken: string(name='DeviceToken'),
    tags: string(name='Tags'),
    alias: string(name='Alias'),
    lastOnlineTime: string(name='LastOnlineTime'),
    online: boolean(name='Online'),
    phoneNumber: string(name='PhoneNumber'),
    pushEnabled: boolean(name='PushEnabled'),
  }(name='DeviceInfo'),
}

async function queryDeviceInfoWithOptions(request: QueryDeviceInfoRequest, runtime: Util.RuntimeOptions): QueryDeviceInfoResponse {
  Util.validateModel(request);
  return doRequest('QueryDeviceInfo', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function queryDeviceInfo(request: QueryDeviceInfoRequest): QueryDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceInfoWithOptions(request, runtime);
}

model QueryAliasesRequest = {
  appKey: long(name='AppKey'),
  deviceId: string(name='DeviceId'),
}

model QueryAliasesResponse = {
  requestId: string(name='RequestId'),
  aliasInfos: {
    aliasInfo: [
      {
        aliasName: string(name='AliasName'),
      }
    ](name='AliasInfo'),
  }(name='AliasInfos'),
}

async function queryAliasesWithOptions(request: QueryAliasesRequest, runtime: Util.RuntimeOptions): QueryAliasesResponse {
  Util.validateModel(request);
  return doRequest('QueryAliases', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function queryAliases(request: QueryAliasesRequest): QueryAliasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAliasesWithOptions(request, runtime);
}

model PushNoticeToiOSRequest = {
  appKey: long(name='AppKey'),
  target: string(name='Target'),
  targetValue: string(name='TargetValue'),
  apnsEnv: string(name='ApnsEnv'),
  title?: string(name='Title'),
  body: string(name='Body'),
  jobKey?: string(name='JobKey'),
  extParameters?: string(name='ExtParameters'),
}

model PushNoticeToiOSResponse = {
  requestId: string(name='RequestId'),
  messageId: string(name='MessageId'),
}

async function pushNoticeToiOSWithOptions(request: PushNoticeToiOSRequest, runtime: Util.RuntimeOptions): PushNoticeToiOSResponse {
  Util.validateModel(request);
  return doRequest('PushNoticeToiOS', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function pushNoticeToiOS(request: PushNoticeToiOSRequest): PushNoticeToiOSResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushNoticeToiOSWithOptions(request, runtime);
}

model PushNoticeToAndroidRequest = {
  appKey: long(name='AppKey'),
  target: string(name='Target'),
  targetValue: string(name='TargetValue'),
  title: string(name='Title'),
  body: string(name='Body'),
  jobKey?: string(name='JobKey'),
  extParameters?: string(name='ExtParameters'),
}

model PushNoticeToAndroidResponse = {
  requestId: string(name='RequestId'),
  messageId: string(name='MessageId'),
}

async function pushNoticeToAndroidWithOptions(request: PushNoticeToAndroidRequest, runtime: Util.RuntimeOptions): PushNoticeToAndroidResponse {
  Util.validateModel(request);
  return doRequest('PushNoticeToAndroid', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function pushNoticeToAndroid(request: PushNoticeToAndroidRequest): PushNoticeToAndroidResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushNoticeToAndroidWithOptions(request, runtime);
}

model PushMessageToiOSRequest = {
  appKey: long(name='AppKey'),
  target: string(name='Target'),
  targetValue: string(name='TargetValue'),
  title: string(name='Title'),
  body: string(name='Body'),
  jobKey?: string(name='JobKey'),
}

model PushMessageToiOSResponse = {
  requestId: string(name='RequestId'),
  messageId: string(name='MessageId'),
}

async function pushMessageToiOSWithOptions(request: PushMessageToiOSRequest, runtime: Util.RuntimeOptions): PushMessageToiOSResponse {
  Util.validateModel(request);
  return doRequest('PushMessageToiOS', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function pushMessageToiOS(request: PushMessageToiOSRequest): PushMessageToiOSResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushMessageToiOSWithOptions(request, runtime);
}

model PushMessageToAndroidRequest = {
  appKey: long(name='AppKey'),
  target: string(name='Target'),
  targetValue: string(name='TargetValue'),
  title: string(name='Title'),
  body: string(name='Body'),
  jobKey?: string(name='JobKey'),
}

model PushMessageToAndroidResponse = {
  requestId: string(name='RequestId'),
  messageId: string(name='MessageId'),
}

async function pushMessageToAndroidWithOptions(request: PushMessageToAndroidRequest, runtime: Util.RuntimeOptions): PushMessageToAndroidResponse {
  Util.validateModel(request);
  return doRequest('PushMessageToAndroid', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function pushMessageToAndroid(request: PushMessageToAndroidRequest): PushMessageToAndroidResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushMessageToAndroidWithOptions(request, runtime);
}

model PushRequest = {
  appKey: long(name='AppKey'),
  pushType: string(name='PushType'),
  deviceType: string(name='DeviceType'),
  target: string(name='Target'),
  targetValue: string(name='TargetValue'),
  title?: string(name='Title'),
  body: string(name='Body'),
  jobKey?: string(name='JobKey'),
  sendSpeed?: integer(name='SendSpeed'),
  storeOffline?: boolean(name='StoreOffline'),
  pushTime?: string(name='PushTime'),
  expireTime?: string(name='ExpireTime'),
  iOSApnsEnv?: string(name='iOSApnsEnv'),
  iOSRemind?: boolean(name='iOSRemind'),
  iOSRemindBody?: string(name='iOSRemindBody'),
  iOSBadge?: integer(name='iOSBadge'),
  iOSBadgeAutoIncrement?: boolean(name='iOSBadgeAutoIncrement'),
  iOSSilentNotification?: boolean(name='iOSSilentNotification'),
  iOSMusic?: string(name='iOSMusic'),
  iOSSubtitle?: string(name='iOSSubtitle'),
  iOSNotificationCategory?: string(name='iOSNotificationCategory'),
  iOSMutableContent?: boolean(name='iOSMutableContent'),
  iOSExtParameters?: string(name='iOSExtParameters'),
  androidNotifyType?: string(name='AndroidNotifyType'),
  androidOpenType?: string(name='AndroidOpenType'),
  androidActivity?: string(name='AndroidActivity'),
  androidMusic?: string(name='AndroidMusic'),
  androidOpenUrl?: string(name='AndroidOpenUrl'),
  androidXiaoMiActivity?: string(name='AndroidXiaoMiActivity'),
  androidXiaoMiNotifyTitle?: string(name='AndroidXiaoMiNotifyTitle'),
  androidXiaoMiNotifyBody?: string(name='AndroidXiaoMiNotifyBody'),
  androidPopupActivity?: string(name='AndroidPopupActivity'),
  androidPopupTitle?: string(name='AndroidPopupTitle'),
  androidPopupBody?: string(name='AndroidPopupBody'),
  androidNotificationBarType?: integer(name='AndroidNotificationBarType'),
  androidNotificationBarPriority?: integer(name='AndroidNotificationBarPriority'),
  androidExtParameters?: string(name='AndroidExtParameters'),
  androidRemind?: boolean(name='AndroidRemind'),
  androidNotificationChannel?: string(name='AndroidNotificationChannel'),
  androidNotificationXiaomiChannel?: string(name='AndroidNotificationXiaomiChannel'),
  smsTemplateName?: string(name='SmsTemplateName'),
  smsSignName?: string(name='SmsSignName'),
  smsParams?: string(name='SmsParams'),
  smsDelaySecs?: integer(name='SmsDelaySecs'),
  smsSendPolicy?: integer(name='SmsSendPolicy'),
  androidNotificationVivoChannel?: string(name='AndroidNotificationVivoChannel'),
}

model PushResponse = {
  requestId: string(name='RequestId'),
  messageId: string(name='MessageId'),
}

async function pushWithOptions(request: PushRequest, runtime: Util.RuntimeOptions): PushResponse {
  Util.validateModel(request);
  return doRequest('Push', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function push(request: PushRequest): PushResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushWithOptions(request, runtime);
}

model ListTagsRequest = {
  appKey: long(name='AppKey'),
}

model ListTagsResponse = {
  requestId: string(name='RequestId'),
  tagInfos: {
    tagInfo: [
      {
        tagName: string(name='TagName'),
      }
    ](name='TagInfo'),
  }(name='TagInfos'),
}

async function listTagsWithOptions(request: ListTagsRequest, runtime: Util.RuntimeOptions): ListTagsResponse {
  Util.validateModel(request);
  return doRequest('ListTags', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function listTags(request: ListTagsRequest): ListTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagsWithOptions(request, runtime);
}

model ListSummaryAppsRequest = {
}

model ListSummaryAppsResponse = {
  requestId: string(name='RequestId'),
  summaryAppInfos: {
    summaryAppInfo: [
      {
        appName: string(name='AppName'),
        appKey: long(name='AppKey'),
      }
    ](name='SummaryAppInfo'),
  }(name='SummaryAppInfos'),
}

async function listSummaryAppsWithOptions(request: ListSummaryAppsRequest, runtime: Util.RuntimeOptions): ListSummaryAppsResponse {
  Util.validateModel(request);
  return doRequest('ListSummaryApps', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function listSummaryApps(request: ListSummaryAppsRequest): ListSummaryAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSummaryAppsWithOptions(request, runtime);
}

model BindTagRequest = {
  appKey: long(name='AppKey'),
  clientKey: string(name='ClientKey'),
  keyType: string(name='KeyType'),
  tagName: string(name='TagName'),
}

model BindTagResponse = {
  requestId: string(name='RequestId'),
}

async function bindTagWithOptions(request: BindTagRequest, runtime: Util.RuntimeOptions): BindTagResponse {
  Util.validateModel(request);
  return doRequest('BindTag', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function bindTag(request: BindTagRequest): BindTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindTagWithOptions(request, runtime);
}

model BindAliasRequest = {
  appKey: long(name='AppKey'),
  deviceId: string(name='DeviceId'),
  aliasName: string(name='AliasName'),
}

model BindAliasResponse = {
  requestId: string(name='RequestId'),
}

async function bindAliasWithOptions(request: BindAliasRequest, runtime: Util.RuntimeOptions): BindAliasResponse {
  Util.validateModel(request);
  return doRequest('BindAlias', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function bindAlias(request: BindAliasRequest): BindAliasResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAliasWithOptions(request, runtime);
}

model CancelPushRequest = {
  appKey: long(name='AppKey'),
  messageId: long(name='MessageId'),
}

model CancelPushResponse = {
  requestId: string(name='RequestId'),
}

async function cancelPushWithOptions(request: CancelPushRequest, runtime: Util.RuntimeOptions): CancelPushResponse {
  Util.validateModel(request);
  return doRequest('CancelPush', 'HTTPS', 'POST', '2016-08-01', 'AK', null, request, runtime);
}

async function cancelPush(request: CancelPushRequest): CancelPushResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelPushWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
