import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'afs.aliyuncs.com',
    ap-northeast-2-pop = 'afs.aliyuncs.com',
    ap-south-1 = 'afs.aliyuncs.com',
    ap-southeast-1 = 'afs.aliyuncs.com',
    ap-southeast-2 = 'afs.aliyuncs.com',
    ap-southeast-3 = 'afs.aliyuncs.com',
    ap-southeast-5 = 'afs.aliyuncs.com',
    cn-beijing = 'afs.aliyuncs.com',
    cn-beijing-finance-1 = 'afs.aliyuncs.com',
    cn-beijing-finance-pop = 'afs.aliyuncs.com',
    cn-beijing-gov-1 = 'afs.aliyuncs.com',
    cn-beijing-nu16-b01 = 'afs.aliyuncs.com',
    cn-chengdu = 'afs.aliyuncs.com',
    cn-edge-1 = 'afs.aliyuncs.com',
    cn-fujian = 'afs.aliyuncs.com',
    cn-haidian-cm12-c01 = 'afs.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'afs.aliyuncs.com',
    cn-hangzhou-finance = 'afs.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'afs.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'afs.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'afs.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'afs.aliyuncs.com',
    cn-hangzhou-test-306 = 'afs.aliyuncs.com',
    cn-hongkong = 'afs.aliyuncs.com',
    cn-hongkong-finance-pop = 'afs.aliyuncs.com',
    cn-huhehaote = 'afs.aliyuncs.com',
    cn-north-2-gov-1 = 'afs.aliyuncs.com',
    cn-qingdao = 'afs.aliyuncs.com',
    cn-qingdao-nebula = 'afs.aliyuncs.com',
    cn-shanghai = 'afs.aliyuncs.com',
    cn-shanghai-et15-b01 = 'afs.aliyuncs.com',
    cn-shanghai-et2-b01 = 'afs.aliyuncs.com',
    cn-shanghai-finance-1 = 'afs.aliyuncs.com',
    cn-shanghai-inner = 'afs.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'afs.aliyuncs.com',
    cn-shenzhen = 'afs.aliyuncs.com',
    cn-shenzhen-finance-1 = 'afs.aliyuncs.com',
    cn-shenzhen-inner = 'afs.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'afs.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'afs.aliyuncs.com',
    cn-wuhan = 'afs.aliyuncs.com',
    cn-yushanfang = 'afs.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'afs.aliyuncs.com',
    cn-zhangjiakou = 'afs.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'afs.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'afs.aliyuncs.com',
    eu-central-1 = 'afs.aliyuncs.com',
    eu-west-1 = 'afs.aliyuncs.com',
    eu-west-1-oxs = 'afs.aliyuncs.com',
    me-east-1 = 'afs.aliyuncs.com',
    rus-west-1-pop = 'afs.aliyuncs.com',
    us-east-1 = 'afs.aliyuncs.com',
    us-west-1 = 'afs.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('afs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DescribeAfsTotalConfDataRequest = {
  productName: string(name='ProductName'),
}

model DescribeAfsTotalConfDataResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
  hasData: boolean(name='HasData'),
  ncTotalConfVerifyDatas: [
    {
      time: string(name='Time'),
      category: string(name='Category'),
      value: long(name='Value'),
    }
  ](name='NcTotalConfVerifyDatas'),
  ncTotalConfSigDatas: [
    {
      time: string(name='Time'),
      category: string(name='Category'),
      value: long(name='Value'),
    }
  ](name='NcTotalConfSigDatas'),
  ncTotalConfBlockDatas: [
    {
      time: string(name='Time'),
      category: string(name='Category'),
      value: long(name='Value'),
    }
  ](name='NcTotalConfBlockDatas'),
  icTotalConfVerifyDatas: [
    {
      time: string(name='Time'),
      category: string(name='Category'),
      value: long(name='Value'),
    }
  ](name='IcTotalConfVerifyDatas'),
  icTotalConfSecVerifyDatas: [
    {
      time: string(name='Time'),
      category: string(name='Category'),
      value: long(name='Value'),
    }
  ](name='IcTotalConfSecVerifyDatas'),
  icTotalConfSigDatas: [
    {
      time: string(name='Time'),
      category: string(name='Category'),
      value: long(name='Value'),
    }
  ](name='IcTotalConfSigDatas'),
  icTotalConfBlockDatas: [
    {
      time: string(name='Time'),
      category: string(name='Category'),
      value: long(name='Value'),
    }
  ](name='IcTotalConfBlockDatas'),
  nvcTotalConfVerifyDatas: [
    {
      time: string(name='Time'),
      category: string(name='Category'),
      value: long(name='Value'),
    }
  ](name='NvcTotalConfVerifyDatas'),
  nvcTotalConfSecVerifyDatas: [
    {
      time: string(name='Time'),
      category: string(name='Category'),
      value: long(name='Value'),
    }
  ](name='NvcTotalConfSecVerifyDatas'),
}

async function describeAfsTotalConfDataWithOptions(request: DescribeAfsTotalConfDataRequest, runtime: Util.RuntimeOptions): DescribeAfsTotalConfDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeAfsTotalConfData', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function describeAfsTotalConfData(request: DescribeAfsTotalConfDataRequest): DescribeAfsTotalConfDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAfsTotalConfDataWithOptions(request, runtime);
}

model DescribeAfsOneConfDataRequest = {
  sourceIp?: string(name='SourceIp'),
  appKey: string(name='AppKey'),
  scene: string(name='Scene'),
  productName: string(name='ProductName'),
}

model DescribeAfsOneConfDataResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
  hasData: boolean(name='HasData'),
  ncOneConfDatas: [
    {
      tableDate: string(name='TableDate'),
      ncInitCnt: integer(name='NcInitCnt'),
      ncNoActionCnt: long(name='NcNoActionCnt'),
      ncVerifyCnt: long(name='NcVerifyCnt'),
      ncVerifyBlockCnt: long(name='NcVerifyBlockCnt'),
      ncSigCnt: long(name='NcSigCnt'),
      ncSigBlockCnt: long(name='NcSigBlockCnt'),
    }
  ](name='NcOneConfDatas'),
  icOneConfDatas: [
    {
      tableDate: string(name='TableDate'),
      icInitCnt: long(name='IcInitCnt'),
      icNoActionCnt: long(name='IcNoActionCnt'),
      icVerifyCnt: long(name='IcVerifyCnt'),
      icSecVerifyCnt: long(name='IcSecVerifyCnt'),
      icSigCnt: long(name='IcSigCnt'),
      icBlockCnt: long(name='IcBlockCnt'),
    }
  ](name='IcOneConfDatas'),
  nvcOneConfDatas: [
    {
      tableDate: string(name='TableDate'),
      nvcInitCnt: long(name='NvcInitCnt'),
      nvcNoActionCnt: long(name='NvcNoActionCnt'),
      nvcVerifyCnt: long(name='NvcVerifyCnt'),
      nvcSecVerifyCnt: long(name='NvcSecVerifyCnt'),
      nvcBlockCnt: long(name='NvcBlockCnt'),
    }
  ](name='NvcOneConfDatas'),
}

async function describeAfsOneConfDataWithOptions(request: DescribeAfsOneConfDataRequest, runtime: Util.RuntimeOptions): DescribeAfsOneConfDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeAfsOneConfData', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function describeAfsOneConfData(request: DescribeAfsOneConfDataRequest): DescribeAfsOneConfDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAfsOneConfDataWithOptions(request, runtime);
}

model DescribeAfsVerifySigDataRequest = {
  sourceIp?: string(name='SourceIp'),
  appKey: string(name='AppKey'),
  scene: string(name='Scene'),
  productName: string(name='ProductName'),
}

model DescribeAfsVerifySigDataResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
  hasData: boolean(name='HasData'),
  ncVerifyDatas: [
    {
      time: string(name='Time'),
      ncVerifyPass: long(name='NcVerifyPass'),
      ncVerifyBlock: long(name='NcVerifyBlock'),
    }
  ](name='NcVerifyDatas'),
  ncSigDatas: [
    {
      time: string(name='Time'),
      ncSigPass: long(name='NcSigPass'),
      ncSigBlock: long(name='NcSigBlock'),
    }
  ](name='NcSigDatas'),
  icSecVerifyDatas: [
    {
      time: string(name='Time'),
      icSecPass: long(name='IcSecPass'),
      icSecBlock: long(name='IcSecBlock'),
    }
  ](name='IcSecVerifyDatas'),
  icVerifyDatas: [
    {
      time: string(name='Time'),
      icVerifyCnt: long(name='IcVerifyCnt'),
      icSecVerifyCnt: long(name='IcSecVerifyCnt'),
      icSigCnt: long(name='IcSigCnt'),
      icBlockCnt: long(name='IcBlockCnt'),
    }
  ](name='IcVerifyDatas'),
  nvcVerifyDatas: [
    {
      time: string(name='Time'),
      nvcVerifyCnt: long(name='NvcVerifyCnt'),
      nvcSecVerifyCnt: long(name='NvcSecVerifyCnt'),
    }
  ](name='NvcVerifyDatas'),
  nvcSecDatas: [
    {
      time: string(name='Time'),
      nvcSecPass: long(name='NvcSecPass'),
      nvcSecBlock: long(name='NvcSecBlock'),
    }
  ](name='NvcSecDatas'),
  nvcCodeDatas: [
    {
      time: string(name='Time'),
      nvcCode200: long(name='NvcCode200'),
      nvcCode400: long(name='NvcCode400'),
      nvcCode600: long(name='NvcCode600'),
      nvcCode800: long(name='NvcCode800'),
    }
  ](name='NvcCodeDatas'),
}

async function describeAfsVerifySigDataWithOptions(request: DescribeAfsVerifySigDataRequest, runtime: Util.RuntimeOptions): DescribeAfsVerifySigDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeAfsVerifySigData', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function describeAfsVerifySigData(request: DescribeAfsVerifySigDataRequest): DescribeAfsVerifySigDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAfsVerifySigDataWithOptions(request, runtime);
}

model DescribeAfsConfigNameRequest = {
  productName: string(name='ProductName'),
}

model DescribeAfsConfigNameResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
  hasData: boolean(name='HasData'),
  configNames: [
    {
      aliUid: string(name='AliUid'),
      configName: string(name='ConfigName'),
      appKey: string(name='AppKey'),
      scene: string(name='Scene'),
      refExtId: string(name='RefExtId'),
    }
  ](name='ConfigNames'),
}

async function describeAfsConfigNameWithOptions(request: DescribeAfsConfigNameRequest, runtime: Util.RuntimeOptions): DescribeAfsConfigNameResponse {
  Util.validateModel(request);
  return doRequest('DescribeAfsConfigName', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function describeAfsConfigName(request: DescribeAfsConfigNameRequest): DescribeAfsConfigNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAfsConfigNameWithOptions(request, runtime);
}

model UpdateConfigNameRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  refExtId: string(name='RefExtId'),
  configName: string(name='ConfigName'),
}

model UpdateConfigNameResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
}

async function updateConfigNameWithOptions(request: UpdateConfigNameRequest, runtime: Util.RuntimeOptions): UpdateConfigNameResponse {
  Util.validateModel(request);
  return doRequest('UpdateConfigName', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function updateConfigName(request: UpdateConfigNameRequest): UpdateConfigNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConfigNameWithOptions(request, runtime);
}

model DescribeCaptchaOrderRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
}

model DescribeCaptchaOrderResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
}

async function describeCaptchaOrderWithOptions(request: DescribeCaptchaOrderRequest, runtime: Util.RuntimeOptions): DescribeCaptchaOrderResponse {
  Util.validateModel(request);
  return doRequest('DescribeCaptchaOrder', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function describeCaptchaOrder(request: DescribeCaptchaOrderRequest): DescribeCaptchaOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCaptchaOrderWithOptions(request, runtime);
}

model DescribeOrderInfoRequest = {
  sourceIp?: string(name='SourceIp'),
}

model DescribeOrderInfoResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
  orderLevel: string(name='OrderLevel'),
  num: string(name='Num'),
  beginDate: string(name='BeginDate'),
  endDate: string(name='EndDate'),
}

async function describeOrderInfoWithOptions(request: DescribeOrderInfoRequest, runtime: Util.RuntimeOptions): DescribeOrderInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeOrderInfo', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function describeOrderInfo(request: DescribeOrderInfoRequest): DescribeOrderInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOrderInfoWithOptions(request, runtime);
}

model SetEarlyWarningRequest = {
  sourceIp?: string(name='SourceIp'),
  warnOpen: boolean(name='WarnOpen'),
  channel: string(name='Channel'),
  frequency: string(name='Frequency'),
  timeOpen: boolean(name='TimeOpen'),
  timeBegin: string(name='TimeBegin'),
  timeEnd: string(name='TimeEnd'),
  title: string(name='Title'),
}

model SetEarlyWarningResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
}

async function setEarlyWarningWithOptions(request: SetEarlyWarningRequest, runtime: Util.RuntimeOptions): SetEarlyWarningResponse {
  Util.validateModel(request);
  return doRequest('SetEarlyWarning', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function setEarlyWarning(request: SetEarlyWarningRequest): SetEarlyWarningResponse {
  var runtime = new Util.RuntimeOptions{};
  return setEarlyWarningWithOptions(request, runtime);
}

model DescribePersonMachineListRequest = {
  sourceIp?: string(name='SourceIp'),
}

model DescribePersonMachineListResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
  personMachineRes: {
    hasConfiguration: string(name='HasConfiguration'),
    personMachines: [
      {
        configurationName: string(name='ConfigurationName'),
        appkey: string(name='Appkey'),
        configurationMethod: string(name='ConfigurationMethod'),
        applyType: string(name='ApplyType'),
        scene: string(name='Scene'),
        lastUpdate: string(name='LastUpdate'),
        extId: string(name='ExtId'),
        sceneOriginal: string(name='SceneOriginal'),
      }
    ](name='PersonMachines'),
  }(name='PersonMachineRes'),
}

async function describePersonMachineListWithOptions(request: DescribePersonMachineListRequest, runtime: Util.RuntimeOptions): DescribePersonMachineListResponse {
  Util.validateModel(request);
  return doRequest('DescribePersonMachineList', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function describePersonMachineList(request: DescribePersonMachineListRequest): DescribePersonMachineListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePersonMachineListWithOptions(request, runtime);
}

model DescribeEarlyWarningRequest = {
  sourceIp?: string(name='SourceIp'),
}

model DescribeEarlyWarningResponse = {
  requestId: string(name='RequestId'),
  hasWarning: boolean(name='HasWarning'),
  bizCode: string(name='BizCode'),
  earlyWarnings: [
    {
      warnOpen: boolean(name='WarnOpen'),
      title: string(name='Title'),
      content: string(name='Content'),
      frequency: string(name='Frequency'),
      timeOpen: boolean(name='TimeOpen'),
      timeBegin: string(name='TimeBegin'),
      timeEnd: string(name='TimeEnd'),
      channel: string(name='Channel'),
    }
  ](name='EarlyWarnings'),
}

async function describeEarlyWarningWithOptions(request: DescribeEarlyWarningRequest, runtime: Util.RuntimeOptions): DescribeEarlyWarningResponse {
  Util.validateModel(request);
  return doRequest('DescribeEarlyWarning', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function describeEarlyWarning(request: DescribeEarlyWarningRequest): DescribeEarlyWarningResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEarlyWarningWithOptions(request, runtime);
}

model DescribeConfigNameRequest = {
  sourceIp?: string(name='SourceIp'),
}

model DescribeConfigNameResponse = {
  requestId: string(name='RequestId'),
  hasConfig: boolean(name='HasConfig'),
  bizCode: string(name='BizCode'),
  configNames: [
    {
      aliUid: string(name='AliUid'),
      configName: string(name='ConfigName'),
      refExtId: string(name='RefExtId'),
    }
  ](name='ConfigNames'),
}

async function describeConfigNameWithOptions(request: DescribeConfigNameRequest, runtime: Util.RuntimeOptions): DescribeConfigNameResponse {
  Util.validateModel(request);
  return doRequest('DescribeConfigName', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function describeConfigName(request: DescribeConfigNameRequest): DescribeConfigNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConfigNameWithOptions(request, runtime);
}

model DescribeCaptchaRiskRequest = {
  sourceIp?: string(name='SourceIp'),
  configName?: string(name='ConfigName'),
  time: string(name='Time'),
  refExtId?: string(name='RefExtId'),
}

model DescribeCaptchaRiskResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
  numOfThisMonth: integer(name='NumOfThisMonth'),
  numOfLastMonth: integer(name='NumOfLastMonth'),
  riskLevel: string(name='RiskLevel'),
}

async function describeCaptchaRiskWithOptions(request: DescribeCaptchaRiskRequest, runtime: Util.RuntimeOptions): DescribeCaptchaRiskResponse {
  Util.validateModel(request);
  return doRequest('DescribeCaptchaRisk', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function describeCaptchaRisk(request: DescribeCaptchaRiskRequest): DescribeCaptchaRiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCaptchaRiskWithOptions(request, runtime);
}

model DescribeCaptchaMinRequest = {
  sourceIp?: string(name='SourceIp'),
  configName?: string(name='ConfigName'),
  type: string(name='Type'),
  time: string(name='Time'),
  refExtId?: string(name='RefExtId'),
}

model DescribeCaptchaMinResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
  hasData: boolean(name='HasData'),
  captchaMins: [
    {
      time: string(name='Time'),
      pass: string(name='Pass'),
      interception: string(name='Interception'),
    }
  ](name='CaptchaMins'),
}

async function describeCaptchaMinWithOptions(request: DescribeCaptchaMinRequest, runtime: Util.RuntimeOptions): DescribeCaptchaMinResponse {
  Util.validateModel(request);
  return doRequest('DescribeCaptchaMin', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function describeCaptchaMin(request: DescribeCaptchaMinRequest): DescribeCaptchaMinResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCaptchaMinWithOptions(request, runtime);
}

model DescribeCaptchaIpCityRequest = {
  sourceIp?: string(name='SourceIp'),
  configName?: string(name='ConfigName'),
  type: string(name='Type'),
  time: string(name='Time'),
  refExtId?: string(name='RefExtId'),
}

model DescribeCaptchaIpCityResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
  hasData: boolean(name='HasData'),
  captchaCities: [
    {
      location: string(name='Location'),
      lat: string(name='Lat'),
      lng: string(name='Lng'),
      pv: integer(name='Pv'),
    }
  ](name='CaptchaCities'),
  captchaIps: [
    {
      ip: string(name='Ip'),
      value: integer(name='Value'),
    }
  ](name='CaptchaIps'),
}

async function describeCaptchaIpCityWithOptions(request: DescribeCaptchaIpCityRequest, runtime: Util.RuntimeOptions): DescribeCaptchaIpCityResponse {
  Util.validateModel(request);
  return doRequest('DescribeCaptchaIpCity', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function describeCaptchaIpCity(request: DescribeCaptchaIpCityRequest): DescribeCaptchaIpCityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCaptchaIpCityWithOptions(request, runtime);
}

model DescribeCaptchaDayRequest = {
  sourceIp?: string(name='SourceIp'),
  configName?: string(name='ConfigName'),
  type: string(name='Type'),
  time: string(name='Time'),
  refExtId?: string(name='RefExtId'),
}

model DescribeCaptchaDayResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
  hasData: boolean(name='HasData'),
  captchaDay: {
    init: integer(name='Init'),
    askForVerify: integer(name='AskForVerify'),
    direcetStrategyInterception: integer(name='DirecetStrategyInterception'),
    twiceVerify: integer(name='TwiceVerify'),
    pass: integer(name='Pass'),
    checkTested: integer(name='CheckTested'),
    uncheckTested: integer(name='UncheckTested'),
    legalSign: integer(name='LegalSign'),
    maliciousFlow: integer(name='MaliciousFlow'),
  }(name='CaptchaDay'),
}

async function describeCaptchaDayWithOptions(request: DescribeCaptchaDayRequest, runtime: Util.RuntimeOptions): DescribeCaptchaDayResponse {
  Util.validateModel(request);
  return doRequest('DescribeCaptchaDay', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function describeCaptchaDay(request: DescribeCaptchaDayRequest): DescribeCaptchaDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCaptchaDayWithOptions(request, runtime);
}

model CreateConfigurationRequest = {
  sourceIp?: string(name='SourceIp'),
  configurationName: string(name='ConfigurationName'),
  applyType: string(name='ApplyType'),
  scene: string(name='Scene'),
  maxPV: string(name='MaxPV'),
  configurationMethod: string(name='ConfigurationMethod'),
}

model CreateConfigurationResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
  refExtId: string(name='RefExtId'),
}

async function createConfigurationWithOptions(request: CreateConfigurationRequest, runtime: Util.RuntimeOptions): CreateConfigurationResponse {
  Util.validateModel(request);
  return doRequest('CreateConfiguration', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function createConfiguration(request: CreateConfigurationRequest): CreateConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConfigurationWithOptions(request, runtime);
}

model ConfigurationStyleRequest = {
  sourceIp?: string(name='SourceIp'),
  applyType: string(name='ApplyType'),
  scene: string(name='Scene'),
  configurationMethod: string(name='ConfigurationMethod'),
  refExtId?: string(name='RefExtId'),
}

model ConfigurationStyleResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
  codeData: {
    html: string(name='Html'),
    net: string(name='Net'),
    php: string(name='Php'),
    python: string(name='Python'),
    java: string(name='Java'),
    nodeJs: string(name='NodeJs'),
    netUrl: string(name='NetUrl'),
    phpUrl: string(name='PhpUrl'),
    pythonUrl: string(name='PythonUrl'),
    javaUrl: string(name='JavaUrl'),
    nodeJsUrl: string(name='NodeJsUrl'),
  }(name='CodeData'),
}

async function configurationStyleWithOptions(request: ConfigurationStyleRequest, runtime: Util.RuntimeOptions): ConfigurationStyleResponse {
  Util.validateModel(request);
  return doRequest('ConfigurationStyle', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function configurationStyle(request: ConfigurationStyleRequest): ConfigurationStyleResponse {
  var runtime = new Util.RuntimeOptions{};
  return configurationStyleWithOptions(request, runtime);
}

model AuthenticateSigRequest = {
  sourceIp?: string(name='SourceIp'),
  sessionId: string(name='SessionId'),
  appKey?: string(name='AppKey'),
  sig?: string(name='Sig'),
  token?: string(name='Token'),
  scene?: string(name='Scene'),
  remoteIp?: string(name='RemoteIp'),
}

model AuthenticateSigResponse = {
  requestId: string(name='RequestId'),
  code: integer(name='Code'),
  msg: string(name='Msg'),
  riskLevel: string(name='RiskLevel'),
  detail: string(name='Detail'),
}

async function authenticateSigWithOptions(request: AuthenticateSigRequest, runtime: Util.RuntimeOptions): AuthenticateSigResponse {
  Util.validateModel(request);
  return doRequest('AuthenticateSig', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function authenticateSig(request: AuthenticateSigRequest): AuthenticateSigResponse {
  var runtime = new Util.RuntimeOptions{};
  return authenticateSigWithOptions(request, runtime);
}

model AnalyzeNvcRequest = {
  sourceIp?: string(name='SourceIp'),
  scoreJsonStr: string(name='ScoreJsonStr'),
  data: string(name='Data'),
}

model AnalyzeNvcResponse = {
  requestId: string(name='RequestId'),
  bizCode: string(name='BizCode'),
}

async function analyzeNvcWithOptions(request: AnalyzeNvcRequest, runtime: Util.RuntimeOptions): AnalyzeNvcResponse {
  Util.validateModel(request);
  return doRequest('AnalyzeNvc', 'HTTPS', 'POST', '2018-01-12', 'AK', null, request, runtime);
}

async function analyzeNvc(request: AnalyzeNvcRequest): AnalyzeNvcResponse {
  var runtime = new Util.RuntimeOptions{};
  return analyzeNvcWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
