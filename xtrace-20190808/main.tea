import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('xtrace', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model UpdateSamplingRequest = {
  regionId?: string(name='RegionId'),
  proxyUserId?: string(name='ProxyUserId'),
  sampling: string(name='Sampling'),
}

model UpdateSamplingResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function updateSamplingWithOptions(request: UpdateSamplingRequest, runtime: Util.RuntimeOptions): UpdateSamplingResponse {
  Util.validateModel(request);
  return doRequest('UpdateSampling', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function updateSampling(request: UpdateSamplingRequest): UpdateSamplingResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSamplingWithOptions(request, runtime);
}

model GetSamplingRequest = {
  regionId?: string(name='RegionId'),
  proxyUserId?: string(name='ProxyUserId'),
}

model GetSamplingResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function getSamplingWithOptions(request: GetSamplingRequest, runtime: Util.RuntimeOptions): GetSamplingResponse {
  Util.validateModel(request);
  return doRequest('GetSampling', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function getSampling(request: GetSamplingRequest): GetSamplingResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSamplingWithOptions(request, runtime);
}

model QueryMetricRequest = {
  intervalInSec?: integer(name='IntervalInSec'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  orderBy?: string(name='OrderBy'),
  limit?: integer(name='Limit'),
  filters?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filters'),
  dimensions?: [ string ](name='Dimensions'),
  metric: string(name='Metric'),
  measures?: [ string ](name='Measures'),
  order?: string(name='Order'),
  proxyUserId?: string(name='ProxyUserId'),
}

model QueryMetricResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function queryMetricWithOptions(request: QueryMetricRequest, runtime: Util.RuntimeOptions): QueryMetricResponse {
  Util.validateModel(request);
  return doRequest('QueryMetric', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function queryMetric(request: QueryMetricRequest): QueryMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMetricWithOptions(request, runtime);
}

model GetTraceRequest = {
  traceID: string(name='TraceID'),
  appType?: string(name='AppType'),
  regionId: string(name='RegionId'),
}

model GetTraceResponse = {
  requestId: string(name='RequestId'),
  spans: {
    span: [
      {
        traceID: string(name='TraceID'),
        operationName: string(name='OperationName'),
        duration: long(name='Duration'),
        serviceName: string(name='ServiceName'),
        serviceIp: string(name='ServiceIp'),
        timestamp: long(name='Timestamp'),
        rpcId: string(name='RpcId'),
        resultCode: string(name='ResultCode'),
        haveStack: boolean(name='HaveStack'),
        tagEntryList: {
          tagEntry: [
            {
              key: string(name='Key'),
              value: string(name='Value'),
            }
          ](name='TagEntry'),
        }(name='TagEntryList'),
        logEventList: {
          logEvent: [
            {
              timestamp: long(name='Timestamp'),
              tagEntryList: {
                tagEntry: [
                  {
                    key: string(name='Key'),
                    value: string(name='Value'),
                  }
                ](name='TagEntry'),
              }(name='TagEntryList'),
            }
          ](name='LogEvent'),
        }(name='LogEventList'),
      }
    ](name='Span'),
  }(name='Spans'),
}

async function getTraceWithOptions(request: GetTraceRequest, runtime: Util.RuntimeOptions): GetTraceResponse {
  Util.validateModel(request);
  return doRequest('GetTrace', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function getTrace(request: GetTraceRequest): GetTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTraceWithOptions(request, runtime);
}

model SearchTracesRequest = {
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  regionId: string(name='RegionId'),
  serviceName?: string(name='ServiceName'),
  operationName?: string(name='OperationName'),
  minDuration?: long(name='MinDuration'),
  appType?: string(name='AppType'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
  reverse?: boolean(name='Reverse'),
  serviceIp?: string(name='ServiceIp'),
}

model SearchTracesResponse = {
  requestId: string(name='RequestId'),
  pageBean: {
    totalCount: long(name='TotalCount'),
    pageSize: integer(name='PageSize'),
    pageNumber: integer(name='PageNumber'),
    traceInfos: {
      traceInfo: [
        {
          traceID: string(name='TraceID'),
          operationName: string(name='OperationName'),
          serviceName: string(name='ServiceName'),
          serviceIp: string(name='ServiceIp'),
          duration: long(name='Duration'),
          timestamp: long(name='Timestamp'),
        }
      ](name='TraceInfo'),
    }(name='TraceInfos'),
  }(name='PageBean'),
}

async function searchTracesWithOptions(request: SearchTracesRequest, runtime: Util.RuntimeOptions): SearchTracesResponse {
  Util.validateModel(request);
  return doRequest('SearchTraces', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function searchTraces(request: SearchTracesRequest): SearchTracesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTracesWithOptions(request, runtime);
}

model GetTagValRequest = {
  regionId?: string(name='RegionId'),
  serviceName?: string(name='ServiceName'),
  spanName?: string(name='SpanName'),
  tagKey: string(name='TagKey'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model GetTagValResponse = {
  requestId: string(name='RequestId'),
  tagValues: {
    tagValue: [ string ](name='TagValue'),
  }(name='TagValues'),
}

async function getTagValWithOptions(request: GetTagValRequest, runtime: Util.RuntimeOptions): GetTagValResponse {
  Util.validateModel(request);
  return doRequest('GetTagVal', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function getTagVal(request: GetTagValRequest): GetTagValResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTagValWithOptions(request, runtime);
}

model GetTagKeyRequest = {
  regionId: string(name='RegionId'),
  serviceName?: string(name='ServiceName'),
  spanName?: string(name='SpanName'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model GetTagKeyResponse = {
  requestId: string(name='RequestId'),
  tagKeys: {
    tagKey: [ string ](name='TagKey'),
  }(name='TagKeys'),
}

async function getTagKeyWithOptions(request: GetTagKeyRequest, runtime: Util.RuntimeOptions): GetTagKeyResponse {
  Util.validateModel(request);
  return doRequest('GetTagKey', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function getTagKey(request: GetTagKeyRequest): GetTagKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTagKeyWithOptions(request, runtime);
}

model ListIpOrHostsRequest = {
  regionId: string(name='RegionId'),
  serviceName?: string(name='ServiceName'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model ListIpOrHostsResponse = {
  requestId: string(name='RequestId'),
  ipNames: {
    ipName: [ string ](name='IpName'),
  }(name='IpNames'),
}

async function listIpOrHostsWithOptions(request: ListIpOrHostsRequest, runtime: Util.RuntimeOptions): ListIpOrHostsResponse {
  Util.validateModel(request);
  return doRequest('ListIpOrHosts', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function listIpOrHosts(request: ListIpOrHostsRequest): ListIpOrHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIpOrHostsWithOptions(request, runtime);
}

model ListServicesRequest = {
  regionId: string(name='RegionId'),
  appType?: string(name='AppType'),
}

model ListServicesResponse = {
  requestId: string(name='RequestId'),
  services: {
    service: [
      {
        serviceName: string(name='ServiceName'),
        pid: string(name='Pid'),
        regionId: string(name='RegionId'),
      }
    ](name='Service'),
  }(name='Services'),
}

async function listServicesWithOptions(request: ListServicesRequest, runtime: Util.RuntimeOptions): ListServicesResponse {
  Util.validateModel(request);
  return doRequest('ListServices', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServicesWithOptions(request, runtime);
}

model ListSpanNamesRequest = {
  regionId: string(name='RegionId'),
  serviceName?: string(name='ServiceName'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model ListSpanNamesResponse = {
  requestId: string(name='RequestId'),
  spanNames: {
    spanName: [ string ](name='SpanName'),
  }(name='SpanNames'),
}

async function listSpanNamesWithOptions(request: ListSpanNamesRequest, runtime: Util.RuntimeOptions): ListSpanNamesResponse {
  Util.validateModel(request);
  return doRequest('ListSpanNames', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function listSpanNames(request: ListSpanNamesRequest): ListSpanNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSpanNamesWithOptions(request, runtime);
}

model GetTokenRequest = {
  regionId: string(name='RegionId'),
  appType?: string(name='AppType'),
  proxyUserId?: string(name='ProxyUserId'),
}

model GetTokenResponse = {
  requestId: string(name='RequestId'),
  token: {
    domain: string(name='Domain'),
    licenseKey: string(name='LicenseKey'),
    pid: string(name='Pid'),
    internalDomain: string(name='InternalDomain'),
  }(name='Token'),
}

async function getTokenWithOptions(request: GetTokenRequest, runtime: Util.RuntimeOptions): GetTokenResponse {
  Util.validateModel(request);
  return doRequest('GetToken', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function getToken(request: GetTokenRequest): GetTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTokenWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
