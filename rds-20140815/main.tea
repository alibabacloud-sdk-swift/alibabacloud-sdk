/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
@endpointMap = {
    cn-qingdao = 'rds.aliyuncs.com',
    cn-beijing = 'rds.aliyuncs.com',
    cn-hangzhou = 'rds.aliyuncs.com',
    cn-shanghai = 'rds.aliyuncs.com',
    cn-shenzhen = 'rds.aliyuncs.com',
    cn-hongkong = 'rds.aliyuncs.com',
    ap-southeast-1 = 'rds.aliyuncs.com',
    us-west-1 = 'rds.aliyuncs.com',
    us-east-1 = 'rds.aliyuncs.com',
    cn-shanghai-finance-1 = 'rds.aliyuncs.com',
    cn-shenzhen-finance-1 = 'rds.aliyuncs.com',
    cn-north-2-gov-1 = 'rds.aliyuncs.com',
    ap-northeast-2-pop = 'rds.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'rds.aliyuncs.com',
    cn-beijing-finance-pop = 'rds.aliyuncs.com',
    cn-beijing-gov-1 = 'rds.aliyuncs.com',
    cn-beijing-nu16-b01 = 'rds.aliyuncs.com',
    cn-edge-1 = 'rds.aliyuncs.com',
    cn-fujian = 'rds.aliyuncs.com',
    cn-haidian-cm12-c01 = 'rds.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'rds.aliyuncs.com',
    cn-hangzhou-finance = 'rds.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'rds.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'rds.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'rds.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'rds.aliyuncs.com',
    cn-hangzhou-test-306 = 'rds.aliyuncs.com',
    cn-hongkong-finance-pop = 'rds.aliyuncs.com',
    cn-qingdao-nebula = 'rds.aliyuncs.com',
    cn-shanghai-et15-b01 = 'rds.aliyuncs.com',
    cn-shanghai-et2-b01 = 'rds.aliyuncs.com',
    cn-shanghai-inner = 'rds.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'rds.aliyuncs.com',
    cn-shenzhen-inner = 'rds.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'rds.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'rds.aliyuncs.com',
    cn-wuhan = 'rds.aliyuncs.com',
    cn-yushanfang = 'rds.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'rds.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'rds.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'rds.aliyuncs.com',
    eu-west-1-oxs = 'rds.ap-northeast-1.aliyuncs.com',
    rus-west-1-pop = 'rds.ap-northeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('rds', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateDiagnosticReportRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  category?: string(name='Category'),
}

model CreateDiagnosticReportResponseBody = {
  requestId?: string(name='RequestId'),
  reportId?: string(name='ReportId'),
}

model CreateDiagnosticReportResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiagnosticReportResponseBody(name='body'),
}

async function createDiagnosticReportWithOptions(request: CreateDiagnosticReportRequest, runtime: Util.RuntimeOptions): CreateDiagnosticReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDiagnosticReport', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDiagnosticReport(request: CreateDiagnosticReportRequest): CreateDiagnosticReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiagnosticReportWithOptions(request, runtime);
}

model DescribeDiagnosticReportListRequest {
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeDiagnosticReportListResponseBody = {
  requestId?: string(name='RequestId'),
  reportList?: [ 
    {
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      diagnosticTime?: string(name='DiagnosticTime'),
      score?: int32(name='Score'),
      downloadURL?: string(name='DownloadURL'),
    }
  ](name='ReportList'),
}

model DescribeDiagnosticReportListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosticReportListResponseBody(name='body'),
}

async function describeDiagnosticReportListWithOptions(request: DescribeDiagnosticReportListRequest, runtime: Util.RuntimeOptions): DescribeDiagnosticReportListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDiagnosticReportList', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDiagnosticReportList(request: DescribeDiagnosticReportListRequest): DescribeDiagnosticReportListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosticReportListWithOptions(request, runtime);
}

model GetDBInstanceTopologyRequest {
  DBInstanceId?: string(name='DBInstanceId'),
}

model GetDBInstanceTopologyResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    nodes?: [ 
      {
        zoneId?: string(name='ZoneId'),
        dedicatedHostId?: string(name='DedicatedHostId'),
        role?: string(name='Role'),
        dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
      }
    ](name='Nodes'),
    DBInstanceName?: string(name='DBInstanceName'),
    connections?: [ 
      {
        connectionString?: string(name='ConnectionString'),
        netType?: string(name='NetType'),
        zoneId?: string(name='ZoneId'),
      }
    ](name='Connections'),
  }(name='Data'),
  code?: string(name='Code'),
}

model GetDBInstanceTopologyResponse = {
  headers: map[string]string(name='headers'),
  body: GetDBInstanceTopologyResponseBody(name='body'),
}

async function getDBInstanceTopologyWithOptions(request: GetDBInstanceTopologyRequest, runtime: Util.RuntimeOptions): GetDBInstanceTopologyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDBInstanceTopology', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDBInstanceTopology(request: GetDBInstanceTopologyRequest): GetDBInstanceTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDBInstanceTopologyWithOptions(request, runtime);
}

model MigrateConnectionToOtherZoneRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  connectionString?: string(name='ConnectionString'),
  zoneId?: string(name='ZoneId'),
}

model MigrateConnectionToOtherZoneResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model MigrateConnectionToOtherZoneResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateConnectionToOtherZoneResponseBody(name='body'),
}

async function migrateConnectionToOtherZoneWithOptions(request: MigrateConnectionToOtherZoneRequest, runtime: Util.RuntimeOptions): MigrateConnectionToOtherZoneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MigrateConnectionToOtherZone', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function migrateConnectionToOtherZone(request: MigrateConnectionToOtherZoneRequest): MigrateConnectionToOtherZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateConnectionToOtherZoneWithOptions(request, runtime);
}

model ModifyDBInstanceMonitorRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  DBInstanceId?: string(name='DBInstanceId'),
  period?: string(name='Period'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyDBInstanceMonitorResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceMonitorResponseBody(name='body'),
}

async function modifyDBInstanceMonitorWithOptions(request: ModifyDBInstanceMonitorRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceMonitor', '2014-08-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceMonitor(request: ModifyDBInstanceMonitorRequest): ModifyDBInstanceMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceMonitorWithOptions(request, runtime);
}

