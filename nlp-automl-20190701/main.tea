/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  

  checkConfig(config);
  @endpoint = getEndpoint('nlp-automl', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddMtIntervenePackageRequest {
  packageName?: string(name='PackageName'),
  sourceLanguage?: string(name='SourceLanguage'),
  targetLanguage?: string(name='TargetLanguage'),
  projectId?: int32(name='ProjectId'),
  tenantId?: int32(name='TenantId'),
  product?: string(name='Product'),
  category?: string(name='Category'),
  projectType?: string(name='ProjectType'),
  sourceType?: string(name='SourceType'),
}

model AddMtIntervenePackageResponseBody = {
  message?: int32(name='Message'),
  requestId?: string(name='RequestId'),
  packageId?: string(name='PackageId'),
  code?: int32(name='Code'),
}

model AddMtIntervenePackageResponse = {
  headers: map[string]string(name='headers'),
  body: AddMtIntervenePackageResponseBody(name='body'),
}

async function addMtIntervenePackageWithOptions(request: AddMtIntervenePackageRequest, runtime: Util.RuntimeOptions): AddMtIntervenePackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddMtIntervenePackage', '2019-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addMtIntervenePackage(request: AddMtIntervenePackageRequest): AddMtIntervenePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMtIntervenePackageWithOptions(request, runtime);
}

model AddMTInterveneWordRequest {
  sourceText?: string(name='SourceText'),
  targetText?: string(name='TargetText'),
  projectId?: string(name='ProjectId'),
  packageId?: string(name='PackageId'),
  tenantId?: int32(name='TenantId'),
  product?: string(name='Product'),
}

model AddMTInterveneWordResponseBody = {
  wordId?: string(name='WordId'),
  message?: int32(name='Message'),
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
}

model AddMTInterveneWordResponse = {
  headers: map[string]string(name='headers'),
  body: AddMTInterveneWordResponseBody(name='body'),
}

async function addMTInterveneWordWithOptions(request: AddMTInterveneWordRequest, runtime: Util.RuntimeOptions): AddMTInterveneWordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddMTInterveneWord', '2019-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addMTInterveneWord(request: AddMTInterveneWordRequest): AddMTInterveneWordResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMTInterveneWordWithOptions(request, runtime);
}

model BindIntervenePackageAndModelRequest {
  packageId?: long(name='PackageId'),
  modelId?: long(name='ModelId'),
  modelVersion?: string(name='ModelVersion'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
  product?: string(name='Product'),
}

model BindIntervenePackageAndModelResponseBody = {
  message?: int32(name='Message'),
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
  success?: string(name='Success'),
}

model BindIntervenePackageAndModelResponse = {
  headers: map[string]string(name='headers'),
  body: BindIntervenePackageAndModelResponseBody(name='body'),
}

async function bindIntervenePackageAndModelWithOptions(request: BindIntervenePackageAndModelRequest, runtime: Util.RuntimeOptions): BindIntervenePackageAndModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindIntervenePackageAndModel', '2019-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindIntervenePackageAndModel(request: BindIntervenePackageAndModelRequest): BindIntervenePackageAndModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindIntervenePackageAndModelWithOptions(request, runtime);
}

model GetPredictDocRequest {
  docId?: long(name='DocId'),
  product?: string(name='Product'),
}

model GetPredictDocResponseBody = {
  status?: int32(name='Status'),
  requestId?: string(name='RequestId'),
  XLIFFInfo?: string(name='XLIFFInfo'),
  resultContent?: string(name='ResultContent'),
}

model GetPredictDocResponse = {
  headers: map[string]string(name='headers'),
  body: GetPredictDocResponseBody(name='body'),
}

async function getPredictDocWithOptions(request: GetPredictDocRequest, runtime: Util.RuntimeOptions): GetPredictDocResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPredictDoc', '2019-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPredictDoc(request: GetPredictDocRequest): GetPredictDocResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPredictDocWithOptions(request, runtime);
}

model InvokeActionRequest {
  invokeProduct?: string(name='InvokeProduct'),
  invokeRegion?: string(name='InvokeRegion'),
  invokeAction?: string(name='InvokeAction'),
  invokeParams?: string(name='InvokeParams'),
}

model InvokeActionResponseBody = {
  message?: int32(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: int32(name='Code'),
}

model InvokeActionResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeActionResponseBody(name='body'),
}

async function invokeActionWithOptions(request: InvokeActionRequest, runtime: Util.RuntimeOptions): InvokeActionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InvokeAction', '2019-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function invokeAction(request: InvokeActionRequest): InvokeActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeActionWithOptions(request, runtime);
}

model PredictMTModelRequest {
  modelId?: string(name='ModelId'),
  modelVersion?: string(name='ModelVersion'),
  content?: string(name='Content'),
  product?: string(name='Product'),
}

model PredictMTModelResponseBody = {
  message?: int32(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: int32(name='Code'),
}

model PredictMTModelResponse = {
  headers: map[string]string(name='headers'),
  body: PredictMTModelResponseBody(name='body'),
}

async function predictMTModelWithOptions(request: PredictMTModelRequest, runtime: Util.RuntimeOptions): PredictMTModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PredictMTModel', '2019-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function predictMTModel(request: PredictMTModelRequest): PredictMTModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return predictMTModelWithOptions(request, runtime);
}

model PredictMTModelByDocRequest {
  fileContent?: string(name='FileContent'),
  fileType?: string(name='FileType'),
  modelId?: int32(name='ModelId'),
  needXLIFF?: boolean(name='NeedXLIFF'),
  modelVersion?: string(name='ModelVersion'),
  product?: string(name='Product'),
}

model PredictMTModelByDocResponseBody = {
  docId?: string(name='DocId'),
  requestId?: string(name='RequestId'),
}

model PredictMTModelByDocResponse = {
  headers: map[string]string(name='headers'),
  body: PredictMTModelByDocResponseBody(name='body'),
}

async function predictMTModelByDocWithOptions(request: PredictMTModelByDocRequest, runtime: Util.RuntimeOptions): PredictMTModelByDocResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PredictMTModelByDoc', '2019-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function predictMTModelByDoc(request: PredictMTModelByDocRequest): PredictMTModelByDocResponse {
  var runtime = new Util.RuntimeOptions{};
  return predictMTModelByDocWithOptions(request, runtime);
}

