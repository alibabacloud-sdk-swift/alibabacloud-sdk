/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
@endpointMap = {
    ap-southeast-1 = 'cloudfw.ap-southeast-1.aliyuncs.com',
    cn-hangzhou = 'cloudfw.cn-hangzhou.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cloudfw', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddAddressBookRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  addressList?: string(name='AddressList'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  groupType?: string(name='GroupType'),
  autoAddTagEcs?: string(name='AutoAddTagEcs'),
  tagRelation?: string(name='TagRelation'),
  tagList?: [ 
    {
      tagValue?: string(name='TagValue'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagList'),
}

model AddAddressBookResponseBody = {
  groupUuid?: string(name='GroupUuid'),
  requestId?: string(name='RequestId'),
}

model AddAddressBookResponse = {
  headers: map[string]string(name='headers'),
  body: AddAddressBookResponseBody(name='body'),
}

async function addAddressBookWithOptions(request: AddAddressBookRequest, runtime: Util.RuntimeOptions): AddAddressBookResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddAddressBook', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addAddressBook(request: AddAddressBookRequest): AddAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAddressBookWithOptions(request, runtime);
}

model AddControlPolicyRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  aclAction?: string(name='AclAction'),
  applicationName?: string(name='ApplicationName'),
  description?: string(name='Description'),
  destPort?: string(name='DestPort'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  direction?: string(name='Direction'),
  proto?: string(name='Proto'),
  source?: string(name='Source'),
  sourceType?: string(name='SourceType'),
  newOrder?: string(name='NewOrder'),
  destPortType?: string(name='DestPortType'),
  destPortGroup?: string(name='DestPortGroup'),
  release?: string(name='Release'),
}

model AddControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  aclUuid?: string(name='AclUuid'),
}

model AddControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: AddControlPolicyResponseBody(name='body'),
}

async function addControlPolicyWithOptions(request: AddControlPolicyRequest, runtime: Util.RuntimeOptions): AddControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addControlPolicy(request: AddControlPolicyRequest): AddControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return addControlPolicyWithOptions(request, runtime);
}

model CreateVpcFirewallControlPolicyRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  aclAction?: string(name='AclAction'),
  applicationName?: string(name='ApplicationName'),
  description?: string(name='Description'),
  destPort?: string(name='DestPort'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  vpcFirewallId?: string(name='VpcFirewallId'),
  proto?: string(name='Proto'),
  source?: string(name='Source'),
  sourceType?: string(name='SourceType'),
  newOrder?: string(name='NewOrder'),
  destPortType?: string(name='DestPortType'),
  destPortGroup?: string(name='DestPortGroup'),
}

model CreateVpcFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  aclUuid?: string(name='AclUuid'),
}

model CreateVpcFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpcFirewallControlPolicyResponseBody(name='body'),
}

async function createVpcFirewallControlPolicyWithOptions(request: CreateVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): CreateVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVpcFirewallControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVpcFirewallControlPolicy(request: CreateVpcFirewallControlPolicyRequest): CreateVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcFirewallControlPolicyWithOptions(request, runtime);
}

model DeleteAddressBookRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  groupUuid?: string(name='GroupUuid'),
}

model DeleteAddressBookResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAddressBookResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAddressBookResponseBody(name='body'),
}

async function deleteAddressBookWithOptions(request: DeleteAddressBookRequest, runtime: Util.RuntimeOptions): DeleteAddressBookResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAddressBook', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAddressBook(request: DeleteAddressBookRequest): DeleteAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAddressBookWithOptions(request, runtime);
}

model DeleteControlPolicyRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  aclUuid?: string(name='AclUuid'),
  direction?: string(name='Direction'),
}

model DeleteControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteControlPolicyResponseBody(name='body'),
}

async function deleteControlPolicyWithOptions(request: DeleteControlPolicyRequest, runtime: Util.RuntimeOptions): DeleteControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteControlPolicy(request: DeleteControlPolicyRequest): DeleteControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteControlPolicyWithOptions(request, runtime);
}

model DeleteVpcFirewallControlPolicyRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  aclUuid?: string(name='AclUuid'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model DeleteVpcFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVpcFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcFirewallControlPolicyResponseBody(name='body'),
}

async function deleteVpcFirewallControlPolicyWithOptions(request: DeleteVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): DeleteVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVpcFirewallControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVpcFirewallControlPolicy(request: DeleteVpcFirewallControlPolicyRequest): DeleteVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcFirewallControlPolicyWithOptions(request, runtime);
}

model DescribeAddressBookRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  currentPage?: string(name='CurrentPage'),
  pageSize?: string(name='PageSize'),
  query?: string(name='Query'),
  groupType?: string(name='GroupType'),
  containPort?: string(name='ContainPort'),
}

model DescribeAddressBookResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  acls?: [ 
    {
      groupName?: string(name='GroupName'),
      groupUuid?: string(name='GroupUuid'),
      referenceCount?: int32(name='ReferenceCount'),
      description?: string(name='Description'),
      global?: int32(name='Global'),
      groupType?: string(name='GroupType'),
      autoAddTagEcs?: int32(name='AutoAddTagEcs'),
      addressListCount?: int32(name='AddressListCount'),
      tagRelation?: string(name='TagRelation'),
      addressList?: [ string ](name='AddressList'),
      tagList?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='TagList'),
    }
  ](name='Acls'),
}

model DescribeAddressBookResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAddressBookResponseBody(name='body'),
}

async function describeAddressBookWithOptions(request: DescribeAddressBookRequest, runtime: Util.RuntimeOptions): DescribeAddressBookResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAddressBook', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAddressBook(request: DescribeAddressBookRequest): DescribeAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAddressBookWithOptions(request, runtime);
}

model DescribeControlPolicyRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  direction?: string(name='Direction'),
  currentPage?: string(name='CurrentPage'),
  pageSize?: string(name='PageSize'),
  source?: string(name='Source'),
  destination?: string(name='Destination'),
  description?: string(name='Description'),
  proto?: string(name='Proto'),
  aclAction?: string(name='AclAction'),
  release?: string(name='Release'),
  aclUuid?: string(name='AclUuid'),
}

model DescribeControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  policys?: [ 
    {
      aclUuid?: string(name='AclUuid'),
      destination?: string(name='Destination'),
      description?: string(name='Description'),
      source?: string(name='Source'),
      destPort?: string(name='DestPort'),
      sourceType?: string(name='SourceType'),
      proto?: string(name='Proto'),
      destinationType?: string(name='DestinationType'),
      aclAction?: string(name='AclAction'),
      applicationId?: string(name='ApplicationId'),
      applicationName?: string(name='ApplicationName'),
      direction?: string(name='Direction'),
      order?: int32(name='Order'),
      hitTimes?: long(name='HitTimes'),
      destPortType?: string(name='DestPortType'),
      destPortGroup?: string(name='DestPortGroup'),
      sourceGroupType?: string(name='SourceGroupType'),
      destinationGroupType?: string(name='DestinationGroupType'),
      dnsResult?: string(name='DnsResult'),
      dnsResultTime?: long(name='DnsResultTime'),
      release?: string(name='Release'),
      hitLastTime?: long(name='HitLastTime'),
      sourceGroupCidrs?: [ string ](name='SourceGroupCidrs'),
      destinationGroupCidrs?: [ string ](name='DestinationGroupCidrs'),
      destPortGroupPorts?: [ string ](name='DestPortGroupPorts'),
    }
  ](name='Policys'),
}

model DescribeControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeControlPolicyResponseBody(name='body'),
}

async function describeControlPolicyWithOptions(request: DescribeControlPolicyRequest, runtime: Util.RuntimeOptions): DescribeControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeControlPolicy(request: DescribeControlPolicyRequest): DescribeControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeControlPolicyWithOptions(request, runtime);
}

model DescribeDomainResolveRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  domain?: string(name='Domain'),
}

model DescribeDomainResolveResponseBody = {
  requestId?: string(name='RequestId'),
  resolveResult?: {
    ipAddrs?: string(name='IpAddrs'),
    updateTime?: long(name='UpdateTime'),
  }(name='ResolveResult'),
}

model DescribeDomainResolveResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainResolveResponseBody(name='body'),
}

async function describeDomainResolveWithOptions(request: DescribeDomainResolveRequest, runtime: Util.RuntimeOptions): DescribeDomainResolveResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainResolve', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainResolve(request: DescribeDomainResolveRequest): DescribeDomainResolveResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainResolveWithOptions(request, runtime);
}

model DescribePolicyAdvancedConfigRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
}

model DescribePolicyAdvancedConfigResponseBody = {
  requestId?: string(name='RequestId'),
  internetSwitch?: string(name='InternetSwitch'),
}

model DescribePolicyAdvancedConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyAdvancedConfigResponseBody(name='body'),
}

async function describePolicyAdvancedConfigWithOptions(request: DescribePolicyAdvancedConfigRequest, runtime: Util.RuntimeOptions): DescribePolicyAdvancedConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePolicyAdvancedConfig', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePolicyAdvancedConfig(request: DescribePolicyAdvancedConfigRequest): DescribePolicyAdvancedConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolicyAdvancedConfigWithOptions(request, runtime);
}

model DescribePolicyPriorUsedRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  direction?: string(name='Direction'),
}

model DescribePolicyPriorUsedResponseBody = {
  requestId?: string(name='RequestId'),
  start?: int32(name='Start'),
  end?: int32(name='End'),
}

model DescribePolicyPriorUsedResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyPriorUsedResponseBody(name='body'),
}

async function describePolicyPriorUsedWithOptions(request: DescribePolicyPriorUsedRequest, runtime: Util.RuntimeOptions): DescribePolicyPriorUsedResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePolicyPriorUsed', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePolicyPriorUsed(request: DescribePolicyPriorUsedRequest): DescribePolicyPriorUsedResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolicyPriorUsedWithOptions(request, runtime);
}

model DescribeVpcFirewallAclGroupListRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  firewallConfigureStatus?: string(name='FirewallConfigureStatus'),
  currentPage?: string(name='CurrentPage'),
  pageSize?: string(name='PageSize'),
}

model DescribeVpcFirewallAclGroupListResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  aclGroupList?: [ 
    {
      aclGroupId?: string(name='AclGroupId'),
      aclGroupName?: string(name='AclGroupName'),
    }
  ](name='AclGroupList'),
}

model DescribeVpcFirewallAclGroupListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcFirewallAclGroupListResponseBody(name='body'),
}

async function describeVpcFirewallAclGroupListWithOptions(request: DescribeVpcFirewallAclGroupListRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallAclGroupListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVpcFirewallAclGroupList', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVpcFirewallAclGroupList(request: DescribeVpcFirewallAclGroupListRequest): DescribeVpcFirewallAclGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallAclGroupListWithOptions(request, runtime);
}

model DescribeVpcFirewallControlPolicyRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  vpcFirewallId?: string(name='VpcFirewallId'),
  currentPage?: string(name='CurrentPage'),
  pageSize?: string(name='PageSize'),
  source?: string(name='Source'),
  destination?: string(name='Destination'),
  description?: string(name='Description'),
  proto?: string(name='Proto'),
  aclAction?: string(name='AclAction'),
}

model DescribeVpcFirewallControlPolicyResponseBody = {
  totalCount?: string(name='TotalCount'),
  requestId?: string(name='RequestId'),
  policys?: [ 
    {
      direction?: string(name='Direction'),
      destination?: string(name='Destination'),
      order?: int32(name='Order'),
      applicationName?: string(name='ApplicationName'),
      sourceType?: string(name='SourceType'),
      destPortGroup?: string(name='DestPortGroup'),
      aclUuid?: string(name='AclUuid'),
      destPortGroupPorts?: [ string ](name='DestPortGroupPorts'),
      destPortType?: string(name='DestPortType'),
      source?: string(name='Source'),
      destinationType?: string(name='DestinationType'),
      hitTimes?: int32(name='HitTimes'),
      sourceGroupCidrs?: [ string ](name='SourceGroupCidrs'),
      destPort?: string(name='DestPort'),
      destinationGroupCidrs?: [ string ](name='DestinationGroupCidrs'),
      description?: string(name='Description'),
      aclAction?: string(name='AclAction'),
      applicationId?: string(name='ApplicationId'),
      proto?: string(name='Proto'),
    }
  ](name='Policys'),
}

model DescribeVpcFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcFirewallControlPolicyResponseBody(name='body'),
}

async function describeVpcFirewallControlPolicyWithOptions(request: DescribeVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVpcFirewallControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVpcFirewallControlPolicy(request: DescribeVpcFirewallControlPolicyRequest): DescribeVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallControlPolicyWithOptions(request, runtime);
}

model DescribeVpcFirewallPolicyPriorUsedRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model DescribeVpcFirewallPolicyPriorUsedResponseBody = {
  requestId?: string(name='RequestId'),
  start?: int32(name='Start'),
  end?: int32(name='End'),
}

model DescribeVpcFirewallPolicyPriorUsedResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcFirewallPolicyPriorUsedResponseBody(name='body'),
}

async function describeVpcFirewallPolicyPriorUsedWithOptions(request: DescribeVpcFirewallPolicyPriorUsedRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallPolicyPriorUsedResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVpcFirewallPolicyPriorUsed', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVpcFirewallPolicyPriorUsed(request: DescribeVpcFirewallPolicyPriorUsedRequest): DescribeVpcFirewallPolicyPriorUsedResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallPolicyPriorUsedWithOptions(request, runtime);
}

model ModifyAddressBookRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  addressList?: string(name='AddressList'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  groupUuid?: string(name='GroupUuid'),
  autoAddTagEcs?: string(name='AutoAddTagEcs'),
  tagRelation?: string(name='TagRelation'),
  tagList?: [ 
    {
      tagValue?: string(name='TagValue'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagList'),
}

model ModifyAddressBookResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAddressBookResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAddressBookResponseBody(name='body'),
}

async function modifyAddressBookWithOptions(request: ModifyAddressBookRequest, runtime: Util.RuntimeOptions): ModifyAddressBookResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAddressBook', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAddressBook(request: ModifyAddressBookRequest): ModifyAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAddressBookWithOptions(request, runtime);
}

model ModifyControlPolicyRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  aclAction?: string(name='AclAction'),
  applicationName?: string(name='ApplicationName'),
  description?: string(name='Description'),
  destPort?: string(name='DestPort'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  direction?: string(name='Direction'),
  proto?: string(name='Proto'),
  source?: string(name='Source'),
  aclUuid?: string(name='AclUuid'),
  sourceType?: string(name='SourceType'),
  destPortType?: string(name='DestPortType'),
  destPortGroup?: string(name='DestPortGroup'),
  release?: string(name='Release'),
}

model ModifyControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyControlPolicyResponseBody(name='body'),
}

async function modifyControlPolicyWithOptions(request: ModifyControlPolicyRequest, runtime: Util.RuntimeOptions): ModifyControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyControlPolicy(request: ModifyControlPolicyRequest): ModifyControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyControlPolicyWithOptions(request, runtime);
}

model ModifyControlPolicyPositionRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  direction?: string(name='Direction'),
  newOrder?: string(name='NewOrder'),
  oldOrder?: string(name='OldOrder'),
}

model ModifyControlPolicyPositionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyControlPolicyPositionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyControlPolicyPositionResponseBody(name='body'),
}

async function modifyControlPolicyPositionWithOptions(request: ModifyControlPolicyPositionRequest, runtime: Util.RuntimeOptions): ModifyControlPolicyPositionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyControlPolicyPosition', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyControlPolicyPosition(request: ModifyControlPolicyPositionRequest): ModifyControlPolicyPositionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyControlPolicyPositionWithOptions(request, runtime);
}

model ModifyPolicyAdvancedConfigRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  internetSwitch?: string(name='InternetSwitch'),
}

model ModifyPolicyAdvancedConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyPolicyAdvancedConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPolicyAdvancedConfigResponseBody(name='body'),
}

async function modifyPolicyAdvancedConfigWithOptions(request: ModifyPolicyAdvancedConfigRequest, runtime: Util.RuntimeOptions): ModifyPolicyAdvancedConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPolicyAdvancedConfig', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPolicyAdvancedConfig(request: ModifyPolicyAdvancedConfigRequest): ModifyPolicyAdvancedConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPolicyAdvancedConfigWithOptions(request, runtime);
}

model ModifyVpcFirewallControlPolicyRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  aclAction?: string(name='AclAction'),
  applicationName?: string(name='ApplicationName'),
  description?: string(name='Description'),
  destPort?: string(name='DestPort'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  vpcFirewallId?: string(name='VpcFirewallId'),
  proto?: string(name='Proto'),
  source?: string(name='Source'),
  aclUuid?: string(name='AclUuid'),
  sourceType?: string(name='SourceType'),
  destPortType?: string(name='DestPortType'),
  destPortGroup?: string(name='DestPortGroup'),
}

model ModifyVpcFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVpcFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcFirewallControlPolicyResponseBody(name='body'),
}

async function modifyVpcFirewallControlPolicyWithOptions(request: ModifyVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyVpcFirewallControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyVpcFirewallControlPolicy(request: ModifyVpcFirewallControlPolicyRequest): ModifyVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallControlPolicyWithOptions(request, runtime);
}

model ModifyVpcFirewallControlPolicyPositionRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  vpcFirewallId?: string(name='VpcFirewallId'),
  newOrder?: string(name='NewOrder'),
  oldOrder?: string(name='OldOrder'),
}

model ModifyVpcFirewallControlPolicyPositionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVpcFirewallControlPolicyPositionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcFirewallControlPolicyPositionResponseBody(name='body'),
}

async function modifyVpcFirewallControlPolicyPositionWithOptions(request: ModifyVpcFirewallControlPolicyPositionRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallControlPolicyPositionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyVpcFirewallControlPolicyPosition', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyVpcFirewallControlPolicyPosition(request: ModifyVpcFirewallControlPolicyPositionRequest): ModifyVpcFirewallControlPolicyPositionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallControlPolicyPositionWithOptions(request, runtime);
}

model PutDisableAllFwSwitchRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
}

model PutDisableAllFwSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model PutDisableAllFwSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: PutDisableAllFwSwitchResponseBody(name='body'),
}

async function putDisableAllFwSwitchWithOptions(request: PutDisableAllFwSwitchRequest, runtime: Util.RuntimeOptions): PutDisableAllFwSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutDisableAllFwSwitch', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putDisableAllFwSwitch(request: PutDisableAllFwSwitchRequest): PutDisableAllFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putDisableAllFwSwitchWithOptions(request, runtime);
}

model PutDisableFwSwitchRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  ipaddrList?: [ string ](name='IpaddrList'),
  regionList?: [ string ](name='RegionList'),
  resourceTypeList?: [ string ](name='ResourceTypeList'),
}

model PutDisableFwSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model PutDisableFwSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: PutDisableFwSwitchResponseBody(name='body'),
}

async function putDisableFwSwitchWithOptions(request: PutDisableFwSwitchRequest, runtime: Util.RuntimeOptions): PutDisableFwSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutDisableFwSwitch', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putDisableFwSwitch(request: PutDisableFwSwitchRequest): PutDisableFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putDisableFwSwitchWithOptions(request, runtime);
}

model PutEnableAllFwSwitchRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
}

model PutEnableAllFwSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model PutEnableAllFwSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: PutEnableAllFwSwitchResponseBody(name='body'),
}

async function putEnableAllFwSwitchWithOptions(request: PutEnableAllFwSwitchRequest, runtime: Util.RuntimeOptions): PutEnableAllFwSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutEnableAllFwSwitch', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putEnableAllFwSwitch(request: PutEnableAllFwSwitchRequest): PutEnableAllFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putEnableAllFwSwitchWithOptions(request, runtime);
}

model PutEnableFwSwitchRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  ipaddrList?: [ string ](name='IpaddrList'),
  regionList?: [ string ](name='RegionList'),
  resourceTypeList?: [ string ](name='ResourceTypeList'),
}

model PutEnableFwSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model PutEnableFwSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: PutEnableFwSwitchResponseBody(name='body'),
}

async function putEnableFwSwitchWithOptions(request: PutEnableFwSwitchRequest, runtime: Util.RuntimeOptions): PutEnableFwSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutEnableFwSwitch', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putEnableFwSwitch(request: PutEnableFwSwitchRequest): PutEnableFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putEnableFwSwitchWithOptions(request, runtime);
}

model ResetVpcFirewallRuleHitCountRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  aclUuid?: string(name='AclUuid'),
}

model ResetVpcFirewallRuleHitCountResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetVpcFirewallRuleHitCountResponse = {
  headers: map[string]string(name='headers'),
  body: ResetVpcFirewallRuleHitCountResponseBody(name='body'),
}

async function resetVpcFirewallRuleHitCountWithOptions(request: ResetVpcFirewallRuleHitCountRequest, runtime: Util.RuntimeOptions): ResetVpcFirewallRuleHitCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetVpcFirewallRuleHitCount', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetVpcFirewallRuleHitCount(request: ResetVpcFirewallRuleHitCountRequest): ResetVpcFirewallRuleHitCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetVpcFirewallRuleHitCountWithOptions(request, runtime);
}

