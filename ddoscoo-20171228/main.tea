import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('ddoscoo', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model ModifyFullLogTtlRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  ttl: integer(name='Ttl'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ModifyFullLogTtlResponse = {
  requestId: string(name='RequestId'),
}

async function modifyFullLogTtlWithOptions(request: ModifyFullLogTtlRequest, runtime: Util.RuntimeOptions): ModifyFullLogTtlResponse {
  Util.validateModel(request);
  return doRequest('ModifyFullLogTtl', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function modifyFullLogTtl(request: ModifyFullLogTtlRequest): ModifyFullLogTtlResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFullLogTtlWithOptions(request, runtime);
}

model ReleaseValueAddedRequest = {
  sourceIp?: string(name='SourceIp'),
  instanceId: string(name='InstanceId'),
}

model ReleaseValueAddedResponse = {
  requestId: string(name='RequestId'),
}

async function releaseValueAddedWithOptions(request: ReleaseValueAddedRequest, runtime: Util.RuntimeOptions): ReleaseValueAddedResponse {
  Util.validateModel(request);
  return doRequest('ReleaseValueAdded', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function releaseValueAdded(request: ReleaseValueAddedRequest): ReleaseValueAddedResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseValueAddedWithOptions(request, runtime);
}

model ListValueAddedRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ListValueAddedResponse = {
  requestId: string(name='RequestId'),
  valueAddedList: [
    {
      instanceId: string(name='InstanceId'),
      status: integer(name='Status'),
      expireTime: long(name='ExpireTime'),
      gmtCreate: long(name='GmtCreate'),
      logSize: long(name='LogSize'),
    }
  ](name='ValueAddedList'),
}

async function listValueAddedWithOptions(request: ListValueAddedRequest, runtime: Util.RuntimeOptions): ListValueAddedResponse {
  Util.validateModel(request);
  return doRequest('ListValueAdded', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function listValueAdded(request: ListValueAddedRequest): ListValueAddedResponse {
  var runtime = new Util.RuntimeOptions{};
  return listValueAddedWithOptions(request, runtime);
}

model ListLayer7CustomPortsRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ListLayer7CustomPortsResponse = {
  requestId: string(name='RequestId'),
  layer7CustomPorts: [
    {
      proxyType: string(name='ProxyType'),
      proxyPorts: [ string ](name='ProxyPorts'),
    }
  ](name='Layer7CustomPorts'),
}

async function listLayer7CustomPortsWithOptions(request: ListLayer7CustomPortsRequest, runtime: Util.RuntimeOptions): ListLayer7CustomPortsResponse {
  Util.validateModel(request);
  return doRequest('ListLayer7CustomPorts', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function listLayer7CustomPorts(request: ListLayer7CustomPortsRequest): ListLayer7CustomPortsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLayer7CustomPortsWithOptions(request, runtime);
}

model DescribeSimpleDomainsRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribeSimpleDomainsResponse = {
  requestId: string(name='RequestId'),
  domainList: [ string ] (name='DomainList'),
}

async function describeSimpleDomainsWithOptions(request: DescribeSimpleDomainsRequest, runtime: Util.RuntimeOptions): DescribeSimpleDomainsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSimpleDomains', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeSimpleDomains(request: DescribeSimpleDomainsRequest): DescribeSimpleDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSimpleDomainsWithOptions(request, runtime);
}

model DescribeDefenseCountStatisticsRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDefenseCountStatisticsResponse = {
  requestId: string(name='RequestId'),
  defenseCountStatistics: {
    defenseCountTotalUsageOfCurrentMonth: integer(name='DefenseCountTotalUsageOfCurrentMonth'),
    flowPackCountRemain: integer(name='FlowPackCountRemain'),
    maxUsableDefenseCountCurrentMonth: integer(name='MaxUsableDefenseCountCurrentMonth'),
  }(name='DefenseCountStatistics'),
}

async function describeDefenseCountStatisticsWithOptions(request: DescribeDefenseCountStatisticsRequest, runtime: Util.RuntimeOptions): DescribeDefenseCountStatisticsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDefenseCountStatistics', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeDefenseCountStatistics(request: DescribeDefenseCountStatisticsRequest): DescribeDefenseCountStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefenseCountStatisticsWithOptions(request, runtime);
}

model UntagResourcesRequest = {
  regionId: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceType: string(name='ResourceType'),
  resourceId: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
  all?: boolean(name='All'),
}

model UntagResourcesResponse = {
  requestId: string(name='RequestId'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  return doRequest('UntagResources', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model TagResourcesRequest = {
  regionId: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceType: string(name='ResourceType'),
  resourceId: [ string ](name='ResourceId'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponse = {
  requestId: string(name='RequestId'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  return doRequest('TagResources', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model ListTagResourcesRequest = {
  regionId: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceType: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  nextToken?: string(name='NextToken'),
}

model ListTagResourcesResponse = {
  requestId: string(name='RequestId'),
  nextToken: string(name='NextToken'),
  tagResources: {
    tagResource: [
      {
        resourceType: string(name='ResourceType'),
        resourceId: string(name='ResourceId'),
        tagKey: string(name='TagKey'),
        tagValue: string(name='TagValue'),
      }
    ](name='TagResource'),
  }(name='TagResources'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  return doRequest('ListTagResources', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListTagKeysRequest = {
  regionId: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceType: string(name='ResourceType'),
  pageSize?: integer(name='PageSize'),
  currentPage?: integer(name='CurrentPage'),
}

model ListTagKeysResponse = {
  requestId: string(name='RequestId'),
  currentPage: integer(name='CurrentPage'),
  pageSize: integer(name='PageSize'),
  totalCount: integer(name='TotalCount'),
  tagKeys: [
    {
      tagKey: string(name='TagKey'),
      tagCount: integer(name='TagCount'),
    }
  ](name='TagKeys'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  return doRequest('ListTagKeys', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model DescribeDomainQpsWithCacheRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
}

model DescribeDomainQpsWithCacheResponse = {
  requestId: string(name='RequestId'),
  interval: integer(name='Interval'),
  startTime: long(name='StartTime'),
  totals: [ string ] (name='Totals'),
  blocks: [ string ] (name='Blocks'),
  cacheHits: [ string ] (name='CacheHits'),
  preciseBlocks: [ string ] (name='PreciseBlocks'),
  regionBlocks: [ string ] (name='RegionBlocks'),
  ipBlockQps: [ string ] (name='IpBlockQps'),
  ccJsQps: [ string ] (name='CcJsQps'),
  preciseJsQps: [ string ] (name='PreciseJsQps'),
  ccBlockQps: [ string ] (name='CcBlockQps'),
}

async function describeDomainQpsWithCacheWithOptions(request: DescribeDomainQpsWithCacheRequest, runtime: Util.RuntimeOptions): DescribeDomainQpsWithCacheResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainQpsWithCache', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeDomainQpsWithCache(request: DescribeDomainQpsWithCacheRequest): DescribeDomainQpsWithCacheResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainQpsWithCacheWithOptions(request, runtime);
}

model DescribeLogStoreExistStatusRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeLogStoreExistStatusResponse = {
  requestId: string(name='RequestId'),
  existStatus: boolean(name='ExistStatus'),
}

async function describeLogStoreExistStatusWithOptions(request: DescribeLogStoreExistStatusRequest, runtime: Util.RuntimeOptions): DescribeLogStoreExistStatusResponse {
  Util.validateModel(request);
  return doRequest('DescribeLogStoreExistStatus', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeLogStoreExistStatus(request: DescribeLogStoreExistStatusRequest): DescribeLogStoreExistStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogStoreExistStatusWithOptions(request, runtime);
}

model DescribeBatchSlsDispatchStatusRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  pageNo?: integer(name='PageNo'),
  pageSize?: integer(name='PageSize'),
}

model DescribeBatchSlsDispatchStatusResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  slsConfigStatusList: [
    {
      enable: boolean(name='Enable'),
      domain: string(name='Domain'),
    }
  ](name='SlsConfigStatusList'),
}

async function describeBatchSlsDispatchStatusWithOptions(request: DescribeBatchSlsDispatchStatusRequest, runtime: Util.RuntimeOptions): DescribeBatchSlsDispatchStatusResponse {
  Util.validateModel(request);
  return doRequest('DescribeBatchSlsDispatchStatus', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeBatchSlsDispatchStatus(request: DescribeBatchSlsDispatchStatusRequest): DescribeBatchSlsDispatchStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBatchSlsDispatchStatusWithOptions(request, runtime);
}

model DescribeSlsEmptyCountRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeSlsEmptyCountResponse = {
  requestId: string(name='RequestId'),
  availableCount: integer(name='AvailableCount'),
}

async function describeSlsEmptyCountWithOptions(request: DescribeSlsEmptyCountRequest, runtime: Util.RuntimeOptions): DescribeSlsEmptyCountResponse {
  Util.validateModel(request);
  return doRequest('DescribeSlsEmptyCount', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeSlsEmptyCount(request: DescribeSlsEmptyCountRequest): DescribeSlsEmptyCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlsEmptyCountWithOptions(request, runtime);
}

model EmptySlsLogstoreRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model EmptySlsLogstoreResponse = {
  requestId: string(name='RequestId'),
}

async function emptySlsLogstoreWithOptions(request: EmptySlsLogstoreRequest, runtime: Util.RuntimeOptions): EmptySlsLogstoreResponse {
  Util.validateModel(request);
  return doRequest('EmptySlsLogstore', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function emptySlsLogstore(request: EmptySlsLogstoreRequest): EmptySlsLogstoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return emptySlsLogstoreWithOptions(request, runtime);
}

model CloseDomainSlsConfigRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
}

model CloseDomainSlsConfigResponse = {
  requestId: string(name='RequestId'),
}

async function closeDomainSlsConfigWithOptions(request: CloseDomainSlsConfigRequest, runtime: Util.RuntimeOptions): CloseDomainSlsConfigResponse {
  Util.validateModel(request);
  return doRequest('CloseDomainSlsConfig', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function closeDomainSlsConfig(request: CloseDomainSlsConfigRequest): CloseDomainSlsConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeDomainSlsConfigWithOptions(request, runtime);
}

model OpenDomainSlsConfigRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
}

model OpenDomainSlsConfigResponse = {
  requestId: string(name='RequestId'),
}

async function openDomainSlsConfigWithOptions(request: OpenDomainSlsConfigRequest, runtime: Util.RuntimeOptions): OpenDomainSlsConfigResponse {
  Util.validateModel(request);
  return doRequest('OpenDomainSlsConfig', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function openDomainSlsConfig(request: OpenDomainSlsConfigRequest): OpenDomainSlsConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return openDomainSlsConfigWithOptions(request, runtime);
}

model DescribeSlsLogstoreInfoRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeSlsLogstoreInfoResponse = {
  requestId: string(name='RequestId'),
  quota: long(name='Quota'),
  logStore: string(name='LogStore'),
  used: long(name='Used'),
  project: string(name='Project'),
  ttl: integer(name='Ttl'),
}

async function describeSlsLogstoreInfoWithOptions(request: DescribeSlsLogstoreInfoRequest, runtime: Util.RuntimeOptions): DescribeSlsLogstoreInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeSlsLogstoreInfo', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeSlsLogstoreInfo(request: DescribeSlsLogstoreInfoRequest): DescribeSlsLogstoreInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlsLogstoreInfoWithOptions(request, runtime);
}

model DescribeSlsAuthStatusRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeSlsAuthStatusResponse = {
  requestId: string(name='RequestId'),
  slsAuthStatus: boolean(name='SlsAuthStatus'),
}

async function describeSlsAuthStatusWithOptions(request: DescribeSlsAuthStatusRequest, runtime: Util.RuntimeOptions): DescribeSlsAuthStatusResponse {
  Util.validateModel(request);
  return doRequest('DescribeSlsAuthStatus', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeSlsAuthStatus(request: DescribeSlsAuthStatusRequest): DescribeSlsAuthStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlsAuthStatusWithOptions(request, runtime);
}

model DescribeSlsOpenStatusRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeSlsOpenStatusResponse = {
  requestId: string(name='RequestId'),
  slsOpenStatus: boolean(name='SlsOpenStatus'),
}

async function describeSlsOpenStatusWithOptions(request: DescribeSlsOpenStatusRequest, runtime: Util.RuntimeOptions): DescribeSlsOpenStatusResponse {
  Util.validateModel(request);
  return doRequest('DescribeSlsOpenStatus', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeSlsOpenStatus(request: DescribeSlsOpenStatusRequest): DescribeSlsOpenStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlsOpenStatusWithOptions(request, runtime);
}

model DescribeDomainSlsStatusRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
}

model DescribeDomainSlsStatusResponse = {
  requestId: string(name='RequestId'),
  slsStatus: boolean(name='SlsStatus'),
  slsLogstore: string(name='SlsLogstore'),
  slsProject: string(name='SlsProject'),
}

async function describeDomainSlsStatusWithOptions(request: DescribeDomainSlsStatusRequest, runtime: Util.RuntimeOptions): DescribeDomainSlsStatusResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainSlsStatus', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeDomainSlsStatus(request: DescribeDomainSlsStatusRequest): DescribeDomainSlsStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSlsStatusWithOptions(request, runtime);
}

model ConfigDomainAccessModeRequest = {
  sourceIp?: string(name='SourceIp'),
  domain: string(name='Domain'),
  accessMode: integer(name='AccessMode'),
}

model ConfigDomainAccessModeResponse = {
  requestId: string(name='RequestId'),
}

async function configDomainAccessModeWithOptions(request: ConfigDomainAccessModeRequest, runtime: Util.RuntimeOptions): ConfigDomainAccessModeResponse {
  Util.validateModel(request);
  return doRequest('ConfigDomainAccessMode', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function configDomainAccessMode(request: ConfigDomainAccessModeRequest): ConfigDomainAccessModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return configDomainAccessModeWithOptions(request, runtime);
}

model DescribeDomainAccessModeRequest = {
  sourceIp?: string(name='SourceIp'),
  domainList: [ string ](name='DomainList'),
}

model DescribeDomainAccessModeResponse = {
  requestId: string(name='RequestId'),
  domainModeList: [
    {
      domain: string(name='Domain'),
      accessMode: integer(name='AccessMode'),
    }
  ](name='DomainModeList'),
}

async function describeDomainAccessModeWithOptions(request: DescribeDomainAccessModeRequest, runtime: Util.RuntimeOptions): DescribeDomainAccessModeResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainAccessMode', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeDomainAccessMode(request: DescribeDomainAccessModeRequest): DescribeDomainAccessModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainAccessModeWithOptions(request, runtime);
}

model DeleteAsyncTaskRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  taskId: integer(name='TaskId'),
}

model DeleteAsyncTaskResponse = {
  requestId: string(name='RequestId'),
}

async function deleteAsyncTaskWithOptions(request: DeleteAsyncTaskRequest, runtime: Util.RuntimeOptions): DeleteAsyncTaskResponse {
  Util.validateModel(request);
  return doRequest('DeleteAsyncTask', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function deleteAsyncTask(request: DeleteAsyncTaskRequest): DeleteAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAsyncTaskWithOptions(request, runtime);
}

model CreateAsyncTaskRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  taskType: integer(name='TaskType'),
  taskParams: string(name='TaskParams'),
}

model CreateAsyncTaskResponse = {
  requestId: string(name='RequestId'),
}

async function createAsyncTaskWithOptions(request: CreateAsyncTaskRequest, runtime: Util.RuntimeOptions): CreateAsyncTaskResponse {
  Util.validateModel(request);
  return doRequest('CreateAsyncTask', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function createAsyncTask(request: CreateAsyncTaskRequest): CreateAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAsyncTaskWithOptions(request, runtime);
}

model ListAsyncTaskRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
}

model ListAsyncTaskResponse = {
  requestId: string(name='RequestId'),
  total: integer(name='Total'),
  asyncTasks: [
    {
      taskId: long(name='TaskId'),
      endTime: long(name='EndTime'),
      startTime: long(name='StartTime'),
      taskStatus: integer(name='TaskStatus'),
      taskResult: string(name='TaskResult'),
      taskParams: string(name='TaskParams'),
      taskType: integer(name='TaskType'),
    }
  ](name='AsyncTasks'),
}

async function listAsyncTaskWithOptions(request: ListAsyncTaskRequest, runtime: Util.RuntimeOptions): ListAsyncTaskResponse {
  Util.validateModel(request);
  return doRequest('ListAsyncTask', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function listAsyncTask(request: ListAsyncTaskRequest): ListAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAsyncTaskWithOptions(request, runtime);
}

model EnableLayer7CCRuleRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
}

model EnableLayer7CCRuleResponse = {
  requestId: string(name='RequestId'),
}

async function enableLayer7CCRuleWithOptions(request: EnableLayer7CCRuleRequest, runtime: Util.RuntimeOptions): EnableLayer7CCRuleResponse {
  Util.validateModel(request);
  return doRequest('EnableLayer7CCRule', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function enableLayer7CCRule(request: EnableLayer7CCRuleRequest): EnableLayer7CCRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableLayer7CCRuleWithOptions(request, runtime);
}

model EnableLayer7CCRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
}

model EnableLayer7CCResponse = {
  requestId: string(name='RequestId'),
}

async function enableLayer7CCWithOptions(request: EnableLayer7CCRequest, runtime: Util.RuntimeOptions): EnableLayer7CCResponse {
  Util.validateModel(request);
  return doRequest('EnableLayer7CC', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function enableLayer7CC(request: EnableLayer7CCRequest): EnableLayer7CCResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableLayer7CCWithOptions(request, runtime);
}

model DisableLayer7CCRuleRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
}

model DisableLayer7CCRuleResponse = {
  requestId: string(name='RequestId'),
}

async function disableLayer7CCRuleWithOptions(request: DisableLayer7CCRuleRequest, runtime: Util.RuntimeOptions): DisableLayer7CCRuleResponse {
  Util.validateModel(request);
  return doRequest('DisableLayer7CCRule', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function disableLayer7CCRule(request: DisableLayer7CCRuleRequest): DisableLayer7CCRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableLayer7CCRuleWithOptions(request, runtime);
}

model DisableLayer7CCRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
}

model DisableLayer7CCResponse = {
  requestId: string(name='RequestId'),
}

async function disableLayer7CCWithOptions(request: DisableLayer7CCRequest, runtime: Util.RuntimeOptions): DisableLayer7CCResponse {
  Util.validateModel(request);
  return doRequest('DisableLayer7CC', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function disableLayer7CC(request: DisableLayer7CCRequest): DisableLayer7CCResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableLayer7CCWithOptions(request, runtime);
}

model DescribleLayer7InstanceRelationsRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  domainList: [ string ](name='DomainList'),
}

model DescribleLayer7InstanceRelationsResponse = {
  requestId: string(name='RequestId'),
  layer7InstanceRelations: [
    {
      domain: string(name='Domain'),
      instanceDetails: [
        {
          instanceId: string(name='InstanceId'),
          functionVersion: string(name='FunctionVersion'),
          eipList: [ string ](name='EipList'),
        }
      ](name='InstanceDetails'),
    }
  ](name='Layer7InstanceRelations'),
}

async function describleLayer7InstanceRelationsWithOptions(request: DescribleLayer7InstanceRelationsRequest, runtime: Util.RuntimeOptions): DescribleLayer7InstanceRelationsResponse {
  Util.validateModel(request);
  return doRequest('DescribleLayer7InstanceRelations', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describleLayer7InstanceRelations(request: DescribleLayer7InstanceRelationsRequest): DescribleLayer7InstanceRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describleLayer7InstanceRelationsWithOptions(request, runtime);
}

model DescribleCertListRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
}

model DescribleCertListResponse = {
  requestId: string(name='RequestId'),
  certList: [
    {
      id: integer(name='Id'),
      name: string(name='Name'),
      common: string(name='Common'),
      issuer: string(name='Issuer'),
      startDate: string(name='StartDate'),
      endDate: string(name='EndDate'),
      domainRelated: boolean(name='DomainRelated'),
    }
  ](name='CertList'),
}

async function describleCertListWithOptions(request: DescribleCertListRequest, runtime: Util.RuntimeOptions): DescribleCertListResponse {
  Util.validateModel(request);
  return doRequest('DescribleCertList', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describleCertList(request: DescribleCertListRequest): DescribleCertListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describleCertListWithOptions(request, runtime);
}

model DescribeLayer7CCRulesRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
  offset: integer(name='Offset'),
  pageSize: string(name='PageSize'),
}

model DescribeLayer7CCRulesResponse = {
  requestId: string(name='RequestId'),
  total: long(name='Total'),
  layer7CCRules: [
    {
      name: string(name='Name'),
      act: string(name='Act'),
      count: integer(name='Count'),
      interval: integer(name='Interval'),
      mode: string(name='Mode'),
      ttl: integer(name='Ttl'),
      uri: string(name='Uri'),
    }
  ](name='Layer7CCRules'),
}

async function describeLayer7CCRulesWithOptions(request: DescribeLayer7CCRulesRequest, runtime: Util.RuntimeOptions): DescribeLayer7CCRulesResponse {
  Util.validateModel(request);
  return doRequest('DescribeLayer7CCRules', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeLayer7CCRules(request: DescribeLayer7CCRulesRequest): DescribeLayer7CCRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLayer7CCRulesWithOptions(request, runtime);
}

model DescribeDomainsRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  queryDomainPattern?: string(name='QueryDomainPattern'),
  offset: integer(name='Offset'),
  pageSize: string(name='PageSize'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribeDomainsResponse = {
  requestId: string(name='RequestId'),
  total: long(name='Total'),
  domains: [
    {
      domain: string(name='Domain'),
      ccEnabled: boolean(name='CcEnabled'),
      ccRuleEnabled: boolean(name='CcRuleEnabled'),
      ccTemplate: string(name='CcTemplate'),
      sslProtocols: string(name='SslProtocols'),
      sslCiphers: string(name='SslCiphers'),
      http2Enable: boolean(name='Http2Enable'),
      cname: string(name='Cname'),
      certName: string(name='CertName'),
      proxyTypeList: [
        {
          proxyType: string(name='ProxyType'),
          proxyPorts: [ string ](name='ProxyPorts'),
        }
      ](name='ProxyTypeList'),
      realServers: [
        {
          rsType: integer(name='RsType'),
          realServer: string(name='RealServer'),
        }
      ](name='RealServers'),
      whiteList: [ string ](name='WhiteList'),
      blackList: [ string ](name='BlackList'),
    }
  ](name='Domains'),
}

async function describeDomainsWithOptions(request: DescribeDomainsRequest, runtime: Util.RuntimeOptions): DescribeDomainsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomains', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeDomains(request: DescribeDomainsRequest): DescribeDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsWithOptions(request, runtime);
}

model DescribeDomainQpsRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
}

model DescribeDomainQpsResponse = {
  requestId: string(name='RequestId'),
  interval: integer(name='Interval'),
  startTime: long(name='StartTime'),
  totals: [ string ] (name='Totals'),
  blocks: [ string ] (name='Blocks'),
  cacheHits: [ string ] (name='CacheHits'),
  preciseBlocks: [ string ] (name='PreciseBlocks'),
  regionBlocks: [ string ] (name='RegionBlocks'),
  ipBlockQps: [ string ] (name='IpBlockQps'),
  ccJsQps: [ string ] (name='CcJsQps'),
  preciseJsQps: [ string ] (name='PreciseJsQps'),
  ccBlockQps: [ string ] (name='CcBlockQps'),
}

async function describeDomainQpsWithOptions(request: DescribeDomainQpsRequest, runtime: Util.RuntimeOptions): DescribeDomainQpsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainQps', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeDomainQps(request: DescribeDomainQpsRequest): DescribeDomainQpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainQpsWithOptions(request, runtime);
}

model DescribeDomainAttackEventsRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  domain: string(name='Domain'),
  offset: integer(name='Offset'),
  pageSize: string(name='PageSize'),
}

model DescribeDomainAttackEventsResponse = {
  requestId: string(name='RequestId'),
  total: long(name='Total'),
  events: [
    {
      startTime: long(name='StartTime'),
      endTime: long(name='EndTime'),
      duration: integer(name='Duration'),
      finished: boolean(name='Finished'),
      maxQps: integer(name='MaxQps'),
      blockCount: long(name='BlockCount'),
    }
  ](name='Events'),
}

async function describeDomainAttackEventsWithOptions(request: DescribeDomainAttackEventsRequest, runtime: Util.RuntimeOptions): DescribeDomainAttackEventsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainAttackEvents', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeDomainAttackEvents(request: DescribeDomainAttackEventsRequest): DescribeDomainAttackEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainAttackEventsWithOptions(request, runtime);
}

model DescribeBackSourceCidrRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  line?: string(name='Line'),
}

model DescribeBackSourceCidrResponse = {
  requestId: string(name='RequestId'),
  cidrList: [ string ] (name='CidrList'),
}

async function describeBackSourceCidrWithOptions(request: DescribeBackSourceCidrRequest, runtime: Util.RuntimeOptions): DescribeBackSourceCidrResponse {
  Util.validateModel(request);
  return doRequest('DescribeBackSourceCidr', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeBackSourceCidr(request: DescribeBackSourceCidrRequest): DescribeBackSourceCidrResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackSourceCidrWithOptions(request, runtime);
}

model DeleteLayer7RuleRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
}

model DeleteLayer7RuleResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLayer7RuleWithOptions(request: DeleteLayer7RuleRequest, runtime: Util.RuntimeOptions): DeleteLayer7RuleResponse {
  Util.validateModel(request);
  return doRequest('DeleteLayer7Rule', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function deleteLayer7Rule(request: DeleteLayer7RuleRequest): DeleteLayer7RuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLayer7RuleWithOptions(request, runtime);
}

model DeleteLayer7CCRuleRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
  name: string(name='Name'),
}

model DeleteLayer7CCRuleResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLayer7CCRuleWithOptions(request: DeleteLayer7CCRuleRequest, runtime: Util.RuntimeOptions): DeleteLayer7CCRuleResponse {
  Util.validateModel(request);
  return doRequest('DeleteLayer7CCRule', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function deleteLayer7CCRule(request: DeleteLayer7CCRuleRequest): DeleteLayer7CCRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLayer7CCRuleWithOptions(request, runtime);
}

model CreateLayer7RuleRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
  rsType: integer(name='RsType'),
  rules: string(name='Rules'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model CreateLayer7RuleResponse = {
  requestId: string(name='RequestId'),
}

async function createLayer7RuleWithOptions(request: CreateLayer7RuleRequest, runtime: Util.RuntimeOptions): CreateLayer7RuleResponse {
  Util.validateModel(request);
  return doRequest('CreateLayer7Rule', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function createLayer7Rule(request: CreateLayer7RuleRequest): CreateLayer7RuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLayer7RuleWithOptions(request, runtime);
}

model ConfigLayer7RuleRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
  proxyTypeList?: string(name='ProxyTypeList'),
  proxyTypes?: [ string ](name='ProxyTypes'),
  rsType: integer(name='RsType'),
  realServers: [ string ](name='RealServers'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model ConfigLayer7RuleResponse = {
  requestId: string(name='RequestId'),
}

async function configLayer7RuleWithOptions(request: ConfigLayer7RuleRequest, runtime: Util.RuntimeOptions): ConfigLayer7RuleResponse {
  Util.validateModel(request);
  return doRequest('ConfigLayer7Rule', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function configLayer7Rule(request: ConfigLayer7RuleRequest): ConfigLayer7RuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return configLayer7RuleWithOptions(request, runtime);
}

model ConfigLayer7CertRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
  certId?: integer(name='CertId'),
  certName?: string(name='CertName'),
  cert?: string(name='Cert'),
  key?: string(name='Key'),
}

model ConfigLayer7CertResponse = {
  requestId: string(name='RequestId'),
}

async function configLayer7CertWithOptions(request: ConfigLayer7CertRequest, runtime: Util.RuntimeOptions): ConfigLayer7CertResponse {
  Util.validateModel(request);
  return doRequest('ConfigLayer7Cert', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function configLayer7Cert(request: ConfigLayer7CertRequest): ConfigLayer7CertResponse {
  var runtime = new Util.RuntimeOptions{};
  return configLayer7CertWithOptions(request, runtime);
}

model ConfigLayer7CCTemplateRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
  template: string(name='Template'),
}

model ConfigLayer7CCTemplateResponse = {
  requestId: string(name='RequestId'),
}

async function configLayer7CCTemplateWithOptions(request: ConfigLayer7CCTemplateRequest, runtime: Util.RuntimeOptions): ConfigLayer7CCTemplateResponse {
  Util.validateModel(request);
  return doRequest('ConfigLayer7CCTemplate', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function configLayer7CCTemplate(request: ConfigLayer7CCTemplateRequest): ConfigLayer7CCTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return configLayer7CCTemplateWithOptions(request, runtime);
}

model ConfigLayer7CCRuleRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
  name: string(name='Name'),
  act: string(name='Act'),
  count: integer(name='Count'),
  interval: integer(name='Interval'),
  mode: string(name='Mode'),
  ttl: integer(name='Ttl'),
  uri: string(name='Uri'),
}

model ConfigLayer7CCRuleResponse = {
  requestId: string(name='RequestId'),
}

async function configLayer7CCRuleWithOptions(request: ConfigLayer7CCRuleRequest, runtime: Util.RuntimeOptions): ConfigLayer7CCRuleResponse {
  Util.validateModel(request);
  return doRequest('ConfigLayer7CCRule', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function configLayer7CCRule(request: ConfigLayer7CCRuleRequest): ConfigLayer7CCRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return configLayer7CCRuleWithOptions(request, runtime);
}

model ConfigLayer7BlackWhiteListRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
  blackList?: [ string ](name='BlackList'),
  whiteList?: [ string ](name='WhiteList'),
}

model ConfigLayer7BlackWhiteListResponse = {
  requestId: string(name='RequestId'),
}

async function configLayer7BlackWhiteListWithOptions(request: ConfigLayer7BlackWhiteListRequest, runtime: Util.RuntimeOptions): ConfigLayer7BlackWhiteListResponse {
  Util.validateModel(request);
  return doRequest('ConfigLayer7BlackWhiteList', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function configLayer7BlackWhiteList(request: ConfigLayer7BlackWhiteListRequest): ConfigLayer7BlackWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return configLayer7BlackWhiteListWithOptions(request, runtime);
}

model AddLayer7CCRuleRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain: string(name='Domain'),
  name: string(name='Name'),
  act: string(name='Act'),
  count: integer(name='Count'),
  interval: integer(name='Interval'),
  mode: string(name='Mode'),
  ttl: integer(name='Ttl'),
  uri: string(name='Uri'),
}

model AddLayer7CCRuleResponse = {
  requestId: string(name='RequestId'),
}

async function addLayer7CCRuleWithOptions(request: AddLayer7CCRuleRequest, runtime: Util.RuntimeOptions): AddLayer7CCRuleResponse {
  Util.validateModel(request);
  return doRequest('AddLayer7CCRule', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function addLayer7CCRule(request: AddLayer7CCRuleRequest): AddLayer7CCRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLayer7CCRuleWithOptions(request, runtime);
}

model ReleaseInstanceRequest = {
  sourceIp?: string(name='SourceIp'),
  instanceId?: string(name='InstanceId'),
}

model ReleaseInstanceResponse = {
  requestId: string(name='RequestId'),
}

async function releaseInstanceWithOptions(request: ReleaseInstanceRequest, runtime: Util.RuntimeOptions): ReleaseInstanceResponse {
  Util.validateModel(request);
  return doRequest('ReleaseInstance', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstanceWithOptions(request, runtime);
}

model ModifyInstanceRemarkRequest = {
  sourceIp?: string(name='SourceIp'),
  instanceId?: string(name='InstanceId'),
  remark?: string(name='Remark'),
}

model ModifyInstanceRemarkResponse = {
  requestId: string(name='RequestId'),
}

async function modifyInstanceRemarkWithOptions(request: ModifyInstanceRemarkRequest, runtime: Util.RuntimeOptions): ModifyInstanceRemarkResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstanceRemark', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function modifyInstanceRemark(request: ModifyInstanceRemarkRequest): ModifyInstanceRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceRemarkWithOptions(request, runtime);
}

model ModifyElasticBandWidthRequest = {
  sourceIp?: string(name='SourceIp'),
  elasticBandwidth: integer(name='ElasticBandwidth'),
  instanceId: string(name='InstanceId'),
}

model ModifyElasticBandWidthResponse = {
  requestId: string(name='RequestId'),
}

async function modifyElasticBandWidthWithOptions(request: ModifyElasticBandWidthRequest, runtime: Util.RuntimeOptions): ModifyElasticBandWidthResponse {
  Util.validateModel(request);
  return doRequest('ModifyElasticBandWidth', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function modifyElasticBandWidth(request: ModifyElasticBandWidthRequest): ModifyElasticBandWidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyElasticBandWidthWithOptions(request, runtime);
}

model DescribeOpEntitiesRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  entityType?: integer(name='EntityType'),
  entityObject?: string(name='EntityObject'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
}

model DescribeOpEntitiesResponse = {
  requestId: string(name='RequestId'),
  total: long(name='Total'),
  opEntities: [
    {
      gmtCreate: long(name='GmtCreate'),
      entityType: integer(name='EntityType'),
      entityObject: string(name='EntityObject'),
      opAction: integer(name='OpAction'),
      opAccount: string(name='OpAccount'),
      opDesc: string(name='OpDesc'),
    }
  ](name='OpEntities'),
}

async function describeOpEntitiesWithOptions(request: DescribeOpEntitiesRequest, runtime: Util.RuntimeOptions): DescribeOpEntitiesResponse {
  Util.validateModel(request);
  return doRequest('DescribeOpEntities', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeOpEntities(request: DescribeOpEntitiesRequest): DescribeOpEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOpEntitiesWithOptions(request, runtime);
}

model DescribeLayer4RulesRequest = {
  sourceIp?: string(name='SourceIp'),
  instanceId: string(name='InstanceId'),
  forwardProtocol?: string(name='ForwardProtocol'),
  frontendPort?: integer(name='FrontendPort'),
  offset: integer(name='Offset'),
  pageSize: string(name='PageSize'),
}

model DescribeLayer4RulesResponse = {
  requestId: string(name='RequestId'),
  total: long(name='Total'),
  listeners: [
    {
      instanceId: string(name='InstanceId'),
      protocol: string(name='Protocol'),
      frontendPort: integer(name='FrontendPort'),
      backendPort: integer(name='BackendPort'),
      isAutoCreate: boolean(name='IsAutoCreate'),
      realServers: [ string ](name='RealServers'),
    }
  ](name='Listeners'),
}

async function describeLayer4RulesWithOptions(request: DescribeLayer4RulesRequest, runtime: Util.RuntimeOptions): DescribeLayer4RulesResponse {
  Util.validateModel(request);
  return doRequest('DescribeLayer4Rules', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeLayer4Rules(request: DescribeLayer4RulesRequest): DescribeLayer4RulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLayer4RulesWithOptions(request, runtime);
}

model DescribeLayer4RuleAttributesRequest = {
  sourceIp?: string(name='SourceIp'),
  listeners: string(name='Listeners'),
}

model DescribeLayer4RuleAttributesResponse = {
  requestId: string(name='RequestId'),
  listeners: [
    {
      instanceId: string(name='InstanceId'),
      protocol: string(name='Protocol'),
      frontendPort: integer(name='FrontendPort'),
      config: {
        persistenceTimeout: integer(name='PersistenceTimeout'),
        synproxy: string(name='Synproxy'),
        nodataConn: string(name='NodataConn'),
        sla: {
          cps: integer(name='Cps'),
          maxconn: integer(name='Maxconn'),
          cpsEnable: integer(name='CpsEnable'),
          maxconnEnable: integer(name='MaxconnEnable'),
        }(name='Sla'),
        slimit: {
          cps: integer(name='Cps'),
          maxconn: integer(name='Maxconn'),
          cpsEnable: integer(name='CpsEnable'),
          cpsMode: integer(name='CpsMode'),
          maxconnEnable: integer(name='MaxconnEnable'),
          bps: long(name='Bps'),
          pps: long(name='Pps'),
        }(name='Slimit'),
        payloadLen: {
          min: integer(name='Min'),
          max: integer(name='Max'),
        }(name='PayloadLen'),
        cc: {
          sblack: [
            {
              during: integer(name='During'),
              expires: integer(name='Expires'),
              cnt: integer(name='Cnt'),
              type: integer(name='Type'),
            }
          ](name='Sblack'),
        }(name='Cc'),
      }(name='Config'),
    }
  ](name='Listeners'),
}

async function describeLayer4RuleAttributesWithOptions(request: DescribeLayer4RuleAttributesRequest, runtime: Util.RuntimeOptions): DescribeLayer4RuleAttributesResponse {
  Util.validateModel(request);
  return doRequest('DescribeLayer4RuleAttributes', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeLayer4RuleAttributes(request: DescribeLayer4RuleAttributesRequest): DescribeLayer4RuleAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLayer4RuleAttributesWithOptions(request, runtime);
}

model DescribeIpTrafficRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime: long(name='StartTime'),
  interval: integer(name='Interval'),
  endTime: long(name='EndTime'),
  eip: string(name='Eip'),
  port?: integer(name='Port'),
  queryProtocol?: string(name='QueryProtocol'),
}

model DescribeIpTrafficResponse = {
  requestId: string(name='RequestId'),
  maxInBps: long(name='MaxInBps'),
  avgInBps: long(name='AvgInBps'),
  maxOutBps: long(name='MaxOutBps'),
  avgOutBps: long(name='AvgOutBps'),
  ipTrafficPoints: [
    {
      time: long(name='Time'),
      maxInbps: long(name='MaxInbps'),
      maxOutbps: long(name='MaxOutbps'),
      cps: integer(name='Cps'),
      actConns: integer(name='ActConns'),
      inactConns: integer(name='InactConns'),
    }
  ](name='IpTrafficPoints'),
}

async function describeIpTrafficWithOptions(request: DescribeIpTrafficRequest, runtime: Util.RuntimeOptions): DescribeIpTrafficResponse {
  Util.validateModel(request);
  return doRequest('DescribeIpTraffic', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeIpTraffic(request: DescribeIpTrafficRequest): DescribeIpTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpTrafficWithOptions(request, runtime);
}

model DescribeInstanceStatisticsRequest = {
  sourceIp?: string(name='SourceIp'),
  instanceIds: string(name='InstanceIds'),
}

model DescribeInstanceStatisticsResponse = {
  requestId: string(name='RequestId'),
  instanceStatistics: [
    {
      instanceId: string(name='InstanceId'),
      portUsage: integer(name='PortUsage'),
      domainUsage: integer(name='DomainUsage'),
      siteUsage: integer(name='SiteUsage'),
      defenseCountUsage: integer(name='DefenseCountUsage'),
    }
  ](name='InstanceStatistics'),
}

async function describeInstanceStatisticsWithOptions(request: DescribeInstanceStatisticsRequest, runtime: Util.RuntimeOptions): DescribeInstanceStatisticsResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceStatistics', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeInstanceStatistics(request: DescribeInstanceStatisticsRequest): DescribeInstanceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceStatisticsWithOptions(request, runtime);
}

model DescribeInstanceSpecsRequest = {
  sourceIp?: string(name='SourceIp'),
  instanceIds: string(name='InstanceIds'),
}

model DescribeInstanceSpecsResponse = {
  requestId: string(name='RequestId'),
  instanceSpecs: [
    {
      instanceId: string(name='InstanceId'),
      baseBandwidth: integer(name='BaseBandwidth'),
      elasticBandwidth: integer(name='ElasticBandwidth'),
      portLimit: integer(name='PortLimit'),
      siteLimit: integer(name='SiteLimit'),
      domainLimit: integer(name='DomainLimit'),
      bandwidthMbps: integer(name='BandwidthMbps'),
      defenseCount: integer(name='DefenseCount'),
      functionVersion: string(name='FunctionVersion'),
      qpsLimit: integer(name='QpsLimit'),
    }
  ](name='InstanceSpecs'),
}

async function describeInstanceSpecsWithOptions(request: DescribeInstanceSpecsRequest, runtime: Util.RuntimeOptions): DescribeInstanceSpecsResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceSpecs', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeInstanceSpecs(request: DescribeInstanceSpecsRequest): DescribeInstanceSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSpecsWithOptions(request, runtime);
}

model DescribeInstancesRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  instanceIds?: string(name='InstanceIds'),
  pageNo: string(name='PageNo'),
  pageSize: string(name='PageSize'),
  ip?: string(name='Ip'),
  remark?: string(name='Remark'),
  edition?: integer(name='Edition'),
  enabled?: integer(name='Enabled'),
  expireStartTime?: long(name='ExpireStartTime'),
  expireEndTime?: long(name='ExpireEndTime'),
  status?: [ integer ](name='Status'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeInstancesResponse = {
  requestId: string(name='RequestId'),
  total: long(name='Total'),
  instances: [
    {
      instanceId: string(name='InstanceId'),
      remark: string(name='Remark'),
      status: integer(name='Status'),
      debtStatus: integer(name='DebtStatus'),
      expireTime: long(name='ExpireTime'),
      gmtCreate: long(name='GmtCreate'),
      edition: integer(name='Edition'),
      enabled: integer(name='Enabled'),
    }
  ](name='Instances'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstances', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeInstanceDetailsRequest = {
  sourceIp?: string(name='SourceIp'),
  instanceIds: string(name='InstanceIds'),
}

model DescribeInstanceDetailsResponse = {
  requestId: string(name='RequestId'),
  instanceDetails: [
    {
      instanceId: string(name='InstanceId'),
      line: string(name='Line'),
      eipInfoList: [
        {
          eip: string(name='Eip'),
          status: string(name='Status'),
        }
      ](name='EipInfoList'),
    }
  ](name='InstanceDetails'),
}

async function describeInstanceDetailsWithOptions(request: DescribeInstanceDetailsRequest, runtime: Util.RuntimeOptions): DescribeInstanceDetailsResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceDetails', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeInstanceDetails(request: DescribeInstanceDetailsRequest): DescribeInstanceDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceDetailsWithOptions(request, runtime);
}

model DescribeHealthCheckStatusListRequest = {
  sourceIp?: string(name='SourceIp'),
  listeners: string(name='Listeners'),
}

model DescribeHealthCheckStatusListResponse = {
  requestId: string(name='RequestId'),
  healthCheckStatusList: [
    {
      instanceId: string(name='InstanceId'),
      protocol: string(name='Protocol'),
      frontendPort: integer(name='FrontendPort'),
      status: string(name='Status'),
      realServerStatusList: [
        {
          address: string(name='Address'),
          status: string(name='Status'),
        }
      ](name='RealServerStatusList'),
    }
  ](name='HealthCheckStatusList'),
}

async function describeHealthCheckStatusListWithOptions(request: DescribeHealthCheckStatusListRequest, runtime: Util.RuntimeOptions): DescribeHealthCheckStatusListResponse {
  Util.validateModel(request);
  return doRequest('DescribeHealthCheckStatusList', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeHealthCheckStatusList(request: DescribeHealthCheckStatusListRequest): DescribeHealthCheckStatusListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHealthCheckStatusListWithOptions(request, runtime);
}

model DescribeHealthCheckListRequest = {
  sourceIp?: string(name='SourceIp'),
  listeners: string(name='Listeners'),
}

model DescribeHealthCheckListResponse = {
  requestId: string(name='RequestId'),
  listeners: [
    {
      instanceId: string(name='InstanceId'),
      protocol: string(name='Protocol'),
      frontendPort: integer(name='FrontendPort'),
      healthCheck: {
        type: string(name='Type'),
        domain: string(name='Domain'),
        uri: string(name='Uri'),
        down: integer(name='Down'),
        interval: integer(name='Interval'),
        port: integer(name='Port'),
        timeout: integer(name='Timeout'),
        up: integer(name='Up'),
      }(name='HealthCheck'),
    }
  ](name='Listeners'),
}

async function describeHealthCheckListWithOptions(request: DescribeHealthCheckListRequest, runtime: Util.RuntimeOptions): DescribeHealthCheckListResponse {
  Util.validateModel(request);
  return doRequest('DescribeHealthCheckList', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeHealthCheckList(request: DescribeHealthCheckListRequest): DescribeHealthCheckListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHealthCheckListWithOptions(request, runtime);
}

model DescribeElasticBandwidthSpecRequest = {
  sourceIp?: string(name='SourceIp'),
  instanceId: string(name='InstanceId'),
}

model DescribeElasticBandwidthSpecResponse = {
  requestId: string(name='RequestId'),
  elasticBandwidthSpec: [ string ] (name='ElasticBandwidthSpec'),
}

async function describeElasticBandwidthSpecWithOptions(request: DescribeElasticBandwidthSpecRequest, runtime: Util.RuntimeOptions): DescribeElasticBandwidthSpecResponse {
  Util.validateModel(request);
  return doRequest('DescribeElasticBandwidthSpec', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeElasticBandwidthSpec(request: DescribeElasticBandwidthSpecRequest): DescribeElasticBandwidthSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeElasticBandwidthSpecWithOptions(request, runtime);
}

model DescribeDDoSTrafficRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime: long(name='StartTime'),
  interval: integer(name='Interval'),
  endTime: long(name='EndTime'),
  eip: string(name='Eip'),
}

model DescribeDDoSTrafficResponse = {
  requestId: string(name='RequestId'),
  defenseInBytes: long(name='DefenseInBytes'),
  sourceInBytes: long(name='SourceInBytes'),
  DDoSTrafficPoints: [
    {
      time: long(name='Time'),
      defenseMaxInBps: long(name='DefenseMaxInBps'),
      sourceMaxInBps: long(name='SourceMaxInBps'),
    }
  ](name='DDoSTrafficPoints'),
}

async function describeDDoSTrafficWithOptions(request: DescribeDDoSTrafficRequest, runtime: Util.RuntimeOptions): DescribeDDoSTrafficResponse {
  Util.validateModel(request);
  return doRequest('DescribeDDoSTraffic', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeDDoSTraffic(request: DescribeDDoSTrafficRequest): DescribeDDoSTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDDoSTrafficWithOptions(request, runtime);
}

model DescribeDDoSEventsRequest = {
  sourceIp?: string(name='SourceIp'),
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  eip: string(name='Eip'),
  offset: integer(name='Offset'),
  pageSize: string(name='PageSize'),
}

model DescribeDDoSEventsResponse = {
  requestId: string(name='RequestId'),
  total: long(name='Total'),
  events: [
    {
      startTime: long(name='StartTime'),
      endTime: long(name='EndTime'),
      interval: integer(name='Interval'),
      status: string(name='Status'),
    }
  ](name='Events'),
}

async function describeDDoSEventsWithOptions(request: DescribeDDoSEventsRequest, runtime: Util.RuntimeOptions): DescribeDDoSEventsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDDoSEvents', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function describeDDoSEvents(request: DescribeDDoSEventsRequest): DescribeDDoSEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDDoSEventsWithOptions(request, runtime);
}

model DeleteLayer4RuleRequest = {
  listeners: string(name='Listeners'),
}

model DeleteLayer4RuleResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLayer4RuleWithOptions(request: DeleteLayer4RuleRequest, runtime: Util.RuntimeOptions): DeleteLayer4RuleResponse {
  Util.validateModel(request);
  return doRequest('DeleteLayer4Rule', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function deleteLayer4Rule(request: DeleteLayer4RuleRequest): DeleteLayer4RuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLayer4RuleWithOptions(request, runtime);
}

model CreateLayer4RuleRequest = {
  listeners: string(name='Listeners'),
}

model CreateLayer4RuleResponse = {
  requestId: string(name='RequestId'),
}

async function createLayer4RuleWithOptions(request: CreateLayer4RuleRequest, runtime: Util.RuntimeOptions): CreateLayer4RuleResponse {
  Util.validateModel(request);
  return doRequest('CreateLayer4Rule', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function createLayer4Rule(request: CreateLayer4RuleRequest): CreateLayer4RuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLayer4RuleWithOptions(request, runtime);
}

model ConfigLayer4RuleAttributeRequest = {
  instanceId: string(name='InstanceId'),
  forwardProtocol: string(name='ForwardProtocol'),
  frontendPort: integer(name='FrontendPort'),
  config: string(name='Config'),
}

model ConfigLayer4RuleAttributeResponse = {
  requestId: string(name='RequestId'),
}

async function configLayer4RuleAttributeWithOptions(request: ConfigLayer4RuleAttributeRequest, runtime: Util.RuntimeOptions): ConfigLayer4RuleAttributeResponse {
  Util.validateModel(request);
  return doRequest('ConfigLayer4RuleAttribute', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function configLayer4RuleAttribute(request: ConfigLayer4RuleAttributeRequest): ConfigLayer4RuleAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return configLayer4RuleAttributeWithOptions(request, runtime);
}

model ConfigLayer4RuleRequest = {
  listeners: string(name='Listeners'),
}

model ConfigLayer4RuleResponse = {
  requestId: string(name='RequestId'),
}

async function configLayer4RuleWithOptions(request: ConfigLayer4RuleRequest, runtime: Util.RuntimeOptions): ConfigLayer4RuleResponse {
  Util.validateModel(request);
  return doRequest('ConfigLayer4Rule', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function configLayer4Rule(request: ConfigLayer4RuleRequest): ConfigLayer4RuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return configLayer4RuleWithOptions(request, runtime);
}

model ConfigHealthCheckRequest = {
  instanceId: string(name='InstanceId'),
  forwardProtocol: string(name='ForwardProtocol'),
  frontendPort: integer(name='FrontendPort'),
  healthCheck: string(name='HealthCheck'),
}

model ConfigHealthCheckResponse = {
  requestId: string(name='RequestId'),
}

async function configHealthCheckWithOptions(request: ConfigHealthCheckRequest, runtime: Util.RuntimeOptions): ConfigHealthCheckResponse {
  Util.validateModel(request);
  return doRequest('ConfigHealthCheck', 'HTTPS', 'POST', '2017-12-28', 'AK', null, request, runtime);
}

async function configHealthCheck(request: ConfigHealthCheckRequest): ConfigHealthCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return configHealthCheckWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
