import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'ddosbgp.aliyuncs.com',
    cn-beijing = 'ddosbgp.aliyuncs.com',
    cn-zhangjiakou = 'ddosbgp.aliyuncs.com',
    cn-huhehaote = 'ddosbgp.aliyuncs.com',
    cn-hangzhou = 'ddosbgp.aliyuncs.com',
    cn-shanghai = 'ddosbgp.aliyuncs.com',
    cn-shenzhen = 'ddosbgp.aliyuncs.com',
    ap-northeast-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    cn-chengdu = 'ddosbgp.aliyuncs.com',
    eu-central-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    cn-hangzhou-finance = 'ddosbgp.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ddosbgp.aliyuncs.com',
    cn-shanghai-finance-1 = 'ddosbgp.aliyuncs.com',
    cn-north-2-gov-1 = 'ddosbgp.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('ddosbgp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DescribeOnDemandInstanceStatusRequest = {
  instanceIdList: [ string ](name='InstanceIdList'),
  regionId?: string(name='RegionId'),
}

model DescribeOnDemandInstanceStatusResponse = {
  requestId: string(name='RequestId'),
  instances: [
    {
      userId: string(name='UserId'),
      net: string(name='Net'),
      instanceId: string(name='InstanceId'),
      registedAs: string(name='RegistedAs'),
      desc: string(name='Desc'),
      declared: string(name='Declared'),
      mode: string(name='Mode'),
    }
  ](name='Instances'),
}

async function describeOnDemandInstanceStatusWithOptions(request: DescribeOnDemandInstanceStatusRequest, runtime: Util.RuntimeOptions): DescribeOnDemandInstanceStatusResponse {
  Util.validateModel(request);
  return doRequest('DescribeOnDemandInstanceStatus', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function describeOnDemandInstanceStatus(request: DescribeOnDemandInstanceStatusRequest): DescribeOnDemandInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOnDemandInstanceStatusWithOptions(request, runtime);
}

model SetInstanceModeOnDemandRequest = {
  instanceIdList: [ string ](name='InstanceIdList'),
  mode: string(name='Mode'),
  regionId?: string(name='RegionId'),
}

model SetInstanceModeOnDemandResponse = {
  requestId: string(name='RequestId'),
}

async function setInstanceModeOnDemandWithOptions(request: SetInstanceModeOnDemandRequest, runtime: Util.RuntimeOptions): SetInstanceModeOnDemandResponse {
  Util.validateModel(request);
  return doRequest('SetInstanceModeOnDemand', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function setInstanceModeOnDemand(request: SetInstanceModeOnDemandRequest): SetInstanceModeOnDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return setInstanceModeOnDemandWithOptions(request, runtime);
}

model QuerySchedruleOnDemandRequest = {
  instanceId: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model QuerySchedruleOnDemandResponse = {
  requestId: string(name='RequestId'),
  userId: string(name='UserId'),
  instanceId: string(name='InstanceId'),
  ruleConfig: [
    {
      ruleName: string(name='RuleName'),
      ruleConditionCnt: string(name='RuleConditionCnt'),
      ruleUndoBeginTime: string(name='RuleUndoBeginTime'),
      ruleUndoMode: string(name='RuleUndoMode'),
      ruleUndoEndTime: string(name='RuleUndoEndTime'),
      ruleConditionMbps: string(name='RuleConditionMbps'),
      ruleConditionKpps: string(name='RuleConditionKpps'),
      ruleSwitch: string(name='RuleSwitch'),
      ruleAction: string(name='RuleAction'),
      timeZone: string(name='TimeZone'),
    }
  ](name='RuleConfig'),
  ruleStatus: [
    {
      net: string(name='Net'),
      ruleSchedStatus: string(name='RuleSchedStatus'),
    }
  ](name='RuleStatus'),
}

async function querySchedruleOnDemandWithOptions(request: QuerySchedruleOnDemandRequest, runtime: Util.RuntimeOptions): QuerySchedruleOnDemandResponse {
  Util.validateModel(request);
  return doRequest('QuerySchedruleOnDemand', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function querySchedruleOnDemand(request: QuerySchedruleOnDemandRequest): QuerySchedruleOnDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySchedruleOnDemandWithOptions(request, runtime);
}

model DeleteSchedruleOnDemandRequest = {
  instanceId: string(name='InstanceId'),
  ruleName: string(name='RuleName'),
  regionId?: string(name='RegionId'),
}

model DeleteSchedruleOnDemandResponse = {
  requestId: string(name='RequestId'),
}

async function deleteSchedruleOnDemandWithOptions(request: DeleteSchedruleOnDemandRequest, runtime: Util.RuntimeOptions): DeleteSchedruleOnDemandResponse {
  Util.validateModel(request);
  return doRequest('DeleteSchedruleOnDemand', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function deleteSchedruleOnDemand(request: DeleteSchedruleOnDemandRequest): DeleteSchedruleOnDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSchedruleOnDemandWithOptions(request, runtime);
}

model ConfigSchedruleOnDemandRequest = {
  instanceId: string(name='InstanceId'),
  ruleName: string(name='RuleName'),
  ruleConditionMbps: string(name='RuleConditionMbps'),
  ruleConditionKpps: string(name='RuleConditionKpps'),
  ruleConditionCnt: string(name='RuleConditionCnt'),
  ruleAction: string(name='RuleAction'),
  ruleSwitch: string(name='RuleSwitch'),
  ruleUndoMode: string(name='RuleUndoMode'),
  ruleUndoBeginTime: string(name='RuleUndoBeginTime'),
  ruleUndoEndTime?: string(name='RuleUndoEndTime'),
  timeZone: string(name='TimeZone'),
  regionId?: string(name='RegionId'),
}

model ConfigSchedruleOnDemandResponse = {
  requestId: string(name='RequestId'),
}

async function configSchedruleOnDemandWithOptions(request: ConfigSchedruleOnDemandRequest, runtime: Util.RuntimeOptions): ConfigSchedruleOnDemandResponse {
  Util.validateModel(request);
  return doRequest('ConfigSchedruleOnDemand', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function configSchedruleOnDemand(request: ConfigSchedruleOnDemandRequest): ConfigSchedruleOnDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return configSchedruleOnDemandWithOptions(request, runtime);
}

model CreateSchedruleOnDemandRequest = {
  instanceId: string(name='InstanceId'),
  ruleName: string(name='RuleName'),
  ruleConditionMbps: string(name='RuleConditionMbps'),
  ruleConditionKpps: string(name='RuleConditionKpps'),
  ruleConditionCnt: string(name='RuleConditionCnt'),
  ruleAction: string(name='RuleAction'),
  ruleSwitch: string(name='RuleSwitch'),
  ruleUndoMode: string(name='RuleUndoMode'),
  ruleUndoBeginTime: string(name='RuleUndoBeginTime'),
  ruleUndoEndTime?: string(name='RuleUndoEndTime'),
  timeZone: string(name='TimeZone'),
  regionId?: string(name='RegionId'),
}

model CreateSchedruleOnDemandResponse = {
  requestId: string(name='RequestId'),
}

async function createSchedruleOnDemandWithOptions(request: CreateSchedruleOnDemandRequest, runtime: Util.RuntimeOptions): CreateSchedruleOnDemandResponse {
  Util.validateModel(request);
  return doRequest('CreateSchedruleOnDemand', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function createSchedruleOnDemand(request: CreateSchedruleOnDemandRequest): CreateSchedruleOnDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSchedruleOnDemandWithOptions(request, runtime);
}

model DescribeOnDemandDdosEventRequest = {
  startTime: integer(name='StartTime'),
  endTime: integer(name='EndTime'),
  pageSize: integer(name='PageSize'),
  pageNo: integer(name='PageNo'),
  instanceId: string(name='InstanceId'),
  ip?: string(name='Ip'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeOnDemandDdosEventResponse = {
  requestId: string(name='RequestId'),
  total: long(name='Total'),
  events: [
    {
      startTime: integer(name='StartTime'),
      endTime: integer(name='EndTime'),
      pps: integer(name='Pps'),
      ip: string(name='Ip'),
      mbps: integer(name='Mbps'),
      status: string(name='Status'),
    }
  ](name='Events'),
}

async function describeOnDemandDdosEventWithOptions(request: DescribeOnDemandDdosEventRequest, runtime: Util.RuntimeOptions): DescribeOnDemandDdosEventResponse {
  Util.validateModel(request);
  return doRequest('DescribeOnDemandDdosEvent', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function describeOnDemandDdosEvent(request: DescribeOnDemandDdosEventRequest): DescribeOnDemandDdosEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOnDemandDdosEventWithOptions(request, runtime);
}

model ListTagKeysRequest = {
  regionId: string(name='RegionId'),
  resourceType: string(name='ResourceType'),
  pageSize?: integer(name='PageSize'),
  currentPage?: integer(name='CurrentPage'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ListTagKeysResponse = {
  requestId: string(name='RequestId'),
  currentPage: integer(name='CurrentPage'),
  pageSize: integer(name='PageSize'),
  totalCount: integer(name='TotalCount'),
  tagKeys: [
    {
      tagKey: string(name='TagKey'),
      tagCount: integer(name='TagCount'),
    }
  ](name='TagKeys'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  return doRequest('ListTagKeys', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model ListTagResourcesRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId: string(name='RegionId'),
  resourceType: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  nextToken?: string(name='NextToken'),
}

model ListTagResourcesResponse = {
  requestId: string(name='RequestId'),
  nextToken: string(name='NextToken'),
  tagResources: {
    tagResource: [
      {
        resourceType: string(name='ResourceType'),
        resourceId: string(name='ResourceId'),
        tagKey: string(name='TagKey'),
        tagValue: string(name='TagValue'),
      }
    ](name='TagResource'),
  }(name='TagResources'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  return doRequest('ListTagResources', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId: string(name='RegionId'),
  resourceType: string(name='ResourceType'),
  resourceId: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
  all?: boolean(name='All'),
}

model UntagResourcesResponse = {
  requestId: string(name='RequestId'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  return doRequest('UntagResources', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model TagResourcesRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId: string(name='RegionId'),
  resourceType: string(name='ResourceType'),
  resourceId: [ string ](name='ResourceId'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponse = {
  requestId: string(name='RequestId'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  return doRequest('TagResources', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model DescribeExcpetionCountRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeExcpetionCountResponse = {
  requestId: string(name='RequestId'),
  exceptionIpCount: integer(name='ExceptionIpCount'),
  expireTimeCount: integer(name='ExpireTimeCount'),
}

async function describeExcpetionCountWithOptions(request: DescribeExcpetionCountRequest, runtime: Util.RuntimeOptions): DescribeExcpetionCountResponse {
  Util.validateModel(request);
  return doRequest('DescribeExcpetionCount', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function describeExcpetionCount(request: DescribeExcpetionCountRequest): DescribeExcpetionCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExcpetionCountWithOptions(request, runtime);
}

model DescribePackIpListRequest = {
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
  instanceId: string(name='InstanceId'),
  ip?: string(name='Ip'),
  productName?: string(name='ProductName'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribePackIpListResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  code: string(name='Code'),
  total: integer(name='Total'),
  ipList: [
    {
      ip: string(name='Ip'),
      product: string(name='Product'),
      status: string(name='Status'),
      remark: string(name='Remark'),
    }
  ](name='IpList'),
}

async function describePackIpListWithOptions(request: DescribePackIpListRequest, runtime: Util.RuntimeOptions): DescribePackIpListResponse {
  Util.validateModel(request);
  return doRequest('DescribePackIpList', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function describePackIpList(request: DescribePackIpListRequest): DescribePackIpListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePackIpListWithOptions(request, runtime);
}

model DescribeRegionsRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeRegionsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  code: string(name='Code'),
  regions: [
    {
      regionEnName: string(name='RegionEnName'),
      regionName: string(name='RegionName'),
      regionId: string(name='RegionId'),
    }
  ](name='Regions'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRegions', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model ModifyRemarkRequest = {
  instanceId: string(name='InstanceId'),
  remark: string(name='Remark'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model ModifyRemarkResponse = {
  requestId: string(name='RequestId'),
}

async function modifyRemarkWithOptions(request: ModifyRemarkRequest, runtime: Util.RuntimeOptions): ModifyRemarkResponse {
  Util.validateModel(request);
  return doRequest('ModifyRemark', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function modifyRemark(request: ModifyRemarkRequest): ModifyRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRemarkWithOptions(request, runtime);
}

model DescribeTrafficRequest = {
  instanceId?: string(name='InstanceId'),
  ipnet?: string(name='Ipnet'),
  ip?: string(name='Ip'),
  startTime: integer(name='StartTime'),
  endTime?: integer(name='EndTime'),
  interval?: integer(name='Interval'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeTrafficResponse = {
  requestId: string(name='RequestId'),
  flowList: [
    {
      pps: integer(name='Pps'),
      flowType: string(name='FlowType'),
      kbps: integer(name='Kbps'),
      name: string(name='Name'),
      attackBps: long(name='AttackBps'),
      attackPps: long(name='AttackPps'),
      time: integer(name='Time'),
    }
  ](name='FlowList'),
}

async function describeTrafficWithOptions(request: DescribeTrafficRequest, runtime: Util.RuntimeOptions): DescribeTrafficResponse {
  Util.validateModel(request);
  return doRequest('DescribeTraffic', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function describeTraffic(request: DescribeTrafficRequest): DescribeTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrafficWithOptions(request, runtime);
}

model DescribeResourcePackUsageRequest = {
  sourceIp?: string(name='SourceIp'),
  endTime: long(name='EndTime'),
  startTime: long(name='StartTime'),
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeResourcePackUsageResponse = {
  requestId: string(name='RequestId'),
  interval: long(name='Interval'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  packUsages: [
    {
      traffic: float(name='Traffic'),
      time: long(name='Time'),
    }
  ](name='PackUsages'),
}

async function describeResourcePackUsageWithOptions(request: DescribeResourcePackUsageRequest, runtime: Util.RuntimeOptions): DescribeResourcePackUsageResponse {
  Util.validateModel(request);
  return doRequest('DescribeResourcePackUsage', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function describeResourcePackUsage(request: DescribeResourcePackUsageRequest): DescribeResourcePackUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePackUsageWithOptions(request, runtime);
}

model DescribeResourcePackStatisticsRequest = {
  sourceIp?: string(name='SourceIp'),
  ddosRegionId?: string(name='DdosRegionId'),
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeResourcePackStatisticsResponse = {
  requestId: string(name='RequestId'),
  availablePackNum: integer(name='AvailablePackNum'),
  totalCurrCapacity: long(name='TotalCurrCapacity'),
  totalUsedCapacity: long(name='TotalUsedCapacity'),
  totalInitCapacity: long(name='TotalInitCapacity'),
}

async function describeResourcePackStatisticsWithOptions(request: DescribeResourcePackStatisticsRequest, runtime: Util.RuntimeOptions): DescribeResourcePackStatisticsResponse {
  Util.validateModel(request);
  return doRequest('DescribeResourcePackStatistics', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function describeResourcePackStatistics(request: DescribeResourcePackStatisticsRequest): DescribeResourcePackStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePackStatisticsWithOptions(request, runtime);
}

model DescribeResourcePackInstancesRequest = {
  sourceIp?: string(name='SourceIp'),
  pageSize: integer(name='PageSize'),
  currentPage: integer(name='CurrentPage'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeResourcePackInstancesResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  resourcePacks: [
    {
      resourcePackId: string(name='ResourcePackId'),
      initCapacity: long(name='InitCapacity'),
      currCapacity: long(name='CurrCapacity'),
      startTime: long(name='StartTime'),
      endTime: long(name='EndTime'),
      status: string(name='Status'),
    }
  ](name='ResourcePacks'),
}

async function describeResourcePackInstancesWithOptions(request: DescribeResourcePackInstancesRequest, runtime: Util.RuntimeOptions): DescribeResourcePackInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeResourcePackInstances', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function describeResourcePackInstances(request: DescribeResourcePackInstancesRequest): DescribeResourcePackInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePackInstancesWithOptions(request, runtime);
}

model DescribePackPaidTrafficRequest = {
  sourceIp?: string(name='SourceIp'),
  instanceId?: string(name='InstanceId'),
  currentPage: integer(name='CurrentPage'),
  pageSize: integer(name='PageSize'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribePackPaidTrafficResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  packPaidTraffics: [
    {
      instanceId: string(name='InstanceId'),
      startTime: long(name='StartTime'),
      baseBandwidth: integer(name='BaseBandwidth'),
      elasticBandwidth: integer(name='ElasticBandwidth'),
      paidCapacity: float(name='PaidCapacity'),
      totalCapacity: float(name='TotalCapacity'),
      maxAttack: float(name='MaxAttack'),
    }
  ](name='PackPaidTraffics'),
}

async function describePackPaidTrafficWithOptions(request: DescribePackPaidTrafficRequest, runtime: Util.RuntimeOptions): DescribePackPaidTrafficResponse {
  Util.validateModel(request);
  return doRequest('DescribePackPaidTraffic', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function describePackPaidTraffic(request: DescribePackPaidTrafficRequest): DescribePackPaidTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePackPaidTrafficWithOptions(request, runtime);
}

model DescribeOpEntitiesRequest = {
  currentPage: integer(name='CurrentPage'),
  pageSize: integer(name='PageSize'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  orderBy?: string(name='OrderBy'),
  orderDir?: string(name='OrderDir'),
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeOpEntitiesResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  opEntities: [
    {
      entityObject: string(name='EntityObject'),
      entityType: integer(name='EntityType'),
      opDesc: string(name='OpDesc'),
      opAccount: string(name='OpAccount'),
      opAction: integer(name='OpAction'),
      gmtCreate: long(name='GmtCreate'),
    }
  ](name='OpEntities'),
}

async function describeOpEntitiesWithOptions(request: DescribeOpEntitiesRequest, runtime: Util.RuntimeOptions): DescribeOpEntitiesResponse {
  Util.validateModel(request);
  return doRequest('DescribeOpEntities', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function describeOpEntities(request: DescribeOpEntitiesRequest): DescribeOpEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOpEntitiesWithOptions(request, runtime);
}

model DescribeInstanceSpecsRequest = {
  instanceIdList: string(name='InstanceIdList'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeInstanceSpecsResponse = {
  requestId: string(name='RequestId'),
  instanceSpecs: [
    {
      region: string(name='Region'),
      availableDeleteBlackholeCount: string(name='AvailableDeleteBlackholeCount'),
      instanceId: string(name='InstanceId'),
      packConfig: {
        packAdvThre: integer(name='PackAdvThre'),
        ipAdvanceThre: integer(name='IpAdvanceThre'),
        ipBasicThre: integer(name='IpBasicThre'),
        packBasicThre: integer(name='PackBasicThre'),
        ipSpec: integer(name='IpSpec'),
        bindIpCount: integer(name='BindIpCount'),
      }(name='PackConfig'),
    }
  ](name='InstanceSpecs'),
}

async function describeInstanceSpecsWithOptions(request: DescribeInstanceSpecsRequest, runtime: Util.RuntimeOptions): DescribeInstanceSpecsResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceSpecs', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function describeInstanceSpecs(request: DescribeInstanceSpecsRequest): DescribeInstanceSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSpecsWithOptions(request, runtime);
}

model DescribeInstanceListRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  instanceIdList?: string(name='InstanceIdList'),
  remark?: string(name='Remark'),
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
  ipVersion?: string(name='IpVersion'),
  instanceType?: string(name='InstanceType'),
  ip?: string(name='Ip'),
  orderby?: string(name='Orderby'),
  orderdire?: string(name='Orderdire'),
  regionId?: string(name='RegionId'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeInstanceListResponse = {
  requestId: string(name='RequestId'),
  total: long(name='Total'),
  instanceList: [
    {
      expireTime: long(name='ExpireTime'),
      instanceId: string(name='InstanceId'),
      product: string(name='Product'),
      remark: string(name='Remark'),
      status: string(name='Status'),
      ipType: string(name='IpType'),
      autoRenewal: boolean(name='AutoRenewal'),
      blackholdingCount: string(name='BlackholdingCount'),
      gmtCreate: long(name='GmtCreate'),
      instanceType: string(name='InstanceType'),
    }
  ](name='InstanceList'),
}

async function describeInstanceListWithOptions(request: DescribeInstanceListRequest, runtime: Util.RuntimeOptions): DescribeInstanceListResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceList', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function describeInstanceList(request: DescribeInstanceListRequest): DescribeInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceListWithOptions(request, runtime);
}

model DescribeDdosEventRequest = {
  startTime: integer(name='StartTime'),
  endTime: integer(name='EndTime'),
  pageSize: integer(name='PageSize'),
  pageNo: integer(name='PageNo'),
  instanceId: string(name='InstanceId'),
  ip?: string(name='Ip'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeDdosEventResponse = {
  requestId: string(name='RequestId'),
  total: long(name='Total'),
  events: [
    {
      startTime: integer(name='StartTime'),
      endTime: integer(name='EndTime'),
      pps: integer(name='Pps'),
      ip: string(name='Ip'),
      mbps: integer(name='Mbps'),
      status: string(name='Status'),
    }
  ](name='Events'),
}

async function describeDdosEventWithOptions(request: DescribeDdosEventRequest, runtime: Util.RuntimeOptions): DescribeDdosEventResponse {
  Util.validateModel(request);
  return doRequest('DescribeDdosEvent', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function describeDdosEvent(request: DescribeDdosEventRequest): DescribeDdosEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDdosEventWithOptions(request, runtime);
}

model DeleteIpRequest = {
  ipList: string(name='IpList'),
  instanceId: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DeleteIpResponse = {
  requestId: string(name='RequestId'),
}

async function deleteIpWithOptions(request: DeleteIpRequest, runtime: Util.RuntimeOptions): DeleteIpResponse {
  Util.validateModel(request);
  return doRequest('DeleteIp', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function deleteIp(request: DeleteIpRequest): DeleteIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpWithOptions(request, runtime);
}

model DeleteBlackholeRequest = {
  ip: string(name='Ip'),
  instanceId: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DeleteBlackholeResponse = {
  requestId: string(name='RequestId'),
}

async function deleteBlackholeWithOptions(request: DeleteBlackholeRequest, runtime: Util.RuntimeOptions): DeleteBlackholeResponse {
  Util.validateModel(request);
  return doRequest('DeleteBlackhole', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function deleteBlackhole(request: DeleteBlackholeRequest): DeleteBlackholeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBlackholeWithOptions(request, runtime);
}

model CheckGrantRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model CheckGrantResponse = {
  requestId: string(name='RequestId'),
  status: integer(name='Status'),
}

async function checkGrantWithOptions(request: CheckGrantRequest, runtime: Util.RuntimeOptions): CheckGrantResponse {
  Util.validateModel(request);
  return doRequest('CheckGrant', 'HTTPS', 'GET', '2018-07-20', 'AK', request, null, runtime);
}

async function checkGrant(request: CheckGrantRequest): CheckGrantResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkGrantWithOptions(request, runtime);
}

model AddIpRequest = {
  ipList: string(name='IpList'),
  instanceId: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model AddIpResponse = {
  requestId: string(name='RequestId'),
}

async function addIpWithOptions(request: AddIpRequest, runtime: Util.RuntimeOptions): AddIpResponse {
  Util.validateModel(request);
  return doRequest('AddIp', 'HTTPS', 'POST', '2018-07-20', 'AK', null, request, runtime);
}

async function addIp(request: AddIpRequest): AddIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return addIpWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
