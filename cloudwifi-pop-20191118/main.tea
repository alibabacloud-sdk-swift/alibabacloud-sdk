import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'cloudwf.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cloudwifi-pop', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model GetNetDeviceInfoWithSizeRequest = {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  cursor?: long(name='Cursor'),
  role?: string(name='Role'),
  serviceTag?: string(name='ServiceTag'),
  idc?: string(name='Idc'),
  pageSize?: integer(name='PageSize'),
  mgnIp?: string(name='MgnIp'),
  manufacturer?: string(name='Manufacturer'),
  logicNetPod?: string(name='LogicNetPod'),
  password?: string(name='Password'),
  netPod?: string(name='NetPod'),
  requestId: string(name='RequestId'),
  model?: string(name='Model'),
  id?: long(name='Id'),
  hostName?: string(name='HostName'),
  username?: string(name='Username'),
}

model GetNetDeviceInfoWithSizeResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  data: {
    count: long(name='Count'),
    data: [ map[string]any ](name='Data'),
  }(name='Data'),
}

async function getNetDeviceInfoWithSizeWithOptions(request: GetNetDeviceInfoWithSizeRequest, runtime: Util.RuntimeOptions): GetNetDeviceInfoWithSizeResponse {
  Util.validateModel(request);
  return doRequest('GetNetDeviceInfoWithSize', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getNetDeviceInfoWithSize(request: GetNetDeviceInfoWithSizeRequest): GetNetDeviceInfoWithSizeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNetDeviceInfoWithSizeWithOptions(request, runtime);
}

model ListJobOrdersWithSizeRequest = {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  cursor: long(name='Cursor'),
  handler?: string(name='Handler'),
  clientSystem?: string(name='ClientSystem'),
  pageSize: integer(name='PageSize'),
  title?: string(name='Title'),
  orderStatus?: string(name='OrderStatus'),
  clientUniqueId?: string(name='ClientUniqueId'),
  requestId: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  id?: string(name='Id'),
  endTime?: string(name='EndTime'),
  changingType?: string(name='ChangingType'),
  status?: string(name='Status'),
}

model ListJobOrdersWithSizeResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  data: {
    count: long(name='Count'),
    data: [ map[string]any ](name='Data'),
  }(name='Data'),
}

async function listJobOrdersWithSizeWithOptions(request: ListJobOrdersWithSizeRequest, runtime: Util.RuntimeOptions): ListJobOrdersWithSizeResponse {
  Util.validateModel(request);
  return doRequest('ListJobOrdersWithSize', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function listJobOrdersWithSize(request: ListJobOrdersWithSizeRequest): ListJobOrdersWithSizeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobOrdersWithSizeWithOptions(request, runtime);
}

model NewJobOrderRequest = {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  callbackUrl?: string(name='CallbackUrl'),
  clientSystem: string(name='ClientSystem'),
  creator?: string(name='Creator'),
  clientUniqueId: string(name='ClientUniqueId'),
  requestId: string(name='RequestId'),
  referUrl?: string(name='ReferUrl'),
  changeType: string(name='ChangeType'),
  title: string(name='Title'),
  params: map[string]any(name='Params'),
}

model NewJobOrderResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  data: {
    orderId: long(name='OrderId'),
  }(name='Data'),
}

async function newJobOrderWithOptions(request: NewJobOrderRequest, runtime: Util.RuntimeOptions): NewJobOrderResponse {
  Util.validateModel(request);
  return doRequest('NewJobOrder', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function newJobOrder(request: NewJobOrderRequest): NewJobOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return newJobOrderWithOptions(request, runtime);
}

model NewNetDeviceInfoRequest = {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  devices: [
    {
      password?: string(name='Password'),
      role?: string(name='Role'),
      serviceTag: string(name='ServiceTag'),
      netPod?: string(name='NetPod'),
      idc?: string(name='Idc'),
      model?: string(name='Model'),
      mgnIp: string(name='MgnIp'),
      hostName: string(name='HostName'),
      manufacturer?: string(name='Manufacturer'),
      logicNetPod?: string(name='LogicNetPod'),
      username?: string(name='Username'),
    }
  ](name='Devices'),
  requestId: string(name='RequestId'),
}

model NewNetDeviceInfoResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  data: [ long ] (name='Data'),
}

async function newNetDeviceInfoWithOptions(request: NewNetDeviceInfoRequest, runtime: Util.RuntimeOptions): NewNetDeviceInfoResponse {
  Util.validateModel(request);
  return doRequest('NewNetDeviceInfo', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function newNetDeviceInfo(request: NewNetDeviceInfoRequest): NewNetDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return newNetDeviceInfoWithOptions(request, runtime);
}

model DeleteNetDeviceInfoRequest = {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  requestId: string(name='RequestId'),
  ids: string(name='Ids'),
}

model DeleteNetDeviceInfoResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  data: [ long ] (name='Data'),
}

async function deleteNetDeviceInfoWithOptions(request: DeleteNetDeviceInfoRequest, runtime: Util.RuntimeOptions): DeleteNetDeviceInfoResponse {
  Util.validateModel(request);
  return doRequest('DeleteNetDeviceInfo', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function deleteNetDeviceInfo(request: DeleteNetDeviceInfoRequest): DeleteNetDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetDeviceInfoWithOptions(request, runtime);
}

model QueryJobOrderRequest = {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  orderId: long(name='OrderId'),
  requestId: string(name='RequestId'),
}

model QueryJobOrderResponse = {
  requestId: string(name='RequestId'),
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function queryJobOrderWithOptions(request: QueryJobOrderRequest, runtime: Util.RuntimeOptions): QueryJobOrderResponse {
  Util.validateModel(request);
  return doRequest('QueryJobOrder', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function queryJobOrder(request: QueryJobOrderRequest): QueryJobOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryJobOrderWithOptions(request, runtime);
}

model GetNetDeviceInfoRequest = {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  cursor?: long(name='Cursor'),
  role?: string(name='Role'),
  serviceTag?: string(name='ServiceTag'),
  idc?: string(name='Idc'),
  pageSize?: integer(name='PageSize'),
  mgnIp?: string(name='MgnIp'),
  manufacturer?: string(name='Manufacturer'),
  logicNetPod?: string(name='LogicNetPod'),
  password?: string(name='Password'),
  netPod?: string(name='NetPod'),
  requestId?: string(name='RequestId'),
  model?: string(name='Model'),
  id?: long(name='Id'),
  hostName?: string(name='HostName'),
  username?: string(name='Username'),
}

model GetNetDeviceInfoResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  data: [ map[string]any ] (name='Data'),
}

async function getNetDeviceInfoWithOptions(request: GetNetDeviceInfoRequest, runtime: Util.RuntimeOptions): GetNetDeviceInfoResponse {
  Util.validateModel(request);
  return doRequest('GetNetDeviceInfo', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getNetDeviceInfo(request: GetNetDeviceInfoRequest): GetNetDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNetDeviceInfoWithOptions(request, runtime);
}

model ListJobOrdersRequest = {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  cursor: long(name='Cursor'),
  handler?: string(name='Handler'),
  clientSystem?: string(name='ClientSystem'),
  pageSize: integer(name='PageSize'),
  title?: string(name='Title'),
  orderStatus?: string(name='OrderStatus'),
  clientUniqueId?: string(name='ClientUniqueId'),
  requestId: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  id?: string(name='Id'),
  endTime?: string(name='EndTime'),
  changingType?: string(name='ChangingType'),
  status?: string(name='Status'),
}

model ListJobOrdersResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  data: [ map[string]any ] (name='Data'),
}

async function listJobOrdersWithOptions(request: ListJobOrdersRequest, runtime: Util.RuntimeOptions): ListJobOrdersResponse {
  Util.validateModel(request);
  return doRequest('ListJobOrders', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function listJobOrders(request: ListJobOrdersRequest): ListJobOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobOrdersWithOptions(request, runtime);
}

model UpdateNetDeviceInfoRequest = {
  appName?: string(name='AppName'),
  appCode?: string(name='AppCode'),
  devices: [
    {
      password?: string(name='Password'),
      role?: string(name='Role'),
      serviceTag: string(name='ServiceTag'),
      netPod?: string(name='NetPod'),
      idc?: string(name='Idc'),
      model?: string(name='Model'),
      id: long(name='Id'),
      mgnIp?: string(name='MgnIp'),
      hostName: string(name='HostName'),
      manufacturer: string(name='Manufacturer'),
      logicNetPod?: string(name='LogicNetPod'),
      username?: string(name='Username'),
    }
  ](name='Devices'),
  requestId: string(name='RequestId'),
}

model UpdateNetDeviceInfoResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  data: [ long ] (name='Data'),
}

async function updateNetDeviceInfoWithOptions(request: UpdateNetDeviceInfoRequest, runtime: Util.RuntimeOptions): UpdateNetDeviceInfoResponse {
  Util.validateModel(request);
  return doRequest('UpdateNetDeviceInfo', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function updateNetDeviceInfo(request: UpdateNetDeviceInfoRequest): UpdateNetDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNetDeviceInfoWithOptions(request, runtime);
}

model PutAppConfigAndSaveRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  configureType: string(name='ConfigureType'),
  data: string(name='Data'),
  apMac: string(name='ApMac'),
  currentTime: long(name='CurrentTime'),
}

model PutAppConfigAndSaveResponse = {
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  requestId: string(name='RequestId'),
}

async function putAppConfigAndSaveWithOptions(request: PutAppConfigAndSaveRequest, runtime: Util.RuntimeOptions): PutAppConfigAndSaveResponse {
  Util.validateModel(request);
  return doRequest('PutAppConfigAndSave', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function putAppConfigAndSave(request: PutAppConfigAndSaveRequest): PutAppConfigAndSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  return putAppConfigAndSaveWithOptions(request, runtime);
}

model RepairApRadioRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  apMac: string(name='ApMac'),
  radioIndex: string(name='RadioIndex'),
}

model RepairApRadioResponse = {
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: boolean(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  requestId: string(name='RequestId'),
}

async function repairApRadioWithOptions(request: RepairApRadioRequest, runtime: Util.RuntimeOptions): RepairApRadioResponse {
  Util.validateModel(request);
  return doRequest('RepairApRadio', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function repairApRadio(request: RepairApRadioRequest): RepairApRadioResponse {
  var runtime = new Util.RuntimeOptions{};
  return repairApRadioWithOptions(request, runtime);
}

model RebootApRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
}

model RebootApResponse = {
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  requestId: string(name='RequestId'),
}

async function rebootApWithOptions(request: RebootApRequest, runtime: Util.RuntimeOptions): RebootApResponse {
  Util.validateModel(request);
  return doRequest('RebootAp', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function rebootAp(request: RebootApRequest): RebootApResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootApWithOptions(request, runtime);
}

model SaveApRadioConfigRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  htmode: string(name='Htmode'),
  frag: integer(name='Frag'),
  minrate: integer(name='Minrate'),
  probereq: string(name='Probereq'),
  channel: string(name='Channel'),
  shortgi: string(name='Shortgi'),
  hwmode: string(name='Hwmode'),
  mgmtRate: integer(name='MgmtRate'),
  bcastRate: integer(name='BcastRate'),
  uapsd: integer(name='Uapsd'),
  beaconInt: integer(name='BeaconInt'),
  rts: integer(name='Rts'),
  requireMode?: string(name='RequireMode'),
  mcastRate: integer(name='McastRate'),
  txpower: string(name='Txpower'),
  noscan: string(name='Noscan'),
  disabled: string(name='Disabled'),
  id: long(name='Id'),
}

model SaveApRadioConfigResponse = {
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  requestId: string(name='RequestId'),
}

async function saveApRadioConfigWithOptions(request: SaveApRadioConfigRequest, runtime: Util.RuntimeOptions): SaveApRadioConfigResponse {
  Util.validateModel(request);
  return doRequest('SaveApRadioConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function saveApRadioConfig(request: SaveApRadioConfigRequest): SaveApRadioConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveApRadioConfigWithOptions(request, runtime);
}

model GetRadioRunHistoryTimeSerRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  start: long(name='Start'),
  apMac: string(name='ApMac'),
  end: long(name='End'),
}

model GetRadioRunHistoryTimeSerResponse = {
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  requestId: string(name='RequestId'),
}

async function getRadioRunHistoryTimeSerWithOptions(request: GetRadioRunHistoryTimeSerRequest, runtime: Util.RuntimeOptions): GetRadioRunHistoryTimeSerResponse {
  Util.validateModel(request);
  return doRequest('GetRadioRunHistoryTimeSer', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getRadioRunHistoryTimeSer(request: GetRadioRunHistoryTimeSerRequest): GetRadioRunHistoryTimeSerResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRadioRunHistoryTimeSerWithOptions(request, runtime);
}

model GetApRunHistoryTimeSerRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  start: long(name='Start'),
  apMac: string(name='ApMac'),
  end: long(name='End'),
}

model GetApRunHistoryTimeSerResponse = {
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  requestId: string(name='RequestId'),
}

async function getApRunHistoryTimeSerWithOptions(request: GetApRunHistoryTimeSerRequest, runtime: Util.RuntimeOptions): GetApRunHistoryTimeSerResponse {
  Util.validateModel(request);
  return doRequest('GetApRunHistoryTimeSer', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getApRunHistoryTimeSer(request: GetApRunHistoryTimeSerRequest): GetApRunHistoryTimeSerResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApRunHistoryTimeSerWithOptions(request, runtime);
}

model GetGroupMiscAggTimeSerRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  start: long(name='Start'),
  end: long(name='End'),
  apgroupUuid: string(name='ApgroupUuid'),
}

model GetGroupMiscAggTimeSerResponse = {
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  requestId: string(name='RequestId'),
}

async function getGroupMiscAggTimeSerWithOptions(request: GetGroupMiscAggTimeSerRequest, runtime: Util.RuntimeOptions): GetGroupMiscAggTimeSerResponse {
  Util.validateModel(request);
  return doRequest('GetGroupMiscAggTimeSer', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getGroupMiscAggTimeSer(request: GetGroupMiscAggTimeSerRequest): GetGroupMiscAggTimeSerResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGroupMiscAggTimeSerWithOptions(request, runtime);
}

model GetApInfoFromPoolRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
}

model GetApInfoFromPoolResponse = {
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function getApInfoFromPoolWithOptions(request: GetApInfoFromPoolRequest, runtime: Util.RuntimeOptions): GetApInfoFromPoolResponse {
  Util.validateModel(request);
  return doRequest('GetApInfoFromPool', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getApInfoFromPool(request: GetApInfoFromPoolRequest): GetApInfoFromPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApInfoFromPoolWithOptions(request, runtime);
}

model KickStaRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
}

model KickStaResponse = {
  data: string(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function kickStaWithOptions(request: KickStaRequest, runtime: Util.RuntimeOptions): KickStaResponse {
  Util.validateModel(request);
  return doRequest('KickSta', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function kickSta(request: KickStaRequest): KickStaResponse {
  var runtime = new Util.RuntimeOptions{};
  return kickStaWithOptions(request, runtime);
}

model DeleteApgroupConfigRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
}

model DeleteApgroupConfigResponse = {
  data: string(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function deleteApgroupConfigWithOptions(request: DeleteApgroupConfigRequest, runtime: Util.RuntimeOptions): DeleteApgroupConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteApgroupConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function deleteApgroupConfig(request: DeleteApgroupConfigRequest): DeleteApgroupConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApgroupConfigWithOptions(request, runtime);
}

model GetApDetailedConfigRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
}

model GetApDetailedConfigResponse = {
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function getApDetailedConfigWithOptions(request: GetApDetailedConfigRequest, runtime: Util.RuntimeOptions): GetApDetailedConfigResponse {
  Util.validateModel(request);
  return doRequest('GetApDetailedConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getApDetailedConfig(request: GetApDetailedConfigRequest): GetApDetailedConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApDetailedConfigWithOptions(request, runtime);
}

model GetApDetailStatusRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  needRadioStatus: boolean(name='NeedRadioStatus'),
  mac: string(name='Mac'),
  needApgroupInfo: boolean(name='NeedApgroupInfo'),
}

model GetApDetailStatusResponse = {
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function getApDetailStatusWithOptions(request: GetApDetailStatusRequest, runtime: Util.RuntimeOptions): GetApDetailStatusResponse {
  Util.validateModel(request);
  return doRequest('GetApDetailStatus', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getApDetailStatus(request: GetApDetailStatusRequest): GetApDetailStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApDetailStatusWithOptions(request, runtime);
}

model DeleteApSsidConfigRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  apMac: string(name='ApMac'),
  ssid: string(name='Ssid'),
  radioIndex: string(name='RadioIndex'),
}

model DeleteApSsidConfigResponse = {
  data: string(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function deleteApSsidConfigWithOptions(request: DeleteApSsidConfigRequest, runtime: Util.RuntimeOptions): DeleteApSsidConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteApSsidConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function deleteApSsidConfig(request: DeleteApSsidConfigRequest): DeleteApSsidConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApSsidConfigWithOptions(request, runtime);
}

model GetApgroupIdRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
}

model GetApgroupIdResponse = {
  data: string(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function getApgroupIdWithOptions(request: GetApgroupIdRequest, runtime: Util.RuntimeOptions): GetApgroupIdResponse {
  Util.validateModel(request);
  return doRequest('GetApgroupId', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getApgroupId(request: GetApgroupIdRequest): GetApgroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApgroupIdWithOptions(request, runtime);
}

model SetApAddressRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  apCityName?: string(name='ApCityName'),
  lng?: string(name='Lng'),
  apCampusName?: string(name='ApCampusName'),
  apGroup?: string(name='ApGroup'),
  language: string(name='Language'),
  apAreaName?: string(name='ApAreaName'),
  apProvinceName?: string(name='ApProvinceName'),
  mac: string(name='Mac'),
  apName?: string(name='ApName'),
  apUnitName?: string(name='ApUnitName'),
  apFloor?: string(name='ApFloor'),
  apBuildingName?: string(name='ApBuildingName'),
  apUnitId?: long(name='ApUnitId'),
  apNationName?: string(name='ApNationName'),
  lat?: string(name='Lat'),
  direction?: string(name='Direction'),
}

model SetApAddressResponse = {
  data: string(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function setApAddressWithOptions(request: SetApAddressRequest, runtime: Util.RuntimeOptions): SetApAddressResponse {
  Util.validateModel(request);
  return doRequest('SetApAddress', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function setApAddress(request: SetApAddressRequest): SetApAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApAddressWithOptions(request, runtime);
}

model SaveApSsidConfigRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  nasid?: string(name='Nasid'),
  ignoreWeakProbe?: integer(name='IgnoreWeakProbe'),
  fourthAuthPort?: integer(name='FourthAuthPort'),
  cirType?: integer(name='CirType'),
  ieee80211r?: integer(name='Ieee80211r'),
  mobilityDomain?: string(name='MobilityDomain'),
  daePort?: integer(name='DaePort'),
  fourthAuthServer?: string(name='FourthAuthServer'),
  secondaryAcctSecret?: string(name='SecondaryAcctSecret'),
  type?: integer(name='Type'),
  fourthAuthSecret?: string(name='FourthAuthSecret'),
  acctStatusServerWork?: integer(name='AcctStatusServerWork'),
  ieee80211w: string(name='Ieee80211w'),
  ssidLb: integer(name='SsidLb'),
  authPort?: integer(name='AuthPort'),
  authServer?: string(name='AuthServer'),
  daeSecret?: string(name='DaeSecret'),
  id?: long(name='Id'),
  cirStep?: long(name='CirStep'),
  authStatusServerWork?: integer(name='AuthStatusServerWork'),
  secondaryAuthPort?: integer(name='SecondaryAuthPort'),
  secondaryAuthSecret?: string(name='SecondaryAuthSecret'),
  shortPreamble: string(name='ShortPreamble'),
  cirUl?: long(name='CirUl'),
  daeClient?: string(name='DaeClient'),
  liteEffect?: boolean(name='LiteEffect'),
  thirdAuthSecret?: string(name='ThirdAuthSecret'),
  thirdAuthPort?: integer(name='ThirdAuthPort'),
  acctServer?: string(name='AcctServer'),
  secondaryAuthServer?: string(name='SecondaryAuthServer'),
  encKey?: string(name='EncKey'),
  acctSecret?: string(name='AcctSecret'),
  authCache: string(name='AuthCache'),
  multicastForward?: integer(name='MulticastForward'),
  secondaryAcctPort?: integer(name='SecondaryAcctPort'),
  radioIndex: string(name='RadioIndex'),
  ndProxyWork?: integer(name='NdProxyWork'),
  hidden: string(name='Hidden'),
  maxInactivity: integer(name='MaxInactivity'),
  thirdAuthServer?: string(name='ThirdAuthServer'),
  sendConfigToAp?: boolean(name='SendConfigToAp'),
  ssid: string(name='Ssid'),
  cir?: long(name='Cir'),
  mac: string(name='Mac'),
  network: integer(name='Network'),
  isolate: string(name='Isolate'),
  disassocWeakRssi: integer(name='DisassocWeakRssi'),
  apAssetId?: long(name='ApAssetId'),
  encryption: string(name='Encryption'),
  vlanDhcp: integer(name='VlanDhcp'),
  wmm: string(name='Wmm'),
  dynamicVlan: integer(name='DynamicVlan'),
  disabled: string(name='Disabled'),
  maxassoc: integer(name='Maxassoc'),
  acctPort?: integer(name='AcctPort'),
  authSecret?: string(name='AuthSecret'),
  ftOverDs?: integer(name='FtOverDs'),
  arpProxyEnable?: integer(name='ArpProxyEnable'),
  disassocLowAck: string(name='DisassocLowAck'),
  secondaryAcctServer?: string(name='SecondaryAcctServer'),
  ownip?: string(name='Ownip'),
}

model SaveApSsidConfigResponse = {
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function saveApSsidConfigWithOptions(request: SaveApSsidConfigRequest, runtime: Util.RuntimeOptions): SaveApSsidConfigResponse {
  Util.validateModel(request);
  return doRequest('SaveApSsidConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function saveApSsidConfig(request: SaveApSsidConfigRequest): SaveApSsidConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveApSsidConfigWithOptions(request, runtime);
}

model GetApStatusByGroupIdRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  cursor: long(name='Cursor'),
  apgroupId: string(name='ApgroupId'),
  pageSize: integer(name='PageSize'),
}

model GetApStatusByGroupIdResponse = {
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function getApStatusByGroupIdWithOptions(request: GetApStatusByGroupIdRequest, runtime: Util.RuntimeOptions): GetApStatusByGroupIdResponse {
  Util.validateModel(request);
  return doRequest('GetApStatusByGroupId', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getApStatusByGroupId(request: GetApStatusByGroupIdRequest): GetApStatusByGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApStatusByGroupIdWithOptions(request, runtime);
}

model EffectApgroupConfigRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
}

model EffectApgroupConfigResponse = {
  data: string(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function effectApgroupConfigWithOptions(request: EffectApgroupConfigRequest, runtime: Util.RuntimeOptions): EffectApgroupConfigResponse {
  Util.validateModel(request);
  return doRequest('EffectApgroupConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function effectApgroupConfig(request: EffectApgroupConfigRequest): EffectApgroupConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return effectApgroupConfigWithOptions(request, runtime);
}

model RegisterApAssetRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  id?: long(name='Id'),
  mac: string(name='Mac'),
  apGroupUUId: string(name='ApGroupUUId'),
  serialNo: string(name='SerialNo'),
}

model RegisterApAssetResponse = {
  data: string(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function registerApAssetWithOptions(request: RegisterApAssetRequest, runtime: Util.RuntimeOptions): RegisterApAssetResponse {
  Util.validateModel(request);
  return doRequest('RegisterApAsset', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function registerApAsset(request: RegisterApAssetRequest): RegisterApAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerApAssetWithOptions(request, runtime);
}

model EffectApConfigRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
}

model EffectApConfigResponse = {
  data: string(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function effectApConfigWithOptions(request: EffectApConfigRequest, runtime: Util.RuntimeOptions): EffectApConfigResponse {
  Util.validateModel(request);
  return doRequest('EffectApConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function effectApConfig(request: EffectApConfigRequest): EffectApConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return effectApConfigWithOptions(request, runtime);
}

model SetApNameRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  name: string(name='Name'),
  apMac: string(name='ApMac'),
}

model SetApNameResponse = {
  data: string(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function setApNameWithOptions(request: SetApNameRequest, runtime: Util.RuntimeOptions): SetApNameResponse {
  Util.validateModel(request);
  return doRequest('SetApName', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function setApName(request: SetApNameRequest): SetApNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApNameWithOptions(request, runtime);
}

model SaveApgroupSsidConfigRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  newSsid: string(name='NewSsid'),
  nasid?: string(name='Nasid'),
  ignoreWeakProbe?: integer(name='IgnoreWeakProbe'),
  daePort?: integer(name='DaePort'),
  apgroupId: string(name='ApgroupId'),
  hidden?: string(name='Hidden'),
  secondaryAcctSecret?: string(name='SecondaryAcctSecret'),
  binding: string(name='Binding'),
  maxInactivity?: integer(name='MaxInactivity'),
  type?: integer(name='Type'),
  ssid: string(name='Ssid'),
  cir?: long(name='Cir'),
  network: integer(name='Network'),
  ieee80211w?: string(name='Ieee80211w'),
  isolate?: string(name='Isolate'),
  ssidLb?: integer(name='SsidLb'),
  disassocWeakRssi?: integer(name='DisassocWeakRssi'),
  encryption: string(name='Encryption'),
  vlanDhcp?: integer(name='VlanDhcp'),
  authPort?: integer(name='AuthPort'),
  wmm?: string(name='Wmm'),
  dynamicVlan?: integer(name='DynamicVlan'),
  authServer?: string(name='AuthServer'),
  disabled?: string(name='Disabled'),
  daeSecret?: string(name='DaeSecret'),
  id?: long(name='Id'),
  maxassoc?: string(name='Maxassoc'),
  secondaryAuthPort?: integer(name='SecondaryAuthPort'),
  secondaryAuthSecret?: string(name='SecondaryAuthSecret'),
  acctPort?: integer(name='AcctPort'),
  shortPreamble?: string(name='ShortPreamble'),
  liteEffect?: boolean(name='LiteEffect'),
  daeClient?: string(name='DaeClient'),
  acctServer?: string(name='AcctServer'),
  secondaryAuthServer?: string(name='SecondaryAuthServer'),
  encKey?: string(name='EncKey'),
  acctSecret?: string(name='AcctSecret'),
  authSecret?: string(name='AuthSecret'),
  effect?: boolean(name='Effect'),
  authCache?: string(name='AuthCache'),
  multicastForward?: integer(name='MulticastForward'),
  secondaryAcctPort?: integer(name='SecondaryAcctPort'),
  disassocLowAck?: string(name='DisassocLowAck'),
  secondaryAcctServer?: string(name='SecondaryAcctServer'),
  ownip?: string(name='Ownip'),
}

model SaveApgroupSsidConfigResponse = {
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  data: [ long ] (name='Data'),
}

async function saveApgroupSsidConfigWithOptions(request: SaveApgroupSsidConfigRequest, runtime: Util.RuntimeOptions): SaveApgroupSsidConfigResponse {
  Util.validateModel(request);
  return doRequest('SaveApgroupSsidConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function saveApgroupSsidConfig(request: SaveApgroupSsidConfigRequest): SaveApgroupSsidConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveApgroupSsidConfigWithOptions(request, runtime);
}

model GetStaStatusListByApRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  cursor: long(name='Cursor'),
  pageSize: integer(name='PageSize'),
  apMac: string(name='ApMac'),
}

model GetStaStatusListByApResponse = {
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function getStaStatusListByApWithOptions(request: GetStaStatusListByApRequest, runtime: Util.RuntimeOptions): GetStaStatusListByApResponse {
  Util.validateModel(request);
  return doRequest('GetStaStatusListByAp', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getStaStatusListByAp(request: GetStaStatusListByApRequest): GetStaStatusListByApResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStaStatusListByApWithOptions(request, runtime);
}

model GetApAddressByMacRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  language: string(name='Language'),
  mac: string(name='Mac'),
}

model GetApAddressByMacResponse = {
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function getApAddressByMacWithOptions(request: GetApAddressByMacRequest, runtime: Util.RuntimeOptions): GetApAddressByMacResponse {
  Util.validateModel(request);
  return doRequest('GetApAddressByMac', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getApAddressByMac(request: GetApAddressByMacRequest): GetApAddressByMacResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApAddressByMacWithOptions(request, runtime);
}

model AddApListToApgroupRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  apMacList: map[string]any(name='ApMacList'),
  apGroupId: string(name='ApGroupId'),
}

model AddApListToApgroupResponse = {
  data: string(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function addApListToApgroupWithOptions(request: AddApListToApgroupRequest, runtime: Util.RuntimeOptions): AddApListToApgroupResponse {
  Util.validateModel(request);
  return doRequest('AddApListToApgroup', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function addApListToApgroup(request: AddApListToApgroupRequest): AddApListToApgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addApListToApgroupWithOptions(request, runtime);
}

model GetApgroupSsidConfigRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
}

model GetApgroupSsidConfigResponse = {
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
  data: [ map[string]any ] (name='Data'),
}

async function getApgroupSsidConfigWithOptions(request: GetApgroupSsidConfigRequest, runtime: Util.RuntimeOptions): GetApgroupSsidConfigResponse {
  Util.validateModel(request);
  return doRequest('GetApgroupSsidConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getApgroupSsidConfig(request: GetApgroupSsidConfigRequest): GetApgroupSsidConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApgroupSsidConfigWithOptions(request, runtime);
}

model NewApgroupConfigRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
  parentApgroupId: string(name='ParentApgroupId'),
  name: string(name='Name'),
}

model NewApgroupConfigResponse = {
  data: string(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function newApgroupConfigWithOptions(request: NewApgroupConfigRequest, runtime: Util.RuntimeOptions): NewApgroupConfigResponse {
  Util.validateModel(request);
  return doRequest('NewApgroupConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function newApgroupConfig(request: NewApgroupConfigRequest): NewApgroupConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return newApgroupConfigWithOptions(request, runtime);
}

model GetApAssetRequest = {
  appName: string(name='AppName'),
  appCode: string(name='AppCode'),
}

model GetApAssetResponse = {
  data: map[string]any(name='Data'),
  isSuccess: boolean(name='IsSuccess'),
  errorCode: integer(name='ErrorCode'),
  errorMessage: string(name='ErrorMessage'),
}

async function getApAssetWithOptions(request: GetApAssetRequest, runtime: Util.RuntimeOptions): GetApAssetResponse {
  Util.validateModel(request);
  return doRequest('GetApAsset', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getApAsset(request: GetApAssetRequest): GetApAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApAssetWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
