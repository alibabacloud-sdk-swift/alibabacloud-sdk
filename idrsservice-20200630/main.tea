import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'idrsservice.aliyuncs.com',
    ap-northeast-2-pop = 'idrsservice.aliyuncs.com',
    ap-south-1 = 'idrsservice.aliyuncs.com',
    ap-southeast-1 = 'idrsservice.aliyuncs.com',
    ap-southeast-2 = 'idrsservice.aliyuncs.com',
    ap-southeast-3 = 'idrsservice.aliyuncs.com',
    ap-southeast-5 = 'idrsservice.aliyuncs.com',
    cn-beijing = 'idrsservice.aliyuncs.com',
    cn-beijing-finance-1 = 'idrsservice.aliyuncs.com',
    cn-beijing-finance-pop = 'idrsservice.aliyuncs.com',
    cn-beijing-gov-1 = 'idrsservice.aliyuncs.com',
    cn-beijing-nu16-b01 = 'idrsservice.aliyuncs.com',
    cn-chengdu = 'idrsservice.aliyuncs.com',
    cn-edge-1 = 'idrsservice.aliyuncs.com',
    cn-fujian = 'idrsservice.aliyuncs.com',
    cn-haidian-cm12-c01 = 'idrsservice.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'idrsservice.aliyuncs.com',
    cn-hangzhou-finance = 'idrsservice.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'idrsservice.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'idrsservice.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'idrsservice.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'idrsservice.aliyuncs.com',
    cn-hangzhou-test-306 = 'idrsservice.aliyuncs.com',
    cn-hongkong = 'idrsservice.aliyuncs.com',
    cn-hongkong-finance-pop = 'idrsservice.aliyuncs.com',
    cn-huhehaote = 'idrsservice.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'idrsservice.aliyuncs.com',
    cn-north-2-gov-1 = 'idrsservice.aliyuncs.com',
    cn-qingdao = 'idrsservice.aliyuncs.com',
    cn-qingdao-nebula = 'idrsservice.aliyuncs.com',
    cn-shanghai = 'idrsservice.aliyuncs.com',
    cn-shanghai-et15-b01 = 'idrsservice.aliyuncs.com',
    cn-shanghai-et2-b01 = 'idrsservice.aliyuncs.com',
    cn-shanghai-inner = 'idrsservice.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'idrsservice.aliyuncs.com',
    cn-shenzhen = 'idrsservice.aliyuncs.com',
    cn-shenzhen-finance-1 = 'idrsservice.aliyuncs.com',
    cn-shenzhen-inner = 'idrsservice.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'idrsservice.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'idrsservice.aliyuncs.com',
    cn-wuhan = 'idrsservice.aliyuncs.com',
    cn-wulanchabu = 'idrsservice.aliyuncs.com',
    cn-yushanfang = 'idrsservice.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'idrsservice.aliyuncs.com',
    cn-zhangjiakou = 'idrsservice.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'idrsservice.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'idrsservice.aliyuncs.com',
    eu-central-1 = 'idrsservice.aliyuncs.com',
    eu-west-1 = 'idrsservice.aliyuncs.com',
    eu-west-1-oxs = 'idrsservice.aliyuncs.com',
    me-east-1 = 'idrsservice.aliyuncs.com',
    rus-west-1-pop = 'idrsservice.aliyuncs.com',
    us-east-1 = 'idrsservice.aliyuncs.com',
    us-west-1 = 'idrsservice.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('idrsservice', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model ListTasksRequest = {
  pageIndex?: integer(name='PageIndex'),
  pageSize?: integer(name='PageSize'),
  taskGroupId?: string(name='TaskGroupId'),
}

model ListTasksResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    totalElements: long(name='TotalElements'),
    totalPages: integer(name='TotalPages'),
    items: [
      {
        createdAt: string(name='CreatedAt'),
        id: string(name='Id'),
        status: string(name='Status'),
        videoMetaUrl: string(name='VideoMetaUrl'),
        videoUrl: string(name='VideoUrl'),
      }
    ](name='Items'),
  }(name='Data'),
}

async function listTasksWithOptions(request: ListTasksRequest, runtime: Util.RuntimeOptions): ListTasksResponse {
  Util.validateModel(request);
  return doRequest('ListTasks', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTasksWithOptions(request, runtime);
}

model DeleteAppRequest = {
  id: string(name='Id'),
}

model DeleteAppResponse = {
  code: string(name='Code'),
  data: map[string]any(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function deleteAppWithOptions(request: DeleteAppRequest, runtime: Util.RuntimeOptions): DeleteAppResponse {
  Util.validateModel(request);
  return doRequest('DeleteApp', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppWithOptions(request, runtime);
}

model ListAppsRequest = {
  pageIndex?: integer(name='PageIndex'),
  pageSize?: integer(name='PageSize'),
}

model ListAppsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    totalElements: long(name='TotalElements'),
    totalPages: integer(name='TotalPages'),
    items: [
      {
        createdAt: string(name='CreatedAt'),
        departmentId: string(name='DepartmentId'),
        departmentName: string(name='DepartmentName'),
        disabled: boolean(name='Disabled'),
        id: string(name='Id'),
        name: string(name='Name'),
        packageName: string(name='PackageName'),
      }
    ](name='Items'),
  }(name='Data'),
}

async function listAppsWithOptions(request: ListAppsRequest, runtime: Util.RuntimeOptions): ListAppsResponse {
  Util.validateModel(request);
  return doRequest('ListApps', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppsWithOptions(request, runtime);
}

model UpdateAppRequest = {
  id: string(name='Id'),
  name?: string(name='Name'),
  disabled?: boolean(name='Disabled'),
  packageName?: string(name='PackageName'),
  departmentId?: string(name='DepartmentId'),
}

model UpdateAppResponse = {
  code: string(name='Code'),
  data: map[string]any(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function updateAppWithOptions(request: UpdateAppRequest, runtime: Util.RuntimeOptions): UpdateAppResponse {
  Util.validateModel(request);
  return doRequest('UpdateApp', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function updateApp(request: UpdateAppRequest): UpdateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppWithOptions(request, runtime);
}

model ListTaskGroupsRequest = {
  pageIndex?: integer(name='PageIndex'),
  pageSize?: integer(name='PageSize'),
  status?: string(name='Status'),
}

model ListTaskGroupsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    totalElements: long(name='TotalElements'),
    totalPages: integer(name='TotalPages'),
    items: [
      {
        completedTasks: integer(name='CompletedTasks'),
        createdAt: string(name='CreatedAt'),
        id: string(name='Id'),
        name: string(name='Name'),
        ruleId: string(name='RuleId'),
        ruleName: string(name='RuleName'),
        status: string(name='Status'),
        totalTasks: integer(name='TotalTasks'),
        taskIds: [ string ](name='TaskIds'),
      }
    ](name='Items'),
  }(name='Data'),
}

async function listTaskGroupsWithOptions(request: ListTaskGroupsRequest, runtime: Util.RuntimeOptions): ListTaskGroupsResponse {
  Util.validateModel(request);
  return doRequest('ListTaskGroups', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function listTaskGroups(request: ListTaskGroupsRequest): ListTaskGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskGroupsWithOptions(request, runtime);
}

model ListRulesRequest = {
  pageIndex?: integer(name='PageIndex'),
  pageSize?: integer(name='PageSize'),
}

model ListRulesResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    totalElements: long(name='TotalElements'),
    totalPages: integer(name='TotalPages'),
    items: [
      {
        content: string(name='Content'),
        createdAt: string(name='CreatedAt'),
        id: string(name='Id'),
        name: string(name='Name'),
      }
    ](name='Items'),
  }(name='Data'),
}

async function listRulesWithOptions(request: ListRulesRequest, runtime: Util.RuntimeOptions): ListRulesResponse {
  Util.validateModel(request);
  return doRequest('ListRules', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function listRules(request: ListRulesRequest): ListRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRulesWithOptions(request, runtime);
}

model ListDetectionsRequest = {
  createDateFrom?: string(name='CreateDateFrom'),
  createDateTo?: string(name='CreateDateTo'),
  departmentId?: string(name='DepartmentId'),
  pageIndex?: integer(name='PageIndex'),
  pageSize?: integer(name='PageSize'),
  recordingType?: string(name='RecordingType'),
  ruleId?: string(name='RuleId'),
}

model ListDetectionsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  errors: [
    {
      field: string(name='Field'),
      message: string(name='Message'),
    }
  ](name='Errors'),
  data: {
    totalElements: long(name='TotalElements'),
    totalPages: integer(name='TotalPages'),
    items: [
      {
        createdAt: string(name='CreatedAt'),
        departmentId: string(name='DepartmentId'),
        departmentName: string(name='DepartmentName'),
        id: string(name='Id'),
        recordingType: string(name='RecordingType'),
        ruleId: string(name='RuleId'),
        ruleName: string(name='RuleName'),
        status: string(name='Status'),
        tasks: [
          {
            createdAt: string(name='CreatedAt'),
            id: string(name='Id'),
            status: string(name='Status'),
            videoMetaUrl: string(name='VideoMetaUrl'),
            videoUrl: string(name='VideoUrl'),
          }
        ](name='Tasks'),
      }
    ](name='Items'),
  }(name='Data'),
}

async function listDetectionsWithOptions(request: ListDetectionsRequest, runtime: Util.RuntimeOptions): ListDetectionsResponse {
  Util.validateModel(request);
  return doRequest('ListDetections', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function listDetections(request: ListDetectionsRequest): ListDetectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDetectionsWithOptions(request, runtime);
}

model CreateTaskGroupRequest = {
  day?: [ integer ](name='Day'),
  appId?: string(name='AppId'),
  expireAt?: string(name='ExpireAt'),
  groupName?: string(name='GroupName'),
  ruleId: string(name='RuleId'),
  runnableTimeFrom?: string(name='RunnableTimeFrom'),
  runnableTimeTo?: string(name='RunnableTimeTo'),
  triggerPeriod?: string(name='TriggerPeriod'),
  videoUrl: [ string ](name='VideoUrl'),
  clientToken?: string(name='ClientToken'),
}

model CreateTaskGroupResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    completedTasks: integer(name='CompletedTasks'),
    createdAt: string(name='CreatedAt'),
    id: string(name='Id'),
    name: string(name='Name'),
    ruleId: string(name='RuleId'),
    ruleName: string(name='RuleName'),
    status: string(name='Status'),
    totalTasks: integer(name='TotalTasks'),
    taskIds: [ string ](name='TaskIds'),
  }(name='Data'),
}

async function createTaskGroupWithOptions(request: CreateTaskGroupRequest, runtime: Util.RuntimeOptions): CreateTaskGroupResponse {
  Util.validateModel(request);
  return doRequest('CreateTaskGroup', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function createTaskGroup(request: CreateTaskGroupRequest): CreateTaskGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTaskGroupWithOptions(request, runtime);
}

model GetTaskGroupRequest = {
  id: string(name='Id'),
}

model GetTaskGroupResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    completedTasks: integer(name='CompletedTasks'),
    createdAt: string(name='CreatedAt'),
    id: string(name='Id'),
    name: string(name='Name'),
    ruleId: string(name='RuleId'),
    ruleName: string(name='RuleName'),
    status: string(name='Status'),
    totalTasks: integer(name='TotalTasks'),
    taskIds: [ string ](name='TaskIds'),
  }(name='Data'),
}

async function getTaskGroupWithOptions(request: GetTaskGroupRequest, runtime: Util.RuntimeOptions): GetTaskGroupResponse {
  Util.validateModel(request);
  return doRequest('GetTaskGroup', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function getTaskGroup(request: GetTaskGroupRequest): GetTaskGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskGroupWithOptions(request, runtime);
}

model GetRuleRequest = {
  id: string(name='Id'),
}

model GetRuleResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    content: string(name='Content'),
    createdAt: string(name='CreatedAt'),
    id: string(name='Id'),
    name: string(name='Name'),
  }(name='Data'),
}

async function getRuleWithOptions(request: GetRuleRequest, runtime: Util.RuntimeOptions): GetRuleResponse {
  Util.validateModel(request);
  return doRequest('GetRule', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function getRule(request: GetRuleRequest): GetRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRuleWithOptions(request, runtime);
}

model GetDetectionRequest = {
  id: string(name='Id'),
}

model GetDetectionResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    createdAt: string(name='CreatedAt'),
    departmentId: string(name='DepartmentId'),
    departmentName: string(name='DepartmentName'),
    id: string(name='Id'),
    recordingType: string(name='RecordingType'),
    ruleId: string(name='RuleId'),
    ruleName: string(name='RuleName'),
    status: string(name='Status'),
    tasks: [
      {
        createdAt: string(name='CreatedAt'),
        id: string(name='Id'),
        status: string(name='Status'),
        videoMetaUrl: string(name='VideoMetaUrl'),
        videoUrl: string(name='VideoUrl'),
      }
    ](name='Tasks'),
  }(name='Data'),
}

async function getDetectionWithOptions(request: GetDetectionRequest, runtime: Util.RuntimeOptions): GetDetectionResponse {
  Util.validateModel(request);
  return doRequest('GetDetection', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function getDetection(request: GetDetectionRequest): GetDetectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDetectionWithOptions(request, runtime);
}

model ListTaskItemsRequest = {
  taskId: string(name='TaskId'),
}

model ListTaskItemsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: [
    {
      createdAt: string(name='CreatedAt'),
      message: string(name='Message'),
      name: string(name='Name'),
      output: string(name='Output'),
      segmentSeq: long(name='SegmentSeq'),
      status: string(name='Status'),
    }
  ](name='Data'),
}

async function listTaskItemsWithOptions(request: ListTaskItemsRequest, runtime: Util.RuntimeOptions): ListTaskItemsResponse {
  Util.validateModel(request);
  return doRequest('ListTaskItems', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function listTaskItems(request: ListTaskItemsRequest): ListTaskItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskItemsWithOptions(request, runtime);
}

model GetUserRequest = {
  id: string(name='Id'),
}

model GetUserResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    createdAt: string(name='CreatedAt'),
    email: string(name='Email'),
    id: string(name='Id'),
    name: string(name='Name'),
    phoneNumber: string(name='PhoneNumber'),
    role: string(name='Role'),
    source: string(name='Source'),
    updatedAt: string(name='UpdatedAt'),
    username: string(name='Username'),
    departments: [
      {
        description: string(name='Description'),
        gmtCreate: string(name='GmtCreate'),
        gmtModified: string(name='GmtModified'),
        id: string(name='Id'),
        name: string(name='Name'),
      }
    ](name='Departments'),
  }(name='Data'),
}

async function getUserWithOptions(request: GetUserRequest, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(request);
  return doRequest('GetUser', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserWithOptions(request, runtime);
}

model CreateRuleRequest = {
  name: string(name='Name'),
  content: string(name='Content'),
  clientToken?: string(name='ClientToken'),
}

model CreateRuleResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    content: string(name='Content'),
    id: string(name='Id'),
    name: string(name='Name'),
  }(name='Data'),
}

async function createRuleWithOptions(request: CreateRuleRequest, runtime: Util.RuntimeOptions): CreateRuleResponse {
  Util.validateModel(request);
  return doRequest('CreateRule', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRuleWithOptions(request, runtime);
}

model CreateUserDepartmentsRequest = {
  userId: [ string ](name='UserId'),
  departmentId: [ string ](name='DepartmentId'),
}

model CreateUserDepartmentsResponse = {
  code: string(name='Code'),
  data: map[string]any(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function createUserDepartmentsWithOptions(request: CreateUserDepartmentsRequest, runtime: Util.RuntimeOptions): CreateUserDepartmentsResponse {
  Util.validateModel(request);
  return doRequest('CreateUserDepartments', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function createUserDepartments(request: CreateUserDepartmentsRequest): CreateUserDepartmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserDepartmentsWithOptions(request, runtime);
}

model ListRolesRequest = {
}

model ListRolesResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: [ string ] (name='Data'),
}

async function listRolesWithOptions(request: ListRolesRequest, runtime: Util.RuntimeOptions): ListRolesResponse {
  Util.validateModel(request);
  return doRequest('ListRoles', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function listRoles(request: ListRolesRequest): ListRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRolesWithOptions(request, runtime);
}

model UpdateUserRequest = {
  email?: string(name='Email'),
  name?: string(name='Name'),
  phoneNumber?: string(name='PhoneNumber'),
  role?: string(name='Role'),
  id: string(name='Id'),
}

model UpdateUserResponse = {
  code: string(name='Code'),
  data: map[string]any(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function updateUserWithOptions(request: UpdateUserRequest, runtime: Util.RuntimeOptions): UpdateUserResponse {
  Util.validateModel(request);
  return doRequest('UpdateUser', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserWithOptions(request, runtime);
}

model DeleteUserRequest = {
  id: string(name='Id'),
}

model DeleteUserResponse = {
  code: string(name='Code'),
  data: map[string]any(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  errors: [
    {
      field: string(name='Field'),
      message: string(name='Message'),
    }
  ](name='Errors'),
}

async function deleteUserWithOptions(request: DeleteUserRequest, runtime: Util.RuntimeOptions): DeleteUserResponse {
  Util.validateModel(request);
  return doRequest('DeleteUser', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserWithOptions(request, runtime);
}

model CreateDepartmentRequest = {
  description?: string(name='Description'),
  label?: string(name='Label'),
  name: string(name='Name'),
  clientToken?: string(name='ClientToken'),
}

model CreateDepartmentResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    createdAt: string(name='CreatedAt'),
    description: string(name='Description'),
    id: string(name='Id'),
    name: string(name='Name'),
  }(name='Data'),
}

async function createDepartmentWithOptions(request: CreateDepartmentRequest, runtime: Util.RuntimeOptions): CreateDepartmentResponse {
  Util.validateModel(request);
  return doRequest('CreateDepartment', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function createDepartment(request: CreateDepartmentRequest): CreateDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDepartmentWithOptions(request, runtime);
}

model UpdateDepartmentRequest = {
  description?: string(name='Description'),
  label?: string(name='Label'),
  name?: string(name='Name'),
  id: string(name='Id'),
}

model UpdateDepartmentResponse = {
  code: string(name='Code'),
  data: map[string]any(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function updateDepartmentWithOptions(request: UpdateDepartmentRequest, runtime: Util.RuntimeOptions): UpdateDepartmentResponse {
  Util.validateModel(request);
  return doRequest('UpdateDepartment', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function updateDepartment(request: UpdateDepartmentRequest): UpdateDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDepartmentWithOptions(request, runtime);
}

model JoinLiveRequest = {
  userId: string(name='UserId'),
  channel: string(name='Channel'),
}

model JoinLiveResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    code: integer(name='Code'),
    tokenData: {
      appId: string(name='AppId'),
      liveId: string(name='LiveId'),
      nonce: string(name='Nonce'),
      timestamp: long(name='Timestamp'),
      token: string(name='Token'),
      userId: string(name='UserId'),
      turn: {
        password: string(name='Password'),
        username: string(name='Username'),
      }(name='Turn'),
      gslb: [ string ](name='Gslb'),
    }(name='TokenData'),
  }(name='Data'),
}

async function joinLiveWithOptions(request: JoinLiveRequest, runtime: Util.RuntimeOptions): JoinLiveResponse {
  Util.validateModel(request);
  return doRequest('JoinLive', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function joinLive(request: JoinLiveRequest): JoinLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinLiveWithOptions(request, runtime);
}

model UpdateLiveRequest = {
  liveId: string(name='LiveId'),
  status: string(name='Status'),
  userId: string(name='UserId'),
}

model UpdateLiveResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    id: string(name='Id'),
  }(name='Data'),
}

async function updateLiveWithOptions(request: UpdateLiveRequest, runtime: Util.RuntimeOptions): UpdateLiveResponse {
  Util.validateModel(request);
  return doRequest('UpdateLive', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function updateLive(request: UpdateLiveRequest): UpdateLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveWithOptions(request, runtime);
}

model CreateLiveRequest = {
  name: string(name='Name'),
  appId: string(name='AppId'),
  userId: string(name='UserId'),
  clientToken?: string(name='ClientToken'),
}

model CreateLiveResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    channel: string(name='Channel'),
    id: string(name='Id'),
    name: string(name='Name'),
  }(name='Data'),
}

async function createLiveWithOptions(request: CreateLiveRequest, runtime: Util.RuntimeOptions): CreateLiveResponse {
  Util.validateModel(request);
  return doRequest('CreateLive', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function createLive(request: CreateLiveRequest): CreateLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveWithOptions(request, runtime);
}

model ListDepartmentsRequest = {
  name?: string(name='Name'),
  pageIndex?: integer(name='PageIndex'),
  pageSize?: integer(name='PageSize'),
  userId?: string(name='UserId'),
}

model ListDepartmentsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    totalElements: long(name='TotalElements'),
    totalPages: integer(name='TotalPages'),
    items: [
      {
        createdAt: string(name='CreatedAt'),
        description: string(name='Description'),
        id: string(name='Id'),
        name: string(name='Name'),
        updatedAt: string(name='UpdatedAt'),
        administrators: [
          {
            id: string(name='Id'),
            name: string(name='Name'),
          }
        ](name='Administrators'),
      }
    ](name='Items'),
  }(name='Data'),
}

async function listDepartmentsWithOptions(request: ListDepartmentsRequest, runtime: Util.RuntimeOptions): ListDepartmentsResponse {
  Util.validateModel(request);
  return doRequest('ListDepartments', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function listDepartments(request: ListDepartmentsRequest): ListDepartmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDepartmentsWithOptions(request, runtime);
}

model UpdateServiceConfigurationRequest = {
  taskItemQueueSize: integer(name='TaskItemQueueSize'),
  clientQueueSize: integer(name='ClientQueueSize'),
  liveRecordEveryOne: boolean(name='LiveRecordEveryOne'),
  liveRecordAll: boolean(name='LiveRecordAll'),
  liveRecordLayout: integer(name='LiveRecordLayout'),
  liveRecordTaskProfile: string(name='LiveRecordTaskProfile'),
}

model UpdateServiceConfigurationResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function updateServiceConfigurationWithOptions(request: UpdateServiceConfigurationRequest, runtime: Util.RuntimeOptions): UpdateServiceConfigurationResponse {
  Util.validateModel(request);
  return doRequest('UpdateServiceConfiguration', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function updateServiceConfiguration(request: UpdateServiceConfigurationRequest): UpdateServiceConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServiceConfigurationWithOptions(request, runtime);
}

model CreateAppRequest = {
  name: string(name='Name'),
  packageName?: string(name='PackageName'),
  departmentId?: string(name='DepartmentId'),
  clientToken?: string(name='ClientToken'),
}

model CreateAppResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    createdAt: string(name='CreatedAt'),
    creatorName: string(name='CreatorName'),
    disabled: boolean(name='Disabled'),
    id: string(name='Id'),
    name: string(name='Name'),
  }(name='Data'),
}

async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  return doRequest('CreateApp', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

model CreateLiveDetectionRequest = {
  liveId: string(name='LiveId'),
  userId: string(name='UserId'),
  ruleId: string(name='RuleId'),
  metaUrl: string(name='MetaUrl'),
  clientToken?: string(name='ClientToken'),
}

model CreateLiveDetectionResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    id: string(name='Id'),
  }(name='Data'),
}

async function createLiveDetectionWithOptions(request: CreateLiveDetectionRequest, runtime: Util.RuntimeOptions): CreateLiveDetectionResponse {
  Util.validateModel(request);
  return doRequest('CreateLiveDetection', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function createLiveDetection(request: CreateLiveDetectionRequest): CreateLiveDetectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveDetectionWithOptions(request, runtime);
}

model DeleteDepartmentRequest = {
  id: string(name='Id'),
}

model DeleteDepartmentResponse = {
  code: string(name='Code'),
  data: map[string]any(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function deleteDepartmentWithOptions(request: DeleteDepartmentRequest, runtime: Util.RuntimeOptions): DeleteDepartmentResponse {
  Util.validateModel(request);
  return doRequest('DeleteDepartment', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function deleteDepartment(request: DeleteDepartmentRequest): DeleteDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDepartmentWithOptions(request, runtime);
}

model ListFilesRequest = {
  prefix?: string(name='Prefix'),
  limit?: integer(name='Limit'),
}

model ListFilesResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: [ string ] (name='Data'),
}

async function listFilesWithOptions(request: ListFilesRequest, runtime: Util.RuntimeOptions): ListFilesResponse {
  Util.validateModel(request);
  return doRequest('ListFiles', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function listFiles(request: ListFilesRequest): ListFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFilesWithOptions(request, runtime);
}

model GetDepartmentRequest = {
  id: string(name='Id'),
}

model GetDepartmentResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    createdAt: string(name='CreatedAt'),
    description: string(name='Description'),
    id: string(name='Id'),
    name: string(name='Name'),
    updatedAt: string(name='UpdatedAt'),
  }(name='Data'),
}

async function getDepartmentWithOptions(request: GetDepartmentRequest, runtime: Util.RuntimeOptions): GetDepartmentResponse {
  Util.validateModel(request);
  return doRequest('GetDepartment', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function getDepartment(request: GetDepartmentRequest): GetDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDepartmentWithOptions(request, runtime);
}

model DeleteUserDepartmentsRequest = {
  userId: [ string ](name='UserId'),
  departmentId: [ string ](name='DepartmentId'),
}

model DeleteUserDepartmentsResponse = {
  code: string(name='Code'),
  data: map[string]any(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function deleteUserDepartmentsWithOptions(request: DeleteUserDepartmentsRequest, runtime: Util.RuntimeOptions): DeleteUserDepartmentsResponse {
  Util.validateModel(request);
  return doRequest('DeleteUserDepartments', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function deleteUserDepartments(request: DeleteUserDepartmentsRequest): DeleteUserDepartmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserDepartmentsWithOptions(request, runtime);
}

model GetPreSignedUrlRequest = {
  prefix?: string(name='Prefix'),
}

model GetPreSignedUrlResponse = {
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function getPreSignedUrlWithOptions(request: GetPreSignedUrlRequest, runtime: Util.RuntimeOptions): GetPreSignedUrlResponse {
  Util.validateModel(request);
  return doRequest('GetPreSignedUrl', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function getPreSignedUrl(request: GetPreSignedUrlRequest): GetPreSignedUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPreSignedUrlWithOptions(request, runtime);
}

model DeleteRuleRequest = {
  id: string(name='Id'),
}

model DeleteRuleResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    content: string(name='Content'),
    createdAt: string(name='CreatedAt'),
    id: string(name='Id'),
    name: string(name='Name'),
  }(name='Data'),
}

async function deleteRuleWithOptions(request: DeleteRuleRequest, runtime: Util.RuntimeOptions): DeleteRuleResponse {
  Util.validateModel(request);
  return doRequest('DeleteRule', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleWithOptions(request, runtime);
}

model UpdateRuleRequest = {
  id: string(name='Id'),
  name?: string(name='Name'),
  content?: string(name='Content'),
}

model UpdateRuleResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    content: string(name='Content'),
    createdAt: string(name='CreatedAt'),
    id: string(name='Id'),
    name: string(name='Name'),
  }(name='Data'),
}

async function updateRuleWithOptions(request: UpdateRuleRequest, runtime: Util.RuntimeOptions): UpdateRuleResponse {
  Util.validateModel(request);
  return doRequest('UpdateRule', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function updateRule(request: UpdateRuleRequest): UpdateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRuleWithOptions(request, runtime);
}

model ListStatisticsTaskRequest = {
  pageIndex?: integer(name='PageIndex'),
  pageSize?: integer(name='PageSize'),
}

model ListStatisticsTaskResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    totalElements: long(name='TotalElements'),
    totalPages: integer(name='TotalPages'),
    items: [
      {
        createdAt: string(name='CreatedAt'),
        fileUrl: string(name='FileUrl'),
        name: string(name='Name'),
        status: integer(name='Status'),
      }
    ](name='Items'),
  }(name='Data'),
}

async function listStatisticsTaskWithOptions(request: ListStatisticsTaskRequest, runtime: Util.RuntimeOptions): ListStatisticsTaskResponse {
  Util.validateModel(request);
  return doRequest('ListStatisticsTask', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function listStatisticsTask(request: ListStatisticsTaskRequest): ListStatisticsTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStatisticsTaskWithOptions(request, runtime);
}

model ListLivesRequest = {
  pageIndex?: integer(name='PageIndex'),
  pageSize?: integer(name='PageSize'),
}

model ListLivesResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    totalElements: long(name='TotalElements'),
    totalPages: integer(name='TotalPages'),
    items: [
      {
        channel: string(name='Channel'),
        createdAt: string(name='CreatedAt'),
        id: string(name='Id'),
        name: string(name='Name'),
        publicId: string(name='PublicId'),
        status: string(name='Status'),
        userId: string(name='UserId'),
      }
    ](name='Items'),
  }(name='Data'),
}

async function listLivesWithOptions(request: ListLivesRequest, runtime: Util.RuntimeOptions): ListLivesResponse {
  Util.validateModel(request);
  return doRequest('ListLives', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function listLives(request: ListLivesRequest): ListLivesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLivesWithOptions(request, runtime);
}

model ExitLiveRequest = {
  channel: string(name='Channel'),
  userId: string(name='UserId'),
}

model ExitLiveResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    code: integer(name='Code'),
  }(name='Data'),
}

async function exitLiveWithOptions(request: ExitLiveRequest, runtime: Util.RuntimeOptions): ExitLiveResponse {
  Util.validateModel(request);
  return doRequest('ExitLive', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function exitLive(request: ExitLiveRequest): ExitLiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return exitLiveWithOptions(request, runtime);
}

model GetTaskRequest = {
  taskId: string(name='TaskId'),
}

model GetTaskResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    createdAt: string(name='CreatedAt'),
    id: string(name='Id'),
    status: string(name='Status'),
    videoUrl: string(name='VideoUrl'),
  }(name='Data'),
}

async function getTaskWithOptions(request: GetTaskRequest, runtime: Util.RuntimeOptions): GetTaskResponse {
  Util.validateModel(request);
  return doRequest('GetTask', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskWithOptions(request, runtime);
}

model GetStatisticsRequest = {
  departmentId?: [ string ](name='DepartmentId'),
  dateFrom?: string(name='DateFrom'),
  dateTo?: string(name='DateTo'),
}

model GetStatisticsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    items: [
      {
        clientCount: long(name='ClientCount'),
        cloudCount: long(name='CloudCount'),
        departmentName: string(name='DepartmentName'),
        month: string(name='Month'),
        detail: [
          {
            clientCount: long(name='ClientCount'),
            cloudCount: long(name='CloudCount'),
            departmentId: string(name='DepartmentId'),
            departmentName: string(name='DepartmentName'),
            month: integer(name='Month'),
          }
        ](name='Detail'),
      }
    ](name='Items'),
  }(name='Data'),
}

async function getStatisticsWithOptions(request: GetStatisticsRequest, runtime: Util.RuntimeOptions): GetStatisticsResponse {
  Util.validateModel(request);
  return doRequest('GetStatistics', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function getStatistics(request: GetStatisticsRequest): GetStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStatisticsWithOptions(request, runtime);
}

model GetServiceConfigurationRequest = {
  userId?: string(name='UserId'),
}

model GetServiceConfigurationResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    clientQueueSize: integer(name='ClientQueueSize'),
    liveRecordAll: boolean(name='LiveRecordAll'),
    liveRecordEveryOne: boolean(name='LiveRecordEveryOne'),
    liveRecordLayout: integer(name='LiveRecordLayout'),
    liveRecordTaskProfile: string(name='LiveRecordTaskProfile'),
    taskItemQueueSize: integer(name='TaskItemQueueSize'),
  }(name='Data'),
}

async function getServiceConfigurationWithOptions(request: GetServiceConfigurationRequest, runtime: Util.RuntimeOptions): GetServiceConfigurationResponse {
  Util.validateModel(request);
  return doRequest('GetServiceConfiguration', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function getServiceConfiguration(request: GetServiceConfigurationRequest): GetServiceConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceConfigurationWithOptions(request, runtime);
}

model GetAppRequest = {
  id: string(name='Id'),
  packageName: string(name='PackageName'),
  deviceId: string(name='DeviceId'),
}

model GetAppResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    createdAt: integer(name='CreatedAt'),
    disabled: string(name='Disabled'),
    name: string(name='Name'),
  }(name='Data'),
}

async function getAppWithOptions(request: GetAppRequest, runtime: Util.RuntimeOptions): GetAppResponse {
  Util.validateModel(request);
  return doRequest('GetApp', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function getApp(request: GetAppRequest): GetAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppWithOptions(request, runtime);
}

model CreateStatisticsRecordRequest = {
  deviceId: string(name='DeviceId'),
  appId: string(name='AppId'),
  deviceType: integer(name='DeviceType'),
  beginAt: string(name='BeginAt'),
  endAt: string(name='EndAt'),
  clientToken?: string(name='ClientToken'),
}

model CreateStatisticsRecordResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function createStatisticsRecordWithOptions(request: CreateStatisticsRecordRequest, runtime: Util.RuntimeOptions): CreateStatisticsRecordResponse {
  Util.validateModel(request);
  return doRequest('CreateStatisticsRecord', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function createStatisticsRecord(request: CreateStatisticsRecordRequest): CreateStatisticsRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStatisticsRecordWithOptions(request, runtime);
}

model ListUsersRequest = {
  departmentId?: string(name='DepartmentId'),
  pageIndex?: integer(name='PageIndex'),
  pageSize?: integer(name='PageSize'),
  username?: string(name='Username'),
}

model ListUsersResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    totalElements: long(name='TotalElements'),
    totalPages: integer(name='TotalPages'),
    items: [
      {
        createdAt: string(name='CreatedAt'),
        email: string(name='Email'),
        id: string(name='Id'),
        name: string(name='Name'),
        phoneNumber: string(name='PhoneNumber'),
        ramUsername: string(name='RamUsername'),
        role: string(name='Role'),
        source: string(name='Source'),
        updatedAt: string(name='UpdatedAt'),
        username: string(name='Username'),
        departments: [
          {
            createdAt: string(name='CreatedAt'),
            description: string(name='Description'),
            id: string(name='Id'),
            name: string(name='Name'),
            updatedAt: string(name='UpdatedAt'),
          }
        ](name='Departments'),
      }
    ](name='Items'),
  }(name='Data'),
}

async function listUsersWithOptions(request: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  return doRequest('ListUsers', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model CreateStatisticsTaskRequest = {
  dateFrom?: string(name='DateFrom'),
  dateTo?: string(name='DateTo'),
  departmentId?: [ string ](name='DepartmentId'),
  clientToken?: string(name='ClientToken'),
}

model CreateStatisticsTaskResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function createStatisticsTaskWithOptions(request: CreateStatisticsTaskRequest, runtime: Util.RuntimeOptions): CreateStatisticsTaskResponse {
  Util.validateModel(request);
  return doRequest('CreateStatisticsTask', 'HTTPS', 'POST', '2020-06-30', 'AK', null, request, runtime);
}

async function createStatisticsTask(request: CreateStatisticsTaskRequest): CreateStatisticsTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStatisticsTaskWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
