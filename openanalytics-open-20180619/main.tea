import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    cn-beijing = 'openanalytics.cn-beijing.aliyuncs.com',
    cn-zhangjiakou = 'openanalytics.cn-zhangjiakou.aliyuncs.com',
    cn-hangzhou = 'openanalytics.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'openanalytics.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'openanalytics.cn-shenzhen.aliyuncs.com',
    cn-hongkong = 'openanalytics.cn-hongkong.aliyuncs.com',
    ap-southeast-1 = 'openanalytics.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'datalakeanalytics.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'openanalytics.ap-southeast-3.aliyuncs.com',
    ap-northeast-1 = 'datalakeanalytics.ap-northeast-1.aliyuncs.com',
    eu-west-1 = 'openanalytics.eu-west-1.aliyuncs.com',
    us-west-1 = 'openanalytics.us-west-1.aliyuncs.com',
    us-east-1 = 'datalakeanalytics.us-east-1.aliyuncs.com',
    eu-central-1 = 'datalakeanalytics.eu-central-1.aliyuncs.com',
    ap-south-1 = 'openanalytics.ap-south-1.aliyuncs.com',
    ap-northeast-2-pop = 'openanalytics.ap-northeast-1.aliyuncs.com',
    ap-southeast-5 = 'openanalytics.ap-southeast-5.aliyuncs.com',
    cn-beijing-finance-1 = 'openanalytics.aliyuncs.com',
    cn-beijing-finance-pop = 'openanalytics.aliyuncs.com',
    cn-beijing-gov-1 = 'openanalytics.aliyuncs.com',
    cn-beijing-nu16-b01 = 'openanalytics.aliyuncs.com',
    cn-chengdu = 'openanalytics.aliyuncs.com',
    cn-edge-1 = 'openanalytics.aliyuncs.com',
    cn-fujian = 'openanalytics.aliyuncs.com',
    cn-haidian-cm12-c01 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-finance = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'openanalytics.aliyuncs.com',
    cn-hangzhou-test-306 = 'openanalytics.aliyuncs.com',
    cn-hongkong-finance-pop = 'openanalytics.aliyuncs.com',
    cn-huhehaote = 'openanalytics.cn-huhehaote.aliyuncs.com',
    cn-north-2-gov-1 = 'openanalytics.aliyuncs.com',
    cn-qingdao = 'openanalytics.cn-qingdao.aliyuncs.com',
    cn-qingdao-nebula = 'openanalytics.aliyuncs.com',
    cn-shanghai-et15-b01 = 'openanalytics.aliyuncs.com',
    cn-shanghai-et2-b01 = 'openanalytics.aliyuncs.com',
    cn-shanghai-finance-1 = 'openanalytics.aliyuncs.com',
    cn-shanghai-inner = 'openanalytics.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'openanalytics.aliyuncs.com',
    cn-shenzhen-finance-1 = 'openanalytics.aliyuncs.com',
    cn-shenzhen-inner = 'openanalytics.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'openanalytics.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'openanalytics.aliyuncs.com',
    cn-wuhan = 'openanalytics.aliyuncs.com',
    cn-yushanfang = 'openanalytics.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'openanalytics.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'openanalytics.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'openanalytics.aliyuncs.com',
    eu-west-1-oxs = 'openanalytics.ap-northeast-1.aliyuncs.com',
    me-east-1 = 'openanalytics.me-east-1.aliyuncs.com',
    rus-west-1-pop = 'openanalytics.ap-northeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('openanalytics-open', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model ValidateVirtualClusterNameRequest = {
  vcName?: string(name='VcName'),
}

model ValidateVirtualClusterNameResponse = {
  requestId: string(name='RequestId'),
  data: {
    legal: string(name='Legal'),
    message: string(name='Message'),
  }(name='Data'),
}

async function validateVirtualClusterNameWithOptions(request: ValidateVirtualClusterNameRequest, runtime: Util.RuntimeOptions): ValidateVirtualClusterNameResponse {
  Util.validateModel(request);
  return doRequest('ValidateVirtualClusterName', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function validateVirtualClusterName(request: ValidateVirtualClusterNameRequest): ValidateVirtualClusterNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateVirtualClusterNameWithOptions(request, runtime);
}

model UpgradeInstanceRequest = {
  regionId?: string(name='RegionId'),
  instanceId: string(name='InstanceId'),
  chargeType: string(name='ChargeType'),
  instanceType: string(name='InstanceType'),
  component: string(name='Component'),
}

model UpgradeInstanceResponse = {
  success: boolean(name='Success'),
  errorCode: string(name='ErrorCode'),
  errorInfo: string(name='ErrorInfo'),
  result: string(name='Result'),
  requestId: string(name='RequestId'),
}

async function upgradeInstanceWithOptions(request: UpgradeInstanceRequest, runtime: Util.RuntimeOptions): UpgradeInstanceResponse {
  Util.validateModel(request);
  return doRequest('UpgradeInstance', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function upgradeInstance(request: UpgradeInstanceRequest): UpgradeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeInstanceWithOptions(request, runtime);
}

model CreateInstanceRequest = {
  regionId?: string(name='RegionId'),
  chargeType: string(name='ChargeType'),
  instanceType: string(name='InstanceType'),
  component: string(name='Component'),
}

model CreateInstanceResponse = {
  success: boolean(name='Success'),
  errorCode: string(name='ErrorCode'),
  errorInfo: string(name='ErrorInfo'),
  result: string(name='Result'),
  requestId: string(name='RequestId'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateInstance', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model ReleaseInstanceRequest = {
  regionId?: string(name='RegionId'),
  instanceId: string(name='InstanceId'),
}

model ReleaseInstanceResponse = {
  success: boolean(name='Success'),
  errorCode: string(name='ErrorCode'),
  errorInfo: string(name='ErrorInfo'),
  result: string(name='Result'),
  requestId: string(name='RequestId'),
}

async function releaseInstanceWithOptions(request: ReleaseInstanceRequest, runtime: Util.RuntimeOptions): ReleaseInstanceResponse {
  Util.validateModel(request);
  return doRequest('ReleaseInstance', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstanceWithOptions(request, runtime);
}

model GetJobDetailRequest = {
  jobId: string(name='JobId'),
  vcName: string(name='VcName'),
}

model GetJobDetailResponse = {
  requestId: string(name='RequestId'),
  jobDetail: {
    jobId: string(name='JobId'),
    jobName: string(name='JobName'),
    status: string(name='Status'),
    detail: string(name='Detail'),
    sparkUI: string(name='SparkUI'),
    createTime: string(name='CreateTime'),
    updateTime: string(name='UpdateTime'),
    submitTime: string(name='SubmitTime'),
    createTimeValue: string(name='CreateTimeValue'),
    updateTimeValue: string(name='UpdateTimeValue'),
    submitTimeValue: string(name='SubmitTimeValue'),
    vcName: string(name='VcName'),
    driverResourceSpec: string(name='DriverResourceSpec'),
    executorResourceSpec: string(name='ExecutorResourceSpec'),
    executorInstances: string(name='ExecutorInstances'),
  }(name='JobDetail'),
}

async function getJobDetailWithOptions(request: GetJobDetailRequest, runtime: Util.RuntimeOptions): GetJobDetailResponse {
  Util.validateModel(request);
  return doRequest('GetJobDetail', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function getJobDetail(request: GetJobDetailRequest): GetJobDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobDetailWithOptions(request, runtime);
}

model GetJobStatusRequest = {
  jobId: string(name='JobId'),
  vcName: string(name='VcName'),
}

model GetJobStatusResponse = {
  requestId: string(name='RequestId'),
  status: string(name='Status'),
}

async function getJobStatusWithOptions(request: GetJobStatusRequest, runtime: Util.RuntimeOptions): GetJobStatusResponse {
  Util.validateModel(request);
  return doRequest('GetJobStatus', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function getJobStatus(request: GetJobStatusRequest): GetJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobStatusWithOptions(request, runtime);
}

model KillSparkJobRequest = {
  vcName: string(name='VcName'),
  jobId: string(name='JobId'),
}

model KillSparkJobResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function killSparkJobWithOptions(request: KillSparkJobRequest, runtime: Util.RuntimeOptions): KillSparkJobResponse {
  Util.validateModel(request);
  return doRequest('KillSparkJob', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function killSparkJob(request: KillSparkJobRequest): KillSparkJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return killSparkJobWithOptions(request, runtime);
}

model SubmitSparkJobRequest = {
  vcName: string(name='VcName'),
  configJson: string(name='ConfigJson'),
}

model SubmitSparkJobResponse = {
  requestId: string(name='RequestId'),
  jobId: string(name='JobId'),
}

async function submitSparkJobWithOptions(request: SubmitSparkJobRequest, runtime: Util.RuntimeOptions): SubmitSparkJobResponse {
  Util.validateModel(request);
  return doRequest('SubmitSparkJob', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function submitSparkJob(request: SubmitSparkJobRequest): SubmitSparkJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSparkJobWithOptions(request, runtime);
}

model GetJobLogRequest = {
  jobId: string(name='JobId'),
  vcName: string(name='VcName'),
}

model GetJobLogResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getJobLogWithOptions(request: GetJobLogRequest, runtime: Util.RuntimeOptions): GetJobLogResponse {
  Util.validateModel(request);
  return doRequest('GetJobLog', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function getJobLog(request: GetJobLogRequest): GetJobLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobLogWithOptions(request, runtime);
}

model ListSparkJobRequest = {
  vcName: string(name='VcName'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
}

model ListSparkJobResponse = {
  requestId: string(name='RequestId'),
  dataResult: {
    pageNumber: string(name='PageNumber'),
    pageSize: string(name='PageSize'),
    totalCount: string(name='TotalCount'),
    jobList: [
      {
        createTime: string(name='CreateTime'),
        createTimeValue: string(name='CreateTimeValue'),
        detail: string(name='Detail'),
        driverResourceSpec: string(name='DriverResourceSpec'),
        executorInstances: string(name='ExecutorInstances'),
        executorResourceSpec: string(name='ExecutorResourceSpec'),
        jobId: string(name='JobId'),
        jobName: string(name='JobName'),
        sparkUI: string(name='SparkUI'),
        status: string(name='Status'),
        submitTime: string(name='SubmitTime'),
        submitTimeValue: string(name='SubmitTimeValue'),
        updateTime: string(name='UpdateTime'),
        updateTimeValue: string(name='UpdateTimeValue'),
        vcName: string(name='VcName'),
      }
    ](name='JobList'),
  }(name='DataResult'),
}

async function listSparkJobWithOptions(request: ListSparkJobRequest, runtime: Util.RuntimeOptions): ListSparkJobResponse {
  Util.validateModel(request);
  return doRequest('ListSparkJob', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function listSparkJob(request: ListSparkJobRequest): ListSparkJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSparkJobWithOptions(request, runtime);
}

model GetAllowIPRequest = {
  regionId: string(name='RegionId'),
  networkType: string(name='NetworkType'),
  product?: string(name='Product'),
}

model GetAllowIPResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
  allowIP: string(name='AllowIP'),
}

async function getAllowIPWithOptions(request: GetAllowIPRequest, runtime: Util.RuntimeOptions): GetAllowIPResponse {
  Util.validateModel(request);
  return doRequest('GetAllowIP', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function getAllowIP(request: GetAllowIPRequest): GetAllowIPResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAllowIPWithOptions(request, runtime);
}

model SetAllowIPRequest = {
  regionId: string(name='RegionId'),
  networkType: string(name='NetworkType'),
  product?: string(name='Product'),
  allowIP: string(name='AllowIP'),
  append?: boolean(name='Append'),
}

model SetAllowIPResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
}

async function setAllowIPWithOptions(request: SetAllowIPRequest, runtime: Util.RuntimeOptions): SetAllowIPResponse {
  Util.validateModel(request);
  return doRequest('SetAllowIP', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function setAllowIP(request: SetAllowIPRequest): SetAllowIPResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAllowIPWithOptions(request, runtime);
}

model ResetMainPasswordRequest = {
  regionId: string(name='RegionId'),
  useRandomPassword: boolean(name='UseRandomPassword'),
  initPassword?: string(name='InitPassword'),
  enableKMS?: boolean(name='EnableKMS'),
  externalUid?: string(name='ExternalUid'),
  externalAliyunUid?: string(name='ExternalAliyunUid'),
  externalBizAliyunUid?: string(name='ExternalBizAliyunUid'),
}

model ResetMainPasswordResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
  account: {
    userName: string(name='UserName'),
    password: string(name='Password'),
  }(name='Account'),
}

async function resetMainPasswordWithOptions(request: ResetMainPasswordRequest, runtime: Util.RuntimeOptions): ResetMainPasswordResponse {
  Util.validateModel(request);
  return doRequest('ResetMainPassword', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function resetMainPassword(request: ResetMainPasswordRequest): ResetMainPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetMainPasswordWithOptions(request, runtime);
}

model UnSubscribeRegionRequest = {
  regionId: string(name='RegionId'),
}

model UnSubscribeRegionResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
}

async function unSubscribeRegionWithOptions(request: UnSubscribeRegionRequest, runtime: Util.RuntimeOptions): UnSubscribeRegionResponse {
  Util.validateModel(request);
  return doRequest('UnSubscribeRegion', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function unSubscribeRegion(request: UnSubscribeRegionRequest): UnSubscribeRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return unSubscribeRegionWithOptions(request, runtime);
}

model QueryAccountListRequest = {
  regionId: string(name='RegionId'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
}

model QueryAccountListResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  totalCount: integer(name='TotalCount'),
  data: [
    {
      userName: string(name='UserName'),
      role: string(name='Role'),
      shortName: string(name='ShortName'),
      remark: string(name='Remark'),
      ramUid: string(name='RamUid'),
    }
  ](name='Data'),
}

async function queryAccountListWithOptions(request: QueryAccountListRequest, runtime: Util.RuntimeOptions): QueryAccountListResponse {
  Util.validateModel(request);
  return doRequest('QueryAccountList', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function queryAccountList(request: QueryAccountListRequest): QueryAccountListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountListWithOptions(request, runtime);
}

model DeleteAccountRequest = {
  regionId: string(name='RegionId'),
  accountName: string(name='AccountName'),
  isShort?: boolean(name='IsShort'),
  isServiceUser?: boolean(name='IsServiceUser'),
}

model DeleteAccountResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  return doRequest('DeleteAccount', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model AddAccountRequest = {
  regionId: string(name='RegionId'),
  accountName: string(name='AccountName'),
  password?: string(name='Password'),
  isShort?: boolean(name='IsShort'),
  enableKMS?: boolean(name='EnableKMS'),
  remark?: string(name='Remark'),
  ramUid?: string(name='RamUid'),
  useRandomPassword?: boolean(name='UseRandomPassword'),
}

model AddAccountResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
  account: {
    userName: string(name='UserName'),
    password: string(name='Password'),
  }(name='Account'),
}

async function addAccountWithOptions(request: AddAccountRequest, runtime: Util.RuntimeOptions): AddAccountResponse {
  Util.validateModel(request);
  return doRequest('AddAccount', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function addAccount(request: AddAccountRequest): AddAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAccountWithOptions(request, runtime);
}

model UpdateAccountPasswordRequest = {
  regionId: string(name='RegionId'),
  accountName: string(name='AccountName'),
  isShort?: boolean(name='IsShort'),
  password?: string(name='Password'),
  enableKMS?: boolean(name='EnableKMS'),
  useRandomPassword?: boolean(name='UseRandomPassword'),
}

model UpdateAccountPasswordResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
  account: {
    userName: string(name='UserName'),
    password: string(name='Password'),
  }(name='Account'),
}

async function updateAccountPasswordWithOptions(request: UpdateAccountPasswordRequest, runtime: Util.RuntimeOptions): UpdateAccountPasswordResponse {
  Util.validateModel(request);
  return doRequest('UpdateAccountPassword', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function updateAccountPassword(request: UpdateAccountPasswordRequest): UpdateAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAccountPasswordWithOptions(request, runtime);
}

model RemoveEndPointRequest = {
  regionId: string(name='RegionId'),
  endPointID: string(name='EndPointID'),
}

model RemoveEndPointResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
}

async function removeEndPointWithOptions(request: RemoveEndPointRequest, runtime: Util.RuntimeOptions): RemoveEndPointResponse {
  Util.validateModel(request);
  return doRequest('RemoveEndPoint', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function removeEndPoint(request: RemoveEndPointRequest): RemoveEndPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeEndPointWithOptions(request, runtime);
}

model QueryEndPointListRequest = {
  regionId: string(name='RegionId'),
}

model QueryEndPointListResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
  endPointList: [
    {
      endPointID: string(name='endPointID'),
      zone: string(name='zone'),
      vSwitch: string(name='vSwitch'),
      status: string(name='status'),
      vpcID: string(name='vpcID'),
      host: string(name='host'),
      domainURL: string(name='domainURL'),
      networkType: string(name='networkType'),
      allowIP: string(name='allowIP'),
      port: string(name='port'),
      product: string(name='product'),
    }
  ](name='EndPointList'),
}

async function queryEndPointListWithOptions(request: QueryEndPointListRequest, runtime: Util.RuntimeOptions): QueryEndPointListResponse {
  Util.validateModel(request);
  return doRequest('QueryEndPointList', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function queryEndPointList(request: QueryEndPointListRequest): QueryEndPointListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEndPointListWithOptions(request, runtime);
}

model AddEndPointRequest = {
  regionId: string(name='RegionId'),
  networkType: string(name='NetworkType'),
  vpcID: string(name='VpcID'),
  vswitch: string(name='Vswitch'),
  zone: string(name='Zone'),
  product?: string(name='Product'),
}

model AddEndPointResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
  endPointInfo: {
    domainURL: string(name='domainURL'),
    host: string(name='host'),
    port: string(name='port'),
    networkType: string(name='networkType'),
    vpcID: string(name='vpcID'),
    vSwitch: string(name='vSwitch'),
    zone: string(name='zone'),
    allowIP: string(name='allowIP'),
    endPointID: string(name='endPointID'),
    status: string(name='status'),
    product: string(name='product'),
  }(name='EndPointInfo'),
}

async function addEndPointWithOptions(request: AddEndPointRequest, runtime: Util.RuntimeOptions): AddEndPointResponse {
  Util.validateModel(request);
  return doRequest('AddEndPoint', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function addEndPoint(request: AddEndPointRequest): AddEndPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return addEndPointWithOptions(request, runtime);
}

model GetEndPointRequest = {
  regionId: string(name='RegionId'),
  endPointID: string(name='EndPointID'),
}

model GetEndPointResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
  endPointInfo: {
    endPointID: string(name='endPointID'),
    domainURL: string(name='domainURL'),
    host: string(name='host'),
    port: string(name='port'),
    networkType: string(name='networkType'),
    vpcID: string(name='vpcID'),
    vSwitch: string(name='vSwitch'),
    zone: string(name='zone'),
    allowIP: string(name='allowIP'),
    status: string(name='status'),
    product: string(name='product'),
  }(name='EndPointInfo'),
}

async function getEndPointWithOptions(request: GetEndPointRequest, runtime: Util.RuntimeOptions): GetEndPointResponse {
  Util.validateModel(request);
  return doRequest('GetEndPoint', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function getEndPoint(request: GetEndPointRequest): GetEndPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEndPointWithOptions(request, runtime);
}

model GetEndPointByDomainRequest = {
  regionId: string(name='RegionId'),
  domainURL: string(name='DomainURL'),
  regionID?: string(name='RegionID'),
}

model GetEndPointByDomainResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
  endPointInfo: {
    endPointID: string(name='endPointID'),
    domainURL: string(name='domainURL'),
    host: string(name='host'),
    port: string(name='port'),
    networkType: string(name='networkType'),
    vpcID: string(name='vpcID'),
    vSwitch: string(name='vSwitch'),
    zone: string(name='zone'),
    allowIP: string(name='allowIP'),
    cloudInstanceID: string(name='cloudInstanceID'),
    product: string(name='product'),
  }(name='EndPointInfo'),
}

async function getEndPointByDomainWithOptions(request: GetEndPointByDomainRequest, runtime: Util.RuntimeOptions): GetEndPointByDomainResponse {
  Util.validateModel(request);
  return doRequest('GetEndPointByDomain', 'HTTPS', 'POST', '2018-06-19', 'AK', null, request, runtime);
}

async function getEndPointByDomain(request: GetEndPointByDomainRequest): GetEndPointByDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEndPointByDomainWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
