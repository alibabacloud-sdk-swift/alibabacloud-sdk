import OSS;
import OpenPlatform;
import RPCUtil;
import RPC;
import OSSUtil;
import Util;
import FileForm;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('imgsearch', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model ListImageDbsRequest = {
}

model ListImageDbsResponse = {
  requestId: string(name='RequestId'),
  data: {
    dbList: [
      {
        name: string(name='Name'),
      }
    ](name='DbList'),
  }(name='Data'),
}

async function listImageDbs(request: ListImageDbsRequest, runtime: Util.RuntimeOptions): ListImageDbsResponse {
  Util.validateModel(request);
  return doRequest('ListImageDbs', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model ListImagesRequest = {
  dbName: string(name='DbName'),
  token?: string(name='Token'),
  offset?: integer(name='Offset'),
  limit?: integer(name='Limit'),
  order?: string(name='Order'),
  entityIdPrefix?: string(name='EntityIdPrefix'),
}

model ListImagesResponse = {
  requestId: string(name='RequestId'),
  data: {
    token: string(name='Token'),
    totalCount: integer(name='TotalCount'),
    imageList: [
      {
        dataId: string(name='DataId'),
        extraData: string(name='ExtraData'),
        entityId: string(name='EntityId'),
        updatedAt: long(name='UpdatedAt'),
        createdAt: long(name='CreatedAt'),
      }
    ](name='ImageList'),
  }(name='Data'),
}

async function listImages(request: ListImagesRequest, runtime: Util.RuntimeOptions): ListImagesResponse {
  Util.validateModel(request);
  return doRequest('ListImages', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model SearchImageRequest = {
  dbName: string(name='DbName'),
  imageUrl: string(name='ImageUrl'),
  limit: integer(name='Limit'),
}

model SearchImageResponse = {
  requestId: string(name='RequestId'),
  data: {
    matchList: [
      {
        dataId: string(name='DataId'),
        extraData: string(name='ExtraData'),
        entityId: string(name='EntityId'),
        imageUrl: string(name='ImageUrl'),
        score: float(name='Score'),
      }
    ](name='MatchList'),
  }(name='Data'),
}

async function searchImage(request: SearchImageRequest, runtime: Util.RuntimeOptions): SearchImageResponse {
  Util.validateModel(request);
  return doRequest('SearchImage', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model SearchImageAdvanceRequest = {
  imageUrlObject: readable(name='ImageUrlObject'),
  dbName: string(name='DbName'),
  limit: integer(name='Limit'),
}

async function searchImageAdvance(request: SearchImageAdvanceRequest, runtime: Util.RuntimeOptions): SearchImageResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imgsearch',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageUrlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var searchImagereq = new SearchImageRequest{};
  RPCUtil.convert(request, searchImagereq);
  searchImagereq.imageUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var searchImageResp = searchImage(searchImagereq, runtime);
  return searchImageResp;
}

model AddImageRequest = {
  dbName: string(name='DbName'),
  imageUrl: string(name='ImageUrl'),
  extraData?: string(name='ExtraData'),
  entityId: string(name='EntityId'),
}

model AddImageResponse = {
  requestId: string(name='RequestId'),
  data: {
    dataId: string(name='DataId'),
  }(name='Data'),
}

async function addImage(request: AddImageRequest, runtime: Util.RuntimeOptions): AddImageResponse {
  Util.validateModel(request);
  return doRequest('AddImage', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model AddImageAdvanceRequest = {
  imageUrlObject: readable(name='ImageUrlObject'),
  dbName: string(name='DbName'),
  extraData?: string(name='ExtraData'),
  entityId: string(name='EntityId'),
}

async function addImageAdvance(request: AddImageAdvanceRequest, runtime: Util.RuntimeOptions): AddImageResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imgsearch',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageUrlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var addImagereq = new AddImageRequest{};
  RPCUtil.convert(request, addImagereq);
  addImagereq.imageUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var addImageResp = addImage(addImagereq, runtime);
  return addImageResp;
}

model DeleteImageDbRequest = {
  name: string(name='Name'),
}

model DeleteImageDbResponse = {
  requestId: string(name='RequestId'),
}

async function deleteImageDb(request: DeleteImageDbRequest, runtime: Util.RuntimeOptions): DeleteImageDbResponse {
  Util.validateModel(request);
  return doRequest('DeleteImageDb', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model CreateImageDbRequest = {
  name: string(name='Name'),
}

model CreateImageDbResponse = {
  requestId: string(name='RequestId'),
}

async function createImageDb(request: CreateImageDbRequest, runtime: Util.RuntimeOptions): CreateImageDbResponse {
  Util.validateModel(request);
  return doRequest('CreateImageDb', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

model DeleteImageRequest = {
  dbName: string(name='DbName'),
  entityId: string(name='EntityId'),
}

model DeleteImageResponse = {
  requestId: string(name='RequestId'),
}

async function deleteImage(request: DeleteImageRequest, runtime: Util.RuntimeOptions): DeleteImageResponse {
  Util.validateModel(request);
  return doRequest('DeleteImage', 'HTTPS', 'POST' , '2020-03-20', 'AK', null, request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
