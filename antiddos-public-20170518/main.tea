/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  

  checkConfig(config);
  @endpoint = getEndpoint('antiddos-public', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model DescribeBgpPackByIpRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  ddosRegionId?: string(name='DdosRegionId'),
  ip?: string(name='Ip'),
}

model DescribeBgpPackByIpResponseBody = {
  ddosbgpInfo?: {
    expireTime?: long(name='ExpireTime'),
    elasticThreshold?: int32(name='ElasticThreshold'),
    ip?: string(name='Ip'),
    baseThreshold?: int32(name='BaseThreshold'),
    ddosbgpInstanceId?: string(name='DdosbgpInstanceId'),
  }(name='DdosbgpInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeBgpPackByIpResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBgpPackByIpResponseBody(name='body'),
}

async function describeBgpPackByIpWithOptions(request: DescribeBgpPackByIpRequest, runtime: Util.RuntimeOptions): DescribeBgpPackByIpResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBgpPackByIp', '2017-05-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBgpPackByIp(request: DescribeBgpPackByIpRequest): DescribeBgpPackByIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBgpPackByIpWithOptions(request, runtime);
}

model DescribeBgpPackElasticThresholdRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  ddosRegionId?: string(name='DdosRegionId'),
}

model DescribeBgpPackElasticThresholdResponseBody = {
  maxThreshold?: int32(name='MaxThreshold'),
  requestId?: string(name='RequestId'),
  openable?: boolean(name='Openable'),
}

model DescribeBgpPackElasticThresholdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBgpPackElasticThresholdResponseBody(name='body'),
}

async function describeBgpPackElasticThresholdWithOptions(request: DescribeBgpPackElasticThresholdRequest, runtime: Util.RuntimeOptions): DescribeBgpPackElasticThresholdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBgpPackElasticThreshold', '2017-05-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBgpPackElasticThreshold(request: DescribeBgpPackElasticThresholdRequest): DescribeBgpPackElasticThresholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBgpPackElasticThresholdWithOptions(request, runtime);
}

model DescribeCapRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  ddosRegionId?: string(name='DdosRegionId'),
  instanceType?: string(name='InstanceType'),
  instanceId?: string(name='InstanceId'),
  begTime?: long(name='BegTime'),
}

model DescribeCapResponseBody = {
  capUrl?: {
    url?: string(name='Url'),
  }(name='CapUrl'),
  requestId?: string(name='RequestId'),
}

model DescribeCapResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCapResponseBody(name='body'),
}

async function describeCapWithOptions(request: DescribeCapRequest, runtime: Util.RuntimeOptions): DescribeCapResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCap', '2017-05-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCap(request: DescribeCapRequest): DescribeCapResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCapWithOptions(request, runtime);
}

model DescribeCreditInfoRequest {
  sourceIp?: string(name='SourceIp'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeCreditInfoResponseBody = {
  punishTimes?: long(name='PunishTimes'),
  lastOrderTime?: long(name='LastOrderTime'),
  lastLoginTime?: long(name='LastLoginTime'),
  requestId?: string(name='RequestId'),
  userLevel?: string(name='UserLevel'),
  blackTimes?: long(name='BlackTimes'),
  newCreatetime?: string(name='NewCreatetime'),
  duration?: long(name='Duration'),
  productid?: [ string ](name='Productid'),
}

model DescribeCreditInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCreditInfoResponseBody(name='body'),
}

async function describeCreditInfoWithOptions(request: DescribeCreditInfoRequest, runtime: Util.RuntimeOptions): DescribeCreditInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCreditInfo', '2017-05-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCreditInfo(request: DescribeCreditInfoRequest): DescribeCreditInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCreditInfoWithOptions(request, runtime);
}

model DescribeDdosCountRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  ddosRegionId?: string(name='DdosRegionId'),
  instanceType?: string(name='InstanceType'),
}

model DescribeDdosCountResponseBody = {
  ddosCount?: {
    defenseCount?: int32(name='DefenseCount'),
    blackholeCount?: int32(name='BlackholeCount'),
    instacenCount?: int32(name='InstacenCount'),
  }(name='DdosCount'),
  requestId?: string(name='RequestId'),
}

model DescribeDdosCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDdosCountResponseBody(name='body'),
}

async function describeDdosCountWithOptions(request: DescribeDdosCountRequest, runtime: Util.RuntimeOptions): DescribeDdosCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDdosCount', '2017-05-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDdosCount(request: DescribeDdosCountRequest): DescribeDdosCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDdosCountWithOptions(request, runtime);
}

model DescribeDdosCreditRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  ddosRegionId?: string(name='DdosRegionId'),
}

model DescribeDdosCreditResponseBody = {
  requestId?: string(name='RequestId'),
  ddosCredit?: {
    score?: int32(name='Score'),
    scoreLevel?: string(name='ScoreLevel'),
    blackholeTime?: int32(name='BlackholeTime'),
  }(name='DdosCredit'),
  success?: boolean(name='Success'),
}

model DescribeDdosCreditResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDdosCreditResponseBody(name='body'),
}

async function describeDdosCreditWithOptions(request: DescribeDdosCreditRequest, runtime: Util.RuntimeOptions): DescribeDdosCreditResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDdosCredit', '2017-05-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDdosCredit(request: DescribeDdosCreditRequest): DescribeDdosCreditResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDdosCreditWithOptions(request, runtime);
}

model DescribeDdosEventListRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  ddosRegionId?: string(name='DdosRegionId'),
  instanceType?: string(name='InstanceType'),
  instanceId?: string(name='InstanceId'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDdosEventListResponseBody = {
  ddosEventList?: [ 
    {
      ddosType?: string(name='DdosType'),
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      delayTime?: long(name='DelayTime'),
      ddosStatus?: string(name='DdosStatus'),
      unBlackholeTime?: long(name='UnBlackholeTime'),
    }
  ](name='DdosEventList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeDdosEventListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDdosEventListResponseBody(name='body'),
}

async function describeDdosEventListWithOptions(request: DescribeDdosEventListRequest, runtime: Util.RuntimeOptions): DescribeDdosEventListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDdosEventList', '2017-05-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDdosEventList(request: DescribeDdosEventListRequest): DescribeDdosEventListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDdosEventListWithOptions(request, runtime);
}

model DescribeDdosThresholdRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  ddosRegionId?: string(name='DdosRegionId'),
  ddosType?: string(name='DdosType'),
  instanceType?: string(name='InstanceType'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribeDdosThresholdResponseBody = {
  requestId?: string(name='RequestId'),
  thresholds?: [ 
    {
      ddosType?: string(name='DdosType'),
      isAuto?: boolean(name='IsAuto'),
      maxBps?: int32(name='MaxBps'),
      elasticBps?: int32(name='ElasticBps'),
      instanceId?: string(name='InstanceId'),
      bps?: int32(name='Bps'),
      pps?: int32(name='Pps'),
      maxPps?: int32(name='MaxPps'),
    }
  ](name='Thresholds'),
}

model DescribeDdosThresholdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDdosThresholdResponseBody(name='body'),
}

async function describeDdosThresholdWithOptions(request: DescribeDdosThresholdRequest, runtime: Util.RuntimeOptions): DescribeDdosThresholdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDdosThreshold', '2017-05-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDdosThreshold(request: DescribeDdosThresholdRequest): DescribeDdosThresholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDdosThresholdWithOptions(request, runtime);
}

model DescribeFlexibleProtectionFlowRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  days?: int32(name='Days'),
}

model DescribeFlexibleProtectionFlowResponseBody = {
  requestId?: string(name='RequestId'),
  flows?: [ 
    {
      usedFlow?: float(name='UsedFlow'),
      time?: long(name='Time'),
      addFlow?: float(name='AddFlow'),
      useableFlow?: float(name='UseableFlow'),
    }
  ](name='Flows'),
}

model DescribeFlexibleProtectionFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlexibleProtectionFlowResponseBody(name='body'),
}

async function describeFlexibleProtectionFlowWithOptions(request: DescribeFlexibleProtectionFlowRequest, runtime: Util.RuntimeOptions): DescribeFlexibleProtectionFlowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeFlexibleProtectionFlow', '2017-05-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFlexibleProtectionFlow(request: DescribeFlexibleProtectionFlowRequest): DescribeFlexibleProtectionFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlexibleProtectionFlowWithOptions(request, runtime);
}

model DescribeFlowgraphRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  eagleEyeTraceId?: string(name='eagleEyeTraceId'),
  eagleEyeRpcId?: string(name='eagleEyeRpcId'),
  eagleEyeUserData?: string(name='eagleEyeUserData'),
  ddosRegionId?: string(name='DdosRegionId'),
  instanceType?: string(name='InstanceType'),
  instanceId?: string(name='InstanceId'),
  days?: int32(name='Days'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model DescribeFlowgraphResponseBody = {
  flowgraphs?: [ 
    {
      time?: long(name='Time'),
      bps?: long(name='Bps'),
      pps?: long(name='Pps'),
    }
  ](name='Flowgraphs'),
  requestId?: string(name='RequestId'),
}

model DescribeFlowgraphResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowgraphResponseBody(name='body'),
}

async function describeFlowgraphWithOptions(request: DescribeFlowgraphRequest, runtime: Util.RuntimeOptions): DescribeFlowgraphResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeFlowgraph', '2017-05-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFlowgraph(request: DescribeFlowgraphRequest): DescribeFlowgraphResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowgraphWithOptions(request, runtime);
}

model DescribeRegionDdosThresholdRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  ddosRegionId?: string(name='DdosRegionId'),
}

model DescribeRegionDdosThresholdResponseBody = {
  requestId?: string(name='RequestId'),
  regionDdosThreshold?: {
    elasticThreshold?: int32(name='ElasticThreshold'),
    baseThreshold?: int32(name='BaseThreshold'),
  }(name='RegionDdosThreshold'),
}

model DescribeRegionDdosThresholdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionDdosThresholdResponseBody(name='body'),
}

async function describeRegionDdosThresholdWithOptions(request: DescribeRegionDdosThresholdRequest, runtime: Util.RuntimeOptions): DescribeRegionDdosThresholdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegionDdosThreshold', '2017-05-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegionDdosThreshold(request: DescribeRegionDdosThresholdRequest): DescribeRegionDdosThresholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionDdosThresholdWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: [ 
    {
      regionEnName?: string(name='RegionEnName'),
      regionName?: string(name='RegionName'),
      regionNo?: string(name='RegionNo'),
      regionNoAlias?: string(name='RegionNoAlias'),
    }
  ](name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2017-05-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeTrafficInfoRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
}

model DescribeTrafficInfoResponseBody = {
  requestId?: string(name='RequestId'),
  trafficInfo?: {
    lastUsedTraffic?: int32(name='LastUsedTraffic'),
    addTraffic?: int32(name='AddTraffic'),
    usableTraffic?: int32(name='UsableTraffic'),
  }(name='TrafficInfo'),
}

model DescribeTrafficInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTrafficInfoResponseBody(name='body'),
}

async function describeTrafficInfoWithOptions(request: DescribeTrafficInfoRequest, runtime: Util.RuntimeOptions): DescribeTrafficInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTrafficInfo', '2017-05-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTrafficInfo(request: DescribeTrafficInfoRequest): DescribeTrafficInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrafficInfoWithOptions(request, runtime);
}

model ModifyDdosStatusRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  ddosRegionId?: string(name='DdosRegionId'),
  instanceType?: string(name='InstanceType'),
  instanceId?: string(name='InstanceId'),
}

model ModifyDdosStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDdosStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDdosStatusResponseBody(name='body'),
}

async function modifyDdosStatusWithOptions(request: ModifyDdosStatusRequest, runtime: Util.RuntimeOptions): ModifyDdosStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDdosStatus', '2017-05-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDdosStatus(request: ModifyDdosStatusRequest): ModifyDdosStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDdosStatusWithOptions(request, runtime);
}

model ModifyDefenseThresholdRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  ddosRegionId?: string(name='DdosRegionId'),
  instanceType?: string(name='InstanceType'),
  instanceId?: string(name='InstanceId'),
  bps?: int32(name='Bps'),
  pps?: int32(name='Pps'),
  isAuto?: boolean(name='IsAuto'),
}

model ModifyDefenseThresholdResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefenseThresholdResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDefenseThresholdResponseBody(name='body'),
}

async function modifyDefenseThresholdWithOptions(request: ModifyDefenseThresholdRequest, runtime: Util.RuntimeOptions): ModifyDefenseThresholdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDefenseThreshold', '2017-05-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDefenseThreshold(request: ModifyDefenseThresholdRequest): ModifyDefenseThresholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDefenseThresholdWithOptions(request, runtime);
}

