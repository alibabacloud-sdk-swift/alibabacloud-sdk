/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  

  checkConfig(config);
  @endpoint = getEndpoint('linkwan', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model GetKpmEncryptedNodeTuplesByOrderIdRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  orderId?: long(name='OrderId'),
}

model GetKpmEncryptedNodeTuplesByOrderIdResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  encryptedNodeTuples?: {
    encryptedNodeTuple?: [ 
    {
      appKeyKcv?: string(name='AppKeyKcv'),
      devEui?: string(name='DevEui'),
      encryptedNwkKey?: string(name='EncryptedNwkKey'),
      nwkKeyKcv?: string(name='NwkKeyKcv'),
      encryptedGenAppKey?: string(name='EncryptedGenAppKey'),
      pinCode?: string(name='PinCode'),
      genAppKeyKcv?: string(name='GenAppKeyKcv'),
      loraVersion?: string(name='LoraVersion'),
      encryptedAppKey?: string(name='EncryptedAppKey'),
    }
  ](name='EncryptedNodeTuple')
  }(name='EncryptedNodeTuples'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  encryptedSessionZmk?: string(name='EncryptedSessionZmk'),
}

model GetKpmEncryptedNodeTuplesByOrderIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetKpmEncryptedNodeTuplesByOrderIdResponseBody(name='body'),
}

async function getKpmEncryptedNodeTuplesByOrderIdWithOptions(request: GetKpmEncryptedNodeTuplesByOrderIdRequest, runtime: Util.RuntimeOptions): GetKpmEncryptedNodeTuplesByOrderIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetKpmEncryptedNodeTuplesByOrderId', '2018-10-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getKpmEncryptedNodeTuplesByOrderId(request: GetKpmEncryptedNodeTuplesByOrderIdRequest): GetKpmEncryptedNodeTuplesByOrderIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getKpmEncryptedNodeTuplesByOrderIdWithOptions(request, runtime);
}

model SubmitKpmEncryptedNodeTupleOrderRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  loraVersion?: string(name='LoraVersion'),
  requiredCount?: long(name='RequiredCount'),
}

model SubmitKpmEncryptedNodeTupleOrderResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  orderId?: long(name='OrderId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SubmitKpmEncryptedNodeTupleOrderResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitKpmEncryptedNodeTupleOrderResponseBody(name='body'),
}

async function submitKpmEncryptedNodeTupleOrderWithOptions(request: SubmitKpmEncryptedNodeTupleOrderRequest, runtime: Util.RuntimeOptions): SubmitKpmEncryptedNodeTupleOrderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitKpmEncryptedNodeTupleOrder', '2018-10-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitKpmEncryptedNodeTupleOrder(request: SubmitKpmEncryptedNodeTupleOrderRequest): SubmitKpmEncryptedNodeTupleOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitKpmEncryptedNodeTupleOrderWithOptions(request, runtime);
}

