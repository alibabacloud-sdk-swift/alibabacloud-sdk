import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'clickhouse.aliyuncs.com',
    ap-southeast-1 = 'clickhouse.aliyuncs.com',
    cn-beijing = 'clickhouse.aliyuncs.com',
    cn-beijing-finance-1 = 'clickhouse.aliyuncs.com',
    cn-beijing-finance-pop = 'clickhouse.aliyuncs.com',
    cn-beijing-gov-1 = 'clickhouse.aliyuncs.com',
    cn-beijing-nu16-b01 = 'clickhouse.aliyuncs.com',
    cn-edge-1 = 'clickhouse.aliyuncs.com',
    cn-fujian = 'clickhouse.aliyuncs.com',
    cn-haidian-cm12-c01 = 'clickhouse.aliyuncs.com',
    cn-hangzhou = 'clickhouse.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-finance = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-test-306 = 'clickhouse.aliyuncs.com',
    cn-hongkong = 'clickhouse.aliyuncs.com',
    cn-hongkong-finance-pop = 'clickhouse.aliyuncs.com',
    cn-north-2-gov-1 = 'clickhouse.aliyuncs.com',
    cn-qingdao = 'clickhouse.aliyuncs.com',
    cn-qingdao-nebula = 'clickhouse.aliyuncs.com',
    cn-shanghai = 'clickhouse.aliyuncs.com',
    cn-shanghai-et15-b01 = 'clickhouse.aliyuncs.com',
    cn-shanghai-et2-b01 = 'clickhouse.aliyuncs.com',
    cn-shanghai-finance-1 = 'clickhouse.aliyuncs.com',
    cn-shanghai-inner = 'clickhouse.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'clickhouse.aliyuncs.com',
    cn-shenzhen = 'clickhouse.aliyuncs.com',
    cn-shenzhen-finance-1 = 'clickhouse.aliyuncs.com',
    cn-shenzhen-inner = 'clickhouse.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'clickhouse.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'clickhouse.aliyuncs.com',
    cn-wuhan = 'clickhouse.aliyuncs.com',
    cn-yushanfang = 'clickhouse.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'clickhouse.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'clickhouse.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'clickhouse.aliyuncs.com',
    eu-west-1-oxs = 'clickhouse.aliyuncs.com',
    me-east-1 = 'clickhouse.aliyuncs.com',
    rus-west-1-pop = 'clickhouse.aliyuncs.com',
    us-east-1 = 'clickhouse.aliyuncs.com',
    us-west-1 = 'clickhouse.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('clickhouse', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DescribeLorneTasksMCountRequest = {
  regionId?: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  taskId: string(name='TaskId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  metricName: string(name='MetricName'),
}

model DescribeLorneTasksMCountResponse = {
  requestId: string(name='RequestId'),
  data: float(name='Data'),
}

async function describeLorneTasksMCountWithOptions(request: DescribeLorneTasksMCountRequest, runtime: Util.RuntimeOptions): DescribeLorneTasksMCountResponse {
  Util.validateModel(request);
  return doRequest('DescribeLorneTasksMCount', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeLorneTasksMCount(request: DescribeLorneTasksMCountRequest): DescribeLorneTasksMCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLorneTasksMCountWithOptions(request, runtime);
}

model DescribeLorneLogRequest = {
  regionId?: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
  taskId: string(name='TaskId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeLorneLogResponse = {
  requestId: string(name='RequestId'),
  pageNumber: integer(name='PageNumber'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  data: [
    {
      code: string(name='Code'),
      message: string(name='Message'),
      count: string(name='Count'),
      startTime: string(name='StartTime'),
      endTime: string(name='EndTime'),
    }
  ](name='Data'),
}

async function describeLorneLogWithOptions(request: DescribeLorneLogRequest, runtime: Util.RuntimeOptions): DescribeLorneLogResponse {
  Util.validateModel(request);
  return doRequest('DescribeLorneLog', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeLorneLog(request: DescribeLorneLogRequest): DescribeLorneLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLorneLogWithOptions(request, runtime);
}

model DescribeLorneTasksMetricsRequest = {
  regionId?: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  taskId: string(name='TaskId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  metricName: string(name='MetricName'),
}

model DescribeLorneTasksMetricsResponse = {
  requestId: string(name='RequestId'),
  data: {
    name: string(name='Name'),
    taskId: string(name='TaskId'),
    columns: [ string ](name='Columns'),
    values: [ string ](name='Values'),
  }(name='Data'),
}

async function describeLorneTasksMetricsWithOptions(request: DescribeLorneTasksMetricsRequest, runtime: Util.RuntimeOptions): DescribeLorneTasksMetricsResponse {
  Util.validateModel(request);
  return doRequest('DescribeLorneTasksMetrics', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeLorneTasksMetrics(request: DescribeLorneTasksMetricsRequest): DescribeLorneTasksMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLorneTasksMetricsWithOptions(request, runtime);
}

model DescribeLorneTasksRequest = {
  regionId: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
}

model DescribeLorneTasksResponse = {
  requestId: string(name='RequestId'),
  pageNumber: integer(name='PageNumber'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  taskDetails: [
    {
      id: string(name='Id'),
      name: string(name='Name'),
      description: string(name='Description'),
      sourceType: string(name='SourceType'),
      sourceProject: string(name='SourceProject'),
      sourceTopic: string(name='SourceTopic'),
      sourceRegion: string(name='SourceRegion'),
      sinkType: string(name='SinkType'),
      sinkInstance: string(name='SinkInstance'),
      sinkSchema: string(name='SinkSchema'),
      sinkTable: string(name='SinkTable'),
      sinkUser: string(name='SinkUser'),
      sinkRegion: string(name='SinkRegion'),
      sinkVpcId: string(name='SinkVpcId'),
      state: string(name='State'),
      strict: string(name='Strict'),
      columnMapper: string(name='ColumnMapper'),
      checkpoint: string(name='Checkpoint'),
      createTime: string(name='CreateTime'),
      message: string(name='Message'),
    }
  ](name='TaskDetails'),
}

async function describeLorneTasksWithOptions(request: DescribeLorneTasksRequest, runtime: Util.RuntimeOptions): DescribeLorneTasksResponse {
  Util.validateModel(request);
  return doRequest('DescribeLorneTasks', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeLorneTasks(request: DescribeLorneTasksRequest): DescribeLorneTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLorneTasksWithOptions(request, runtime);
}

model OperateLorneTaskStatusRequest = {
  DBClusterId: string(name='DBClusterId'),
  taskId: string(name='TaskId'),
  lorneStatus: string(name='LorneStatus'),
}

model OperateLorneTaskStatusResponse = {
  requestId: string(name='RequestId'),
}

async function operateLorneTaskStatusWithOptions(request: OperateLorneTaskStatusRequest, runtime: Util.RuntimeOptions): OperateLorneTaskStatusResponse {
  Util.validateModel(request);
  return doRequest('OperateLorneTaskStatus', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function operateLorneTaskStatus(request: OperateLorneTaskStatusRequest): OperateLorneTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateLorneTaskStatusWithOptions(request, runtime);
}

model DeleteLorneTaskRequest = {
  regionId: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  taskId: string(name='TaskId'),
}

model DeleteLorneTaskResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLorneTaskWithOptions(request: DeleteLorneTaskRequest, runtime: Util.RuntimeOptions): DeleteLorneTaskResponse {
  Util.validateModel(request);
  return doRequest('DeleteLorneTask', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function deleteLorneTask(request: DeleteLorneTaskRequest): DeleteLorneTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLorneTaskWithOptions(request, runtime);
}

model DescribeDBClusterConfigRequest = {
  regionId?: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
}

model DescribeDBClusterConfigResponse = {
  requestId: string(name='RequestId'),
  config: string(name='Config'),
}

async function describeDBClusterConfigWithOptions(request: DescribeDBClusterConfigRequest, runtime: Util.RuntimeOptions): DescribeDBClusterConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterConfig', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeDBClusterConfig(request: DescribeDBClusterConfigRequest): DescribeDBClusterConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterConfigWithOptions(request, runtime);
}

model ModifyAccountAuthorityRequest = {
  regionId?: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  accountName: string(name='AccountName'),
  dmlAuthority: string(name='DmlAuthority'),
  ddlAuthority: boolean(name='DdlAuthority'),
  allowDatabases: string(name='AllowDatabases'),
  totalDatabases: string(name='TotalDatabases'),
  allowDictionaries: string(name='AllowDictionaries'),
  totalDictionaries: string(name='TotalDictionaries'),
}

model ModifyAccountAuthorityResponse = {
  requestId: string(name='RequestId'),
}

async function modifyAccountAuthorityWithOptions(request: ModifyAccountAuthorityRequest, runtime: Util.RuntimeOptions): ModifyAccountAuthorityResponse {
  Util.validateModel(request);
  return doRequest('ModifyAccountAuthority', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function modifyAccountAuthority(request: ModifyAccountAuthorityRequest): ModifyAccountAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountAuthorityWithOptions(request, runtime);
}

model ModifyDBClusterConfigRequest = {
  regionId?: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  userConfig: string(name='UserConfig'),
}

model ModifyDBClusterConfigResponse = {
  requestId: string(name='RequestId'),
}

async function modifyDBClusterConfigWithOptions(request: ModifyDBClusterConfigRequest, runtime: Util.RuntimeOptions): ModifyDBClusterConfigResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterConfig', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function modifyDBClusterConfig(request: ModifyDBClusterConfigRequest): ModifyDBClusterConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterConfigWithOptions(request, runtime);
}

model CreateAccountAndAuthorityRequest = {
  regionId?: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  accountName: string(name='AccountName'),
  accountPassword: string(name='AccountPassword'),
  accountDescription?: string(name='AccountDescription'),
  dmlAuthority: string(name='DmlAuthority'),
  ddlAuthority: boolean(name='DdlAuthority'),
  allowDatabases: string(name='AllowDatabases'),
  totalDatabases: string(name='TotalDatabases'),
  allowDictionaries: string(name='AllowDictionaries'),
  totalDictionaries: string(name='TotalDictionaries'),
}

model CreateAccountAndAuthorityResponse = {
  requestId: string(name='RequestId'),
}

async function createAccountAndAuthorityWithOptions(request: CreateAccountAndAuthorityRequest, runtime: Util.RuntimeOptions): CreateAccountAndAuthorityResponse {
  Util.validateModel(request);
  return doRequest('CreateAccountAndAuthority', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function createAccountAndAuthority(request: CreateAccountAndAuthorityRequest): CreateAccountAndAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountAndAuthorityWithOptions(request, runtime);
}

model DescribeAccountAuthorityRequest = {
  regionId?: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
}

model DescribeAccountAuthorityResponse = {
  requestId: string(name='RequestId'),
  accountName: string(name='AccountName'),
  dmlAuthority: string(name='DmlAuthority'),
  ddlAuthority: boolean(name='DdlAuthority'),
  allowDatabases: [ string ] (name='AllowDatabases'),
  totalDatabases: [ string ] (name='TotalDatabases'),
  allowDictionaries: [ string ] (name='AllowDictionaries'),
  totalDictionaries: [ string ] (name='TotalDictionaries'),
}

async function describeAccountAuthorityWithOptions(request: DescribeAccountAuthorityRequest, runtime: Util.RuntimeOptions): DescribeAccountAuthorityResponse {
  Util.validateModel(request);
  return doRequest('DescribeAccountAuthority', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeAccountAuthority(request: DescribeAccountAuthorityRequest): DescribeAccountAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountAuthorityWithOptions(request, runtime);
}

model ModifyDBClusterRequest = {
  DBClusterId: string(name='DBClusterId'),
  DBNodeGroupCount: string(name='DBNodeGroupCount'),
  DBNodeStorage: string(name='DBNodeStorage'),
  DBClusterClass: string(name='DBClusterClass'),
  regionId: string(name='RegionId'),
}

model ModifyDBClusterResponse = {
  requestId: string(name='RequestId'),
  DBCluster: string(name='DBCluster'),
}

async function modifyDBClusterWithOptions(request: ModifyDBClusterRequest, runtime: Util.RuntimeOptions): ModifyDBClusterResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBCluster', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function modifyDBCluster(request: ModifyDBClusterRequest): ModifyDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterWithOptions(request, runtime);
}

model DescribeLogHubAttributeRequest = {
  regionId?: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  projectName?: string(name='ProjectName'),
  logStoreName?: string(name='LogStoreName'),
  deliverName?: string(name='DeliverName'),
  taskId: string(name='TaskId'),
}

model DescribeLogHubAttributeResponse = {
  requestId: string(name='RequestId'),
  loghubInfo: {
    id: string(name='Id'),
    deliverName: string(name='DeliverName'),
    description: string(name='Description'),
    projectName: string(name='ProjectName'),
    logStoreName: string(name='LogStoreName'),
    DBType: string(name='DBType'),
    DBClusterId: string(name='DBClusterId'),
    schemaName: string(name='SchemaName'),
    tableName: string(name='TableName'),
    userName: string(name='UserName'),
    regionId: string(name='RegionId'),
    filterDirtyData: string(name='FilterDirtyData'),
    deliverTime: string(name='DeliverTime'),
    zoneId: string(name='ZoneId'),
    password: string(name='Password'),
    domainUrl: string(name='DomainUrl'),
    logHubStores: {
      logHubStore: [
        {
          logKey: string(name='LogKey'),
          fieldKey: string(name='FieldKey'),
          type: string(name='Type'),
        }
      ](name='LogHubStore'),
    }(name='LogHubStores'),
  }(name='LoghubInfo'),
}

async function describeLogHubAttributeWithOptions(request: DescribeLogHubAttributeRequest, runtime: Util.RuntimeOptions): DescribeLogHubAttributeResponse {
  Util.validateModel(request);
  return doRequest('DescribeLogHubAttribute', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeLogHubAttribute(request: DescribeLogHubAttributeRequest): DescribeLogHubAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogHubAttributeWithOptions(request, runtime);
}

model CreateServiceLinkedRoleRequest = {
}

model CreateServiceLinkedRoleResponse = {
  requestId: string(name='RequestId'),
}

async function createServiceLinkedRoleWithOptions(request: CreateServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CreateServiceLinkedRoleResponse {
  Util.validateModel(request);
  return doRequest('CreateServiceLinkedRole', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleWithOptions(request, runtime);
}

model CheckServiceLinkedRoleRequest = {
}

model CheckServiceLinkedRoleResponse = {
  requestId: string(name='RequestId'),
  hasServiceLinkedRole: boolean(name='HasServiceLinkedRole'),
}

async function checkServiceLinkedRoleWithOptions(request: CheckServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CheckServiceLinkedRoleResponse {
  Util.validateModel(request);
  return doRequest('CheckServiceLinkedRole', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function checkServiceLinkedRole(request: CheckServiceLinkedRoleRequest): CheckServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkServiceLinkedRoleWithOptions(request, runtime);
}

model ModifyDBConfigRequest = {
  regionId?: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  config?: string(name='Config'),
}

model ModifyDBConfigResponse = {
  requestId: string(name='RequestId'),
}

async function modifyDBConfigWithOptions(request: ModifyDBConfigRequest, runtime: Util.RuntimeOptions): ModifyDBConfigResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBConfig', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function modifyDBConfig(request: ModifyDBConfigRequest): ModifyDBConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBConfigWithOptions(request, runtime);
}

model CheckScaleOutBalancedRequest = {
  regionId: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
}

model CheckScaleOutBalancedResponse = {
  pageNumber: integer(name='PageNumber'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  checkCode: string(name='CheckCode'),
  timeDuration: string(name='TimeDuration'),
  requestId: string(name='RequestId'),
  tableDetails: {
    tableDetail: [
      {
        tableName: string(name='TableName'),
        database: string(name='Database'),
        cluster: string(name='Cluster'),
        detail: integer(name='Detail'),
      }
    ](name='TableDetail'),
  }(name='TableDetails'),
}

async function checkScaleOutBalancedWithOptions(request: CheckScaleOutBalancedRequest, runtime: Util.RuntimeOptions): CheckScaleOutBalancedResponse {
  Util.validateModel(request);
  return doRequest('CheckScaleOutBalanced', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function checkScaleOutBalanced(request: CheckScaleOutBalancedRequest): CheckScaleOutBalancedResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkScaleOutBalancedWithOptions(request, runtime);
}

model DescribeDBConfigRequest = {
  regionId?: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
}

model DescribeDBConfigResponse = {
  requestId: string(name='RequestId'),
  config: string(name='Config'),
}

async function describeDBConfigWithOptions(request: DescribeDBConfigRequest, runtime: Util.RuntimeOptions): DescribeDBConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBConfig', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeDBConfig(request: DescribeDBConfigRequest): DescribeDBConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBConfigWithOptions(request, runtime);
}

model DescribeProcessListRequest = {
  regionId?: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  queryDurationMs?: integer(name='QueryDurationMs'),
  initialUser?: string(name='InitialUser'),
  keyword?: string(name='Keyword'),
  order?: string(name='Order'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
  initialQueryId?: string(name='InitialQueryId'),
}

model DescribeProcessListResponse = {
  requestId: string(name='RequestId'),
  processList: {
    rows: string(name='Rows'),
    rowsBeforeLimitAtLeast: string(name='RowsBeforeLimitAtLeast'),
    data: {
      resultSet: [
        {
          initialQueryId: string(name='InitialQueryId'),
          initialUser: string(name='InitialUser'),
          initialAddress: string(name='InitialAddress'),
          queryDurationMs: string(name='QueryDurationMs'),
          queryStartTime: string(name='QueryStartTime'),
          query: string(name='Query'),
        }
      ](name='ResultSet'),
    }(name='Data'),
    tableSchema: {
      resultSet: [
        {
          name: string(name='Name'),
          type: string(name='Type'),
        }
      ](name='ResultSet'),
    }(name='TableSchema'),
    statistics: {
      bytesRead: integer(name='BytesRead'),
      elapsedTime: float(name='ElapsedTime'),
      rowsRead: integer(name='RowsRead'),
    }(name='Statistics'),
  }(name='ProcessList'),
}

async function describeProcessListWithOptions(request: DescribeProcessListRequest, runtime: Util.RuntimeOptions): DescribeProcessListResponse {
  Util.validateModel(request);
  return doRequest('DescribeProcessList', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeProcessList(request: DescribeProcessListRequest): DescribeProcessListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProcessListWithOptions(request, runtime);
}

model DescribeSlowLogTrendRequest = {
  regionId?: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  queryDurationMs?: integer(name='QueryDurationMs'),
}

model DescribeSlowLogTrendResponse = {
  requestId: string(name='RequestId'),
  slowLogTrend: {
    rows: string(name='Rows'),
    rowsBeforeLimitAtLeast: string(name='RowsBeforeLimitAtLeast'),
    data: {
      resultSet: [
        {
          maxQueryDurationMs: string(name='MaxQueryDurationMs'),
          count: string(name='Count'),
          minQueryDurationMs: string(name='MinQueryDurationMs'),
          avgQueryDurationMs: string(name='AvgQueryDurationMs'),
          queryStartTime: string(name='QueryStartTime'),
        }
      ](name='ResultSet'),
    }(name='Data'),
    tableSchema: {
      resultSet: [
        {
          name: string(name='Name'),
          type: string(name='Type'),
        }
      ](name='ResultSet'),
    }(name='TableSchema'),
    statistics: {
      bytesRead: integer(name='BytesRead'),
      elapsedTime: float(name='ElapsedTime'),
      rowsRead: integer(name='RowsRead'),
    }(name='Statistics'),
  }(name='SlowLogTrend'),
}

async function describeSlowLogTrendWithOptions(request: DescribeSlowLogTrendRequest, runtime: Util.RuntimeOptions): DescribeSlowLogTrendResponse {
  Util.validateModel(request);
  return doRequest('DescribeSlowLogTrend', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeSlowLogTrend(request: DescribeSlowLogTrendRequest): DescribeSlowLogTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogTrendWithOptions(request, runtime);
}

model DescribeSlowLogRecordsRequest = {
  regionId?: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
  queryDurationMs?: integer(name='QueryDurationMs'),
}

model DescribeSlowLogRecordsResponse = {
  requestId: string(name='RequestId'),
  slowLogRecords: {
    rows: string(name='Rows'),
    rowsBeforeLimitAtLeast: string(name='RowsBeforeLimitAtLeast'),
    data: {
      resultSet: [
        {
          initialQueryId: string(name='InitialQueryId'),
          initialUser: string(name='InitialUser'),
          initialAddress: string(name='InitialAddress'),
          queryDurationMs: string(name='QueryDurationMs'),
          queryStartTime: string(name='QueryStartTime'),
          query: string(name='Query'),
          readRows: string(name='ReadRows'),
          readBytes: string(name='ReadBytes'),
          resultBytes: string(name='ResultBytes'),
          memoryUsage: string(name='MemoryUsage'),
          type: string(name='Type'),
        }
      ](name='ResultSet'),
    }(name='Data'),
    tableSchema: {
      resultSet: [
        {
          name: string(name='Name'),
          type: string(name='Type'),
        }
      ](name='ResultSet'),
    }(name='TableSchema'),
    statistics: {
      bytesRead: integer(name='BytesRead'),
      elapsedTime: float(name='ElapsedTime'),
      rowsRead: integer(name='RowsRead'),
    }(name='Statistics'),
  }(name='SlowLogRecords'),
}

async function describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogRecordsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSlowLogRecords', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogRecordsWithOptions(request, runtime);
}

model KillProcessRequest = {
  regionId?: string(name='RegionId'),
  DBClusterId: string(name='DBClusterId'),
  initialQueryId?: string(name='InitialQueryId'),
}

model KillProcessResponse = {
  requestId: string(name='RequestId'),
}

async function killProcessWithOptions(request: KillProcessRequest, runtime: Util.RuntimeOptions): KillProcessResponse {
  Util.validateModel(request);
  return doRequest('KillProcess', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function killProcess(request: KillProcessRequest): KillProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return killProcessWithOptions(request, runtime);
}

model DescribeAllDataSourceRequest = {
  DBClusterId: string(name='DBClusterId'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
}

model DescribeAllDataSourceResponse = {
  requestId: string(name='RequestId'),
  schemas: {
    schema: [
      {
        DBClusterId: string(name='DBClusterId'),
        schemaName: string(name='SchemaName'),
      }
    ](name='Schema'),
  }(name='Schemas'),
  tables: {
    table: [
      {
        DBClusterId: string(name='DBClusterId'),
        schemaName: string(name='SchemaName'),
        tableName: string(name='TableName'),
      }
    ](name='Table'),
  }(name='Tables'),
  columns: {
    column: [
      {
        DBClusterId: string(name='DBClusterId'),
        schemaName: string(name='SchemaName'),
        tableName: string(name='TableName'),
        columnName: string(name='ColumnName'),
        type: string(name='Type'),
        primaryKey: boolean(name='PrimaryKey'),
        autoIncrementColumn: boolean(name='AutoIncrementColumn'),
      }
    ](name='Column'),
  }(name='Columns'),
}

async function describeAllDataSourceWithOptions(request: DescribeAllDataSourceRequest, runtime: Util.RuntimeOptions): DescribeAllDataSourceResponse {
  Util.validateModel(request);
  return doRequest('DescribeAllDataSource', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeAllDataSource(request: DescribeAllDataSourceRequest): DescribeAllDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllDataSourceWithOptions(request, runtime);
}

model DescribeColumnsRequest = {
  DBClusterId: string(name='DBClusterId'),
  schemaName: string(name='SchemaName'),
  tableName: string(name='TableName'),
}

model DescribeColumnsResponse = {
  requestId: string(name='RequestId'),
  items: {
    column: [
      {
        DBClusterId: string(name='DBClusterId'),
        schemaName: string(name='SchemaName'),
        tableName: string(name='TableName'),
        columnName: string(name='ColumnName'),
        type: string(name='Type'),
        primaryKey: boolean(name='PrimaryKey'),
        autoIncrementColumn: boolean(name='AutoIncrementColumn'),
      }
    ](name='Column'),
  }(name='Items'),
}

async function describeColumnsWithOptions(request: DescribeColumnsRequest, runtime: Util.RuntimeOptions): DescribeColumnsResponse {
  Util.validateModel(request);
  return doRequest('DescribeColumns', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeColumns(request: DescribeColumnsRequest): DescribeColumnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeColumnsWithOptions(request, runtime);
}

model DescribeTablesRequest = {
  DBClusterId: string(name='DBClusterId'),
  schemaName: string(name='SchemaName'),
  tableName?: string(name='TableName'),
}

model DescribeTablesResponse = {
  requestId: string(name='RequestId'),
  items: {
    table: [
      {
        DBClusterId: string(name='DBClusterId'),
        schemaName: string(name='SchemaName'),
        tableName: string(name='TableName'),
      }
    ](name='Table'),
  }(name='Items'),
}

async function describeTablesWithOptions(request: DescribeTablesRequest, runtime: Util.RuntimeOptions): DescribeTablesResponse {
  Util.validateModel(request);
  return doRequest('DescribeTables', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeTables(request: DescribeTablesRequest): DescribeTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTablesWithOptions(request, runtime);
}

model DescribeSchemasRequest = {
  DBClusterId: string(name='DBClusterId'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
}

model DescribeSchemasResponse = {
  requestId: string(name='RequestId'),
  items: {
    schema: [
      {
        DBClusterId: string(name='DBClusterId'),
        schemaName: string(name='SchemaName'),
      }
    ](name='Schema'),
  }(name='Items'),
}

async function describeSchemasWithOptions(request: DescribeSchemasRequest, runtime: Util.RuntimeOptions): DescribeSchemasResponse {
  Util.validateModel(request);
  return doRequest('DescribeSchemas', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeSchemas(request: DescribeSchemasRequest): DescribeSchemasResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSchemasWithOptions(request, runtime);
}

model DescribeAllDataSourcesRequest = {
  DBClusterId: string(name='DBClusterId'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
}

model DescribeAllDataSourcesResponse = {
  requestId: string(name='RequestId'),
  schemas: {
    schema: [
      {
        DBClusterId: string(name='DBClusterId'),
        schemaName: string(name='SchemaName'),
      }
    ](name='Schema'),
  }(name='Schemas'),
  tables: {
    table: [
      {
        DBClusterId: string(name='DBClusterId'),
        schemaName: string(name='SchemaName'),
        tableName: string(name='TableName'),
      }
    ](name='Table'),
  }(name='Tables'),
  columns: {
    column: [
      {
        DBClusterId: string(name='DBClusterId'),
        schemaName: string(name='SchemaName'),
        tableName: string(name='TableName'),
        columnName: string(name='ColumnName'),
        type: string(name='Type'),
        primaryKey: boolean(name='PrimaryKey'),
        autoIncrementColumn: boolean(name='AutoIncrementColumn'),
      }
    ](name='Column'),
  }(name='Columns'),
}

async function describeAllDataSourcesWithOptions(request: DescribeAllDataSourcesRequest, runtime: Util.RuntimeOptions): DescribeAllDataSourcesResponse {
  Util.validateModel(request);
  return doRequest('DescribeAllDataSources', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeAllDataSources(request: DescribeAllDataSourcesRequest): DescribeAllDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllDataSourcesWithOptions(request, runtime);
}

model DescribeLoghubDetailRequest = {
  regionId: string(name='RegionId'),
  projectName?: string(name='ProjectName'),
  exportName?: string(name='ExportName'),
}

model DescribeLoghubDetailResponse = {
  requestId: string(name='RequestId'),
  loghubInfo: {
    projectName: string(name='ProjectName'),
    logStoreName: string(name='LogStoreName'),
    deliverName: string(name='DeliverName'),
    deliverTime: string(name='DeliverTime'),
    domainUrl: string(name='DomainUrl'),
    description: string(name='Description'),
    schemaName: string(name='SchemaName'),
    tableName: string(name='TableName'),
    regionId: string(name='RegionId'),
    zoneId: string(name='ZoneId'),
    userName: string(name='UserName'),
    password: string(name='Password'),
    filterDirtyData: boolean(name='FilterDirtyData'),
    accessKey: string(name='AccessKey'),
    accessSecret: string(name='AccessSecret'),
    DBType: string(name='DBType'),
    DBClusterId: string(name='DBClusterId'),
    logHubStores: {
      logHubStore: [
        {
          logKey: string(name='LogKey'),
          fieldKey: string(name='FieldKey'),
          type: string(name='Type'),
        }
      ](name='LogHubStore'),
    }(name='LogHubStores'),
  }(name='LoghubInfo'),
}

async function describeLoghubDetailWithOptions(request: DescribeLoghubDetailRequest, runtime: Util.RuntimeOptions): DescribeLoghubDetailResponse {
  Util.validateModel(request);
  return doRequest('DescribeLoghubDetail', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeLoghubDetail(request: DescribeLoghubDetailRequest): DescribeLoghubDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoghubDetailWithOptions(request, runtime);
}

model OperateLogHubRequest = {
  create: boolean(name='Create'),
  DBClusterId: string(name='DBClusterId'),
  projectName: string(name='ProjectName'),
  logStoreName: string(name='LogStoreName'),
  deliverName: string(name='DeliverName'),
  deliverTime: string(name='DeliverTime'),
  description: string(name='Description'),
  domainUrl: string(name='DomainUrl'),
  schemaName: string(name='SchemaName'),
  tableName: string(name='TableName'),
  userName: string(name='UserName'),
  password: string(name='Password'),
  filterDirtyData?: boolean(name='FilterDirtyData'),
  logHubStores: [
    {
      logKey: string(name='LogKey'),
      fieldKey: string(name='FieldKey'),
      type: string(name='Type'),
    }
  ](name='LogHubStores'),
  accessKey?: string(name='AccessKey'),
  accessSecret?: string(name='AccessSecret'),
  useLorne?: boolean(name='UseLorne'),
  taskId?: string(name='TaskId'),
}

model OperateLogHubResponse = {
  requestId: string(name='RequestId'),
}

async function operateLogHubWithOptions(request: OperateLogHubRequest, runtime: Util.RuntimeOptions): OperateLogHubResponse {
  Util.validateModel(request);
  return doRequest('OperateLogHub', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function operateLogHub(request: OperateLogHubRequest): OperateLogHubResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateLogHubWithOptions(request, runtime);
}

model DescribeLogStoreKeysRequest = {
  regionId: string(name='RegionId'),
  projectName: string(name='ProjectName'),
  logStoreName: string(name='LogStoreName'),
}

model DescribeLogStoreKeysResponse = {
  requestId: string(name='RequestId'),
  logStoreKeys: {
    logStoreKey: [ string ](name='LogStoreKey'),
  }(name='LogStoreKeys'),
}

async function describeLogStoreKeysWithOptions(request: DescribeLogStoreKeysRequest, runtime: Util.RuntimeOptions): DescribeLogStoreKeysResponse {
  Util.validateModel(request);
  return doRequest('DescribeLogStoreKeys', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeLogStoreKeys(request: DescribeLogStoreKeysRequest): DescribeLogStoreKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogStoreKeysWithOptions(request, runtime);
}

model CreateDBInstanceRequest = {
  regionId: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  DBClusterVersion: string(name='DBClusterVersion'),
  DBClusterCategory: string(name='DBClusterCategory'),
  DBClusterClass: string(name='DBClusterClass'),
  DBNodeGroupCount: string(name='DBNodeGroupCount'),
  DBNodeStorage: string(name='DBNodeStorage'),
  DBClusterNetworkType: string(name='DBClusterNetworkType'),
  DBClusterDescription?: string(name='DBClusterDescription'),
  payType: string(name='PayType'),
  period?: string(name='Period'),
  usedTime?: string(name='UsedTime'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  clientToken?: string(name='ClientToken'),
  dbNodeStorageType: string(name='DbNodeStorageType'),
}

model CreateDBInstanceResponse = {
  requestId: string(name='RequestId'),
  DBClusterId: string(name='DBClusterId'),
  orderId: string(name='OrderId'),
}

async function createDBInstanceWithOptions(request: CreateDBInstanceRequest, runtime: Util.RuntimeOptions): CreateDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateDBInstance', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstanceWithOptions(request, runtime);
}

model DescribeAvailableResourceRequest = {
  regionId: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  chargeType?: string(name='ChargeType'),
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeAvailableResourceResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
  availableZoneList: {
    availableZone: [
      {
        zoneId: string(name='ZoneId'),
        supportedSerialList: {
          supportedSerial: [
            {
              serial: string(name='Serial'),
              supportedInstanceClassList: {
                supportedInstanceClass: [
                  {
                    instanceClass: string(name='InstanceClass'),
                    tips: string(name='Tips'),
                    supportedNodeCountList: {
                      supportedNodeCount: [
                        {
                          nodeCount: {
                            minCount: string(name='MinCount'),
                            maxCount: string(name='MaxCount'),
                            step: string(name='Step'),
                          }(name='NodeCount'),
                          storageSize: {
                            storageSize: [ string ](name='StorageSize', description='StorageSize'),
                          }(name='StorageSize'),
                        }
                      ](name='SupportedNodeCount'),
                    }(name='SupportedNodeCountList'),
                    supportedExecutorList: {
                      supportedExecutor: [
                        {
                          nodeCount: {
                            minCount: string(name='MinCount'),
                            maxCount: string(name='MaxCount'),
                            step: string(name='Step'),
                          }(name='NodeCount'),
                        }
                      ](name='SupportedExecutor'),
                    }(name='SupportedExecutorList'),
                  }
                ](name='SupportedInstanceClass'),
              }(name='SupportedInstanceClassList'),
            }
          ](name='SupportedSerial'),
        }(name='SupportedSerialList'),
      }
    ](name='AvailableZone'),
  }(name='AvailableZoneList'),
}

async function describeAvailableResourceWithOptions(request: DescribeAvailableResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourceResponse {
  Util.validateModel(request);
  return doRequest('DescribeAvailableResource', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceWithOptions(request, runtime);
}

model DescribeDBClusterPerformanceRequest = {
  DBClusterId: string(name='DBClusterId'),
  key?: string(name='Key'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model DescribeDBClusterPerformanceResponse = {
  DBClusterId: string(name='DBClusterId'),
  endTime: string(name='EndTime'),
  requestId: string(name='RequestId'),
  startTime: string(name='StartTime'),
  performances: [
    {
      key: string(name='Key'),
      unit: string(name='Unit'),
      name: string(name='Name'),
      series: [
        {
          name: string(name='Name'),
          values: [
            {
              point: [ string ](name='Point'),
            }
          ](name='Values'),
        }
      ](name='Series'),
    }
  ](name='Performances'),
}

async function describeDBClusterPerformanceWithOptions(request: DescribeDBClusterPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBClusterPerformanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterPerformance', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterPerformanceWithOptions(request, runtime);
}

model AllocateClusterPublicConnectionRequest = {
  DBClusterId: string(name='DBClusterId'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
}

model AllocateClusterPublicConnectionResponse = {
  requestId: string(name='RequestId'),
}

async function allocateClusterPublicConnectionWithOptions(request: AllocateClusterPublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateClusterPublicConnectionResponse {
  Util.validateModel(request);
  return doRequest('AllocateClusterPublicConnection', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function allocateClusterPublicConnection(request: AllocateClusterPublicConnectionRequest): AllocateClusterPublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateClusterPublicConnectionWithOptions(request, runtime);
}

model ReleaseClusterPublicConnectionRequest = {
  DBClusterId: string(name='DBClusterId'),
}

model ReleaseClusterPublicConnectionResponse = {
  requestId: string(name='RequestId'),
}

async function releaseClusterPublicConnectionWithOptions(request: ReleaseClusterPublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseClusterPublicConnectionResponse {
  Util.validateModel(request);
  return doRequest('ReleaseClusterPublicConnection', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function releaseClusterPublicConnection(request: ReleaseClusterPublicConnectionRequest): ReleaseClusterPublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseClusterPublicConnectionWithOptions(request, runtime);
}

model DeleteAccountRequest = {
  DBClusterId: string(name='DBClusterId'),
  accountName: string(name='AccountName'),
}

model DeleteAccountResponse = {
  requestId: string(name='RequestId'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  return doRequest('DeleteAccount', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model CreateAccountRequest = {
  DBClusterId: string(name='DBClusterId'),
  accountName: string(name='AccountName'),
  accountPassword: string(name='AccountPassword'),
  accountDescription?: string(name='AccountDescription'),
}

model CreateAccountResponse = {
  requestId: string(name='RequestId'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  return doRequest('CreateAccount', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model DescribeAccountsRequest = {
  DBClusterId: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
}

model DescribeAccountsResponse = {
  requestId: string(name='RequestId'),
  pageNumber: integer(name='PageNumber'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  accounts: {
    account: [
      {
        accountName: string(name='AccountName'),
        accountStatus: string(name='AccountStatus'),
        accountDescription: string(name='AccountDescription'),
        accountType: string(name='AccountType'),
      }
    ](name='Account'),
  }(name='Accounts'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  return doRequest('DescribeAccounts', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model ModifyDBClusterAccessWhiteListRequest = {
  DBClusterId: string(name='DBClusterId'),
  securityIps: string(name='SecurityIps'),
  DBClusterIPArrayName?: string(name='DBClusterIPArrayName'),
  DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute'),
  modifyMode?: string(name='ModifyMode'),
}

model ModifyDBClusterAccessWhiteListResponse = {
  requestId: string(name='RequestId'),
}

async function modifyDBClusterAccessWhiteListWithOptions(request: ModifyDBClusterAccessWhiteListRequest, runtime: Util.RuntimeOptions): ModifyDBClusterAccessWhiteListResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterAccessWhiteList', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function modifyDBClusterAccessWhiteList(request: ModifyDBClusterAccessWhiteListRequest): ModifyDBClusterAccessWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterAccessWhiteListWithOptions(request, runtime);
}

model DescribeDBClusterAccessWhiteListRequest = {
  DBClusterId: string(name='DBClusterId'),
}

model DescribeDBClusterAccessWhiteListResponse = {
  requestId: string(name='RequestId'),
  DBClusterAccessWhiteList: {
    IPArray: [
      {
        DBClusterIPArrayName: string(name='DBClusterIPArrayName'),
        securityIPList: string(name='SecurityIPList'),
        DBClusterIPArrayAttribute: string(name='DBClusterIPArrayAttribute'),
      }
    ](name='IPArray'),
  }(name='DBClusterAccessWhiteList'),
}

async function describeDBClusterAccessWhiteListWithOptions(request: DescribeDBClusterAccessWhiteListRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAccessWhiteListResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterAccessWhiteList', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeDBClusterAccessWhiteList(request: DescribeDBClusterAccessWhiteListRequest): DescribeDBClusterAccessWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAccessWhiteListWithOptions(request, runtime);
}

model ModifyDBClusterMaintainTimeRequest = {
  DBClusterId: string(name='DBClusterId'),
  maintainTime: string(name='MaintainTime'),
}

model ModifyDBClusterMaintainTimeResponse = {
  requestId: string(name='RequestId'),
}

async function modifyDBClusterMaintainTimeWithOptions(request: ModifyDBClusterMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyDBClusterMaintainTimeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterMaintainTime', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function modifyDBClusterMaintainTime(request: ModifyDBClusterMaintainTimeRequest): ModifyDBClusterMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterMaintainTimeWithOptions(request, runtime);
}

model ModifyDBClusterDescriptionRequest = {
  DBClusterId: string(name='DBClusterId'),
  DBClusterDescription: string(name='DBClusterDescription'),
}

model ModifyDBClusterDescriptionResponse = {
  requestId: string(name='RequestId'),
}

async function modifyDBClusterDescriptionWithOptions(request: ModifyDBClusterDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBClusterDescriptionResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterDescription', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function modifyDBClusterDescription(request: ModifyDBClusterDescriptionRequest): ModifyDBClusterDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterDescriptionWithOptions(request, runtime);
}

model DeleteDBClusterRequest = {
  DBClusterId: string(name='DBClusterId'),
}

model DeleteDBClusterResponse = {
  requestId: string(name='RequestId'),
}

async function deleteDBClusterWithOptions(request: DeleteDBClusterRequest, runtime: Util.RuntimeOptions): DeleteDBClusterResponse {
  Util.validateModel(request);
  return doRequest('DeleteDBCluster', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBClusterWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest = {
  DBClusterId: string(name='DBClusterId'),
  accountName: string(name='AccountName'),
  accountDescription: string(name='AccountDescription'),
}

model ModifyAccountDescriptionResponse = {
  requestId: string(name='RequestId'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  return doRequest('ModifyAccountDescription', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ResetAccountPasswordRequest = {
  DBClusterId: string(name='DBClusterId'),
  accountName: string(name='AccountName'),
  accountPassword: string(name='AccountPassword'),
}

model ResetAccountPasswordResponse = {
  requestId: string(name='RequestId'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  return doRequest('ResetAccountPassword', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model DescribeDBClusterAttributeRequest = {
  DBClusterId: string(name='DBClusterId'),
}

model DescribeDBClusterAttributeResponse = {
  requestId: string(name='RequestId'),
  DBCluster: {
    regionId: string(name='RegionId'),
    zoneId: string(name='ZoneId'),
    DBClusterId: string(name='DBClusterId'),
    DBClusterType: string(name='DBClusterType'),
    DBClusterDescription: string(name='DBClusterDescription'),
    category: string(name='Category'),
    lockMode: string(name='LockMode'),
    lockReason: string(name='LockReason'),
    payType: string(name='PayType'),
    DBClusterStatus: string(name='DBClusterStatus'),
    DBNodeStorage: long(name='DBNodeStorage'),
    DBNodeClass: string(name='DBNodeClass'),
    DBNodeCount: long(name='DBNodeCount'),
    createTime: string(name='CreateTime'),
    engine: string(name='Engine'),
    engineVersion: string(name='EngineVersion'),
    expireTime: string(name='ExpireTime'),
    isExpired: string(name='IsExpired'),
    maintainTime: string(name='MaintainTime'),
    vpcId: string(name='VpcId'),
    vSwitchId: string(name='VSwitchId'),
    vpcCloudInstanceId: string(name='VpcCloudInstanceId'),
    commodityCode: string(name='CommodityCode'),
    DBClusterNetworkType: string(name='DBClusterNetworkType'),
    storageType: string(name='StorageType'),
    publicConnectionString: string(name='PublicConnectionString'),
    publicPort: string(name='PublicPort'),
    connectionString: string(name='ConnectionString'),
    port: integer(name='Port'),
    aliUid: string(name='AliUid'),
    bid: string(name='Bid'),
    tags: {
      tag: [
        {
          key: string(name='Key'),
          value: string(name='Value'),
        }
      ](name='Tag'),
    }(name='Tags'),
    scaleOutStatus: {
      progress: string(name='Progress'),
      ratio: string(name='Ratio'),
    }(name='ScaleOutStatus'),
  }(name='DBCluster'),
}

async function describeDBClusterAttributeWithOptions(request: DescribeDBClusterAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAttributeResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterAttribute', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeDBClusterAttribute(request: DescribeDBClusterAttributeRequest): DescribeDBClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAttributeWithOptions(request, runtime);
}

model DescribeDBClustersRequest = {
  regionId: string(name='RegionId'),
  DBClusterIds?: string(name='DBClusterIds'),
  DBClusterDescription?: string(name='DBClusterDescription'),
  DBClusterStatus?: string(name='DBClusterStatus'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDBClustersResponse = {
  requestId: string(name='RequestId'),
  pageNumber: integer(name='PageNumber'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  DBClusters: {
    DBCluster: [
      {
        DBClusterId: string(name='DBClusterId'),
        category: string(name='Category'),
        DBClusterDescription: string(name='DBClusterDescription'),
        payType: string(name='PayType'),
        regionId: string(name='RegionId'),
        zoneId: string(name='ZoneId'),
        expireTime: string(name='ExpireTime'),
        isExpired: string(name='IsExpired'),
        DBClusterStatus: string(name='DBClusterStatus'),
        lockMode: string(name='LockMode'),
        lockReason: string(name='LockReason'),
        createTime: string(name='CreateTime'),
        DBNodeStorage: long(name='DBNodeStorage'),
        DBNodeClass: string(name='DBNodeClass'),
        DBNodeCount: long(name='DBNodeCount'),
        storageType: string(name='StorageType'),
        connectionString: string(name='ConnectionString'),
        port: integer(name='Port'),
        aliUid: string(name='AliUid'),
        bid: string(name='Bid'),
        DBClusterNetworkType: string(name='DBClusterNetworkType'),
        vpcId: string(name='VpcId'),
        vSwitchId: string(name='VSwitchId'),
        vpcCloudInstanceId: string(name='VpcCloudInstanceId'),
        commodityCode: string(name='CommodityCode'),
        tags: {
          tag: [
            {
              key: string(name='Key'),
              value: string(name='Value'),
            }
          ](name='Tag'),
        }(name='Tags'),
        scaleOutStatus: {
          progress: string(name='Progress'),
          ratio: string(name='Ratio'),
        }(name='ScaleOutStatus'),
      }
    ](name='DBCluster'),
  }(name='DBClusters'),
}

async function describeDBClustersWithOptions(request: DescribeDBClustersRequest, runtime: Util.RuntimeOptions): DescribeDBClustersResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusters', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeDBClusters(request: DescribeDBClustersRequest): DescribeDBClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClustersWithOptions(request, runtime);
}

model DescribeRegionsRequest = {
}

model DescribeRegionsResponse = {
  requestId: string(name='RequestId'),
  regions: {
    region: [
      {
        regionId: string(name='RegionId'),
        zones: {
          zone: [
            {
              zoneId: string(name='ZoneId'),
              vpcEnabled: boolean(name='VpcEnabled'),
            }
          ](name='Zone'),
        }(name='Zones'),
      }
    ](name='Region'),
  }(name='Regions'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRegions', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeDBClusterNetInfoItemsRequest = {
  DBClusterId: string(name='DBClusterId'),
}

model DescribeDBClusterNetInfoItemsResponse = {
  requestId: string(name='RequestId'),
  clusterNetworkType: string(name='ClusterNetworkType'),
  netInfoItems: {
    netInfoItem: [
      {
        connectionString: string(name='ConnectionString'),
        IPAddress: string(name='IPAddress'),
        netType: string(name='NetType'),
        httpPort: string(name='HttpPort'),
        vpcId: string(name='VpcId'),
        vSwitchId: string(name='VSwitchId'),
        jdbcPort: string(name='JdbcPort'),
      }
    ](name='NetInfoItem'),
  }(name='NetInfoItems'),
}

async function describeDBClusterNetInfoItemsWithOptions(request: DescribeDBClusterNetInfoItemsRequest, runtime: Util.RuntimeOptions): DescribeDBClusterNetInfoItemsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterNetInfoItems', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeDBClusterNetInfoItems(request: DescribeDBClusterNetInfoItemsRequest): DescribeDBClusterNetInfoItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterNetInfoItemsWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
