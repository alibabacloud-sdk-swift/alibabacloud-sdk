import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing = 'multisearch.cn-beijing.aliyuncs.com',
    cn-hangzhou = 'multisearch.cn-hangzhou.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('videosearch', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model CreateBatchTaskRequest = {
  batchTaskType?: integer(name='BatchTaskType'),
  ossBucketName?: string(name='OssBucketName'),
  ossDataPath?: string(name='OssDataPath'),
  ossMetaFile?: string(name='OssMetaFile'),
  fileUrl?: string(name='FileUrl'),
  roleArn?: string(name='RoleArn'),
  instanceId?: string(name='InstanceId'),
  clientToken?: string(name='ClientToken'),
}

model CreateBatchTaskResponse = {
  requestId: string(name='RequestId'),
  taskId: long(name='TaskId'),
}

async function createBatchTaskWithOptions(request: CreateBatchTaskRequest, runtime: Util.RuntimeOptions): CreateBatchTaskResponse {
  Util.validateModel(request);
  return doRequest('CreateBatchTask', 'HTTPS', 'POST', '2020-02-25', 'AK', null, request, runtime);
}

async function createBatchTask(request: CreateBatchTaskRequest): CreateBatchTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBatchTaskWithOptions(request, runtime);
}

model GetStorageHistoryRequest = {
  clientToken?: string(name='ClientToken'),
  instanceId: string(name='InstanceId'),
  videoId: string(name='VideoId'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model GetStorageHistoryResponse = {
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    count: long(name='Count'),
    list: [
      {
        videoId: string(name='VideoId'),
        description: string(name='Description'),
        storageType: integer(name='StorageType'),
        storageInfo: integer(name='StorageInfo'),
        modifiedTime: long(name='ModifiedTime'),
        videoUrl: string(name='VideoUrl'),
      }
    ](name='List'),
  }(name='Data'),
}

async function getStorageHistoryWithOptions(request: GetStorageHistoryRequest, runtime: Util.RuntimeOptions): GetStorageHistoryResponse {
  Util.validateModel(request);
  return doRequest('GetStorageHistory', 'HTTPS', 'POST', '2020-02-25', 'AK', null, request, runtime);
}

async function getStorageHistory(request: GetStorageHistoryRequest): GetStorageHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStorageHistoryWithOptions(request, runtime);
}

model ListBatchTaskRequest = {
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  clientToken?: string(name='ClientToken'),
  batchTaskType?: string(name='BatchTaskType'),
  status?: string(name='Status'),
  instanceId?: string(name='InstanceId'),
  bucketName?: string(name='BucketName'),
  dataPath?: string(name='DataPath'),
}

model ListBatchTaskResponse = {
  requestId: string(name='RequestId'),
  data: {
    count: long(name='Count'),
    pageNumber: long(name='PageNumber'),
    pageSize: long(name='PageSize'),
    list: [
      {
        taskId: long(name='TaskId'),
        status: integer(name='Status'),
        taskType: integer(name='TaskType'),
        regionId: string(name='RegionId'),
        bucketName: string(name='BucketName'),
        dataPath: string(name='DataPath'),
        metaFile: string(name='MetaFile'),
        modifiedTime: long(name='ModifiedTime'),
        processMessage: string(name='ProcessMessage'),
      }
    ](name='List'),
  }(name='Data'),
}

async function listBatchTaskWithOptions(request: ListBatchTaskRequest, runtime: Util.RuntimeOptions): ListBatchTaskResponse {
  Util.validateModel(request);
  return doRequest('ListBatchTask', 'HTTPS', 'POST', '2020-02-25', 'AK', null, request, runtime);
}

async function listBatchTask(request: ListBatchTaskRequest): ListBatchTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBatchTaskWithOptions(request, runtime);
}

model ListInstancesRequest = {
  clientToken?: string(name='ClientToken'),
  instanceName?: string(name='InstanceName'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
  tags?: string(name='Tags'),
  status?: integer(name='Status'),
}

model ListInstancesResponse = {
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    count: long(name='Count'),
    list: [
      {
        instanceId: string(name='InstanceId'),
        instanceName: string(name='InstanceName'),
        instanceStatus: integer(name='InstanceStatus'),
        createTime: long(name='CreateTime'),
        expiredTime: string(name='ExpiredTime'),
        tags: [
          {
            key: string(name='Key'),
            value: string(name='Value'),
          }
        ](name='Tags'),
      }
    ](name='List'),
  }(name='Data'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  return doRequest('ListInstances', 'HTTPS', 'POST', '2020-02-25', 'AK', null, request, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ListStorageVideoTasksRequest = {
  clientToken?: string(name='ClientToken'),
  taskId?: string(name='TaskId'),
  videoName?: string(name='VideoName'),
  videoId?: string(name='VideoId'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
  instanceId: string(name='InstanceId'),
  statusList?: string(name='StatusList'),
  description?: string(name='Description'),
  storageInfoList?: string(name='StorageInfoList'),
}

model ListStorageVideoTasksResponse = {
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    count: long(name='Count'),
    taskList: [
      {
        taskId: long(name='TaskId'),
        videoId: string(name='VideoId'),
        videoName: string(name='VideoName'),
        processTime: long(name='ProcessTime'),
        storageInfo: integer(name='StorageInfo'),
        modifiedTime: long(name='ModifiedTime'),
        status: string(name='Status'),
        errorDetail: string(name='ErrorDetail'),
        remoteTaskId: string(name='RemoteTaskId'),
        description: string(name='Description'),
        videoUrl: string(name='VideoUrl'),
      }
    ](name='TaskList'),
  }(name='Data'),
}

async function listStorageVideoTasksWithOptions(request: ListStorageVideoTasksRequest, runtime: Util.RuntimeOptions): ListStorageVideoTasksResponse {
  Util.validateModel(request);
  return doRequest('ListStorageVideoTasks', 'HTTPS', 'POST', '2020-02-25', 'AK', null, request, runtime);
}

async function listStorageVideoTasks(request: ListStorageVideoTasksRequest): ListStorageVideoTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStorageVideoTasksWithOptions(request, runtime);
}

model ListSearchVideoTasksRequest = {
  clientToken?: string(name='ClientToken'),
  taskId?: string(name='TaskId'),
  videoName?: string(name='VideoName'),
  videoId?: string(name='VideoId'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
  instanceId: string(name='InstanceId'),
  statusList?: string(name='StatusList'),
  searchTypeList?: string(name='SearchTypeList'),
  description?: string(name='Description'),
}

model ListSearchVideoTasksResponse = {
  requestId: string(name='RequestId'),
  data: {
    count: long(name='Count'),
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    taskList: [
      {
        taskId: string(name='TaskId'),
        videoId: string(name='VideoId'),
        videoName: string(name='VideoName'),
        processTime: long(name='ProcessTime'),
        status: integer(name='Status'),
        modifiedTime: long(name='ModifiedTime'),
        processResultUrl: string(name='ProcessResultUrl'),
        storageType: integer(name='StorageType'),
        storageInfo: integer(name='StorageInfo'),
        videoUrl: string(name='VideoUrl'),
        errorDetail: string(name='ErrorDetail'),
        replaceStorageThreshold: string(name='ReplaceStorageThreshold'),
        queryTags: string(name='QueryTags'),
        remoteTaskId: string(name='RemoteTaskId'),
        videoTags: string(name='VideoTags'),
        searchType: integer(name='SearchType'),
        description: string(name='Description'),
      }
    ](name='TaskList'),
  }(name='Data'),
}

async function listSearchVideoTasksWithOptions(request: ListSearchVideoTasksRequest, runtime: Util.RuntimeOptions): ListSearchVideoTasksResponse {
  Util.validateModel(request);
  return doRequest('ListSearchVideoTasks', 'HTTPS', 'POST', '2020-02-25', 'AK', null, request, runtime);
}

async function listSearchVideoTasks(request: ListSearchVideoTasksRequest): ListSearchVideoTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSearchVideoTasksWithOptions(request, runtime);
}

model AddStorageVideoTaskRequest = {
  instanceId: string(name='InstanceId'),
  videoUrl: string(name='VideoUrl'),
  videoId: string(name='VideoId'),
  videoTags?: string(name='VideoTags'),
  callbackUrl?: string(name='CallbackUrl'),
  description?: string(name='Description'),
  storageInfo?: integer(name='StorageInfo'),
  clientToken?: string(name='ClientToken'),
}

model AddStorageVideoTaskResponse = {
  requestId: string(name='RequestId'),
  data: {
    taskId: string(name='TaskId'),
  }(name='Data'),
}

async function addStorageVideoTaskWithOptions(request: AddStorageVideoTaskRequest, runtime: Util.RuntimeOptions): AddStorageVideoTaskResponse {
  Util.validateModel(request);
  return doRequest('AddStorageVideoTask', 'HTTPS', 'POST', '2020-02-25', 'AK', null, request, runtime);
}

async function addStorageVideoTask(request: AddStorageVideoTaskRequest): AddStorageVideoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return addStorageVideoTaskWithOptions(request, runtime);
}

model GetInstanceRequest = {
  clientToken?: string(name='ClientToken'),
  instanceId: string(name='InstanceId'),
}

model GetInstanceResponse = {
  requestId: string(name='RequestId'),
  data: {
    instanceId: string(name='InstanceId'),
    instanceName: string(name='InstanceName'),
    createTime: long(name='CreateTime'),
    regionId: string(name='RegionId'),
    instanceStatus: integer(name='InstanceStatus'),
    videoNumber: integer(name='VideoNumber'),
    expireTime: long(name='ExpireTime'),
    concurrencyNumber: integer(name='ConcurrencyNumber'),
    maxVideoCapacity: string(name='MaxVideoCapacity'),
    currentVideoCapacity: string(name='CurrentVideoCapacity'),
    videoInfoUpdateTime: long(name='VideoInfoUpdateTime'),
    bundlingType: string(name='BundlingType'),
  }(name='Data'),
}

async function getInstanceWithOptions(request: GetInstanceRequest, runtime: Util.RuntimeOptions): GetInstanceResponse {
  Util.validateModel(request);
  return doRequest('GetInstance', 'HTTPS', 'POST', '2020-02-25', 'AK', null, request, runtime);
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceWithOptions(request, runtime);
}

model AddDeletionVideoTaskRequest = {
  clientToken?: string(name='ClientToken'),
  videoId?: string(name='VideoId'),
  instanceId?: string(name='InstanceId'),
}

model AddDeletionVideoTaskResponse = {
  requestId: string(name='RequestId'),
  data: boolean(name='Data'),
}

async function addDeletionVideoTaskWithOptions(request: AddDeletionVideoTaskRequest, runtime: Util.RuntimeOptions): AddDeletionVideoTaskResponse {
  Util.validateModel(request);
  return doRequest('AddDeletionVideoTask', 'HTTPS', 'POST', '2020-02-25', 'AK', null, request, runtime);
}

async function addDeletionVideoTask(request: AddDeletionVideoTaskRequest): AddDeletionVideoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDeletionVideoTaskWithOptions(request, runtime);
}

model GetTaskStatusRequest = {
  clientToken?: string(name='ClientToken'),
  taskId: string(name='TaskId'),
  instanceId: string(name='InstanceId'),
}

model GetTaskStatusResponse = {
  requestId: string(name='RequestId'),
  data: integer(name='Data'),
  taskInfo: {
    analysisUseTime: long(name='AnalysisUseTime'),
    duration: float(name='Duration'),
    processResultOss: string(name='ProcessResultOss'),
    resolution: string(name='Resolution'),
    status: integer(name='Status'),
    submitTime: long(name='SubmitTime'),
    finishTime: long(name='FinishTime'),
    taskId: long(name='TaskId'),
    errorInfo: string(name='ErrorInfo'),
    storageInfo: integer(name='StorageInfo'),
    description: string(name='Description'),
    videoId: string(name='VideoId'),
    videoTags: string(name='VideoTags'),
    videoUrl: string(name='VideoUrl'),
    queryTags: string(name='QueryTags'),
    resourceType: string(name='ResourceType'),
    replaceStorageThreshold: string(name='ReplaceStorageThreshold'),
  }(name='TaskInfo'),
}

async function getTaskStatusWithOptions(request: GetTaskStatusRequest, runtime: Util.RuntimeOptions): GetTaskStatusResponse {
  Util.validateModel(request);
  return doRequest('GetTaskStatus', 'HTTPS', 'POST', '2020-02-25', 'AK', null, request, runtime);
}

async function getTaskStatus(request: GetTaskStatusRequest): GetTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskStatusWithOptions(request, runtime);
}

model AddSearchVideoTaskRequest = {
  clientToken?: string(name='ClientToken'),
  videoUrl: string(name='VideoUrl'),
  videoId?: string(name='VideoId'),
  videoTags?: string(name='VideoTags'),
  returnVideoNumber?: integer(name='ReturnVideoNumber'),
  queryTags?: string(name='QueryTags'),
  storageType?: integer(name='StorageType'),
  callbackUrl?: string(name='CallbackUrl'),
  replaceStorageThreshold?: float(name='ReplaceStorageThreshold'),
  instanceId: string(name='InstanceId'),
  description?: string(name='Description'),
  searchType?: integer(name='SearchType'),
}

model AddSearchVideoTaskResponse = {
  requestId: string(name='RequestId'),
  data: {
    taskId: string(name='TaskId'),
  }(name='Data'),
}

async function addSearchVideoTaskWithOptions(request: AddSearchVideoTaskRequest, runtime: Util.RuntimeOptions): AddSearchVideoTaskResponse {
  Util.validateModel(request);
  return doRequest('AddSearchVideoTask', 'HTTPS', 'POST', '2020-02-25', 'AK', null, request, runtime);
}

async function addSearchVideoTask(request: AddSearchVideoTaskRequest): AddSearchVideoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSearchVideoTaskWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
