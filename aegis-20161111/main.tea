import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aegis', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DescribeCheckWarningDetailRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  checkWarningId: long(name='CheckWarningId'),
}

model DescribeCheckWarningDetailResponse = {
  requestId: string(name='RequestId'),
  checkId: long(name='CheckId'),
  level: string(name='Level'),
  item: string(name='Item'),
  prompt: string(name='Prompt'),
  type: string(name='Type'),
  advice: string(name='Advice'),
  description: string(name='Description'),
}

async function describeCheckWarningDetailWithOptions(request: DescribeCheckWarningDetailRequest, runtime: Util.RuntimeOptions): DescribeCheckWarningDetailResponse {
  Util.validateModel(request);
  return doRequest('DescribeCheckWarningDetail', 'HTTPS', 'POST', '2016-11-11', 'AK', null, request, runtime);
}

async function describeCheckWarningDetail(request: DescribeCheckWarningDetailRequest): DescribeCheckWarningDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckWarningDetailWithOptions(request, runtime);
}

model DescribeAutoDelConfigRequest = {
  sourceIp?: string(name='SourceIp'),
}

model DescribeAutoDelConfigResponse = {
  requestId: string(name='RequestId'),
  days: integer(name='Days'),
}

async function describeAutoDelConfigWithOptions(request: DescribeAutoDelConfigRequest, runtime: Util.RuntimeOptions): DescribeAutoDelConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeAutoDelConfig', 'HTTPS', 'POST', '2016-11-11', 'AK', null, request, runtime);
}

async function describeAutoDelConfig(request: DescribeAutoDelConfigRequest): DescribeAutoDelConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoDelConfigWithOptions(request, runtime);
}

model DescribeVulWhitelistRequest = {
  sourceIp?: string(name='SourceIp'),
  currentPage?: integer(name='CurrentPage'),
  pageSize?: integer(name='PageSize'),
}

model DescribeVulWhitelistResponse = {
  requestId: string(name='RequestId'),
  pageSize: integer(name='PageSize'),
  currentPage: integer(name='CurrentPage'),
  totalCount: integer(name='TotalCount'),
  vulWhitelists: [
    {
      name: string(name='Name'),
      type: string(name='Type'),
      aliasName: string(name='AliasName'),
      reason: string(name='Reason'),
    }
  ](name='VulWhitelists'),
}

async function describeVulWhitelistWithOptions(request: DescribeVulWhitelistRequest, runtime: Util.RuntimeOptions): DescribeVulWhitelistResponse {
  Util.validateModel(request);
  return doRequest('DescribeVulWhitelist', 'HTTPS', 'POST', '2016-11-11', 'AK', null, request, runtime);
}

async function describeVulWhitelist(request: DescribeVulWhitelistRequest): DescribeVulWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulWhitelistWithOptions(request, runtime);
}

model DeleteRuleRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  id: string(name='Id'),
}

model DeleteRuleResponse = {
  requestId: string(name='RequestId'),
}

async function deleteRuleWithOptions(request: DeleteRuleRequest, runtime: Util.RuntimeOptions): DeleteRuleResponse {
  Util.validateModel(request);
  return doRequest('DeleteRule', 'HTTPS', 'POST', '2016-11-11', 'AK', null, request, runtime);
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleWithOptions(request, runtime);
}

model DescribeInstanceStatisticsRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  uuid: string(name='Uuid'),
}

model DescribeInstanceStatisticsResponse = {
  requestId: string(name='RequestId'),
  data: [
    {
      uuid: string(name='Uuid'),
      account: integer(name='Account'),
      health: integer(name='Health'),
      trojan: integer(name='Trojan'),
      suspicious: integer(name='Suspicious'),
      vul: integer(name='Vul'),
    }
  ](name='Data'),
}

async function describeInstanceStatisticsWithOptions(request: DescribeInstanceStatisticsRequest, runtime: Util.RuntimeOptions): DescribeInstanceStatisticsResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceStatistics', 'HTTPS', 'POST', '2016-11-11', 'AK', null, request, runtime);
}

async function describeInstanceStatistics(request: DescribeInstanceStatisticsRequest): DescribeInstanceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceStatisticsWithOptions(request, runtime);
}

model DescribeConcernNecessityRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
}

model DescribeConcernNecessityResponse = {
  requestId: string(name='RequestId'),
  concernNecessity: [ string ] (name='ConcernNecessity'),
}

async function describeConcernNecessityWithOptions(request: DescribeConcernNecessityRequest, runtime: Util.RuntimeOptions): DescribeConcernNecessityResponse {
  Util.validateModel(request);
  return doRequest('DescribeConcernNecessity', 'HTTPS', 'POST', '2016-11-11', 'AK', null, request, runtime);
}

async function describeConcernNecessity(request: DescribeConcernNecessityRequest): DescribeConcernNecessityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConcernNecessityWithOptions(request, runtime);
}

model DescribeStrategyExecDetailRequest = {
  sourceIp?: string(name='SourceIp'),
  strategyId?: integer(name='StrategyId'),
}

model DescribeStrategyExecDetailResponse = {
  requestId: string(name='RequestId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  source: string(name='Source'),
  percent: string(name='Percent'),
  successCount: integer(name='SuccessCount'),
  failCount: integer(name='FailCount'),
  inProcessCount: integer(name='InProcessCount'),
  failedEcsList: [
    {
      reason: string(name='Reason'),
      instanceName: string(name='InstanceName'),
      IP: string(name='IP'),
      internetIp: string(name='InternetIp'),
      intranetIp: string(name='IntranetIp'),
    }
  ](name='FailedEcsList'),
}

async function describeStrategyExecDetailWithOptions(request: DescribeStrategyExecDetailRequest, runtime: Util.RuntimeOptions): DescribeStrategyExecDetailResponse {
  Util.validateModel(request);
  return doRequest('DescribeStrategyExecDetail', 'HTTPS', 'POST', '2016-11-11', 'AK', null, request, runtime);
}

async function describeStrategyExecDetail(request: DescribeStrategyExecDetailRequest): DescribeStrategyExecDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStrategyExecDetailWithOptions(request, runtime);
}

model DescribeStratetyRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  strategyIds?: string(name='StrategyIds'),
}

model DescribeStratetyResponse = {
  requestId: string(name='RequestId'),
  strategies: [
    {
      cycleDays: integer(name='CycleDays'),
      id: integer(name='Id'),
      cycleStartTime: integer(name='CycleStartTime'),
      type: integer(name='Type'),
      name: string(name='Name'),
      riskCount: integer(name='RiskCount'),
      ecsCount: integer(name='EcsCount'),
      execStatus: integer(name='ExecStatus'),
      processRate: integer(name='ProcessRate'),
      passRate: integer(name='PassRate'),
      configTargets: [
        {
          flag: string(name='Flag'),
          targetType: string(name='TargetType'),
          target: string(name='Target'),
        }
      ](name='ConfigTargets'),
    }
  ](name='Strategies'),
}

async function describeStratetyWithOptions(request: DescribeStratetyRequest, runtime: Util.RuntimeOptions): DescribeStratetyResponse {
  Util.validateModel(request);
  return doRequest('DescribeStratety', 'HTTPS', 'POST', '2016-11-11', 'AK', null, request, runtime);
}

async function describeStratety(request: DescribeStratetyRequest): DescribeStratetyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStratetyWithOptions(request, runtime);
}

model UpgradeInstanceRequest = {
  clientToken: string(name='ClientToken'),
  instanceId: string(name='InstanceId'),
  versionCode: integer(name='VersionCode'),
  vmNumber: integer(name='VmNumber'),
}

model UpgradeInstanceResponse = {
  orderId: string(name='OrderId'),
  requestId: string(name='RequestId'),
}

async function upgradeInstanceWithOptions(request: UpgradeInstanceRequest, runtime: Util.RuntimeOptions): UpgradeInstanceResponse {
  Util.validateModel(request);
  return doRequest('UpgradeInstance', 'HTTPS', 'POST', '2016-11-11', 'AK', null, request, runtime);
}

async function upgradeInstance(request: UpgradeInstanceRequest): UpgradeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeInstanceWithOptions(request, runtime);
}

model RenewInstanceRequest = {
  clientToken: string(name='ClientToken'),
  instanceId: string(name='InstanceId'),
  vmNumber: string(name='VmNumber'),
  duration: integer(name='Duration'),
  pricingCycle: string(name='PricingCycle'),
}

model RenewInstanceResponse = {
  orderId: string(name='OrderId'),
  requestId: string(name='RequestId'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  return doRequest('RenewInstance', 'HTTPS', 'POST', '2016-11-11', 'AK', null, request, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model CreateInstanceRequest = {
  clientToken: string(name='ClientToken'),
  duration: integer(name='Duration'),
  pricingCycle: string(name='PricingCycle'),
  versionCode: integer(name='VersionCode'),
  vmNumber: integer(name='VmNumber'),
  isAutoRenew?: boolean(name='IsAutoRenew'),
  autoRenewDuration?: integer(name='AutoRenewDuration'),
}

model CreateInstanceResponse = {
  orderId: string(name='OrderId'),
  instanceId: string(name='InstanceId'),
  requestId: string(name='RequestId'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateInstance', 'HTTPS', 'POST', '2016-11-11', 'AK', null, request, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
