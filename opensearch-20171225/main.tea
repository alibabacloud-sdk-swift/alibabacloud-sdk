import Util;
import ROA;
import EndpointUtil;

extends ROA;

const version = '2017-12-25';

init(config: ROA.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpointHost = getEndpoint('opensearch', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpointHost);
}


model GetValidationErrorQuery = {
  errorCode: string(name='errorCode'),
}

model GetValidationErrorRequest = {
  headers?: map[string]string(name='headers'),
  query: GetValidationErrorQuery(name='query'),
}

model GetValidationErrorResponseBody = {
  requestId: string(name='requestId'),
  result: [ map[string]any ](name='result'),
}

model GetValidationErrorResponse = {
  headers: map[string]string(name='headers'),
  body: GetValidationErrorResponseBody(name='body'),
}

async function getValidationErrorWithOptions(appGroupIdentity: string, request: GetValidationErrorRequest, runtime: Util.RuntimeOptions): GetValidationErrorResponse {
  Util.validateModel(request);
  return doRequestWithAction('GetValidationError', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/data/validation-error`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function getValidationError(appGroupIdentity: string, request: GetValidationErrorRequest): GetValidationErrorResponse {
  var runtime = new Util.RuntimeOptions{};
  return getValidationErrorWithOptions(appGroupIdentity, request, runtime);
}

model DescribeModelRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeModelResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model DescribeModelResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeModelResponseBody(name='body'),
}

async function describeModelWithOptions(appGroupIdentity: string, modelName: string, request: DescribeModelRequest, runtime: Util.RuntimeOptions): DescribeModelResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeModel', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}`, null, request.headers, null, runtime);
}

async function describeModel(appGroupIdentity: string, modelName: string, request: DescribeModelRequest): DescribeModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModelWithOptions(appGroupIdentity, modelName, request, runtime);
}

model ListModelsQuery = {
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
  type?: string(name='type'),
}

model ListModelsRequest = {
  headers?: map[string]string(name='headers'),
  query?: ListModelsQuery(name='query'),
}

model ListModelsResponseBody = {
  requestId: string(name='requestId'),
  result: [ map[string]any ](name='result'),
}

model ListModelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListModelsResponseBody(name='body'),
}

async function listModelsWithOptions(appGroupIdentity: string, request: ListModelsRequest, runtime: Util.RuntimeOptions): ListModelsResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListModels', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listModels(appGroupIdentity: string, request: ListModelsRequest): ListModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listModelsWithOptions(appGroupIdentity, request, runtime);
}

model TrainModelRequest = {
  headers?: map[string]string(name='headers'),
}

model TrainModelResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model TrainModelResponse = {
  headers: map[string]string(name='headers'),
  body: TrainModelResponseBody(name='body'),
}

async function trainModelWithOptions(appGroupIdentity: string, modelName: string, request: TrainModelRequest, runtime: Util.RuntimeOptions): TrainModelResponse {
  Util.validateModel(request);
  return doRequestWithAction('TrainModel', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}/actions/train`, null, request.headers, null, runtime);
}

async function trainModel(appGroupIdentity: string, modelName: string, request: TrainModelRequest): TrainModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return trainModelWithOptions(appGroupIdentity, modelName, request, runtime);
}

model DeleteModelRequest = {
  headers?: map[string]string(name='headers'),
}

model DeleteModelResponseBody = {
  requestId: string(name='requestId'),
  result: string(name='result'),
}

model DeleteModelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteModelResponseBody(name='body'),
}

async function deleteModelWithOptions(appGroupIdentity: string, modelName: string, request: DeleteModelRequest, runtime: Util.RuntimeOptions): DeleteModelResponse {
  Util.validateModel(request);
  return doRequestWithAction('DeleteModel', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}`, null, request.headers, null, runtime);
}

async function deleteModel(appGroupIdentity: string, modelName: string, request: DeleteModelRequest): DeleteModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteModelWithOptions(appGroupIdentity, modelName, request, runtime);
}

model GetValidationReportQuery = {
  type: string(name='type'),
}

model GetValidationReportRequest = {
  headers?: map[string]string(name='headers'),
  query: GetValidationReportQuery(name='query'),
}

model GetValidationReportResponseBody = {
  requestId: string(name='requestId'),
  result: [ map[string]any ](name='result'),
}

model GetValidationReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetValidationReportResponseBody(name='body'),
}

async function getValidationReportWithOptions(appGroupIdentity: string, request: GetValidationReportRequest, runtime: Util.RuntimeOptions): GetValidationReportResponse {
  Util.validateModel(request);
  return doRequestWithAction('GetValidationReport', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/data/validation-report`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function getValidationReport(appGroupIdentity: string, request: GetValidationReportRequest): GetValidationReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getValidationReportWithOptions(appGroupIdentity, request, runtime);
}

model ModifyModelRequest = {
  headers?: map[string]string(name='headers'),
}

model ModifyModelResponseBody = {
  requestId: string(name='requestId'),
  result: string(name='result'),
}

model ModifyModelResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyModelResponseBody(name='body'),
}

async function modifyModelWithOptions(appGroupIdentity: string, modelName: string, request: ModifyModelRequest, runtime: Util.RuntimeOptions): ModifyModelResponse {
  Util.validateModel(request);
  return doRequestWithAction('ModifyModel', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}`, null, request.headers, null, runtime);
}

async function modifyModel(appGroupIdentity: string, modelName: string, request: ModifyModelRequest): ModifyModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyModelWithOptions(appGroupIdentity, modelName, request, runtime);
}

model ListUserAnalyzersQuery = {
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
}

model ListUserAnalyzersRequest = {
  headers?: map[string]string(name='headers'),
  query?: ListUserAnalyzersQuery(name='query'),
}

model ListUserAnalyzersResponseBody = {
  requestId: string(name='requestId'),
  totalCount: integer(name='totalCount'),
  result: [
    {
      id: string(name='id'),
      name: string(name='name'),
      business: string(name='business'),
      available: boolean(name='available'),
      created: integer(name='created'),
      updated: integer(name='updated'),
      dicts: [
        {
          id: string(name='id'),
          type: string(name='type'),
          entriesLimit: integer(name='entriesLimit'),
          entriesCount: integer(name='entriesCount'),
          available: boolean(name='available'),
          created: integer(name='created'),
          updated: integer(name='updated'),
        }
      ](name='dicts'),
    }
  ](name='result'),
}

model ListUserAnalyzersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserAnalyzersResponseBody(name='body'),
}

async function listUserAnalyzersWithOptions(request: ListUserAnalyzersRequest, runtime: Util.RuntimeOptions): ListUserAnalyzersResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListUserAnalyzers', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/user-analyzers`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listUserAnalyzers(request: ListUserAnalyzersRequest): ListUserAnalyzersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserAnalyzersWithOptions(request, runtime);
}

model DescribeUserAnalyzerQuery = {
  with?: string(name='with'),
}

model DescribeUserAnalyzerRequest = {
  headers?: map[string]string(name='headers'),
  query?: DescribeUserAnalyzerQuery(name='query'),
}

model DescribeUserAnalyzerResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model DescribeUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserAnalyzerResponseBody(name='body'),
}

async function describeUserAnalyzerWithOptions(name: string, request: DescribeUserAnalyzerRequest, runtime: Util.RuntimeOptions): DescribeUserAnalyzerResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeUserAnalyzer', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/user-analyzers/${name}`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function describeUserAnalyzer(name: string, request: DescribeUserAnalyzerRequest): DescribeUserAnalyzerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserAnalyzerWithOptions(name, request, runtime);
}

model CreateUserAnalyzerRequest = {
  headers?: map[string]string(name='headers'),
}

model CreateUserAnalyzerResponseBody = {
  requestId: string(name='RequestId'),
  result: map[string]any(name='result'),
}

model CreateUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserAnalyzerResponseBody(name='body'),
}

async function createUserAnalyzerWithOptions(request: CreateUserAnalyzerRequest, runtime: Util.RuntimeOptions): CreateUserAnalyzerResponse {
  Util.validateModel(request);
  return doRequestWithAction('CreateUserAnalyzer', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/user-analyzers`, null, request.headers, null, runtime);
}

async function createUserAnalyzer(request: CreateUserAnalyzerRequest): CreateUserAnalyzerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserAnalyzerWithOptions(request, runtime);
}

model PushUserAnalyzerEntriesRequest = {
  headers?: map[string]string(name='headers'),
}

model PushUserAnalyzerEntriesResponseBody = {
  requestId: string(name='RequestId'),
  result: map[string]any(name='result'),
}

model PushUserAnalyzerEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: PushUserAnalyzerEntriesResponseBody(name='body'),
}

async function pushUserAnalyzerEntriesWithOptions(name: string, request: PushUserAnalyzerEntriesRequest, runtime: Util.RuntimeOptions): PushUserAnalyzerEntriesResponse {
  Util.validateModel(request);
  return doRequestWithAction('PushUserAnalyzerEntries', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/user-analyzers/${name}/entries/actions/bulk`, null, request.headers, null, runtime);
}

async function pushUserAnalyzerEntries(name: string, request: PushUserAnalyzerEntriesRequest): PushUserAnalyzerEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushUserAnalyzerEntriesWithOptions(name, request, runtime);
}

model ListUserAnalyzerEntriesQuery = {
  word?: string(name='word'),
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
}

model ListUserAnalyzerEntriesRequest = {
  headers?: map[string]string(name='headers'),
  query?: ListUserAnalyzerEntriesQuery(name='query'),
}

model ListUserAnalyzerEntriesResponseBody = {
  requestId: string(name='RequestId'),
  result: map[string]any(name='result'),
}

model ListUserAnalyzerEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserAnalyzerEntriesResponseBody(name='body'),
}

async function listUserAnalyzerEntriesWithOptions(name: string, request: ListUserAnalyzerEntriesRequest, runtime: Util.RuntimeOptions): ListUserAnalyzerEntriesResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListUserAnalyzerEntries', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/user-analyzers/${name}/entries`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listUserAnalyzerEntries(name: string, request: ListUserAnalyzerEntriesRequest): ListUserAnalyzerEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserAnalyzerEntriesWithOptions(name, request, runtime);
}

model RemoveUserAnalyzerRequest = {
  headers?: map[string]string(name='headers'),
}

model RemoveUserAnalyzerResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model RemoveUserAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUserAnalyzerResponseBody(name='body'),
}

async function removeUserAnalyzerWithOptions(name: string, request: RemoveUserAnalyzerRequest, runtime: Util.RuntimeOptions): RemoveUserAnalyzerResponse {
  Util.validateModel(request);
  return doRequestWithAction('RemoveUserAnalyzer', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/user-analyzers/${name}`, null, request.headers, null, runtime);
}

async function removeUserAnalyzer(name: string, request: RemoveUserAnalyzerRequest): RemoveUserAnalyzerResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUserAnalyzerWithOptions(name, request, runtime);
}

model ListABTestScenesRequest = {
  headers?: map[string]string(name='headers'),
}

model ListABTestScenesResponseBody = {
  requestId: string(name='requestId'),
  result: [
    {
      id: string(name='id'),
      name: string(name='name'),
      status: integer(name='status'),
      created: integer(name='created'),
      updated: integer(name='updated'),
      values: [ string ](name='values'),
    }
  ](name='result'),
}

model ListABTestScenesResponse = {
  headers: map[string]string(name='headers'),
  body: ListABTestScenesResponseBody(name='body'),
}

async function listABTestScenesWithOptions(appGroupIdentity: string, request: ListABTestScenesRequest, runtime: Util.RuntimeOptions): ListABTestScenesResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListABTestScenes', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes`, null, request.headers, null, runtime);
}

async function listABTestScenes(appGroupIdentity: string, request: ListABTestScenesRequest): ListABTestScenesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listABTestScenesWithOptions(appGroupIdentity, request, runtime);
}

model CreateABTestGroupRequest = {
  headers?: map[string]string(name='headers'),
}

model CreateABTestGroupResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    status: integer(name='status'),
    created: integer(name='created'),
    updated: integer(name='updated'),
  }(name='result'),
}

model CreateABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateABTestGroupResponseBody(name='body'),
}

async function createABTestGroupWithOptions(appGroupIdentity: string, sceneId: string, request: CreateABTestGroupRequest, runtime: Util.RuntimeOptions): CreateABTestGroupResponse {
  Util.validateModel(request);
  return doRequestWithAction('CreateABTestGroup', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups`, null, request.headers, null, runtime);
}

async function createABTestGroup(appGroupIdentity: string, sceneId: string, request: CreateABTestGroupRequest): CreateABTestGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createABTestGroupWithOptions(appGroupIdentity, sceneId, request, runtime);
}

model UpdateABTestGroupRequest = {
  headers?: map[string]string(name='headers'),
}

model UpdateABTestGroupResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    status: integer(name='status'),
    created: integer(name='created'),
    updated: integer(name='updated'),
  }(name='result'),
}

model UpdateABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateABTestGroupResponseBody(name='body'),
}

async function updateABTestGroupWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, request: UpdateABTestGroupRequest, runtime: Util.RuntimeOptions): UpdateABTestGroupResponse {
  Util.validateModel(request);
  return doRequestWithAction('UpdateABTestGroup', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}`, null, request.headers, null, runtime);
}

async function updateABTestGroup(appGroupIdentity: string, sceneId: string, groupId: string, request: UpdateABTestGroupRequest): UpdateABTestGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateABTestGroupWithOptions(appGroupIdentity, sceneId, groupId, request, runtime);
}

model DescribeABTestExperimentRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeABTestExperimentResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    online: boolean(name='online'),
    traffic: integer(name='traffic'),
    params: {
      firstFormulaName: string(name='first_formula_name'),
    }(name='params'),
  }(name='result'),
}

model DescribeABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeABTestExperimentResponseBody(name='body'),
}

async function describeABTestExperimentWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, request: DescribeABTestExperimentRequest, runtime: Util.RuntimeOptions): DescribeABTestExperimentResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeABTestExperiment', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments/${experimentId}`, null, request.headers, null, runtime);
}

async function describeABTestExperiment(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, request: DescribeABTestExperimentRequest): DescribeABTestExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeABTestExperimentWithOptions(appGroupIdentity, sceneId, groupId, experimentId, request, runtime);
}

model CreateABTestExperimentRequest = {
  headers?: map[string]string(name='headers'),
}

model CreateABTestExperimentResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    params: map[string]any(name='params'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    online: boolean(name='online'),
    traffic: integer(name='traffic'),
  }(name='result'),
}

model CreateABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateABTestExperimentResponseBody(name='body'),
}

async function createABTestExperimentWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, request: CreateABTestExperimentRequest, runtime: Util.RuntimeOptions): CreateABTestExperimentResponse {
  Util.validateModel(request);
  return doRequestWithAction('CreateABTestExperiment', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments`, null, request.headers, null, runtime);
}

async function createABTestExperiment(appGroupIdentity: string, sceneId: string, groupId: string, request: CreateABTestExperimentRequest): CreateABTestExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createABTestExperimentWithOptions(appGroupIdentity, sceneId, groupId, request, runtime);
}

model UpdateABTestExperimentRequest = {
  headers?: map[string]string(name='headers'),
}

model UpdateABTestExperimentResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    params: map[string]any(name='params'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    online: boolean(name='online'),
    traffic: integer(name='traffic'),
  }(name='result'),
}

model UpdateABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateABTestExperimentResponseBody(name='body'),
}

async function updateABTestExperimentWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, request: UpdateABTestExperimentRequest, runtime: Util.RuntimeOptions): UpdateABTestExperimentResponse {
  Util.validateModel(request);
  return doRequestWithAction('UpdateABTestExperiment', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments/${experimentId}`, null, request.headers, null, runtime);
}

async function updateABTestExperiment(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, request: UpdateABTestExperimentRequest): UpdateABTestExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateABTestExperimentWithOptions(appGroupIdentity, sceneId, groupId, experimentId, request, runtime);
}

model ListABTestExperimentsRequest = {
  headers?: map[string]string(name='headers'),
}

model ListABTestExperimentsResponseBody = {
  requestId: string(name='requestId'),
  result: [
    {
      id: string(name='id'),
      name: string(name='name'),
      params: map[string]any(name='params'),
      created: integer(name='created'),
      updated: integer(name='updated'),
      online: boolean(name='online'),
      traffic: integer(name='traffic'),
    }
  ](name='result'),
}

model ListABTestExperimentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListABTestExperimentsResponseBody(name='body'),
}

async function listABTestExperimentsWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, request: ListABTestExperimentsRequest, runtime: Util.RuntimeOptions): ListABTestExperimentsResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListABTestExperiments', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments`, null, request.headers, null, runtime);
}

async function listABTestExperiments(appGroupIdentity: string, sceneId: string, groupId: string, request: ListABTestExperimentsRequest): ListABTestExperimentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listABTestExperimentsWithOptions(appGroupIdentity, sceneId, groupId, request, runtime);
}

model ListABTestGroupsRequest = {
  headers?: map[string]string(name='headers'),
}

model ListABTestGroupsResponseBody = {
  requestId: string(name='requestId'),
  result: [
    {
      id: string(name='id'),
      name: string(name='name'),
      status: integer(name='status'),
      created: integer(name='created'),
      updated: integer(name='updated'),
    }
  ](name='result'),
}

model ListABTestGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListABTestGroupsResponseBody(name='body'),
}

async function listABTestGroupsWithOptions(appGroupIdentity: string, sceneId: string, request: ListABTestGroupsRequest, runtime: Util.RuntimeOptions): ListABTestGroupsResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListABTestGroups', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups`, null, request.headers, null, runtime);
}

async function listABTestGroups(appGroupIdentity: string, sceneId: string, request: ListABTestGroupsRequest): ListABTestGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listABTestGroupsWithOptions(appGroupIdentity, sceneId, request, runtime);
}

model CreateABTestSceneRequest = {
  headers?: map[string]string(name='headers'),
}

model CreateABTestSceneResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    status: integer(name='status'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    values: [ string ](name='values'),
  }(name='result'),
}

model CreateABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  body: CreateABTestSceneResponseBody(name='body'),
}

async function createABTestSceneWithOptions(appGroupIdentity: string, request: CreateABTestSceneRequest, runtime: Util.RuntimeOptions): CreateABTestSceneResponse {
  Util.validateModel(request);
  return doRequestWithAction('CreateABTestScene', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes`, null, request.headers, null, runtime);
}

async function createABTestScene(appGroupIdentity: string, request: CreateABTestSceneRequest): CreateABTestSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return createABTestSceneWithOptions(appGroupIdentity, request, runtime);
}

model ListABTestMetricsRequest = {
  headers?: map[string]string(name='headers'),
}

model ListABTestMetricsResponseBody = {
  requestId: string(name='requestId'),
  result: [
    {
      experimentName: string(name='experimentName'),
      date: string(name='date'),
      pv: integer(name='pv'),
      ipv: integer(name='ipv'),
      uv: integer(name='uv'),
      ipvUv: integer(name='ipvUv'),
      ctr: float(name='ctr'),
      zeroHitRate: float(name='zeroHitRate'),
    }
  ](name='result'),
}

model ListABTestMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ListABTestMetricsResponseBody(name='body'),
}

async function listABTestMetricsWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, request: ListABTestMetricsRequest, runtime: Util.RuntimeOptions): ListABTestMetricsResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListABTestMetrics', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/metrics`, null, request.headers, null, runtime);
}

async function listABTestMetrics(appGroupIdentity: string, sceneId: string, groupId: string, request: ListABTestMetricsRequest): ListABTestMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listABTestMetricsWithOptions(appGroupIdentity, sceneId, groupId, request, runtime);
}

model UpdateABTestSceneRequest = {
  headers?: map[string]string(name='headers'),
}

model UpdateABTestSceneResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    params: map[string]any(name='params'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    online: boolean(name='online'),
    traffic: integer(name='traffic'),
  }(name='result'),
}

model UpdateABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateABTestSceneResponseBody(name='body'),
}

async function updateABTestSceneWithOptions(appGroupIdentity: string, sceneId: string, request: UpdateABTestSceneRequest, runtime: Util.RuntimeOptions): UpdateABTestSceneResponse {
  Util.validateModel(request);
  return doRequestWithAction('UpdateABTestScene', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}`, null, request.headers, null, runtime);
}

async function updateABTestScene(appGroupIdentity: string, sceneId: string, request: UpdateABTestSceneRequest): UpdateABTestSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateABTestSceneWithOptions(appGroupIdentity, sceneId, request, runtime);
}

model DeleteABTestGroupRequest = {
  headers?: map[string]string(name='headers'),
}

model DeleteABTestGroupResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model DeleteABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteABTestGroupResponseBody(name='body'),
}

async function deleteABTestGroupWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, request: DeleteABTestGroupRequest, runtime: Util.RuntimeOptions): DeleteABTestGroupResponse {
  Util.validateModel(request);
  return doRequestWithAction('DeleteABTestGroup', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}`, null, request.headers, null, runtime);
}

async function deleteABTestGroup(appGroupIdentity: string, sceneId: string, groupId: string, request: DeleteABTestGroupRequest): DeleteABTestGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteABTestGroupWithOptions(appGroupIdentity, sceneId, groupId, request, runtime);
}

model DescribeABTestGroupRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeABTestGroupResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    status: integer(name='status'),
    created: integer(name='created'),
    updated: integer(name='updated'),
  }(name='result'),
}

model DescribeABTestGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeABTestGroupResponseBody(name='body'),
}

async function describeABTestGroupWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, request: DescribeABTestGroupRequest, runtime: Util.RuntimeOptions): DescribeABTestGroupResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeABTestGroup', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}`, null, request.headers, null, runtime);
}

async function describeABTestGroup(appGroupIdentity: string, sceneId: string, groupId: string, request: DescribeABTestGroupRequest): DescribeABTestGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeABTestGroupWithOptions(appGroupIdentity, sceneId, groupId, request, runtime);
}

model DescribeABTestSceneRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeABTestSceneResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    status: integer(name='status'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    values: [ string ](name='values'),
  }(name='result'),
}

model DescribeABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeABTestSceneResponseBody(name='body'),
}

async function describeABTestSceneWithOptions(appGroupIdentity: string, sceneId: string, request: DescribeABTestSceneRequest, runtime: Util.RuntimeOptions): DescribeABTestSceneResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeABTestScene', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}`, null, request.headers, null, runtime);
}

async function describeABTestScene(appGroupIdentity: string, sceneId: string, request: DescribeABTestSceneRequest): DescribeABTestSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeABTestSceneWithOptions(appGroupIdentity, sceneId, request, runtime);
}

model DeleteABTestExperimentRequest = {
  headers?: map[string]string(name='headers'),
}

model DeleteABTestExperimentResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model DeleteABTestExperimentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteABTestExperimentResponseBody(name='body'),
}

async function deleteABTestExperimentWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, request: DeleteABTestExperimentRequest, runtime: Util.RuntimeOptions): DeleteABTestExperimentResponse {
  Util.validateModel(request);
  return doRequestWithAction('DeleteABTestExperiment', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments/${experimentId}`, null, request.headers, null, runtime);
}

async function deleteABTestExperiment(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, request: DeleteABTestExperimentRequest): DeleteABTestExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteABTestExperimentWithOptions(appGroupIdentity, sceneId, groupId, experimentId, request, runtime);
}

model UpdateABTestFixedFlowDividersRequest = {
  headers?: map[string]string(name='headers'),
}

model UpdateABTestFixedFlowDividersResponseBody = {
  requestId: string(name='requestId'),
  result: [ string ](name='result'),
}

model UpdateABTestFixedFlowDividersResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateABTestFixedFlowDividersResponseBody(name='body'),
}

async function updateABTestFixedFlowDividersWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, request: UpdateABTestFixedFlowDividersRequest, runtime: Util.RuntimeOptions): UpdateABTestFixedFlowDividersResponse {
  Util.validateModel(request);
  return doRequestWithAction('UpdateABTestFixedFlowDividers', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments/${experimentId}/fixed-flow-dividers`, null, request.headers, null, runtime);
}

async function updateABTestFixedFlowDividers(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, request: UpdateABTestFixedFlowDividersRequest): UpdateABTestFixedFlowDividersResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateABTestFixedFlowDividersWithOptions(appGroupIdentity, sceneId, groupId, experimentId, request, runtime);
}

model ListABTestFixedFlowDividersRequest = {
  headers?: map[string]string(name='headers'),
}

model ListABTestFixedFlowDividersResponseBody = {
  requestId: string(name='requestId'),
  result: [ string ](name='result'),
}

model ListABTestFixedFlowDividersResponse = {
  headers: map[string]string(name='headers'),
  body: ListABTestFixedFlowDividersResponseBody(name='body'),
}

async function listABTestFixedFlowDividersWithOptions(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, request: ListABTestFixedFlowDividersRequest, runtime: Util.RuntimeOptions): ListABTestFixedFlowDividersResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListABTestFixedFlowDividers', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}/groups/${groupId}/experiments/${experimentId}/fixed-flow-dividers`, null, request.headers, null, runtime);
}

async function listABTestFixedFlowDividers(appGroupIdentity: string, sceneId: string, groupId: string, experimentId: string, request: ListABTestFixedFlowDividersRequest): ListABTestFixedFlowDividersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listABTestFixedFlowDividersWithOptions(appGroupIdentity, sceneId, groupId, experimentId, request, runtime);
}

model DeleteABTestSceneRequest = {
  headers?: map[string]string(name='headers'),
}

model DeleteABTestSceneResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model DeleteABTestSceneResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteABTestSceneResponseBody(name='body'),
}

async function deleteABTestSceneWithOptions(appGroupIdentity: string, sceneId: string, request: DeleteABTestSceneRequest, runtime: Util.RuntimeOptions): DeleteABTestSceneResponse {
  Util.validateModel(request);
  return doRequestWithAction('DeleteABTestScene', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scenes/${sceneId}`, null, request.headers, null, runtime);
}

async function deleteABTestScene(appGroupIdentity: string, sceneId: string, request: DeleteABTestSceneRequest): DeleteABTestSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteABTestSceneWithOptions(appGroupIdentity, sceneId, request, runtime);
}

model ListSortExpressionsRequest = {
  headers?: map[string]string(name='headers'),
}

model ListSortExpressionsResponseBody = {
  requestId: string(name='requestId'),
  result: [
    {
      name: string(name='name'),
      description: string(name='description'),
      active: boolean(name='active'),
      created: integer(name='created'),
      updated: integer(name='updated'),
    }
  ](name='result'),
}

model ListSortExpressionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSortExpressionsResponseBody(name='body'),
}

async function listSortExpressionsWithOptions(appGroupIdentity: string, appId: string, request: ListSortExpressionsRequest, runtime: Util.RuntimeOptions): ListSortExpressionsResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListSortExpressions', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/sort-expressions`, null, request.headers, null, runtime);
}

async function listSortExpressions(appGroupIdentity: string, appId: string, request: ListSortExpressionsRequest): ListSortExpressionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSortExpressionsWithOptions(appGroupIdentity, appId, request, runtime);
}

model ListSecondRanksRequest = {
  headers?: map[string]string(name='headers'),
}

model ListSecondRanksResponseBody = {
  requestId: string(name='requestId'),
  totalCount: integer(name='totalCount'),
  result: [
    {
      id: string(name='id'),
      name: string(name='name'),
      meta: string(name='meta'),
      active: boolean(name='active'),
      description: string(name='description'),
      created: integer(name='created'),
      updated: integer(name='updated'),
      isDefault: string(name='isDefault'),
      isSys: string(name='isSys'),
    }
  ](name='result'),
}

model ListSecondRanksResponse = {
  headers: map[string]string(name='headers'),
  body: ListSecondRanksResponseBody(name='body'),
}

async function listSecondRanksWithOptions(appGroupIdentity: string, appId: string, request: ListSecondRanksRequest, runtime: Util.RuntimeOptions): ListSecondRanksResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListSecondRanks', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/second-ranks`, null, request.headers, null, runtime);
}

async function listSecondRanks(appGroupIdentity: string, appId: string, request: ListSecondRanksRequest): ListSecondRanksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSecondRanksWithOptions(appGroupIdentity, appId, request, runtime);
}

model ListFirstRanksRequest = {
  headers?: map[string]string(name='headers'),
}

model ListFirstRanksResponseBody = {
  requestId: string(name='requestId'),
  result: [
    {
      name: string(name='name'),
      description: string(name='description'),
      active: boolean(name='active'),
      created: integer(name='created'),
      updated: integer(name='updated'),
      meta: [
        {
          attribute: string(name='attribute'),
          arg: string(name='arg'),
          weight: integer(name='weight'),
        }
      ](name='meta'),
    }
  ](name='result'),
}

model ListFirstRanksResponse = {
  headers: map[string]string(name='headers'),
  body: ListFirstRanksResponseBody(name='body'),
}

async function listFirstRanksWithOptions(appGroupIdentity: string, appId: string, request: ListFirstRanksRequest, runtime: Util.RuntimeOptions): ListFirstRanksResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListFirstRanks', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/first-ranks`, null, request.headers, null, runtime);
}

async function listFirstRanks(appGroupIdentity: string, appId: string, request: ListFirstRanksRequest): ListFirstRanksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFirstRanksWithOptions(appGroupIdentity, appId, request, runtime);
}

model CreateSecondRankQuery = {
  dryRun?: boolean(name='dryRun'),
}

model CreateSecondRankRequest = {
  headers?: map[string]string(name='headers'),
  query?: CreateSecondRankQuery(name='query'),
}

model CreateSecondRankResponseBody = {
  requestId: string(name='RequestId'),
  result: map[string]any(name='result'),
}

model CreateSecondRankResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSecondRankResponseBody(name='body'),
}

async function createSecondRankWithOptions(appGroupIdentity: string, appId: string, request: CreateSecondRankRequest, runtime: Util.RuntimeOptions): CreateSecondRankResponse {
  Util.validateModel(request);
  return doRequestWithAction('CreateSecondRank', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/second-ranks`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function createSecondRank(appGroupIdentity: string, appId: string, request: CreateSecondRankRequest): CreateSecondRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSecondRankWithOptions(appGroupIdentity, appId, request, runtime);
}

model ModifyFirstRankQuery = {
  dryRun?: boolean(name='dryRun'),
}

model ModifyFirstRankRequest = {
  headers?: map[string]string(name='headers'),
  query?: ModifyFirstRankQuery(name='query'),
}

model ModifyFirstRankResponseBody = {
  requestId: string(name='requestId'),
  result: {
    name: string(name='name'),
    description: string(name='description'),
    active: boolean(name='active'),
    meta: [
      {
        attribute: string(name='attribute'),
        arg: string(name='arg'),
        weight: float(name='weight'),
      }
    ](name='meta'),
  }(name='result'),
}

model ModifyFirstRankResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFirstRankResponseBody(name='body'),
}

async function modifyFirstRankWithOptions(appGroupIdentity: string, appId: string, name: string, request: ModifyFirstRankRequest, runtime: Util.RuntimeOptions): ModifyFirstRankResponse {
  Util.validateModel(request);
  return doRequestWithAction('ModifyFirstRank', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/first-ranks/${name}`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function modifyFirstRank(appGroupIdentity: string, appId: string, name: string, request: ModifyFirstRankRequest): ModifyFirstRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFirstRankWithOptions(appGroupIdentity, appId, name, request, runtime);
}

model CreateFirstRankQuery = {
  dryRun?: boolean(name='dryRun'),
}

model CreateFirstRankRequest = {
  headers?: map[string]string(name='headers'),
  query?: CreateFirstRankQuery(name='query'),
}

model CreateFirstRankResponseBody = {
  requestId: string(name='requestId'),
  result: {
    name: string(name='name'),
    active: boolean(name='active'),
    meta: [
      {
        attribute: string(name='attribute'),
        arg: string(name='arg'),
        weight: float(name='weight'),
      }
    ](name='meta'),
  }(name='result'),
}

model CreateFirstRankResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFirstRankResponseBody(name='body'),
}

async function createFirstRankWithOptions(appGroupIdentity: string, appId: string, request: CreateFirstRankRequest, runtime: Util.RuntimeOptions): CreateFirstRankResponse {
  Util.validateModel(request);
  return doRequestWithAction('CreateFirstRank', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/first-ranks`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function createFirstRank(appGroupIdentity: string, appId: string, request: CreateFirstRankRequest): CreateFirstRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFirstRankWithOptions(appGroupIdentity, appId, request, runtime);
}

model ListDeployedAlgorithmModelsQuery = {
  inServiceOnly?: boolean(name='inServiceOnly'),
  algorithmType?: string(name='algorithmType'),
}

model ListDeployedAlgorithmModelsRequest = {
  headers?: map[string]string(name='headers'),
  query?: ListDeployedAlgorithmModelsQuery(name='query'),
}

model ListDeployedAlgorithmModelsResponseBody = {
  requestId: string(name='requestId'),
  result: [
    {
      id: string(name='id'),
      appGroupName: string(name='appGroupName'),
      scene: string(name='scene'),
      desc: string(name='desc'),
      gmtCreate: string(name='gmtCreate'),
      gmtModified: string(name='gmtModified'),
      status: string(name='status'),
      models: [
        {
          modelName: string(name='modelName'),
          modelId: integer(name='modelId'),
          progress: integer(name='progress'),
          status: string(name='status'),
          projectId: integer(name='projectId'),
          algorithmType: string(name='algorithmType'),
        }
      ](name='models'),
      apps: [ string ](name='apps'),
    }
  ](name='result'),
}

model ListDeployedAlgorithmModelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeployedAlgorithmModelsResponseBody(name='body'),
}

async function listDeployedAlgorithmModelsWithOptions(appGroupIdentity: string, request: ListDeployedAlgorithmModelsRequest, runtime: Util.RuntimeOptions): ListDeployedAlgorithmModelsResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListDeployedAlgorithmModels', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/deployed-algorithm-models`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listDeployedAlgorithmModels(appGroupIdentity: string, request: ListDeployedAlgorithmModelsRequest): ListDeployedAlgorithmModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeployedAlgorithmModelsWithOptions(appGroupIdentity, request, runtime);
}

model ModifyQueryProcessorQuery = {
  dryRun?: boolean(name='dryRun'),
}

model ModifyQueryProcessorRequest = {
  headers?: map[string]string(name='headers'),
  query?: ModifyQueryProcessorQuery(name='query'),
}

model ModifyQueryProcessorResponseBody = {
  requestId: string(name='requestId'),
  result: {
    name: string(name='name'),
    active: boolean(name='active'),
    domain: string(name='domain'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    indexes: [ string ](name='indexes'),
    processors: [ map[string]any ](name='processors'),
  }(name='result'),
}

model ModifyQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyQueryProcessorResponseBody(name='body'),
}

async function modifyQueryProcessorWithOptions(appGroupIdentity: string, appId: string, name: string, request: ModifyQueryProcessorRequest, runtime: Util.RuntimeOptions): ModifyQueryProcessorResponse {
  Util.validateModel(request);
  return doRequestWithAction('ModifyQueryProcessor', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors/${name}`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function modifyQueryProcessor(appGroupIdentity: string, appId: string, name: string, request: ModifyQueryProcessorRequest): ModifyQueryProcessorResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyQueryProcessorWithOptions(appGroupIdentity, appId, name, request, runtime);
}

model RemoveFirstRankRequest = {
  headers?: map[string]string(name='headers'),
}

model RemoveFirstRankResponseBody = {
  requestId: string(name='requestId'),
  result: {
    name: string(name='name'),
    description: string(name='description'),
    active: boolean(name='active'),
    meta: [
      {
        attribute: string(name='attribute'),
        arg: string(name='arg'),
        weight: float(name='weight'),
      }
    ](name='meta'),
  }(name='result'),
}

model RemoveFirstRankResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveFirstRankResponseBody(name='body'),
}

async function removeFirstRankWithOptions(appGroupIdentity: string, appId: string, name: string, request: RemoveFirstRankRequest, runtime: Util.RuntimeOptions): RemoveFirstRankResponse {
  Util.validateModel(request);
  return doRequestWithAction('RemoveFirstRank', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/first-ranks/${name}`, null, request.headers, null, runtime);
}

async function removeFirstRank(appGroupIdentity: string, appId: string, name: string, request: RemoveFirstRankRequest): RemoveFirstRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeFirstRankWithOptions(appGroupIdentity, appId, name, request, runtime);
}

model CreateQueryProcessorQuery = {
  dryRun?: boolean(name='dryRun'),
}

model CreateQueryProcessorRequest = {
  headers?: map[string]string(name='headers'),
  query?: CreateQueryProcessorQuery(name='query'),
}

model CreateQueryProcessorResponseBody = {
  requestId: string(name='requestId'),
  result: {
    name: string(name='name'),
    active: boolean(name='active'),
    domain: string(name='domain'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    indexes: [ string ](name='indexes'),
    processors: [ map[string]any ](name='processors'),
  }(name='result'),
}

model CreateQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  body: CreateQueryProcessorResponseBody(name='body'),
}

async function createQueryProcessorWithOptions(appGroupIdentity: string, appId: string, request: CreateQueryProcessorRequest, runtime: Util.RuntimeOptions): CreateQueryProcessorResponse {
  Util.validateModel(request);
  return doRequestWithAction('CreateQueryProcessor', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function createQueryProcessor(appGroupIdentity: string, appId: string, request: CreateQueryProcessorRequest): CreateQueryProcessorResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQueryProcessorWithOptions(appGroupIdentity, appId, request, runtime);
}

model DescribeQueryProcessorRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeQueryProcessorResponseBody = {
  requestId: string(name='requestId'),
  result: {
    name: string(name='name'),
    active: boolean(name='active'),
    domain: string(name='domain'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    indexes: [ string ](name='indexes'),
    processors: [ map[string]any ](name='processors'),
  }(name='result'),
}

model DescribeQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeQueryProcessorResponseBody(name='body'),
}

async function describeQueryProcessorWithOptions(appGroupIdentity: string, appId: string, name: string, request: DescribeQueryProcessorRequest, runtime: Util.RuntimeOptions): DescribeQueryProcessorResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeQueryProcessor', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors/${name}`, null, request.headers, null, runtime);
}

async function describeQueryProcessor(appGroupIdentity: string, appId: string, name: string, request: DescribeQueryProcessorRequest): DescribeQueryProcessorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeQueryProcessorWithOptions(appGroupIdentity, appId, name, request, runtime);
}

model CreateScheduledTaskRequest = {
  headers?: map[string]string(name='headers'),
}

model CreateScheduledTaskResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model CreateScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScheduledTaskResponseBody(name='body'),
}

async function createScheduledTaskWithOptions(appGroupIdentity: string, request: CreateScheduledTaskRequest, runtime: Util.RuntimeOptions): CreateScheduledTaskResponse {
  Util.validateModel(request);
  return doRequestWithAction('CreateScheduledTask', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scheduled-tasks`, null, request.headers, null, runtime);
}

async function createScheduledTask(appGroupIdentity: string, request: CreateScheduledTaskRequest): CreateScheduledTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScheduledTaskWithOptions(appGroupIdentity, request, runtime);
}

model DescribeFirstRankRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeFirstRankResponseBody = {
  requestId: string(name='requestId'),
  result: {
    name: string(name='name'),
    description: string(name='description'),
    active: boolean(name='active'),
    meta: [
      {
        attribute: string(name='attribute'),
        arg: string(name='arg'),
        weight: float(name='weight'),
      }
    ](name='meta'),
  }(name='result'),
}

model DescribeFirstRankResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFirstRankResponseBody(name='body'),
}

async function describeFirstRankWithOptions(appGroupIdentity: string, appId: string, name: string, request: DescribeFirstRankRequest, runtime: Util.RuntimeOptions): DescribeFirstRankResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeFirstRank', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/first-ranks/${name}`, null, request.headers, null, runtime);
}

async function describeFirstRank(appGroupIdentity: string, appId: string, name: string, request: DescribeFirstRankRequest): DescribeFirstRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFirstRankWithOptions(appGroupIdentity, appId, name, request, runtime);
}

model RemoveQueryProcessorRequest = {
  headers?: map[string]string(name='headers'),
}

model RemoveQueryProcessorResponseBody = {
  requestId: string(name='requestId'),
  result: string(name='result'),
}

model RemoveQueryProcessorResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveQueryProcessorResponseBody(name='body'),
}

async function removeQueryProcessorWithOptions(appGroupIdentity: string, appId: string, name: string, request: RemoveQueryProcessorRequest, runtime: Util.RuntimeOptions): RemoveQueryProcessorResponse {
  Util.validateModel(request);
  return doRequestWithAction('RemoveQueryProcessor', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors/${name}`, null, request.headers, null, runtime);
}

async function removeQueryProcessor(appGroupIdentity: string, appId: string, name: string, request: RemoveQueryProcessorRequest): RemoveQueryProcessorResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeQueryProcessorWithOptions(appGroupIdentity, appId, name, request, runtime);
}

model DescribeScheduledTaskRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeScheduledTaskResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model DescribeScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScheduledTaskResponseBody(name='body'),
}

async function describeScheduledTaskWithOptions(appGroupIdentity: string, taskId: string, request: DescribeScheduledTaskRequest, runtime: Util.RuntimeOptions): DescribeScheduledTaskResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeScheduledTask', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scheduled-tasks/${taskId}`, null, request.headers, null, runtime);
}

async function describeScheduledTask(appGroupIdentity: string, taskId: string, request: DescribeScheduledTaskRequest): DescribeScheduledTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScheduledTaskWithOptions(appGroupIdentity, taskId, request, runtime);
}

model DescribeRegionRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeRegionResponseBody = {
  requestId: string(name='requestId'),
  result: {
    regionId: string(name='regionId'),
    config: map[string]any(name='config'),
  }(name='result'),
}

model DescribeRegionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionResponseBody(name='body'),
}

async function describeRegionWithOptions(request: DescribeRegionRequest, runtime: Util.RuntimeOptions): DescribeRegionResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeRegion', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/region`, null, request.headers, null, runtime);
}

async function describeRegion(request: DescribeRegionRequest): DescribeRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionWithOptions(request, runtime);
}

model DescribeSecondRankRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeSecondRankResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    meta: string(name='meta'),
    active: boolean(name='active'),
    description: string(name='description'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    isDefault: string(name='isDefault'),
    isSys: string(name='isSys'),
  }(name='result'),
}

model DescribeSecondRankResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecondRankResponseBody(name='body'),
}

async function describeSecondRankWithOptions(appGroupIdentity: string, appId: string, name: string, request: DescribeSecondRankRequest, runtime: Util.RuntimeOptions): DescribeSecondRankResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeSecondRank', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/second-ranks/${name}`, null, request.headers, null, runtime);
}

async function describeSecondRank(appGroupIdentity: string, appId: string, name: string, request: DescribeSecondRankRequest): DescribeSecondRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecondRankWithOptions(appGroupIdentity, appId, name, request, runtime);
}

model RemoveScheduledTaskRequest = {
  headers?: map[string]string(name='headers'),
}

model RemoveScheduledTaskResponseBody = {
  requestId: string(name='requestId'),
  result: [ integer ](name='result'),
}

model RemoveScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveScheduledTaskResponseBody(name='body'),
}

async function removeScheduledTaskWithOptions(appGroupIdentity: string, taskId: string, request: RemoveScheduledTaskRequest, runtime: Util.RuntimeOptions): RemoveScheduledTaskResponse {
  Util.validateModel(request);
  return doRequestWithAction('RemoveScheduledTask', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scheduled-tasks/${taskId}`, null, request.headers, null, runtime);
}

async function removeScheduledTask(appGroupIdentity: string, taskId: string, request: RemoveScheduledTaskRequest): RemoveScheduledTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeScheduledTaskWithOptions(appGroupIdentity, taskId, request, runtime);
}

model DescribeAppStatisticsRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeAppStatisticsResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model DescribeAppStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppStatisticsResponseBody(name='body'),
}

async function describeAppStatisticsWithOptions(appGroupIdentity: string, appId: string, request: DescribeAppStatisticsRequest, runtime: Util.RuntimeOptions): DescribeAppStatisticsResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeAppStatistics', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/statistics`, null, request.headers, null, runtime);
}

async function describeAppStatistics(appGroupIdentity: string, appId: string, request: DescribeAppStatisticsRequest): DescribeAppStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppStatisticsWithOptions(appGroupIdentity, appId, request, runtime);
}

model ModifyScheduledTaskRequest = {
  headers?: map[string]string(name='headers'),
}

model ModifyScheduledTaskResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model ModifyScheduledTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScheduledTaskResponseBody(name='body'),
}

async function modifyScheduledTaskWithOptions(appGroupIdentity: string, taskId: string, request: ModifyScheduledTaskRequest, runtime: Util.RuntimeOptions): ModifyScheduledTaskResponse {
  Util.validateModel(request);
  return doRequestWithAction('ModifyScheduledTask', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scheduled-tasks/${taskId}`, null, request.headers, null, runtime);
}

async function modifyScheduledTask(appGroupIdentity: string, taskId: string, request: ModifyScheduledTaskRequest): ModifyScheduledTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyScheduledTaskWithOptions(appGroupIdentity, taskId, request, runtime);
}

model ListAppGroupErrorsQuery = {
  appId?: string(name='appId'),
  startTime?: integer(name='startTime'),
  stopTime?: integer(name='stopTime'),
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
}

model ListAppGroupErrorsRequest = {
  headers?: map[string]string(name='headers'),
  query?: ListAppGroupErrorsQuery(name='query'),
}

model ListAppGroupErrorsResponseBody = {
  requestId: string(name='requestId'),
  totalCount: long(name='totalCount'),
  result: [ map[string]any ](name='result'),
}

model ListAppGroupErrorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppGroupErrorsResponseBody(name='body'),
}

async function listAppGroupErrorsWithOptions(appGroupIdentity: string, request: ListAppGroupErrorsRequest, runtime: Util.RuntimeOptions): ListAppGroupErrorsResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListAppGroupErrors', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/errors`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listAppGroupErrors(appGroupIdentity: string, request: ListAppGroupErrorsRequest): ListAppGroupErrorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppGroupErrorsWithOptions(appGroupIdentity, request, runtime);
}

model ListQueryProcessorsQuery = {
  isActive?: integer(name='isActive'),
}

model ListQueryProcessorsRequest = {
  headers?: map[string]string(name='headers'),
  query?: ListQueryProcessorsQuery(name='query'),
}

model ListQueryProcessorsResponseBody = {
  requestId: string(name='requestId'),
  result: [
    {
      name: string(name='name'),
      active: boolean(name='active'),
      domain: string(name='domain'),
      created: integer(name='created'),
      updated: integer(name='updated'),
      indexes: [ string ](name='indexes'),
      processors: [ map[string]any ](name='processors'),
    }
  ](name='result'),
}

model ListQueryProcessorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListQueryProcessorsResponseBody(name='body'),
}

async function listQueryProcessorsWithOptions(appGroupIdentity: string, appId: string, request: ListQueryProcessorsRequest, runtime: Util.RuntimeOptions): ListQueryProcessorsResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListQueryProcessors', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/query-processors`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listQueryProcessors(appGroupIdentity: string, appId: string, request: ListQueryProcessorsRequest): ListQueryProcessorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQueryProcessorsWithOptions(appGroupIdentity, appId, request, runtime);
}

model ListQueryProcessorNersQuery = {
  domain: string(name='domain'),
}

model ListQueryProcessorNersRequest = {
  headers?: map[string]string(name='headers'),
  query: ListQueryProcessorNersQuery(name='query'),
}

model ListQueryProcessorNersResponseBody = {
  requestId: string(name='requestId'),
  result: [
    {
      tag: string(name='tag'),
      priority: string(name='priority'),
      order: integer(name='order'),
      label: string(name='label'),
    }
  ](name='result'),
}

model ListQueryProcessorNersResponse = {
  headers: map[string]string(name='headers'),
  body: ListQueryProcessorNersResponseBody(name='body'),
}

async function listQueryProcessorNersWithOptions(request: ListQueryProcessorNersRequest, runtime: Util.RuntimeOptions): ListQueryProcessorNersResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListQueryProcessorNers', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/query-processor/ner/default-priorities`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listQueryProcessorNers(request: ListQueryProcessorNersRequest): ListQueryProcessorNersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQueryProcessorNersWithOptions(request, runtime);
}

model ModifySecondRankQuery = {
  dryRun?: boolean(name='dryRun'),
}

model ModifySecondRankRequest = {
  headers?: map[string]string(name='headers'),
  query?: ModifySecondRankQuery(name='query'),
}

model ModifySecondRankResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    meta: string(name='meta'),
    active: boolean(name='active'),
    description: string(name='description'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    isDefault: string(name='isDefault'),
    isSys: string(name='isSys'),
  }(name='result'),
}

model ModifySecondRankResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecondRankResponseBody(name='body'),
}

async function modifySecondRankWithOptions(appGroupIdentity: string, appId: string, name: string, request: ModifySecondRankRequest, runtime: Util.RuntimeOptions): ModifySecondRankResponse {
  Util.validateModel(request);
  return doRequestWithAction('ModifySecondRank', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/second-ranks/${name}`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function modifySecondRank(appGroupIdentity: string, appId: string, name: string, request: ModifySecondRankRequest): ModifySecondRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecondRankWithOptions(appGroupIdentity, appId, name, request, runtime);
}

model RemoveSecondRankRequest = {
  headers?: map[string]string(name='headers'),
}

model RemoveSecondRankResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model RemoveSecondRankResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSecondRankResponseBody(name='body'),
}

async function removeSecondRankWithOptions(appGroupIdentity: string, appId: string, name: string, request: RemoveSecondRankRequest, runtime: Util.RuntimeOptions): RemoveSecondRankResponse {
  Util.validateModel(request);
  return doRequestWithAction('RemoveSecondRank', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/second-ranks/${name}`, null, request.headers, null, runtime);
}

async function removeSecondRank(appGroupIdentity: string, appId: string, name: string, request: RemoveSecondRankRequest): RemoveSecondRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeSecondRankWithOptions(appGroupIdentity, appId, name, request, runtime);
}

model ListAppGroupMetricsQuery = {
  metricType?: string(name='metricType'),
  startTime?: integer(name='startTime'),
  endTime?: integer(name='endTime'),
  indexes?: string(name='indexes'),
}

model ListAppGroupMetricsRequest = {
  headers?: map[string]string(name='headers'),
  query?: ListAppGroupMetricsQuery(name='query'),
}

model ListAppGroupMetricsResponseBody = {
  requestId: string(name='requestId'),
  result: [ map[string]any ](name='result'),
}

model ListAppGroupMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppGroupMetricsResponseBody(name='body'),
}

async function listAppGroupMetricsWithOptions(appGroupIdentity: string, request: ListAppGroupMetricsRequest, runtime: Util.RuntimeOptions): ListAppGroupMetricsResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListAppGroupMetrics', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/metrics`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listAppGroupMetrics(appGroupIdentity: string, request: ListAppGroupMetricsRequest): ListAppGroupMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppGroupMetricsWithOptions(appGroupIdentity, request, runtime);
}

model ListScheduledTasksQuery = {
  type?: string(name='type'),
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
}

model ListScheduledTasksRequest = {
  headers?: map[string]string(name='headers'),
  query?: ListScheduledTasksQuery(name='query'),
}

model ListScheduledTasksResponseBody = {
  requestId: string(name='requestId'),
  totalCount: long(name='totalCount'),
  result: [ map[string]any ](name='result'),
}

model ListScheduledTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListScheduledTasksResponseBody(name='body'),
}

async function listScheduledTasksWithOptions(appGroupIdentity: string, request: ListScheduledTasksRequest, runtime: Util.RuntimeOptions): ListScheduledTasksResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListScheduledTasks', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/scheduled-tasks`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listScheduledTasks(appGroupIdentity: string, request: ListScheduledTasksRequest): ListScheduledTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScheduledTasksWithOptions(appGroupIdentity, request, runtime);
}

model ListSlowQueryQueriesRequest = {
  headers?: map[string]string(name='headers'),
}

model ListSlowQueryQueriesResponseBody = {
  requestId: string(name='requestId'),
  result: {
    start: integer(name='start'),
    end: integer(name='end'),
    index: integer(name='index'),
    appQuery: string(name='appQuery'),
  }(name='result'),
}

model ListSlowQueryQueriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSlowQueryQueriesResponseBody(name='body'),
}

async function listSlowQueryQueriesWithOptions(appGroupIdentity: string, categoryIndex: string, request: ListSlowQueryQueriesRequest, runtime: Util.RuntimeOptions): ListSlowQueryQueriesResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListSlowQueryQueries', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query/categories/${categoryIndex}/queries`, null, request.headers, null, runtime);
}

async function listSlowQueryQueries(appGroupIdentity: string, categoryIndex: string, request: ListSlowQueryQueriesRequest): ListSlowQueryQueriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSlowQueryQueriesWithOptions(appGroupIdentity, categoryIndex, request, runtime);
}

model ListInterventionDictionaryEntriesQuery = {
  word?: string(name='word'),
}

model ListInterventionDictionaryEntriesRequest = {
  headers?: map[string]string(name='headers'),
  query?: ListInterventionDictionaryEntriesQuery(name='query'),
}

model ListInterventionDictionaryEntriesResponseBody = {
  requestId: string(name='requestId'),
  totalCount: integer(name='totalCount'),
  result: [
    {
      cmd: string(name='cmd'),
      word: string(name='word'),
      created: long(name='created'),
      updated: long(name='updated'),
      status: string(name='status'),
      relevance: map[string]any(name='relevance'),
      tokens: [
        {
          tag: string(name='tag'),
          token: string(name='token'),
          order: integer(name='order'),
          tagLabel: string(name='tagLabel'),
        }
      ](name='tokens'),
    }
  ](name='result'),
}

model ListInterventionDictionaryEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInterventionDictionaryEntriesResponseBody(name='body'),
}

async function listInterventionDictionaryEntriesWithOptions(name: string, request: ListInterventionDictionaryEntriesRequest, runtime: Util.RuntimeOptions): ListInterventionDictionaryEntriesResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListInterventionDictionaryEntries', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/intervention-dictionaries/${name}/entries`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listInterventionDictionaryEntries(name: string, request: ListInterventionDictionaryEntriesRequest): ListInterventionDictionaryEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInterventionDictionaryEntriesWithOptions(name, request, runtime);
}

model ListInterventionDictionaryNerResultsQuery = {
  query: string(name='query'),
}

model ListInterventionDictionaryNerResultsRequest = {
  headers?: map[string]string(name='headers'),
  query: ListInterventionDictionaryNerResultsQuery(name='query'),
}

model ListInterventionDictionaryNerResultsResponseBody = {
  requestId: string(name='requestId'),
  result: [
    {
      tag: string(name='tag'),
      tagLabel: string(name='tagLabel'),
      token: string(name='token'),
      order: integer(name='order'),
    }
  ](name='result'),
}

model ListInterventionDictionaryNerResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListInterventionDictionaryNerResultsResponseBody(name='body'),
}

async function listInterventionDictionaryNerResultsWithOptions(name: string, request: ListInterventionDictionaryNerResultsRequest, runtime: Util.RuntimeOptions): ListInterventionDictionaryNerResultsResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListInterventionDictionaryNerResults', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/intervention-dictionaries/${name}/ner-results`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listInterventionDictionaryNerResults(name: string, request: ListInterventionDictionaryNerResultsRequest): ListInterventionDictionaryNerResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInterventionDictionaryNerResultsWithOptions(name, request, runtime);
}

model CreateDataCollectionRequest = {
  headers?: map[string]string(name='headers'),
}

model CreateDataCollectionResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    type: string(name='type'),
    status: integer(name='status'),
    dataCollectionType: string(name='dataCollectionType'),
    industryName: string(name='industryName'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    sundialId: string(name='sundialId'),
  }(name='result'),
}

model CreateDataCollectionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataCollectionResponseBody(name='body'),
}

async function createDataCollectionWithOptions(appGroupIdentity: string, request: CreateDataCollectionRequest, runtime: Util.RuntimeOptions): CreateDataCollectionResponse {
  Util.validateModel(request);
  return doRequestWithAction('CreateDataCollection', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/data-collections`, null, request.headers, null, runtime);
}

async function createDataCollection(appGroupIdentity: string, request: CreateDataCollectionRequest): CreateDataCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataCollectionWithOptions(appGroupIdentity, request, runtime);
}

model ListSlowQueryCategoriesRequest = {
  headers?: map[string]string(name='headers'),
}

model ListSlowQueryCategoriesResponseBody = {
  requestId: string(name='requestId'),
  result: {
    analyzeStatus: string(name='analyzeStatus'),
    start: integer(name='start'),
    end: integer(name='end'),
  }(name='result'),
}

model ListSlowQueryCategoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSlowQueryCategoriesResponseBody(name='body'),
}

async function listSlowQueryCategoriesWithOptions(appGroupIdentity: string, request: ListSlowQueryCategoriesRequest, runtime: Util.RuntimeOptions): ListSlowQueryCategoriesResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListSlowQueryCategories', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query/categories`, null, request.headers, null, runtime);
}

async function listSlowQueryCategories(appGroupIdentity: string, request: ListSlowQueryCategoriesRequest): ListSlowQueryCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSlowQueryCategoriesWithOptions(appGroupIdentity, request, runtime);
}

model PushInterventionDictionaryEntriesRequest = {
  headers?: map[string]string(name='headers'),
}

model PushInterventionDictionaryEntriesResponseBody = {
  requestId: string(name='requestId'),
  result: [ string ](name='result'),
}

model PushInterventionDictionaryEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: PushInterventionDictionaryEntriesResponseBody(name='body'),
}

async function pushInterventionDictionaryEntriesWithOptions(name: string, request: PushInterventionDictionaryEntriesRequest, runtime: Util.RuntimeOptions): PushInterventionDictionaryEntriesResponse {
  Util.validateModel(request);
  return doRequestWithAction('PushInterventionDictionaryEntries', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/intervention-dictionaries/${name}/entries/actions/bulk`, null, request.headers, null, runtime);
}

async function pushInterventionDictionaryEntries(name: string, request: PushInterventionDictionaryEntriesRequest): PushInterventionDictionaryEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushInterventionDictionaryEntriesWithOptions(name, request, runtime);
}

model DisableSlowQueryRequest = {
  headers?: map[string]string(name='headers'),
}

model DisableSlowQueryResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model DisableSlowQueryResponse = {
  headers: map[string]string(name='headers'),
  body: DisableSlowQueryResponseBody(name='body'),
}

async function disableSlowQueryWithOptions(appGroupIdentity: string, request: DisableSlowQueryRequest, runtime: Util.RuntimeOptions): DisableSlowQueryResponse {
  Util.validateModel(request);
  return doRequestWithAction('DisableSlowQuery', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query/actions/disable`, null, request.headers, null, runtime);
}

async function disableSlowQuery(appGroupIdentity: string, request: DisableSlowQueryRequest): DisableSlowQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSlowQueryWithOptions(appGroupIdentity, request, runtime);
}

model DescribeAppGroupDataReportQuery = {
  startTime: string(name='startTime'),
  endTime: string(name='endTime'),
}

model DescribeAppGroupDataReportRequest = {
  headers?: map[string]string(name='headers'),
  query: DescribeAppGroupDataReportQuery(name='query'),
}

model DescribeAppGroupDataReportResponseBody = {
  requestId: string(name='requestId'),
  result: {
    receivedCount: integer(name='receivedCount'),
    receivedSample: [
      {
        receivedTimeMs: long(name='receivedTimeMs'),
        message: {
          clientIp: string(name='clientIp'),
          arg3: string(name='arg3'),
          userId: string(name='userId'),
          args: string(name='args'),
          arg1: string(name='arg1'),
          sdkType: string(name='sdkType'),
          sessionId: string(name='sessionId'),
          eventId: integer(name='eventId'),
          sdkVersion: string(name='sdkVersion'),
          page: string(name='page'),
        }(name='message'),
      }
    ](name='receivedSample'),
  }(name='result'),
}

model DescribeAppGroupDataReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppGroupDataReportResponseBody(name='body'),
}

async function describeAppGroupDataReportWithOptions(appGroupIdentity: string, request: DescribeAppGroupDataReportRequest, runtime: Util.RuntimeOptions): DescribeAppGroupDataReportResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeAppGroupDataReport', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/data-report`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function describeAppGroupDataReport(appGroupIdentity: string, request: DescribeAppGroupDataReportRequest): DescribeAppGroupDataReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppGroupDataReportWithOptions(appGroupIdentity, request, runtime);
}

model UpdateFetchFieldsQuery = {
  dryRun?: boolean(name='dryRun'),
}

model UpdateFetchFieldsRequest = {
  headers?: map[string]string(name='headers'),
  query?: UpdateFetchFieldsQuery(name='query'),
}

model UpdateFetchFieldsResponseBody = {
  requestId: string(name='requestId'),
  result: boolean(name='result'),
}

model UpdateFetchFieldsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFetchFieldsResponseBody(name='body'),
}

async function updateFetchFieldsWithOptions(appGroupIdentity: string, appId: string, request: UpdateFetchFieldsRequest, runtime: Util.RuntimeOptions): UpdateFetchFieldsResponse {
  Util.validateModel(request);
  return doRequestWithAction('UpdateFetchFields', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/fetch-fields`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function updateFetchFields(appGroupIdentity: string, appId: string, request: UpdateFetchFieldsRequest): UpdateFetchFieldsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFetchFieldsWithOptions(appGroupIdentity, appId, request, runtime);
}

model RemoveDataCollectionRequest = {
  headers?: map[string]string(name='headers'),
}

model RemoveDataCollectionResponseBody = {
  requestId: string(name='requestId'),
  result: string(name='result'),
}

model RemoveDataCollectionResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDataCollectionResponseBody(name='body'),
}

async function removeDataCollectionWithOptions(appGroupIdentity: string, dataCollectionIdentity: string, request: RemoveDataCollectionRequest, runtime: Util.RuntimeOptions): RemoveDataCollectionResponse {
  Util.validateModel(request);
  return doRequestWithAction('RemoveDataCollection', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/data-collections/${dataCollectionIdentity}`, null, request.headers, null, runtime);
}

async function removeDataCollection(appGroupIdentity: string, dataCollectionIdentity: string, request: RemoveDataCollectionRequest): RemoveDataCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDataCollectionWithOptions(appGroupIdentity, dataCollectionIdentity, request, runtime);
}

model DescribeInterventionDictionaryRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeInterventionDictionaryResponseBody = {
  requestId: string(name='requestId'),
  result: {
    name: string(name='name'),
    type: string(name='type'),
    analyzer: string(name='analyzer'),
    created: string(name='created'),
    updated: string(name='updated'),
  }(name='result'),
}

model DescribeInterventionDictionaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInterventionDictionaryResponseBody(name='body'),
}

async function describeInterventionDictionaryWithOptions(name: string, request: DescribeInterventionDictionaryRequest, runtime: Util.RuntimeOptions): DescribeInterventionDictionaryResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeInterventionDictionary', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/intervention-dictionaries/${name}`, null, request.headers, null, runtime);
}

async function describeInterventionDictionary(name: string, request: DescribeInterventionDictionaryRequest): DescribeInterventionDictionaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInterventionDictionaryWithOptions(name, request, runtime);
}

model CreateInterventionDictionaryRequest = {
  headers?: map[string]string(name='headers'),
}

model CreateInterventionDictionaryResponseBody = {
  requestId: string(name='requestId'),
  result: {
    name: string(name='name'),
    type: string(name='type'),
    analyzer: string(name='analyzer'),
    created: string(name='created'),
    updated: string(name='updated'),
  }(name='result'),
}

model CreateInterventionDictionaryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInterventionDictionaryResponseBody(name='body'),
}

async function createInterventionDictionaryWithOptions(request: CreateInterventionDictionaryRequest, runtime: Util.RuntimeOptions): CreateInterventionDictionaryResponse {
  Util.validateModel(request);
  return doRequestWithAction('CreateInterventionDictionary', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/intervention-dictionaries`, null, request.headers, null, runtime);
}

async function createInterventionDictionary(request: CreateInterventionDictionaryRequest): CreateInterventionDictionaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInterventionDictionaryWithOptions(request, runtime);
}

model DescribeDataCollctionRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeDataCollctionResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    type: string(name='type'),
    status: integer(name='status'),
    dataCollectionType: string(name='dataCollectionType'),
    industryName: string(name='industryName'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    sundialId: string(name='sundialId'),
  }(name='result'),
}

model DescribeDataCollctionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataCollctionResponseBody(name='body'),
}

async function describeDataCollctionWithOptions(appGroupIdentity: string, dataCollectionIdentity: string, request: DescribeDataCollctionRequest, runtime: Util.RuntimeOptions): DescribeDataCollctionResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeDataCollction', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/data-collections/${dataCollectionIdentity}`, null, request.headers, null, runtime);
}

async function describeDataCollction(appGroupIdentity: string, dataCollectionIdentity: string, request: DescribeDataCollctionRequest): DescribeDataCollctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataCollctionWithOptions(appGroupIdentity, dataCollectionIdentity, request, runtime);
}

model EnableSlowQueryRequest = {
  headers?: map[string]string(name='headers'),
}

model EnableSlowQueryResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model EnableSlowQueryResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSlowQueryResponseBody(name='body'),
}

async function enableSlowQueryWithOptions(appGroupIdentity: string, request: EnableSlowQueryRequest, runtime: Util.RuntimeOptions): EnableSlowQueryResponse {
  Util.validateModel(request);
  return doRequestWithAction('EnableSlowQuery', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query/actions/enable`, null, request.headers, null, runtime);
}

async function enableSlowQuery(appGroupIdentity: string, request: EnableSlowQueryRequest): EnableSlowQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSlowQueryWithOptions(appGroupIdentity, request, runtime);
}

model ListDataCollectionsQuery = {
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
}

model ListDataCollectionsRequest = {
  headers?: map[string]string(name='headers'),
  query?: ListDataCollectionsQuery(name='query'),
}

model ListDataCollectionsResponseBody = {
  requestId: string(name='requestId'),
  totalCount: integer(name='totalCount'),
  result: [
    {
      id: string(name='id'),
      name: string(name='name'),
      type: string(name='type'),
      status: integer(name='status'),
      dataCollectionType: string(name='dataCollectionType'),
      industryName: string(name='industryName'),
      created: integer(name='created'),
      updated: integer(name='updated'),
      sundialId: string(name='sundialId'),
    }
  ](name='result'),
}

model ListDataCollectionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataCollectionsResponseBody(name='body'),
}

async function listDataCollectionsWithOptions(appGroupIdentity: string, request: ListDataCollectionsRequest, runtime: Util.RuntimeOptions): ListDataCollectionsResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListDataCollections', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/data-collections`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listDataCollections(appGroupIdentity: string, request: ListDataCollectionsRequest): ListDataCollectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataCollectionsWithOptions(appGroupIdentity, request, runtime);
}

model ReplaceAppGroupCommodityCodeRequest = {
  headers?: map[string]string(name='headers'),
}

model ReplaceAppGroupCommodityCodeResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    currentVersion: string(name='currentVersion'),
    switchedTime: integer(name='switchedTime'),
    chargingWay: integer(name='chargingWay'),
    type: string(name='type'),
    projectId: string(name='projectId'),
    chargeType: string(name='chargeType'),
    expireOn: string(name='expireOn'),
    instanceId: string(name='instanceId'),
    commodityCode: string(name='commodityCode'),
    processingOrderId: string(name='processingOrderId'),
    firstRankAlgoDeploymentId: integer(name='firstRankAlgoDeploymentId'),
    secondRankAlgoDeploymentId: integer(name='secondRankAlgoDeploymentId'),
    pendingSecondRankAlgoDeploymentId: integer(name='pendingSecondRankAlgoDeploymentId'),
    description: string(name='description'),
    produced: integer(name='produced'),
    lockedByExpiration: integer(name='lockedByExpiration'),
    hasPendingQuotaReviewTask: integer(name='hasPendingQuotaReviewTask'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    status: string(name='status'),
    lockMode: string(name='lockMode'),
    quota: {
      docSize: integer(name='docSize'),
      computeResource: integer(name='computeResource'),
      spec: string(name='spec'),
    }(name='quota'),
    versions: [ string ](name='versions'),
  }(name='result'),
}

model ReplaceAppGroupCommodityCodeResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceAppGroupCommodityCodeResponseBody(name='body'),
}

async function replaceAppGroupCommodityCodeWithOptions(appGroupIdentity: string, request: ReplaceAppGroupCommodityCodeRequest, runtime: Util.RuntimeOptions): ReplaceAppGroupCommodityCodeResponse {
  Util.validateModel(request);
  return doRequestWithAction('ReplaceAppGroupCommodityCode', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/actions/to-instance-typed`, null, request.headers, null, runtime);
}

async function replaceAppGroupCommodityCode(appGroupIdentity: string, request: ReplaceAppGroupCommodityCodeRequest): ReplaceAppGroupCommodityCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceAppGroupCommodityCodeWithOptions(appGroupIdentity, request, runtime);
}

model DescribeSlowQueryStatusRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeSlowQueryStatusResponseBody = {
  requestId: string(name='requestId'),
  result: {
    region: string(name='region'),
    appGroupId: string(name='appGroupId'),
    status: string(name='status'),
  }(name='result'),
}

model DescribeSlowQueryStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowQueryStatusResponseBody(name='body'),
}

async function describeSlowQueryStatusWithOptions(appGroupIdentity: string, request: DescribeSlowQueryStatusRequest, runtime: Util.RuntimeOptions): DescribeSlowQueryStatusResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeSlowQueryStatus', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query`, null, request.headers, null, runtime);
}

async function describeSlowQueryStatus(appGroupIdentity: string, request: DescribeSlowQueryStatusRequest): DescribeSlowQueryStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowQueryStatusWithOptions(appGroupIdentity, request, runtime);
}

model RemoveInterventionDictionaryRequest = {
  headers?: map[string]string(name='headers'),
}

model RemoveInterventionDictionaryResponseBody = {
  requestId: string(name='requestId'),
  result: {
    name: string(name='name'),
    type: string(name='type'),
    analyzer: string(name='analyzer'),
    created: string(name='created'),
    updated: string(name='updated'),
  }(name='result'),
}

model RemoveInterventionDictionaryResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveInterventionDictionaryResponseBody(name='body'),
}

async function removeInterventionDictionaryWithOptions(name: string, request: RemoveInterventionDictionaryRequest, runtime: Util.RuntimeOptions): RemoveInterventionDictionaryResponse {
  Util.validateModel(request);
  return doRequestWithAction('RemoveInterventionDictionary', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/intervention-dictionaries/${name}`, null, request.headers, null, runtime);
}

async function removeInterventionDictionary(name: string, request: RemoveInterventionDictionaryRequest): RemoveInterventionDictionaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeInterventionDictionaryWithOptions(name, request, runtime);
}

model UpdateSummariesQuery = {
  dryRun?: boolean(name='dryRun'),
}

model UpdateSummariesRequest = {
  headers?: map[string]string(name='headers'),
  query?: UpdateSummariesQuery(name='query'),
}

model UpdateSummariesResponseBody = {
  requestId: string(name='requestId'),
  result: boolean(name='result'),
}

model UpdateSummariesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSummariesResponseBody(name='body'),
}

async function updateSummariesWithOptions(appGroupIdentity: string, appId: string, request: UpdateSummariesRequest, runtime: Util.RuntimeOptions): UpdateSummariesResponse {
  Util.validateModel(request);
  return doRequestWithAction('UpdateSummaries', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}/summaries`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function updateSummaries(appGroupIdentity: string, appId: string, request: UpdateSummariesRequest): UpdateSummariesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSummariesWithOptions(appGroupIdentity, appId, request, runtime);
}

model StartSlowQueryAnalyzerRequest = {
  headers?: map[string]string(name='headers'),
}

model StartSlowQueryAnalyzerResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model StartSlowQueryAnalyzerResponse = {
  headers: map[string]string(name='headers'),
  body: StartSlowQueryAnalyzerResponseBody(name='body'),
}

async function startSlowQueryAnalyzerWithOptions(appGroupIdentity: string, request: StartSlowQueryAnalyzerRequest, runtime: Util.RuntimeOptions): StartSlowQueryAnalyzerResponse {
  Util.validateModel(request);
  return doRequestWithAction('StartSlowQueryAnalyzer', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/optimizers/slow-query/actions/run`, null, request.headers, null, runtime);
}

async function startSlowQueryAnalyzer(appGroupIdentity: string, request: StartSlowQueryAnalyzerRequest): StartSlowQueryAnalyzerResponse {
  var runtime = new Util.RuntimeOptions{};
  return startSlowQueryAnalyzerWithOptions(appGroupIdentity, request, runtime);
}

model ListInterventionDictionaryRelatedEntitiesRequest = {
  headers?: map[string]string(name='headers'),
}

model ListInterventionDictionaryRelatedEntitiesResponseBody = {
  requestId: string(name='requestId'),
  result: [ map[string]any ](name='result'),
}

model ListInterventionDictionaryRelatedEntitiesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInterventionDictionaryRelatedEntitiesResponseBody(name='body'),
}

async function listInterventionDictionaryRelatedEntitiesWithOptions(name: string, request: ListInterventionDictionaryRelatedEntitiesRequest, runtime: Util.RuntimeOptions): ListInterventionDictionaryRelatedEntitiesResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListInterventionDictionaryRelatedEntities', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/intervention-dictionaries/${name}/related`, null, request.headers, null, runtime);
}

async function listInterventionDictionaryRelatedEntities(name: string, request: ListInterventionDictionaryRelatedEntitiesRequest): ListInterventionDictionaryRelatedEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInterventionDictionaryRelatedEntitiesWithOptions(name, request, runtime);
}

model ListInterventionDictionariesQuery = {
  pageSize?: integer(name='pageSize'),
  pageNumber?: integer(name='pageNumber'),
  types?: string(name='types'),
}

model ListInterventionDictionariesRequest = {
  headers?: map[string]string(name='headers'),
  query?: ListInterventionDictionariesQuery(name='query'),
}

model ListInterventionDictionariesResponseBody = {
  requestId: string(name='requestId'),
  totalCount: integer(name='totalCount'),
  result: [
    {
      id: integer(name='id'),
      name: string(name='name'),
      type: string(name='type'),
      analyzer: string(name='analyzer'),
      created: integer(name='created'),
      updated: integer(name='updated'),
    }
  ](name='result'),
}

model ListInterventionDictionariesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInterventionDictionariesResponseBody(name='body'),
}

async function listInterventionDictionariesWithOptions(request: ListInterventionDictionariesRequest, runtime: Util.RuntimeOptions): ListInterventionDictionariesResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListInterventionDictionaries', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/intervention-dictionaries`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listInterventionDictionaries(request: ListInterventionDictionariesRequest): ListInterventionDictionariesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInterventionDictionariesWithOptions(request, runtime);
}

model CreateModelRequest = {
  headers?: map[string]string(name='headers'),
}

model CreateModelResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model CreateModelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateModelResponseBody(name='body'),
}

async function createModelWithOptions(appGroupIdentity: string, request: CreateModelRequest, runtime: Util.RuntimeOptions): CreateModelResponse {
  Util.validateModel(request);
  return doRequestWithAction('CreateModel', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models`, null, request.headers, null, runtime);
}

async function createModel(appGroupIdentity: string, request: CreateModelRequest): CreateModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createModelWithOptions(appGroupIdentity, request, runtime);
}

model GetModelProgressRequest = {
  headers?: map[string]string(name='headers'),
}

model GetModelProgressResponseBody = {
  requestId: string(name='requestId'),
  result: {
    progress: integer(name='progress'),
    status: string(name='status'),
  }(name='result'),
}

model GetModelProgressResponse = {
  headers: map[string]string(name='headers'),
  body: GetModelProgressResponseBody(name='body'),
}

async function getModelProgressWithOptions(appGroupIdentity: string, modelName: string, request: GetModelProgressRequest, runtime: Util.RuntimeOptions): GetModelProgressResponse {
  Util.validateModel(request);
  return doRequestWithAction('GetModelProgress', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/algorithm/models/${modelName}/progress`, null, request.headers, null, runtime);
}

async function getModelProgress(appGroupIdentity: string, modelName: string, request: GetModelProgressRequest): GetModelProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return getModelProgressWithOptions(appGroupIdentity, modelName, request, runtime);
}

model DescribeAppRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeAppResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    description: string(name='description'),
    status: string(name='status'),
    type: string(name='type'),
    clusterName: string(name='clusterName'),
    algoDeploymentId: integer(name='algoDeploymentId'),
    created: integer(name='created'),
    autoSwitch: boolean(name='autoSwitch'),
    progressPercent: integer(name='progressPercent'),
    schema: map[string]any(name='schema'),
    quota: {
      docSize: integer(name='docSize'),
      computeResource: integer(name='computeResource'),
      qps: integer(name='qps'),
      spec: string(name='spec'),
    }(name='quota'),
    fetchFields: [ string ](name='fetchFields'),
  }(name='result'),
}

model DescribeAppResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppResponseBody(name='body'),
}

async function describeAppWithOptions(appGroupIdentity: string, appId: string, request: DescribeAppRequest, runtime: Util.RuntimeOptions): DescribeAppResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeApp', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}`, null, request.headers, null, runtime);
}

async function describeApp(appGroupIdentity: string, appId: string, request: DescribeAppRequest): DescribeAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppWithOptions(appGroupIdentity, appId, request, runtime);
}

model DescribeAppGroupRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeAppGroupResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    currentVersion: string(name='currentVersion'),
    switchedTime: integer(name='switchedTime'),
    chargingWay: integer(name='chargingWay'),
    type: string(name='type'),
    projectId: string(name='projectId'),
    chargeType: string(name='chargeType'),
    expireOn: string(name='expireOn'),
    instanceId: string(name='instanceId'),
    commodityCode: string(name='commodityCode'),
    processingOrderId: string(name='processingOrderId'),
    firstRankAlgoDeploymentId: integer(name='firstRankAlgoDeploymentId'),
    secondRankAlgoDeploymentId: integer(name='secondRankAlgoDeploymentId'),
    pendingSecondRankAlgoDeploymentId: integer(name='pendingSecondRankAlgoDeploymentId'),
    description: string(name='description'),
    produced: integer(name='produced'),
    lockedByExpiration: integer(name='lockedByExpiration'),
    hasPendingQuotaReviewTask: integer(name='hasPendingQuotaReviewTask'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    status: string(name='status'),
    lockMode: string(name='lockMode'),
    quota: {
      docSize: integer(name='docSize'),
      computeResource: integer(name='computeResource'),
      spec: string(name='spec'),
    }(name='quota'),
  }(name='result'),
}

model DescribeAppGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppGroupResponseBody(name='body'),
}

async function describeAppGroupWithOptions(appGroupIdentity: string, request: DescribeAppGroupRequest, runtime: Util.RuntimeOptions): DescribeAppGroupResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeAppGroup', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}`, null, request.headers, null, runtime);
}

async function describeAppGroup(appGroupIdentity: string, request: DescribeAppGroupRequest): DescribeAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppGroupWithOptions(appGroupIdentity, request, runtime);
}

model CreateAppGroupRequest = {
  headers?: map[string]string(name='headers'),
}

model CreateAppGroupResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    currentVersion: string(name='currentVersion'),
    switchedTime: integer(name='switchedTime'),
    chargingWay: integer(name='chargingWay'),
    type: string(name='type'),
    projectId: string(name='projectId'),
    chargeType: string(name='chargeType'),
    expireOn: string(name='expireOn'),
    instanceId: string(name='instanceId'),
    commodityCode: string(name='commodityCode'),
    processingOrderId: string(name='processingOrderId'),
    firstRankAlgoDeploymentId: integer(name='firstRankAlgoDeploymentId'),
    secondRankAlgoDeploymentId: integer(name='secondRankAlgoDeploymentId'),
    pendingSecondRankAlgoDeploymentId: integer(name='pendingSecondRankAlgoDeploymentId'),
    description: string(name='description'),
    produced: integer(name='produced'),
    lockedByExpiration: integer(name='lockedByExpiration'),
    hasPendingQuotaReviewTask: integer(name='hasPendingQuotaReviewTask'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    status: string(name='status'),
    lockMode: string(name='lockMode'),
    quota: {
      docSize: integer(name='docSize'),
      computeResource: integer(name='computeResource'),
      spec: string(name='spec'),
    }(name='quota'),
  }(name='result'),
}

model CreateAppGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppGroupResponseBody(name='body'),
}

async function createAppGroupWithOptions(request: CreateAppGroupRequest, runtime: Util.RuntimeOptions): CreateAppGroupResponse {
  Util.validateModel(request);
  return doRequestWithAction('CreateAppGroup', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups`, null, request.headers, null, runtime);
}

async function createAppGroup(request: CreateAppGroupRequest): CreateAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppGroupWithOptions(request, runtime);
}

model RemoveAppRequest = {
  headers?: map[string]string(name='headers'),
}

model RemoveAppResponseBody = {
  requestId: string(name='requestId'),
  result: [ integer ](name='result'),
}

model RemoveAppResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAppResponseBody(name='body'),
}

async function removeAppWithOptions(appGroupIdentity: string, appId: string, request: RemoveAppRequest, runtime: Util.RuntimeOptions): RemoveAppResponse {
  Util.validateModel(request);
  return doRequestWithAction('RemoveApp', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}`, null, request.headers, null, runtime);
}

async function removeApp(appGroupIdentity: string, appId: string, request: RemoveAppRequest): RemoveAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAppWithOptions(appGroupIdentity, appId, request, runtime);
}

model CreateAppQuery = {
  dryRun?: boolean(name='dryRun'),
}

model CreateAppRequest = {
  headers?: map[string]string(name='headers'),
  query?: CreateAppQuery(name='query'),
}

model CreateAppResponseBody = {
  requestId: string(name='requestId'),
  result: map[string]any(name='result'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppResponseBody(name='body'),
}

async function createAppWithOptions(appGroupIdentity: string, request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  return doRequestWithAction('CreateApp', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function createApp(appGroupIdentity: string, request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(appGroupIdentity, request, runtime);
}

model ModifyAppGroupRequest = {
  headers?: map[string]string(name='headers'),
}

model ModifyAppGroupResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    currentVersion: string(name='currentVersion'),
    switchedTime: integer(name='switchedTime'),
    chargingWay: integer(name='chargingWay'),
    type: string(name='type'),
    projectId: string(name='projectId'),
    chargeType: string(name='chargeType'),
    expireOn: string(name='expireOn'),
    instanceId: string(name='instanceId'),
    commodityCode: string(name='commodityCode'),
    processingOrderId: string(name='processingOrderId'),
    firstRankAlgoDeploymentId: integer(name='firstRankAlgoDeploymentId'),
    secondRankAlgoDeploymentId: integer(name='secondRankAlgoDeploymentId'),
    pendingSecondRankAlgoDeploymentId: integer(name='pendingSecondRankAlgoDeploymentId'),
    description: string(name='description'),
    produced: integer(name='produced'),
    lockedByExpiration: integer(name='lockedByExpiration'),
    hasPendingQuotaReviewTask: integer(name='hasPendingQuotaReviewTask'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    status: string(name='status'),
    lockMode: string(name='lockMode'),
    quota: {
      docSize: integer(name='docSize'),
      computeResource: integer(name='computeResource'),
      spec: string(name='spec'),
    }(name='quota'),
  }(name='result'),
}

model ModifyAppGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAppGroupResponseBody(name='body'),
}

async function modifyAppGroupWithOptions(appGroupIdentity: string, request: ModifyAppGroupRequest, runtime: Util.RuntimeOptions): ModifyAppGroupResponse {
  Util.validateModel(request);
  return doRequestWithAction('ModifyAppGroup', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}`, null, request.headers, null, runtime);
}

async function modifyAppGroup(appGroupIdentity: string, request: ModifyAppGroupRequest): ModifyAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppGroupWithOptions(appGroupIdentity, request, runtime);
}

model ModifyAppGroupQuotaRequest = {
  headers?: map[string]string(name='headers'),
}

model ModifyAppGroupQuotaResponseBody = {
  requestId: string(name='requestId'),
  result: {
    id: string(name='id'),
    name: string(name='name'),
    currentVersion: string(name='currentVersion'),
    switchedTime: integer(name='switchedTime'),
    chargingWay: integer(name='chargingWay'),
    type: string(name='type'),
    projectId: string(name='projectId'),
    chargeType: string(name='chargeType'),
    expireOn: string(name='expireOn'),
    instanceId: string(name='instanceId'),
    commodityCode: string(name='commodityCode'),
    processingOrderId: string(name='processingOrderId'),
    firstRankAlgoDeploymentId: integer(name='firstRankAlgoDeploymentId'),
    secondRankAlgoDeploymentId: integer(name='secondRankAlgoDeploymentId'),
    pendingSecondRankAlgoDeploymentId: integer(name='pendingSecondRankAlgoDeploymentId'),
    description: string(name='description'),
    produced: integer(name='produced'),
    lockedByExpiration: integer(name='lockedByExpiration'),
    hasPendingQuotaReviewTask: integer(name='hasPendingQuotaReviewTask'),
    created: integer(name='created'),
    updated: integer(name='updated'),
    status: string(name='status'),
    lockMode: string(name='lockMode'),
    quota: {
      docSize: integer(name='docSize'),
      computeResource: integer(name='computeResource'),
      spec: string(name='spec'),
    }(name='quota'),
  }(name='result'),
}

model ModifyAppGroupQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAppGroupQuotaResponseBody(name='body'),
}

async function modifyAppGroupQuotaWithOptions(appGroupIdentity: string, request: ModifyAppGroupQuotaRequest, runtime: Util.RuntimeOptions): ModifyAppGroupQuotaResponse {
  Util.validateModel(request);
  return doRequestWithAction('ModifyAppGroupQuota', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/quota`, null, request.headers, null, runtime);
}

async function modifyAppGroupQuota(appGroupIdentity: string, request: ModifyAppGroupQuotaRequest): ModifyAppGroupQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppGroupQuotaWithOptions(appGroupIdentity, request, runtime);
}

model ListAppGroupsQuery = {
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
  instanceId?: string(name='instanceId'),
  name?: string(name='name'),
  type?: string(name='type'),
  sortBy?: integer(name='sortBy'),
}

model ListAppGroupsRequest = {
  headers?: map[string]string(name='headers'),
  query?: ListAppGroupsQuery(name='query'),
}

model ListAppGroupsResponseBody = {
  requestId: string(name='requestId'),
  totalCount: integer(name='totalCount'),
  result: [
    {
      id: string(name='id'),
      name: string(name='name'),
      currentVersion: string(name='currentVersion'),
      switchedTime: integer(name='switchedTime'),
      chargingWay: integer(name='chargingWay'),
      type: string(name='type'),
      projectId: string(name='projectId'),
      chargeType: string(name='chargeType'),
      expireOn: string(name='expireOn'),
      instanceId: string(name='instanceId'),
      commodityCode: string(name='commodityCode'),
      processingOrderId: string(name='processingOrderId'),
      firstRankAlgoDeploymentId: integer(name='firstRankAlgoDeploymentId'),
      secondRankAlgoDeploymentId: integer(name='secondRankAlgoDeploymentId'),
      pendingSecondRankAlgoDeploymentId: integer(name='pendingSecondRankAlgoDeploymentId'),
      description: string(name='description'),
      produced: integer(name='produced'),
      lockedByExpiration: integer(name='lockedByExpiration'),
      hasPendingQuotaReviewTask: integer(name='hasPendingQuotaReviewTask'),
      created: integer(name='created'),
      updated: integer(name='updated'),
      status: string(name='status'),
      lockMode: string(name='lockMode'),
      quota: {
        docSize: integer(name='docSize'),
        computeResource: integer(name='computeResource'),
        spec: string(name='spec'),
      }(name='quota'),
    }
  ](name='result'),
}

model ListAppGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppGroupsResponseBody(name='body'),
}

async function listAppGroupsWithOptions(request: ListAppGroupsRequest, runtime: Util.RuntimeOptions): ListAppGroupsResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListAppGroups', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listAppGroups(request: ListAppGroupsRequest): ListAppGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppGroupsWithOptions(request, runtime);
}

model DescribeAppsRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeAppsResponseBody = {
  requestId: string(name='requestId'),
  result: [ map[string]any ](name='result'),
}

model DescribeAppsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppsResponseBody(name='body'),
}

async function describeAppsWithOptions(appGroupIdentity: string, request: DescribeAppsRequest, runtime: Util.RuntimeOptions): DescribeAppsResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeApps', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps`, null, request.headers, null, runtime);
}

async function describeApps(appGroupIdentity: string, request: DescribeAppsRequest): DescribeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppsWithOptions(appGroupIdentity, request, runtime);
}

model RemoveAppGroupRequest = {
  headers?: map[string]string(name='headers'),
}

model RemoveAppGroupResponseBody = {
  requestId: string(name='requestId'),
  result: [ integer ](name='result'),
}

model RemoveAppGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAppGroupResponseBody(name='body'),
}

async function removeAppGroupWithOptions(appGroupIdentity: string, request: RemoveAppGroupRequest, runtime: Util.RuntimeOptions): RemoveAppGroupResponse {
  Util.validateModel(request);
  return doRequestWithAction('RemoveAppGroup', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}`, null, request.headers, null, runtime);
}

async function removeAppGroup(appGroupIdentity: string, request: RemoveAppGroupRequest): RemoveAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAppGroupWithOptions(appGroupIdentity, request, runtime);
}

model ListSortScriptsRequest = {
  headers?: map[string]string(name='headers'),
}

model ListSortScriptsResponseBody = {
  requestId: string(name='requestId'),
  result: [
    {
      scriptName: string(name='scriptName'),
      type: string(name='type'),
      scope: string(name='scope'),
      status: string(name='status'),
      createTime: string(name='createTime'),
      modifyTime: string(name='modifyTime'),
    }
  ](name='result'),
}

model ListSortScriptsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSortScriptsResponseBody(name='body'),
}

async function listSortScriptsWithOptions(appGroupIdentity: string, appVersionId: string, request: ListSortScriptsRequest, runtime: Util.RuntimeOptions): ListSortScriptsResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListSortScripts', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts`, null, request.headers, null, runtime);
}

async function listSortScripts(appGroupIdentity: string, appVersionId: string, request: ListSortScriptsRequest): ListSortScriptsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSortScriptsWithOptions(appGroupIdentity, appVersionId, request, runtime);
}

model GetSortScriptRequest = {
  headers?: map[string]string(name='headers'),
}

model GetSortScriptResponseBody = {
  requestId: string(name='requestId'),
  result: {
    type: string(name='type'),
    scope: string(name='scope'),
    status: string(name='status'),
    createTime: string(name='createTime'),
    modifyTime: string(name='modifyTime'),
  }(name='result'),
}

model GetSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: GetSortScriptResponseBody(name='body'),
}

async function getSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, request: GetSortScriptRequest, runtime: Util.RuntimeOptions): GetSortScriptResponse {
  Util.validateModel(request);
  return doRequestWithAction('GetSortScript', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}`, null, request.headers, null, runtime);
}

async function getSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string, request: GetSortScriptRequest): GetSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, request, runtime);
}

model GetSortScriptFileRequest = {
  headers?: map[string]string(name='headers'),
}

model GetSortScriptFileResponseBody = {
  requestId: string(name='requestId'),
  result: {
    content: string(name='content'),
    version: long(name='version'),
    createTime: string(name='createTime'),
    modifyTime: string(name='modifyTime'),
  }(name='result'),
}

model GetSortScriptFileResponse = {
  headers: map[string]string(name='headers'),
  body: GetSortScriptFileResponseBody(name='body'),
}

async function getSortScriptFileWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, request: GetSortScriptFileRequest, runtime: Util.RuntimeOptions): GetSortScriptFileResponse {
  Util.validateModel(request);
  return doRequestWithAction('GetSortScriptFile', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/files/src/UserScorer.cava`, null, request.headers, null, runtime);
}

async function getSortScriptFile(appGroupIdentity: string, scriptName: string, appVersionId: string, request: GetSortScriptFileRequest): GetSortScriptFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSortScriptFileWithOptions(appGroupIdentity, scriptName, appVersionId, request, runtime);
}

model CompileSortScriptRequest = {
  headers?: map[string]string(name='headers'),
}

model CompileSortScriptResponseBody = {
  requestId: string(name='requestId'),
}

model CompileSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: CompileSortScriptResponseBody(name='body'),
}

async function compileSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, request: CompileSortScriptRequest, runtime: Util.RuntimeOptions): CompileSortScriptResponse {
  Util.validateModel(request);
  return doRequestWithAction('CompileSortScript', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/actions/compiling`, null, request.headers, null, runtime);
}

async function compileSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string, request: CompileSortScriptRequest): CompileSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return compileSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, request, runtime);
}

model DeleteSortScriptRequest = {
  headers?: map[string]string(name='headers'),
}

model DeleteSortScriptResponseBody = {
  requestId: string(name='requestId'),
}

model DeleteSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSortScriptResponseBody(name='body'),
}

async function deleteSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, request: DeleteSortScriptRequest, runtime: Util.RuntimeOptions): DeleteSortScriptResponse {
  Util.validateModel(request);
  return doRequestWithAction('DeleteSortScript', '2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}`, null, request.headers, null, runtime);
}

async function deleteSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string, request: DeleteSortScriptRequest): DeleteSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, request, runtime);
}

model CreateSortScriptRequest = {
  headers?: map[string]string(name='headers'),
}

model CreateSortScriptResponseBody = {
  requestId: string(name='requestId'),
}

model CreateSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSortScriptResponseBody(name='body'),
}

async function createSortScriptWithOptions(appGroupIdentity: string, appVersionId: string, request: CreateSortScriptRequest, runtime: Util.RuntimeOptions): CreateSortScriptResponse {
  Util.validateModel(request);
  return doRequestWithAction('CreateSortScript', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts`, null, request.headers, null, runtime);
}

async function createSortScript(appGroupIdentity: string, appVersionId: string, request: CreateSortScriptRequest): CreateSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSortScriptWithOptions(appGroupIdentity, appVersionId, request, runtime);
}

model SaveSortScriptFileRequest = {
  headers?: map[string]string(name='headers'),
}

model SaveSortScriptFileResponseBody = {
  requestId: string(name='requestId'),
}

model SaveSortScriptFileResponse = {
  headers: map[string]string(name='headers'),
  body: SaveSortScriptFileResponseBody(name='body'),
}

async function saveSortScriptFileWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, request: SaveSortScriptFileRequest, runtime: Util.RuntimeOptions): SaveSortScriptFileResponse {
  Util.validateModel(request);
  return doRequestWithAction('SaveSortScriptFile', '2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/files/src/UserScorer.cava`, null, request.headers, null, runtime);
}

async function saveSortScriptFile(appGroupIdentity: string, scriptName: string, appVersionId: string, request: SaveSortScriptFileRequest): SaveSortScriptFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveSortScriptFileWithOptions(appGroupIdentity, scriptName, appVersionId, request, runtime);
}

model ReleaseSortScriptRequest = {
  headers?: map[string]string(name='headers'),
}

model ReleaseSortScriptResponseBody = {
  requestId: string(name='requestId'),
}

model ReleaseSortScriptResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseSortScriptResponseBody(name='body'),
}

async function releaseSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, request: ReleaseSortScriptRequest, runtime: Util.RuntimeOptions): ReleaseSortScriptResponse {
  Util.validateModel(request);
  return doRequestWithAction('ReleaseSortScript', '2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/actions/release`, null, request.headers, null, runtime);
}

async function releaseSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string, request: ReleaseSortScriptRequest): ReleaseSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, request, runtime);
}

model DescribeRegionsRequest = {
  headers?: map[string]string(name='headers'),
}

model DescribeRegionsResponseBody = {
  requestId: string(name='requestId'),
  result: [
    {
      regionId: string(name='regionId'),
      localName: string(name='localName'),
      endpoint: string(name='endpoint'),
      consoleUrl: string(name='consoleUrl'),
    }
  ](name='result'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequestWithAction('DescribeRegions', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/regions`, null, request.headers, null, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model ListAppsQuery = {
  group?: boolean(name='group'),
  page?: integer(name='page'),
  size?: integer(name='size'),
}

model ListAppsRequest = {
  headers?: map[string]string(name='headers'),
  query?: ListAppsQuery(name='query'),
}

model ListAppsResponse = {
  headers: map[string]string(name='headers'),
}

async function listAppsWithOptions(request: ListAppsRequest, runtime: Util.RuntimeOptions): ListAppsResponse {
  Util.validateModel(request);
  return doRequestWithAction('ListApps', '2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/apps`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppsWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
