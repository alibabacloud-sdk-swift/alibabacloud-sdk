import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('vcs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model InvokeMotorModelRequest = {
  picId: string(name='PicId'),
  corpId: string(name='CorpId'),
  picPath?: string(name='PicPath'),
  picUrl?: string(name='PicUrl'),
}

model InvokeMotorModelResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    structList: string(name='StructList'),
  }(name='Data'),
}

async function invokeMotorModelWithOptions(request: InvokeMotorModelRequest, runtime: Util.RuntimeOptions): InvokeMotorModelResponse {
  Util.validateModel(request);
  return doRequest('InvokeMotorModel', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function invokeMotorModel(request: InvokeMotorModelRequest): InvokeMotorModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeMotorModelWithOptions(request, runtime);
}

model GetDeviceConfigRequest = {
  deviceSn: string(name='DeviceSn'),
  deviceTimeStamp: string(name='DeviceTimeStamp'),
}

model GetDeviceConfigResponse = {
  audioEnable: boolean(name='AudioEnable'),
  audioFormat: string(name='AudioFormat'),
  bitRate: string(name='BitRate'),
  code: string(name='Code'),
  deviceAddress: string(name='DeviceAddress'),
  deviceName: string(name='DeviceName'),
  encodeFormat: string(name='EncodeFormat'),
  frameRate: string(name='FrameRate'),
  govLength: integer(name='GovLength'),
  latitude: string(name='Latitude'),
  longitude: string(name='Longitude'),
  message: string(name='Message'),
  OSDTimeEnable: string(name='OSDTimeEnable'),
  OSDTimeType: string(name='OSDTimeType'),
  OSDTimeX: string(name='OSDTimeX'),
  OSDTimeY: string(name='OSDTimeY'),
  requestId: string(name='RequestId'),
  resolution: string(name='Resolution'),
  retryInterval: string(name='RetryInterval'),
  deviceId: string(name='DeviceId'),
  userName: string(name='UserName'),
  passWord: string(name='PassWord'),
  protocol: string(name='Protocol'),
  serverId: string(name='ServerId'),
  serverPort: string(name='ServerPort'),
  serverIp: string(name='ServerIp'),
  OSDList: [
    {
      text: string(name='Text'),
      leftTopX: string(name='LeftTopX'),
      leftTopY: string(name='LeftTopY'),
    }
  ](name='OSDList'),
}

async function getDeviceConfigWithOptions(request: GetDeviceConfigRequest, runtime: Util.RuntimeOptions): GetDeviceConfigResponse {
  Util.validateModel(request);
  return doRequest('GetDeviceConfig', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getDeviceConfig(request: GetDeviceConfigRequest): GetDeviceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceConfigWithOptions(request, runtime);
}

model SyncDeviceTimeRequest = {
  deviceSn: string(name='DeviceSn'),
  deviceTimeStamp: string(name='DeviceTimeStamp'),
}

model SyncDeviceTimeResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  NTPServer: string(name='NTPServer'),
  requestId: string(name='RequestId'),
  retryInterval: string(name='RetryInterval'),
  syncInterval: string(name='SyncInterval'),
  timeStamp: string(name='TimeStamp'),
}

async function syncDeviceTimeWithOptions(request: SyncDeviceTimeRequest, runtime: Util.RuntimeOptions): SyncDeviceTimeResponse {
  Util.validateModel(request);
  return doRequest('SyncDeviceTime', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function syncDeviceTime(request: SyncDeviceTimeRequest): SyncDeviceTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncDeviceTimeWithOptions(request, runtime);
}

model RegisterDeviceRequest = {
  deviceSn: string(name='DeviceSn'),
  deviceId?: string(name='DeviceId'),
  serverId?: string(name='ServerId'),
  deviceTimeStamp: string(name='DeviceTimeStamp'),
}

model RegisterDeviceResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  retryInterval: string(name='RetryInterval'),
}

async function registerDeviceWithOptions(request: RegisterDeviceRequest, runtime: Util.RuntimeOptions): RegisterDeviceResponse {
  Util.validateModel(request);
  return doRequest('RegisterDevice', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function registerDevice(request: RegisterDeviceRequest): RegisterDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerDeviceWithOptions(request, runtime);
}

model ReportDeviceCapacityRequest = {
  longitude?: string(name='Longitude'),
  latitude?: string(name='Latitude'),
  audioFormat?: string(name='AudioFormat'),
  presetNum?: string(name='PresetNum'),
  PTZCapacity?: string(name='PTZCapacity'),
  deviceSn: string(name='DeviceSn'),
  streamCapacities: [
    {
      encodeFormat: string(name='EncodeFormat'),
      resolution: string(name='Resolution'),
      maxFrameRate: string(name='MaxFrameRate'),
      maxStream: string(name='MaxStream'),
      bitrateRange: string(name='BitrateRange'),
      govLengthRange: string(name='GovLengthRange'),
    }
  ](name='StreamCapacities'),
}

model ReportDeviceCapacityResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  retryInterval: string(name='RetryInterval'),
}

async function reportDeviceCapacityWithOptions(request: ReportDeviceCapacityRequest, runtime: Util.RuntimeOptions): ReportDeviceCapacityResponse {
  Util.validateModel(request);
  return doRequest('ReportDeviceCapacity', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function reportDeviceCapacity(request: ReportDeviceCapacityRequest): ReportDeviceCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportDeviceCapacityWithOptions(request, runtime);
}

model SaveVideoSummaryTaskVideoRequest = {
  corpId: string(name='CorpId'),
  taskId: long(name='TaskId'),
  saveVideo: boolean(name='SaveVideo'),
}

model SaveVideoSummaryTaskVideoResponse = {
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function saveVideoSummaryTaskVideoWithOptions(request: SaveVideoSummaryTaskVideoRequest, runtime: Util.RuntimeOptions): SaveVideoSummaryTaskVideoResponse {
  Util.validateModel(request);
  return doRequest('SaveVideoSummaryTaskVideo', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function saveVideoSummaryTaskVideo(request: SaveVideoSummaryTaskVideoRequest): SaveVideoSummaryTaskVideoResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveVideoSummaryTaskVideoWithOptions(request, runtime);
}

model ListBodyAlgorithmResultsRequest = {
  corpId: string(name='CorpId'),
  algorithmType: string(name='AlgorithmType'),
  dataSourceId?: string(name='DataSourceId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
  capStyle?: string(name='CapStyle'),
}

model ListBodyAlgorithmResultsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        capStyle: string(name='CapStyle'),
        corpId: string(name='CorpId'),
        dataSourceId: string(name='DataSourceId'),
        personId: string(name='PersonId'),
        genderCode: string(name='GenderCode'),
        hairStyle: string(name='HairStyle'),
        leftTopX: float(name='LeftTopX'),
        leftTopY: float(name='LeftTopY'),
        maxAge: string(name='MaxAge'),
        minAge: string(name='MinAge'),
        picUrlPath: string(name='PicUrlPath'),
        rightBottomX: float(name='RightBottomX'),
        rightBottomY: float(name='RightBottomY'),
        shotTime: string(name='ShotTime'),
        targetPicUrlPath: string(name='TargetPicUrlPath'),
        coatLength: string(name='CoatLength'),
        coatStyle: string(name='CoatStyle'),
        trousersLength: string(name='TrousersLength'),
        trousersStyle: string(name='TrousersStyle'),
        coatColor: string(name='CoatColor'),
        trousersColor: string(name='TrousersColor'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listBodyAlgorithmResultsWithOptions(request: ListBodyAlgorithmResultsRequest, runtime: Util.RuntimeOptions): ListBodyAlgorithmResultsResponse {
  Util.validateModel(request);
  return doRequest('ListBodyAlgorithmResults', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listBodyAlgorithmResults(request: ListBodyAlgorithmResultsRequest): ListBodyAlgorithmResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBodyAlgorithmResultsWithOptions(request, runtime);
}

model AddDataSourceRequest = {
  corpId: string(name='CorpId'),
  dataSourceName: string(name='DataSourceName'),
  dataSourceType: string(name='DataSourceType'),
  description?: string(name='Description'),
  fileRetentionDays?: integer(name='FileRetentionDays'),
}

model AddDataSourceResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  data: {
    dataSourceId: string(name='DataSourceId'),
    kafkaTopic: string(name='KafkaTopic'),
    ossPath: string(name='OssPath'),
  }(name='Data'),
}

async function addDataSourceWithOptions(request: AddDataSourceRequest, runtime: Util.RuntimeOptions): AddDataSourceResponse {
  Util.validateModel(request);
  return doRequest('AddDataSource', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function addDataSource(request: AddDataSourceRequest): AddDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDataSourceWithOptions(request, runtime);
}

model GetVideoComposeResultRequest = {
  corpId: string(name='CorpId'),
  taskRequestId: string(name='TaskRequestId'),
}

model GetVideoComposeResultResponse = {
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  videoUrl: string(name='VideoUrl'),
  code: string(name='Code'),
  status: string(name='Status'),
}

async function getVideoComposeResultWithOptions(request: GetVideoComposeResultRequest, runtime: Util.RuntimeOptions): GetVideoComposeResultResponse {
  Util.validateModel(request);
  return doRequest('GetVideoComposeResult', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getVideoComposeResult(request: GetVideoComposeResultRequest): GetVideoComposeResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoComposeResultWithOptions(request, runtime);
}

model CreateVideoComposeTaskRequest = {
  corpId: string(name='CorpId'),
  bucketName: string(name='BucketName'),
  domainName?: string(name='DomainName'),
  imageFileNames: string(name='ImageFileNames'),
  audioFileName: string(name='AudioFileName'),
  imageParameters: string(name='ImageParameters'),
  videoFormat?: string(name='VideoFormat'),
  videoFrameRate?: integer(name='VideoFrameRate'),
}

model CreateVideoComposeTaskResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  domainName: string(name='DomainName'),
  bucketName: string(name='BucketName'),
}

async function createVideoComposeTaskWithOptions(request: CreateVideoComposeTaskRequest, runtime: Util.RuntimeOptions): CreateVideoComposeTaskResponse {
  Util.validateModel(request);
  return doRequest('CreateVideoComposeTask', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function createVideoComposeTask(request: CreateVideoComposeTaskRequest): CreateVideoComposeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVideoComposeTaskWithOptions(request, runtime);
}

model DeleteDataSourceRequest = {
  corpId: string(name='CorpId'),
  dataSourceId: string(name='DataSourceId'),
}

model DeleteDataSourceResponse = {
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
}

async function deleteDataSourceWithOptions(request: DeleteDataSourceRequest, runtime: Util.RuntimeOptions): DeleteDataSourceResponse {
  Util.validateModel(request);
  return doRequest('DeleteDataSource', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceWithOptions(request, runtime);
}

model UploadFileRequest = {
  fileType: string(name='FileType'),
  MD5?: string(name='MD5'),
  corpId: string(name='CorpId'),
  fileContent?: string(name='FileContent'),
  fileName: string(name='FileName'),
  fileAliasName?: string(name='FileAliasName'),
  dataSourceId: string(name='DataSourceId'),
  filePath?: string(name='FilePath'),
}

model UploadFileResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    records: [
      {
        ossPath: string(name='OssPath'),
        sourceId: string(name='SourceId'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function uploadFileWithOptions(request: UploadFileRequest, runtime: Util.RuntimeOptions): UploadFileResponse {
  Util.validateModel(request);
  return doRequest('UploadFile', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function uploadFile(request: UploadFileRequest): UploadFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadFileWithOptions(request, runtime);
}

model ListEventAlgorithmResultsRequest = {
  corpId: string(name='CorpId'),
  eventType: string(name='EventType'),
  dataSourceId?: string(name='DataSourceId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
}

model ListEventAlgorithmResultsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        capStyle: string(name='CapStyle'),
        corpId: string(name='CorpId'),
        dataSourceId: string(name='DataSourceId'),
        eventType: string(name='EventType'),
        faceCount: string(name='FaceCount'),
        picUrlPath: string(name='PicUrlPath'),
        shotTime: string(name='ShotTime'),
        targetPicUrlPath: string(name='TargetPicUrlPath'),
        recordId: string(name='RecordId'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listEventAlgorithmResultsWithOptions(request: ListEventAlgorithmResultsRequest, runtime: Util.RuntimeOptions): ListEventAlgorithmResultsResponse {
  Util.validateModel(request);
  return doRequest('ListEventAlgorithmResults', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listEventAlgorithmResults(request: ListEventAlgorithmResultsRequest): ListEventAlgorithmResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEventAlgorithmResultsWithOptions(request, runtime);
}

model DeleteVideoSummaryTaskRequest = {
  corpId: string(name='CorpId'),
  taskId: string(name='TaskId'),
}

model DeleteVideoSummaryTaskResponse = {
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function deleteVideoSummaryTaskWithOptions(request: DeleteVideoSummaryTaskRequest, runtime: Util.RuntimeOptions): DeleteVideoSummaryTaskResponse {
  Util.validateModel(request);
  return doRequest('DeleteVideoSummaryTask', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function deleteVideoSummaryTask(request: DeleteVideoSummaryTaskRequest): DeleteVideoSummaryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVideoSummaryTaskWithOptions(request, runtime);
}

model GetVideoSummaryTaskResultRequest = {
  corpId: string(name='CorpId'),
  taskId: string(name='TaskId'),
}

model GetVideoSummaryTaskResultResponse = {
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function getVideoSummaryTaskResultWithOptions(request: GetVideoSummaryTaskResultRequest, runtime: Util.RuntimeOptions): GetVideoSummaryTaskResultResponse {
  Util.validateModel(request);
  return doRequest('GetVideoSummaryTaskResult', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getVideoSummaryTaskResult(request: GetVideoSummaryTaskResultRequest): GetVideoSummaryTaskResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoSummaryTaskResultWithOptions(request, runtime);
}

model CreateVideoSummaryTaskRequest = {
  corpId: string(name='CorpId'),
  deviceId: string(name='DeviceId'),
  startTimeStamp: long(name='StartTimeStamp'),
  endTimeStamp: long(name='EndTimeStamp'),
  optionList?: string(name='OptionList'),
  liveVideoSummary?: string(name='LiveVideoSummary'),
}

model CreateVideoSummaryTaskResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function createVideoSummaryTaskWithOptions(request: CreateVideoSummaryTaskRequest, runtime: Util.RuntimeOptions): CreateVideoSummaryTaskResponse {
  Util.validateModel(request);
  return doRequest('CreateVideoSummaryTask', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function createVideoSummaryTask(request: CreateVideoSummaryTaskRequest): CreateVideoSummaryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVideoSummaryTaskWithOptions(request, runtime);
}

model ListMotorAlgorithmResultsRequest = {
  corpId: string(name='CorpId'),
  algorithmType: string(name='AlgorithmType'),
  dataSourceId?: string(name='DataSourceId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
  plateNumber?: string(name='PlateNumber'),
}

model ListMotorAlgorithmResultsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        corpId: string(name='CorpId'),
        dataSourceId: string(name='DataSourceId'),
        leftTopX: float(name='LeftTopX'),
        leftTopY: float(name='LeftTopY'),
        motorId: string(name='MotorId'),
        picUrlPath: string(name='PicUrlPath'),
        plateNumber: string(name='PlateNumber'),
        rightBottomX: float(name='RightBottomX'),
        rightBottomY: float(name='RightBottomY'),
        shotTime: string(name='ShotTime'),
        targetPicUrlPath: string(name='TargetPicUrlPath'),
        motorStyle: string(name='MotorStyle'),
        motorModel: string(name='MotorModel'),
        motorColor: string(name='MotorColor'),
        motorClass: string(name='MotorClass'),
        motorBrand: string(name='MotorBrand'),
        plateColor: string(name='PlateColor'),
        plateClass: string(name='PlateClass'),
        safetyBelt: string(name='SafetyBelt'),
        calling: string(name='Calling'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listMotorAlgorithmResultsWithOptions(request: ListMotorAlgorithmResultsRequest, runtime: Util.RuntimeOptions): ListMotorAlgorithmResultsResponse {
  Util.validateModel(request);
  return doRequest('ListMotorAlgorithmResults', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listMotorAlgorithmResults(request: ListMotorAlgorithmResultsRequest): ListMotorAlgorithmResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMotorAlgorithmResultsWithOptions(request, runtime);
}

model ListFaceAlgorithmResultsRequest = {
  corpId: string(name='CorpId'),
  algorithmType: string(name='AlgorithmType'),
  dataSourceId?: string(name='DataSourceId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
}

model ListFaceAlgorithmResultsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        faceId: string(name='FaceId'),
        corpId: string(name='CorpId'),
        dataSourceId: string(name='DataSourceId'),
        shotTime: string(name='ShotTime'),
        genderCode: string(name='GenderCode'),
        minAge: string(name='MinAge'),
        maxAge: string(name='MaxAge'),
        capStyle: string(name='CapStyle'),
        hairStyle: string(name='HairStyle'),
        leftTopX: float(name='LeftTopX'),
        leftTopY: float(name='LeftTopY'),
        rightBottomX: float(name='RightBottomX'),
        rightBottomY: float(name='RightBottomY'),
        picUrlPath: string(name='PicUrlPath'),
        targetPicUrlPath: string(name='TargetPicUrlPath'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listFaceAlgorithmResultsWithOptions(request: ListFaceAlgorithmResultsRequest, runtime: Util.RuntimeOptions): ListFaceAlgorithmResultsResponse {
  Util.validateModel(request);
  return doRequest('ListFaceAlgorithmResults', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listFaceAlgorithmResults(request: ListFaceAlgorithmResultsRequest): ListFaceAlgorithmResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFaceAlgorithmResultsWithOptions(request, runtime);
}

model ListMetricsRequest = {
  corpId: string(name='CorpId'),
  tagCode: string(name='TagCode'),
  aggregateType: string(name='AggregateType'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
}

model ListMetricsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        dateTime: string(name='DateTime'),
        tagCode: string(name='TagCode'),
        tagValue: string(name='TagValue'),
        tagMetric: string(name='TagMetric'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listMetricsWithOptions(request: ListMetricsRequest, runtime: Util.RuntimeOptions): ListMetricsResponse {
  Util.validateModel(request);
  return doRequest('ListMetrics', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listMetrics(request: ListMetricsRequest): ListMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMetricsWithOptions(request, runtime);
}

model DeleteRecordsRequest = {
  corpId?: string(name='CorpId'),
  algorithmType?: string(name='AlgorithmType'),
  attributeName?: string(name='AttributeName'),
  operatorType?: string(name='OperatorType'),
  value?: string(name='Value'),
}

model DeleteRecordsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function deleteRecordsWithOptions(request: DeleteRecordsRequest, runtime: Util.RuntimeOptions): DeleteRecordsResponse {
  Util.validateModel(request);
  return doRequest('DeleteRecords', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function deleteRecords(request: DeleteRecordsRequest): DeleteRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRecordsWithOptions(request, runtime);
}

model RecognizeFaceQualityRequest = {
  corpId?: string(name='CorpId'),
  picContent?: string(name='PicContent'),
  picFormat?: string(name='PicFormat'),
  picUrl?: string(name='PicUrl'),
}

model RecognizeFaceQualityResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    qualityScore: string(name='QualityScore'),
    description: string(name='Description'),
    attributes: {
      leftTopX: integer(name='LeftTopX'),
      leftTopY: integer(name='LeftTopY'),
      rightBottomX: integer(name='RightBottomX'),
      rightBottomY: integer(name='RightBottomY'),
      targetImageStoragePath: string(name='TargetImageStoragePath'),
      faceStyle: string(name='FaceStyle'),
      faceQuality: string(name='FaceQuality'),
      faceScore: string(name='FaceScore'),
    }(name='Attributes'),
  }(name='Data'),
}

async function recognizeFaceQualityWithOptions(request: RecognizeFaceQualityRequest, runtime: Util.RuntimeOptions): RecognizeFaceQualityResponse {
  Util.validateModel(request);
  return doRequest('RecognizeFaceQuality', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function recognizeFaceQuality(request: RecognizeFaceQualityRequest): RecognizeFaceQualityResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeFaceQualityWithOptions(request, runtime);
}

model ListPersonsRequest = {
  corpId?: string(name='CorpId'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  algorithmType?: string(name='AlgorithmType'),
}

model ListPersonsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNo: string(name='PageNo'),
    pageSize: string(name='PageSize'),
    totalCount: string(name='TotalCount'),
    totalPage: string(name='TotalPage'),
    records: [
      {
        firstAppearTime: string(name='FirstAppearTime'),
        personId: string(name='PersonId'),
        picUrl: string(name='PicUrl'),
        tagList: [
          {
            tagCode: string(name='TagCode'),
            tagName: string(name='TagName'),
            tagValue: string(name='TagValue'),
            tagValueId: string(name='TagValueId'),
          }
        ](name='TagList'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listPersonsWithOptions(request: ListPersonsRequest, runtime: Util.RuntimeOptions): ListPersonsResponse {
  Util.validateModel(request);
  return doRequest('ListPersons', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listPersons(request: ListPersonsRequest): ListPersonsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPersonsWithOptions(request, runtime);
}

model GetPersonDetailRequest = {
  corpId?: string(name='CorpId'),
  personID?: string(name='PersonID'),
  algorithmType?: string(name='AlgorithmType'),
}

model GetPersonDetailResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    picUrl: string(name='PicUrl'),
    personId: string(name='PersonId'),
    tagList: [
      {
        tagCode: string(name='TagCode'),
        tagName: string(name='TagName'),
        tagValue: string(name='TagValue'),
        tagValueId: string(name='TagValueId'),
      }
    ](name='TagList'),
  }(name='Data'),
}

async function getPersonDetailWithOptions(request: GetPersonDetailRequest, runtime: Util.RuntimeOptions): GetPersonDetailResponse {
  Util.validateModel(request);
  return doRequest('GetPersonDetail', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getPersonDetail(request: GetPersonDetailRequest): GetPersonDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPersonDetailWithOptions(request, runtime);
}

model GetFaceOptionsRequest = {
  corpId?: string(name='CorpId'),
}

model GetFaceOptionsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: [
    {
      key: string(name='Key'),
      name: string(name='Name'),
      optionList: [
        {
          key: string(name='Key'),
          name: string(name='Name'),
        }
      ](name='OptionList'),
    }
  ](name='Data'),
}

async function getFaceOptionsWithOptions(request: GetFaceOptionsRequest, runtime: Util.RuntimeOptions): GetFaceOptionsResponse {
  Util.validateModel(request);
  return doRequest('GetFaceOptions', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getFaceOptions(request: GetFaceOptionsRequest): GetFaceOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFaceOptionsWithOptions(request, runtime);
}

model GetBodyOptionsRequest = {
  corpId?: string(name='CorpId'),
}

model GetBodyOptionsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: [
    {
      key: string(name='Key'),
      name: string(name='Name'),
      optionList: [
        {
          key: string(name='Key'),
          name: string(name='Name'),
        }
      ](name='OptionList'),
    }
  ](name='Data'),
}

async function getBodyOptionsWithOptions(request: GetBodyOptionsRequest, runtime: Util.RuntimeOptions): GetBodyOptionsResponse {
  Util.validateModel(request);
  return doRequest('GetBodyOptions', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getBodyOptions(request: GetBodyOptionsRequest): GetBodyOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBodyOptionsWithOptions(request, runtime);
}

model StopMonitorRequest = {
  taskId?: string(name='TaskId'),
  algorithmVendor?: string(name='AlgorithmVendor'),
}

model StopMonitorResponse = {
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function stopMonitorWithOptions(request: StopMonitorRequest, runtime: Util.RuntimeOptions): StopMonitorResponse {
  Util.validateModel(request);
  return doRequest('StopMonitor', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function stopMonitor(request: StopMonitorRequest): StopMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopMonitorWithOptions(request, runtime);
}

model SearchBodyRequest = {
  corpId: string(name='CorpId'),
  gbId?: string(name='GbId'),
  startTimeStamp: long(name='StartTimeStamp'),
  endTimeStamp: long(name='EndTimeStamp'),
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
  optionList?: map[string]any(name='OptionList'),
}

model SearchBodyResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNo: integer(name='PageNo'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        gbId: string(name='GbId'),
        imageUrl: string(name='ImageUrl'),
        leftTopX: float(name='LeftTopX'),
        leftTopY: float(name='LeftTopY'),
        rightBottomX: float(name='RightBottomX'),
        rightBottomY: float(name='RightBottomY'),
        score: float(name='Score'),
        targetImageUrl: string(name='TargetImageUrl'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function searchBodyWithOptions(request: SearchBodyRequest, runtime: Util.RuntimeOptions): SearchBodyResponse {
  Util.validateModel(request);
  return doRequest('SearchBody', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function searchBody(request: SearchBodyRequest): SearchBodyResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchBodyWithOptions(request, runtime);
}

model AddMonitorRequest = {
  corpId?: string(name='CorpId'),
  monitorType?: string(name='MonitorType'),
  description?: string(name='Description'),
  batchIndicator?: integer(name='BatchIndicator'),
  algorithmVendor?: string(name='AlgorithmVendor'),
}

model AddMonitorResponse = {
  requestId: string(name='RequestId'),
  code: string(name='Code'),
  message: string(name='Message'),
  data: {
    taskId: string(name='TaskId'),
  }(name='Data'),
}

async function addMonitorWithOptions(request: AddMonitorRequest, runtime: Util.RuntimeOptions): AddMonitorResponse {
  Util.validateModel(request);
  return doRequest('AddMonitor', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function addMonitor(request: AddMonitorRequest): AddMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMonitorWithOptions(request, runtime);
}

model GetMonitorResultRequest = {
  corpId: string(name='CorpId'),
  taskId: string(name='TaskId'),
  minRecordId?: string(name='MinRecordId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  algorithmVendor?: string(name='AlgorithmVendor'),
}

model GetMonitorResultResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    maxId: string(name='MaxId'),
    records: [
      {
        rightBottomY: string(name='RightBottomY'),
        rightBottomX: string(name='RightBottomX'),
        leftUpY: string(name='LeftUpY'),
        leftUpX: string(name='LeftUpX'),
        gbId: string(name='GbId'),
        score: string(name='Score'),
        picUrl: string(name='PicUrl'),
        shotTime: string(name='ShotTime'),
        monitorPicUrl: string(name='MonitorPicUrl'),
        targetPicUrl: string(name='TargetPicUrl'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function getMonitorResultWithOptions(request: GetMonitorResultRequest, runtime: Util.RuntimeOptions): GetMonitorResultResponse {
  Util.validateModel(request);
  return doRequest('GetMonitorResult', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getMonitorResult(request: GetMonitorResultRequest): GetMonitorResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMonitorResultWithOptions(request, runtime);
}

model UpdateMonitorRequest = {
  corpId?: string(name='CorpId'),
  taskId?: string(name='TaskId'),
  ruleName?: string(name='RuleName'),
  deviceOperateType?: string(name='DeviceOperateType'),
  deviceList?: string(name='DeviceList'),
  picOperateType?: string(name='PicOperateType'),
  picList?: string(name='PicList'),
  attributeOperateType?: string(name='AttributeOperateType'),
  attributeName?: string(name='AttributeName'),
  attributeValueList?: string(name='AttributeValueList'),
  description?: string(name='Description'),
  ruleExpression?: string(name='RuleExpression'),
  algorithmVendor?: string(name='AlgorithmVendor'),
}

model UpdateMonitorResponse = {
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function updateMonitorWithOptions(request: UpdateMonitorRequest, runtime: Util.RuntimeOptions): UpdateMonitorResponse {
  Util.validateModel(request);
  return doRequest('UpdateMonitor', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function updateMonitor(request: UpdateMonitorRequest): UpdateMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMonitorWithOptions(request, runtime);
}

model GetDeviceVideoUrlRequest = {
  corpId: string(name='CorpId'),
  gbId?: string(name='GbId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model GetDeviceVideoUrlResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  url: string(name='Url'),
}

async function getDeviceVideoUrlWithOptions(request: GetDeviceVideoUrlRequest, runtime: Util.RuntimeOptions): GetDeviceVideoUrlResponse {
  Util.validateModel(request);
  return doRequest('GetDeviceVideoUrl', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getDeviceVideoUrl(request: GetDeviceVideoUrlRequest): GetDeviceVideoUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceVideoUrlWithOptions(request, runtime);
}

model GetInventoryRequest = {
  commodityCode?: string(name='CommodityCode'),
}

model GetInventoryResponse = {
  success: boolean(name='Success'),
  data: {
    resultObject: [
      {
        buyerId: string(name='BuyerId'),
        commodityCode: string(name='CommodityCode'),
        currentInventory: string(name='CurrentInventory'),
        validEndTime: string(name='ValidEndTime'),
        validStartTime: string(name='ValidStartTime'),
        instanceId: string(name='InstanceId'),
        inventoryId: string(name='InventoryId'),
      }
    ](name='ResultObject'),
  }(name='Data'),
}

async function getInventoryWithOptions(request: GetInventoryRequest, runtime: Util.RuntimeOptions): GetInventoryResponse {
  Util.validateModel(request);
  return doRequest('GetInventory', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getInventory(request: GetInventoryRequest): GetInventoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInventoryWithOptions(request, runtime);
}

model RecognizeImageRequest = {
  corpId: string(name='CorpId'),
  picContent?: string(name='PicContent'),
  picFormat: string(name='PicFormat'),
  picUrl?: string(name='PicUrl'),
}

model RecognizeImageResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    bodyList: [
      {
        feature: string(name='Feature'),
        fileName: string(name='FileName'),
        imageBaseSixFour: string(name='ImageBaseSixFour'),
        leftTopX: string(name='LeftTopX'),
        leftTopY: string(name='LeftTopY'),
        localFeature: string(name='LocalFeature'),
        respiratorColor: string(name='RespiratorColor'),
        rightBottomX: string(name='RightBottomX'),
        rightBottomY: string(name='RightBottomY'),
      }
    ](name='BodyList'),
    faceList: [
      {
        feature: string(name='Feature'),
        fileName: string(name='FileName'),
        imageBaseSixFour: string(name='ImageBaseSixFour'),
        leftTopX: string(name='LeftTopX'),
        leftTopY: string(name='LeftTopY'),
        localFeature: string(name='LocalFeature'),
        respiratorColor: string(name='RespiratorColor'),
        rightBottomX: string(name='RightBottomX'),
        rightBottomY: string(name='RightBottomY'),
      }
    ](name='FaceList'),
  }(name='Data'),
}

async function recognizeImageWithOptions(request: RecognizeImageRequest, runtime: Util.RuntimeOptions): RecognizeImageResponse {
  Util.validateModel(request);
  return doRequest('RecognizeImage', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function recognizeImage(request: RecognizeImageRequest): RecognizeImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeImageWithOptions(request, runtime);
}

model ListCorpsRequest = {
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
}

model ListCorpsResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        corpId: string(name='CorpId'),
        corpName: string(name='CorpName'),
        description: string(name='Description'),
        createDate: string(name='CreateDate'),
        parentCorpId: string(name='ParentCorpId'),
        appName: string(name='AppName'),
        deviceCount: integer(name='DeviceCount'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listCorpsWithOptions(request: ListCorpsRequest, runtime: Util.RuntimeOptions): ListCorpsResponse {
  Util.validateModel(request);
  return doRequest('ListCorps', 'HTTPS', 'POST', '2020-05-15', 'AK,APP', null, request, runtime);
}

async function listCorps(request: ListCorpsRequest): ListCorpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpsWithOptions(request, runtime);
}

model UpdateCorpRequest = {
  corpId?: string(name='CorpId'),
  corpName?: string(name='CorpName'),
  appName?: string(name='AppName'),
  parentCorpId?: string(name='ParentCorpId'),
  description?: string(name='Description'),
}

model UpdateCorpResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function updateCorpWithOptions(request: UpdateCorpRequest, runtime: Util.RuntimeOptions): UpdateCorpResponse {
  Util.validateModel(request);
  return doRequest('UpdateCorp', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function updateCorp(request: UpdateCorpRequest): UpdateCorpResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCorpWithOptions(request, runtime);
}

model UpdateDeviceRequest = {
  gbId?: string(name='GbId'),
  deviceName?: string(name='DeviceName'),
  deviceType?: string(name='DeviceType'),
  deviceAddress?: string(name='DeviceAddress'),
  deviceSite?: string(name='DeviceSite'),
  deviceDirection?: string(name='DeviceDirection'),
  deviceResolution?: string(name='DeviceResolution'),
  bitRate?: string(name='BitRate'),
  corpId?: string(name='CorpId'),
  vendor?: string(name='Vendor'),
}

model UpdateDeviceResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function updateDeviceWithOptions(request: UpdateDeviceRequest, runtime: Util.RuntimeOptions): UpdateDeviceResponse {
  Util.validateModel(request);
  return doRequest('UpdateDevice', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function updateDevice(request: UpdateDeviceRequest): UpdateDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceWithOptions(request, runtime);
}

model ListDevicesRequest = {
  corpId?: string(name='CorpId'),
  gbId?: string(name='GbId'),
  deviceName?: string(name='DeviceName'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model ListDevicesResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        accessProtocolType: string(name='AccessProtocolType'),
        bitRate: string(name='BitRate'),
        coverImageUrl: string(name='CoverImageUrl'),
        gbId: string(name='GbId'),
        deviceAddress: string(name='DeviceAddress'),
        deviceDirection: string(name='DeviceDirection'),
        deviceSite: string(name='DeviceSite'),
        latitude: string(name='Latitude'),
        longitude: string(name='Longitude'),
        deviceName: string(name='DeviceName'),
        resolution: string(name='Resolution'),
        sipGBId: string(name='SipGBId'),
        sipPassword: string(name='SipPassword'),
        sipServerIp: string(name='SipServerIp'),
        sipServerPort: string(name='SipServerPort'),
        status: integer(name='Status'),
        deviceType: string(name='DeviceType'),
        vendor: string(name='Vendor'),
        createTime: string(name='CreateTime'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function listDevicesWithOptions(request: ListDevicesRequest, runtime: Util.RuntimeOptions): ListDevicesResponse {
  Util.validateModel(request);
  return doRequest('ListDevices', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listDevices(request: ListDevicesRequest): ListDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDevicesWithOptions(request, runtime);
}

model GetDeviceLiveUrlRequest = {
  corpId: string(name='CorpId'),
  gbId?: string(name='GbId'),
}

model GetDeviceLiveUrlResponse = {
  code: string(name='Code'),
  url: string(name='Url'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
}

async function getDeviceLiveUrlWithOptions(request: GetDeviceLiveUrlRequest, runtime: Util.RuntimeOptions): GetDeviceLiveUrlResponse {
  Util.validateModel(request);
  return doRequest('GetDeviceLiveUrl', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getDeviceLiveUrl(request: GetDeviceLiveUrlRequest): GetDeviceLiveUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceLiveUrlWithOptions(request, runtime);
}

model SearchFaceRequest = {
  corpId: string(name='CorpId'),
  gbId?: string(name='GbId'),
  startTimeStamp: long(name='StartTimeStamp'),
  endTimeStamp: long(name='EndTimeStamp'),
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
  optionList?: map[string]any(name='OptionList'),
}

model SearchFaceResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: {
    pageNo: integer(name='PageNo'),
    pageSize: integer(name='PageSize'),
    totalCount: integer(name='TotalCount'),
    totalPage: integer(name='TotalPage'),
    records: [
      {
        gbId: string(name='GbId'),
        imageUrl: string(name='ImageUrl'),
        leftTopX: float(name='LeftTopX'),
        leftTopY: float(name='LeftTopY'),
        matchSuggestion: string(name='MatchSuggestion'),
        rightBottomX: float(name='RightBottomX'),
        rightBottomY: float(name='RightBottomY'),
        score: float(name='Score'),
        targetImageUrl: string(name='TargetImageUrl'),
        sourceId: string(name='SourceId'),
      }
    ](name='Records'),
  }(name='Data'),
}

async function searchFaceWithOptions(request: SearchFaceRequest, runtime: Util.RuntimeOptions): SearchFaceResponse {
  Util.validateModel(request);
  return doRequest('SearchFace', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function searchFace(request: SearchFaceRequest): SearchFaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchFaceWithOptions(request, runtime);
}

model AddDeviceRequest = {
  gbId?: string(name='GbId'),
  deviceName?: string(name='DeviceName'),
  deviceType?: string(name='DeviceType'),
  deviceAddress?: string(name='DeviceAddress'),
  deviceSite?: string(name='DeviceSite'),
  deviceDirection?: string(name='DeviceDirection'),
  deviceResolution?: string(name='DeviceResolution'),
  bitRate?: string(name='BitRate'),
  corpId?: string(name='CorpId'),
  vendor?: string(name='Vendor'),
}

model AddDeviceResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function addDeviceWithOptions(request: AddDeviceRequest, runtime: Util.RuntimeOptions): AddDeviceResponse {
  Util.validateModel(request);
  return doRequest('AddDevice', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function addDevice(request: AddDeviceRequest): AddDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDeviceWithOptions(request, runtime);
}

model CreateCorpRequest = {
  corpName: string(name='CorpName'),
  appName: string(name='AppName'),
  parentCorpId?: string(name='ParentCorpId'),
  description?: string(name='Description'),
  algorithmType?: string(name='AlgorithmType'),
}

model CreateCorpResponse = {
  code: string(name='Code'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  corpId: string(name='CorpId'),
}

async function createCorpWithOptions(request: CreateCorpRequest, runtime: Util.RuntimeOptions): CreateCorpResponse {
  Util.validateModel(request);
  return doRequest('CreateCorp', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function createCorp(request: CreateCorpRequest): CreateCorpResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCorpWithOptions(request, runtime);
}

model DeleteDeviceRequest = {
  corpId?: string(name='CorpId'),
  gbId?: string(name='GbId'),
}

model DeleteDeviceResponse = {
  requestId: string(name='RequestId'),
  code: string(name='Code'),
  data: string(name='Data'),
  message: string(name='Message'),
}

async function deleteDeviceWithOptions(request: DeleteDeviceRequest, runtime: Util.RuntimeOptions): DeleteDeviceResponse {
  Util.validateModel(request);
  return doRequest('DeleteDevice', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
