import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('imageaudit', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model ScanTextRequest = {
  tasks: [
    {
      content: string(name='Content'),
    }
  ](name='Tasks'),
  labels: [
    {
      label: string(name='Label'),
    }
  ](name='Labels'),
}

model ScanTextResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        taskId: string(name='TaskId'),
        results: [
          {
            label: string(name='Label'),
            suggestion: string(name='Suggestion'),
            rate: float(name='Rate'),
            details: [
              {
                label: string(name='Label'),
                contexts: [
                  {
                    context: string(name='Context'),
                  }
                ](name='Contexts'),
              }
            ](name='Details'),
          }
        ](name='Results'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function scanTextWithOptions(request: ScanTextRequest, runtime: Util.RuntimeOptions): ScanTextResponse {
  Util.validateModel(request);
  return doRequest('ScanText', 'HTTPS', 'POST', '2019-12-30', 'AK', null, request, runtime);
}

async function scanText(request: ScanTextRequest): ScanTextResponse {
  var runtime = new Util.RuntimeOptions{};
  return scanTextWithOptions(request, runtime);
}

model ScanImageRequest = {
  task: [
    {
      dataId?: string(name='DataId'),
      imageURL: string(name='ImageURL'),
      imageTimeMillisecond?: long(name='ImageTimeMillisecond'),
      interval?: integer(name='Interval'),
      maxFrames?: integer(name='MaxFrames'),
    }
  ](name='Task'),
  scene: [ string ](name='Scene'),
}

model ScanImageResponse = {
  requestId: string(name='RequestId'),
  data: {
    results: [
      {
        dataId: string(name='DataId'),
        taskId: string(name='TaskId'),
        imageURL: string(name='ImageURL'),
        subResults: [
          {
            label: string(name='Label'),
            suggestion: string(name='Suggestion'),
            rate: float(name='Rate'),
            scene: string(name='Scene'),
            frames: [
              {
                rate: float(name='Rate'),
                URL: string(name='URL'),
              }
            ](name='Frames'),
            hintWordsInfoList: [
              {
                context: string(name='Context'),
              }
            ](name='HintWordsInfoList'),
            programCodeDataList: [
              {
                x: float(name='X'),
                y: float(name='Y'),
                width: float(name='Width'),
                height: float(name='Height'),
              }
            ](name='ProgramCodeDataList'),
            logoDataList: [
              {
                type: string(name='Type'),
                name: string(name='Name'),
                x: float(name='X'),
                y: float(name='Y'),
                width: float(name='Width'),
                height: float(name='Height'),
              }
            ](name='LogoDataList'),
            sfaceDataList: [
              {
                x: float(name='X'),
                y: float(name='Y'),
                width: float(name='Width'),
                height: float(name='Height'),
                faces: [
                  {
                    name: string(name='Name'),
                    rate: float(name='Rate'),
                    id: string(name='Id'),
                  }
                ](name='Faces'),
              }
            ](name='SfaceDataList'),
            OCRDataList: [ string ](name='OCRDataList'),
          }
        ](name='SubResults'),
      }
    ](name='Results'),
  }(name='Data'),
}

async function scanImageWithOptions(request: ScanImageRequest, runtime: Util.RuntimeOptions): ScanImageResponse {
  Util.validateModel(request);
  return doRequest('ScanImage', 'HTTPS', 'POST', '2019-12-30', 'AK', null, request, runtime);
}

async function scanImage(request: ScanImageRequest): ScanImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return scanImageWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
