/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  

  checkConfig(config);
  @endpoint = getEndpoint('live-interaction', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateRoomRequest {
  request?: {
    domain?: string(name='domain'),
    ownerId?: string(name='ownerId'),
    ownerNick?: string(name='ownerNick'),
    title?: string(name='title'),
  }(name='Request'),
}

model CreateRoomResponseBody = {
  success?: boolean(name='success', description='Id of the request'),
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  result?: {
    roomId?: string(name='roomId'),
  }(name='Result'),
  requestId?: string(name='RequestId'),
}

model CreateRoomResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRoomResponseBody(name='body'),
}

async function createRoomWithOptions(request: CreateRoomRequest, runtime: Util.RuntimeOptions): CreateRoomResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRoom', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRoom(request: CreateRoomRequest): CreateRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRoomWithOptions(request, runtime);
}

model DestroyRoomRequest {
  request?: {
    domain?: string(name='domain'),
    roomId?: string(name='roomId'),
    openId?: string(name='openId'),
  }(name='Request'),
}

model DestroyRoomResponseBody = {
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='result'),
  success?: boolean(name='Success'),
}

model DestroyRoomResponse = {
  headers: map[string]string(name='headers'),
  body: DestroyRoomResponseBody(name='body'),
}

async function destroyRoomWithOptions(request: DestroyRoomRequest, runtime: Util.RuntimeOptions): DestroyRoomResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DestroyRoom', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function destroyRoom(request: DestroyRoomRequest): DestroyRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return destroyRoomWithOptions(request, runtime);
}

model InitTenantRequest {
  request?: {
    domain?: string(name='domain'),
  }(name='Request'),
}

model InitTenantResponseBody = {
  success?: boolean(name='success', description='Id of the request'),
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  result?: boolean(name='result'),
  requestId?: string(name='RequestId'),
}

model InitTenantResponse = {
  headers: map[string]string(name='headers'),
  body: InitTenantResponseBody(name='body'),
}

async function initTenantWithOptions(request: InitTenantRequest, runtime: Util.RuntimeOptions): InitTenantResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InitTenant', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function initTenant(request: InitTenantRequest): InitTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  return initTenantWithOptions(request, runtime);
}

model UpdateTenantStatusRequest {
  request?: {
    domain?: string(name='domain'),
    status?: long(name='status'),
  }(name='Request'),
}

model UpdateTenantStatusResponseBody = {
  success?: boolean(name='success', description='Id of the request'),
  errorCode?: string(name='errorCode'),
  errorMsg?: string(name='errorMsg'),
  result?: boolean(name='result'),
  requestId?: string(name='RequestId'),
}

model UpdateTenantStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTenantStatusResponseBody(name='body'),
}

async function updateTenantStatusWithOptions(request: UpdateTenantStatusRequest, runtime: Util.RuntimeOptions): UpdateTenantStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateTenantStatus', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateTenantStatus(request: UpdateTenantStatusRequest): UpdateTenantStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTenantStatusWithOptions(request, runtime);
}

