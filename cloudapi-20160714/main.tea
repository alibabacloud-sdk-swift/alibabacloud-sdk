import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'apigateway.cn-qingdao.aliyuncs.com',
    cn-beijing = 'apigateway.cn-beijing.aliyuncs.com',
    cn-chengdu = 'apigateway.cn-chengdu.aliyuncs.com',
    cn-zhangjiakou = 'apigateway.cn-zhangjiakou.aliyuncs.com',
    cn-huhehaote = 'apigateway.cn-huhehaote.aliyuncs.com',
    cn-hangzhou = 'apigateway.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'apigateway.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'apigateway.cn-shenzhen.aliyuncs.com',
    cn-hongkong = 'apigateway.cn-hongkong.aliyuncs.com',
    ap-southeast-1 = 'apigateway.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'apigateway.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'apigateway.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'apigateway.ap-southeast-5.aliyuncs.com',
    ap-northeast-1 = 'apigateway.ap-northeast-1.aliyuncs.com',
    eu-west-1 = 'apigateway.eu-west-1.aliyuncs.com',
    us-west-1 = 'apigateway.us-west-1.aliyuncs.com',
    us-east-1 = 'apigateway.us-east-1.aliyuncs.com',
    eu-central-1 = 'apigateway.eu-central-1.aliyuncs.com',
    me-east-1 = 'apigateway.me-east-1.aliyuncs.com',
    ap-south-1 = 'apigateway.ap-south-1.aliyuncs.com',
    cn-north-2-gov-1 = 'apigateway.cn-north-2-gov-1.aliyuncs.com',
    cn-hangzhou-finance = 'apigateway.aliyuncs.com',
    cn-shenzhen-finance-1 = 'apigateway.aliyuncs.com',
    cn-shanghai-finance-1 = 'apigateway.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cloudapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DescribeSummaryDataRequest = {
  securityToken?: string(name='SecurityToken'),
  language?: string(name='Language'),
}

model DescribeSummaryDataResponse = {
  requestId: string(name='RequestId'),
  usageGroupNum: integer(name='UsageGroupNum'),
  usageApiNum: integer(name='UsageApiNum'),
  usageInstanceNum: integer(name='UsageInstanceNum'),
  comeingSoonInstanceNum: integer(name='ComeingSoonInstanceNum'),
  region: string(name='Region'),
}

async function describeSummaryDataWithOptions(request: DescribeSummaryDataRequest, runtime: Util.RuntimeOptions): DescribeSummaryDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeSummaryData', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeSummaryData(request: DescribeSummaryDataRequest): DescribeSummaryDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSummaryDataWithOptions(request, runtime);
}

model ModifyApiMarketAttributesRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  apiId: string(name='ApiId'),
  needCharging: boolean(name='NeedCharging'),
  marketChargingMode?: string(name='MarketChargingMode'),
}

model ModifyApiMarketAttributesResponse = {
  requestId: string(name='RequestId'),
}

async function modifyApiMarketAttributesWithOptions(request: ModifyApiMarketAttributesRequest, runtime: Util.RuntimeOptions): ModifyApiMarketAttributesResponse {
  Util.validateModel(request);
  return doRequest('ModifyApiMarketAttributes', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyApiMarketAttributes(request: ModifyApiMarketAttributesRequest): ModifyApiMarketAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiMarketAttributesWithOptions(request, runtime);
}

model DescribeApiMarketAttributesRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  apiId: string(name='ApiId'),
}

model DescribeApiMarketAttributesResponse = {
  requestId: string(name='RequestId'),
  apiId: string(name='ApiId'),
  needCharging: string(name='NeedCharging'),
  marketChargingMode: string(name='MarketChargingMode'),
}

async function describeApiMarketAttributesWithOptions(request: DescribeApiMarketAttributesRequest, runtime: Util.RuntimeOptions): DescribeApiMarketAttributesResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiMarketAttributes', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiMarketAttributes(request: DescribeApiMarketAttributesRequest): DescribeApiMarketAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiMarketAttributesWithOptions(request, runtime);
}

model SetWildcardDomainPatternsRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  domainName: string(name='DomainName'),
  wildcardDomainPatterns?: string(name='WildcardDomainPatterns'),
}

model SetWildcardDomainPatternsResponse = {
  requestId: string(name='RequestId'),
}

async function setWildcardDomainPatternsWithOptions(request: SetWildcardDomainPatternsRequest, runtime: Util.RuntimeOptions): SetWildcardDomainPatternsResponse {
  Util.validateModel(request);
  return doRequest('SetWildcardDomainPatterns', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setWildcardDomainPatterns(request: SetWildcardDomainPatternsRequest): SetWildcardDomainPatternsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setWildcardDomainPatternsWithOptions(request, runtime);
}

model ModifyApiGroupVpcWhitelistRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  vpcIds: string(name='VpcIds'),
}

model ModifyApiGroupVpcWhitelistResponse = {
  requestId: string(name='RequestId'),
}

async function modifyApiGroupVpcWhitelistWithOptions(request: ModifyApiGroupVpcWhitelistRequest, runtime: Util.RuntimeOptions): ModifyApiGroupVpcWhitelistResponse {
  Util.validateModel(request);
  return doRequest('ModifyApiGroupVpcWhitelist', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyApiGroupVpcWhitelist(request: ModifyApiGroupVpcWhitelistRequest): ModifyApiGroupVpcWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiGroupVpcWhitelistWithOptions(request, runtime);
}

model DescribeApiGroupVpcWhitelistRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
}

model DescribeApiGroupVpcWhitelistResponse = {
  requestId: string(name='RequestId'),
  vpcIds: string(name='VpcIds'),
}

async function describeApiGroupVpcWhitelistWithOptions(request: DescribeApiGroupVpcWhitelistRequest, runtime: Util.RuntimeOptions): DescribeApiGroupVpcWhitelistResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiGroupVpcWhitelist', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiGroupVpcWhitelist(request: DescribeApiGroupVpcWhitelistRequest): DescribeApiGroupVpcWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiGroupVpcWhitelistWithOptions(request, runtime);
}

model DeleteInstanceRequest = {
  instanceId: string(name='InstanceId'),
  tag?: [
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag'),
}

model DeleteInstanceResponse = {
  requestId: string(name='RequestId'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  return doRequest('DeleteInstance', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model CreateInstanceRequest = {
  chargeType: string(name='ChargeType'),
  instanceName: string(name='InstanceName'),
  instanceSpec: string(name='InstanceSpec'),
  zoneId?: string(name='ZoneId'),
  httpsPolicy?: string(name='HttpsPolicy'),
  duration?: integer(name='Duration'),
  pricingCycle?: string(name='PricingCycle'),
  autoPay?: boolean(name='AutoPay'),
  token: string(name='Token'),
}

model CreateInstanceResponse = {
  requestId: string(name='RequestId'),
  instanceId: string(name='InstanceId'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateInstance', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model UntagResourcesRequest = {
  securityToken?: string(name='SecurityToken'),
  resourceId: [ string ](name='ResourceId'),
  resourceType: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
  all?: boolean(name='All'),
}

model UntagResourcesResponse = {
  requestId: string(name='RequestId'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  return doRequest('UntagResources', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model ListTagResourcesRequest = {
  securityToken?: string(name='SecurityToken'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponse = {
  nextToken: string(name='NextToken'),
  requestId: string(name='RequestId'),
  tagResources: {
    tagResource: [
      {
        resourceId: string(name='ResourceId'),
        resourceType: string(name='ResourceType'),
        tagKey: string(name='TagKey'),
        tagValue: string(name='TagValue'),
      }
    ](name='TagResource'),
  }(name='TagResources'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  return doRequest('ListTagResources', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model TagResourcesRequest = {
  securityToken?: string(name='SecurityToken'),
  resourceType: string(name='ResourceType'),
  tag: [
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag'),
  resourceId: [ string ](name='ResourceId'),
}

model TagResourcesResponse = {
  requestId: string(name='RequestId'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  return doRequest('TagResources', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model DescribeZonesRequest = {
  securityToken?: string(name='SecurityToken'),
  language?: string(name='Language'),
}

model DescribeZonesResponse = {
  requestId: string(name='RequestId'),
  zones: {
    zone: [
      {
        zoneId: string(name='ZoneId'),
        localName: string(name='LocalName'),
      }
    ](name='Zone'),
  }(name='Zones'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  return doRequest('DescribeZones', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model ResetAppCodeRequest = {
  securityToken?: string(name='SecurityToken'),
  appCode: string(name='AppCode'),
}

model ResetAppCodeResponse = {
  requestId: string(name='RequestId'),
}

async function resetAppCodeWithOptions(request: ResetAppCodeRequest, runtime: Util.RuntimeOptions): ResetAppCodeResponse {
  Util.validateModel(request);
  return doRequest('ResetAppCode', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function resetAppCode(request: ResetAppCodeRequest): ResetAppCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAppCodeWithOptions(request, runtime);
}

model DescribeAppRequest = {
  securityToken?: string(name='SecurityToken'),
  appId?: long(name='AppId'),
}

model DescribeAppResponse = {
  requestId: string(name='RequestId'),
  appId: long(name='AppId'),
  appName: string(name='AppName'),
  description: string(name='Description'),
  createdTime: string(name='CreatedTime'),
  modifiedTime: string(name='ModifiedTime'),
}

async function describeAppWithOptions(request: DescribeAppRequest, runtime: Util.RuntimeOptions): DescribeAppResponse {
  Util.validateModel(request);
  return doRequest('DescribeApp', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApp(request: DescribeAppRequest): DescribeAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppWithOptions(request, runtime);
}

model CreateModelRequest = {
  modelName: string(name='ModelName'),
  groupId: string(name='GroupId'),
  securityToken?: string(name='SecurityToken'),
  schema: string(name='Schema'),
  description?: string(name='Description'),
}

model CreateModelResponse = {
  requestId: string(name='RequestId'),
  modelId: string(name='ModelId'),
  modelRef: string(name='ModelRef'),
  modelName: string(name='ModelName'),
  groupId: string(name='GroupId'),
  schema: string(name='Schema'),
  regionId: string(name='RegionId'),
  description: string(name='Description'),
  createdTime: string(name='CreatedTime'),
  modifiedTime: string(name='ModifiedTime'),
}

async function createModelWithOptions(request: CreateModelRequest, runtime: Util.RuntimeOptions): CreateModelResponse {
  Util.validateModel(request);
  return doRequest('CreateModel', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createModel(request: CreateModelRequest): CreateModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createModelWithOptions(request, runtime);
}

model DeleteModelRequest = {
  securityToken?: string(name='SecurityToken'),
  modelName: string(name='ModelName'),
  groupId: string(name='GroupId'),
}

model DeleteModelResponse = {
  requestId: string(name='RequestId'),
}

async function deleteModelWithOptions(request: DeleteModelRequest, runtime: Util.RuntimeOptions): DeleteModelResponse {
  Util.validateModel(request);
  return doRequest('DeleteModel', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteModel(request: DeleteModelRequest): DeleteModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteModelWithOptions(request, runtime);
}

model DescribeModelsRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  modelName?: string(name='ModelName'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
  modelId?: string(name='ModelId'),
}

model DescribeModelsResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  modelDetails: {
    modelDetail: [
      {
        groupId: string(name='GroupId'),
        modelId: string(name='ModelId'),
        modelName: string(name='ModelName'),
        schema: string(name='Schema'),
        description: string(name='Description'),
        createdTime: string(name='CreatedTime'),
        modifiedTime: string(name='ModifiedTime'),
        modelRef: string(name='ModelRef'),
      }
    ](name='ModelDetail'),
  }(name='ModelDetails'),
}

async function describeModelsWithOptions(request: DescribeModelsRequest, runtime: Util.RuntimeOptions): DescribeModelsResponse {
  Util.validateModel(request);
  return doRequest('DescribeModels', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeModels(request: DescribeModelsRequest): DescribeModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModelsWithOptions(request, runtime);
}

model ModifyModelRequest = {
  securityToken?: string(name='SecurityToken'),
  modelName: string(name='ModelName'),
  description?: string(name='Description'),
  schema?: string(name='Schema'),
  groupId: string(name='GroupId'),
  newModelName?: string(name='NewModelName'),
}

model ModifyModelResponse = {
  requestId: string(name='RequestId'),
}

async function modifyModelWithOptions(request: ModifyModelRequest, runtime: Util.RuntimeOptions): ModifyModelResponse {
  Util.validateModel(request);
  return doRequest('ModifyModel', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyModel(request: ModifyModelRequest): ModifyModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyModelWithOptions(request, runtime);
}

model CreateIntranetDomainRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
}

model CreateIntranetDomainResponse = {
  requestId: string(name='RequestId'),
  domainName: string(name='DomainName'),
}

async function createIntranetDomainWithOptions(request: CreateIntranetDomainRequest, runtime: Util.RuntimeOptions): CreateIntranetDomainResponse {
  Util.validateModel(request);
  return doRequest('CreateIntranetDomain', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createIntranetDomain(request: CreateIntranetDomainRequest): CreateIntranetDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIntranetDomainWithOptions(request, runtime);
}

model ImportSwaggerRequest = {
  overwrite: boolean(name='Overwrite'),
  globalCondition?: map[string]any(name='GlobalCondition'),
  dataFormat: string(name='DataFormat'),
  data: string(name='Data'),
  groupId: string(name='GroupId'),
}

model ImportSwaggerResponse = {
  requestId: string(name='RequestId'),
  success: {
    apiImportSwaggerSuccess: [
      {
        path: string(name='Path'),
        httpMethod: string(name='HttpMethod'),
        apiUid: string(name='ApiUid'),
        apiOperation: string(name='ApiOperation'),
      }
    ](name='ApiImportSwaggerSuccess'),
  }(name='Success'),
  failed: {
    apiImportSwaggerFailed: [
      {
        path: string(name='Path'),
        httpMethod: string(name='HttpMethod'),
        errorMsg: string(name='ErrorMsg'),
      }
    ](name='ApiImportSwaggerFailed'),
  }(name='Failed'),
  modelFailed: {
    apiImportModelFailed: [
      {
        groupId: string(name='GroupId'),
        modelName: string(name='ModelName'),
        errorMsg: string(name='ErrorMsg'),
      }
    ](name='ApiImportModelFailed'),
  }(name='ModelFailed'),
  modelSuccess: {
    apiImportModelSuccess: [
      {
        modelUid: string(name='ModelUid'),
        modelOperation: string(name='ModelOperation'),
        groupId: string(name='GroupId'),
        modelName: string(name='ModelName'),
      }
    ](name='ApiImportModelSuccess'),
  }(name='ModelSuccess'),
}

async function importSwaggerWithOptions(request: ImportSwaggerRequest, runtime: Util.RuntimeOptions): ImportSwaggerResponse {
  Util.validateModel(request);
  return doRequest('ImportSwagger', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function importSwagger(request: ImportSwaggerRequest): ImportSwaggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return importSwaggerWithOptions(request, runtime);
}

model SetIpControlApisRequest = {
  securityToken?: string(name='SecurityToken'),
  ipControlId: string(name='IpControlId'),
  groupId: string(name='GroupId'),
  apiIds: string(name='ApiIds'),
  stageName: string(name='StageName'),
}

model SetIpControlApisResponse = {
  requestId: string(name='RequestId'),
}

async function setIpControlApisWithOptions(request: SetIpControlApisRequest, runtime: Util.RuntimeOptions): SetIpControlApisResponse {
  Util.validateModel(request);
  return doRequest('SetIpControlApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setIpControlApis(request: SetIpControlApisRequest): SetIpControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return setIpControlApisWithOptions(request, runtime);
}

model RemoveIpControlPolicyItemRequest = {
  securityToken?: string(name='SecurityToken'),
  ipControlId: string(name='IpControlId'),
  policyItemIds: string(name='PolicyItemIds'),
}

model RemoveIpControlPolicyItemResponse = {
  requestId: string(name='RequestId'),
}

async function removeIpControlPolicyItemWithOptions(request: RemoveIpControlPolicyItemRequest, runtime: Util.RuntimeOptions): RemoveIpControlPolicyItemResponse {
  Util.validateModel(request);
  return doRequest('RemoveIpControlPolicyItem', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function removeIpControlPolicyItem(request: RemoveIpControlPolicyItemRequest): RemoveIpControlPolicyItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeIpControlPolicyItemWithOptions(request, runtime);
}

model RemoveIpControlApisRequest = {
  securityToken?: string(name='SecurityToken'),
  ipControlId: string(name='IpControlId'),
  groupId: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  stageName: string(name='StageName'),
}

model RemoveIpControlApisResponse = {
  requestId: string(name='RequestId'),
}

async function removeIpControlApisWithOptions(request: RemoveIpControlApisRequest, runtime: Util.RuntimeOptions): RemoveIpControlApisResponse {
  Util.validateModel(request);
  return doRequest('RemoveIpControlApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function removeIpControlApis(request: RemoveIpControlApisRequest): RemoveIpControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeIpControlApisWithOptions(request, runtime);
}

model ModifyIpControlPolicyItemRequest = {
  securityToken?: string(name='SecurityToken'),
  ipControlId: string(name='IpControlId'),
  policyItemId: string(name='PolicyItemId'),
  appId?: string(name='AppId'),
  cidrIp: string(name='CidrIp'),
}

model ModifyIpControlPolicyItemResponse = {
  requestId: string(name='RequestId'),
}

async function modifyIpControlPolicyItemWithOptions(request: ModifyIpControlPolicyItemRequest, runtime: Util.RuntimeOptions): ModifyIpControlPolicyItemResponse {
  Util.validateModel(request);
  return doRequest('ModifyIpControlPolicyItem', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyIpControlPolicyItem(request: ModifyIpControlPolicyItemRequest): ModifyIpControlPolicyItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpControlPolicyItemWithOptions(request, runtime);
}

model ModifyIpControlRequest = {
  securityToken?: string(name='SecurityToken'),
  ipControlId: string(name='IpControlId'),
  ipControlName?: string(name='IpControlName'),
  description?: string(name='Description'),
}

model ModifyIpControlResponse = {
  requestId: string(name='RequestId'),
}

async function modifyIpControlWithOptions(request: ModifyIpControlRequest, runtime: Util.RuntimeOptions): ModifyIpControlResponse {
  Util.validateModel(request);
  return doRequest('ModifyIpControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyIpControl(request: ModifyIpControlRequest): ModifyIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpControlWithOptions(request, runtime);
}

model DescribeIpControlsRequest = {
  securityToken?: string(name='SecurityToken'),
  ipControlId?: string(name='IpControlId'),
  ipControlName?: string(name='IpControlName'),
  ipControlType?: string(name='IpControlType'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeIpControlsResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  ipControlInfos: {
    ipControlInfo: [
      {
        ipControlId: string(name='IpControlId'),
        ipControlName: string(name='IpControlName'),
        ipControlType: string(name='IpControlType'),
        description: string(name='Description'),
        createTime: string(name='CreateTime'),
        modifiedTime: string(name='ModifiedTime'),
        regionId: string(name='RegionId'),
      }
    ](name='IpControlInfo'),
  }(name='IpControlInfos'),
}

async function describeIpControlsWithOptions(request: DescribeIpControlsRequest, runtime: Util.RuntimeOptions): DescribeIpControlsResponse {
  Util.validateModel(request);
  return doRequest('DescribeIpControls', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeIpControls(request: DescribeIpControlsRequest): DescribeIpControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpControlsWithOptions(request, runtime);
}

model DescribeIpControlPolicyItemsRequest = {
  securityToken?: string(name='SecurityToken'),
  ipControlId?: string(name='IpControlId'),
  policyItemId?: string(name='PolicyItemId'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeIpControlPolicyItemsResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  ipControlPolicyItems: {
    ipControlPolicyItem: [
      {
        appId: string(name='AppId'),
        cidrIp: string(name='CidrIp'),
        policyItemId: string(name='PolicyItemId'),
        createTime: string(name='CreateTime'),
        modifiedTime: string(name='ModifiedTime'),
      }
    ](name='IpControlPolicyItem'),
  }(name='IpControlPolicyItems'),
}

async function describeIpControlPolicyItemsWithOptions(request: DescribeIpControlPolicyItemsRequest, runtime: Util.RuntimeOptions): DescribeIpControlPolicyItemsResponse {
  Util.validateModel(request);
  return doRequest('DescribeIpControlPolicyItems', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeIpControlPolicyItems(request: DescribeIpControlPolicyItemsRequest): DescribeIpControlPolicyItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpControlPolicyItemsWithOptions(request, runtime);
}

model DescribeApisByIpControlRequest = {
  securityToken?: string(name='SecurityToken'),
  ipControlId: string(name='IpControlId'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
}

model DescribeApisByIpControlResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  apiInfos: {
    apiInfo: [
      {
        regionId: string(name='RegionId'),
        groupId: string(name='GroupId'),
        groupName: string(name='GroupName'),
        stageName: string(name='StageName'),
        apiId: string(name='ApiId'),
        apiName: string(name='ApiName'),
        description: string(name='Description'),
        visibility: string(name='Visibility'),
        boundTime: string(name='BoundTime'),
      }
    ](name='ApiInfo'),
  }(name='ApiInfos'),
}

async function describeApisByIpControlWithOptions(request: DescribeApisByIpControlRequest, runtime: Util.RuntimeOptions): DescribeApisByIpControlResponse {
  Util.validateModel(request);
  return doRequest('DescribeApisByIpControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApisByIpControl(request: DescribeApisByIpControlRequest): DescribeApisByIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisByIpControlWithOptions(request, runtime);
}

model DescribeApiIpControlsRequest = {
  securityToken?: string(name='SecurityToken'),
  stageName: string(name='StageName'),
  groupId: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeApiIpControlsResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  apiIpControls: {
    apiIpControlItem: [
      {
        apiId: string(name='ApiId'),
        apiName: string(name='ApiName'),
        ipControlId: string(name='IpControlId'),
        ipControlName: string(name='IpControlName'),
        boundTime: string(name='BoundTime'),
      }
    ](name='ApiIpControlItem'),
  }(name='ApiIpControls'),
}

async function describeApiIpControlsWithOptions(request: DescribeApiIpControlsRequest, runtime: Util.RuntimeOptions): DescribeApiIpControlsResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiIpControls', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiIpControls(request: DescribeApiIpControlsRequest): DescribeApiIpControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiIpControlsWithOptions(request, runtime);
}

model DeleteIpControlRequest = {
  securityToken?: string(name='SecurityToken'),
  ipControlId: string(name='IpControlId'),
}

model DeleteIpControlResponse = {
  requestId: string(name='RequestId'),
}

async function deleteIpControlWithOptions(request: DeleteIpControlRequest, runtime: Util.RuntimeOptions): DeleteIpControlResponse {
  Util.validateModel(request);
  return doRequest('DeleteIpControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteIpControl(request: DeleteIpControlRequest): DeleteIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpControlWithOptions(request, runtime);
}

model CreateIpControlRequest = {
  securityToken?: string(name='SecurityToken'),
  ipControlName: string(name='IpControlName'),
  ipControlType: string(name='IpControlType'),
  description?: string(name='Description'),
  ipControlPolicys?: [
    {
      appId: string(name='AppId'),
      cidrIp: string(name='CidrIp'),
    }
  ](name='IpControlPolicys'),
}

model CreateIpControlResponse = {
  requestId: string(name='RequestId'),
  ipControlId: string(name='IpControlId'),
}

async function createIpControlWithOptions(request: CreateIpControlRequest, runtime: Util.RuntimeOptions): CreateIpControlResponse {
  Util.validateModel(request);
  return doRequest('CreateIpControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createIpControl(request: CreateIpControlRequest): CreateIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpControlWithOptions(request, runtime);
}

model AddIpControlPolicyItemRequest = {
  securityToken?: string(name='SecurityToken'),
  ipControlId: string(name='IpControlId'),
  appId?: string(name='AppId'),
  cidrIp: string(name='CidrIp'),
}

model AddIpControlPolicyItemResponse = {
  requestId: string(name='RequestId'),
  policyItemId: string(name='PolicyItemId'),
}

async function addIpControlPolicyItemWithOptions(request: AddIpControlPolicyItemRequest, runtime: Util.RuntimeOptions): AddIpControlPolicyItemResponse {
  Util.validateModel(request);
  return doRequest('AddIpControlPolicyItem', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function addIpControlPolicyItem(request: AddIpControlPolicyItemRequest): AddIpControlPolicyItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return addIpControlPolicyItemWithOptions(request, runtime);
}

model ModifyLogConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  slsProject: string(name='SlsProject'),
  slsLogStore: string(name='SlsLogStore'),
  logType?: string(name='LogType'),
}

model ModifyLogConfigResponse = {
  requestId: string(name='RequestId'),
}

async function modifyLogConfigWithOptions(request: ModifyLogConfigRequest, runtime: Util.RuntimeOptions): ModifyLogConfigResponse {
  Util.validateModel(request);
  return doRequest('ModifyLogConfig', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyLogConfig(request: ModifyLogConfigRequest): ModifyLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLogConfigWithOptions(request, runtime);
}

model DescribeLogConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  logType?: string(name='LogType'),
}

model DescribeLogConfigResponse = {
  requestId: string(name='RequestId'),
  logInfos: {
    logInfo: [
      {
        regionId: string(name='RegionId'),
        slsProject: string(name='SlsProject'),
        slsLogStore: string(name='SlsLogStore'),
        logType: string(name='LogType'),
      }
    ](name='LogInfo'),
  }(name='LogInfos'),
}

async function describeLogConfigWithOptions(request: DescribeLogConfigRequest, runtime: Util.RuntimeOptions): DescribeLogConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLogConfig', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeLogConfig(request: DescribeLogConfigRequest): DescribeLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogConfigWithOptions(request, runtime);
}

model DeleteLogConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  logType?: string(name='LogType'),
}

model DeleteLogConfigResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLogConfigWithOptions(request: DeleteLogConfigRequest, runtime: Util.RuntimeOptions): DeleteLogConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteLogConfig', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteLogConfig(request: DeleteLogConfigRequest): DeleteLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLogConfigWithOptions(request, runtime);
}

model CreateLogConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  slsProject: string(name='SlsProject'),
  slsLogStore: string(name='SlsLogStore'),
  logType?: string(name='LogType'),
}

model CreateLogConfigResponse = {
  requestId: string(name='RequestId'),
}

async function createLogConfigWithOptions(request: CreateLogConfigRequest, runtime: Util.RuntimeOptions): CreateLogConfigResponse {
  Util.validateModel(request);
  return doRequest('CreateLogConfig', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createLogConfig(request: CreateLogConfigRequest): CreateLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLogConfigWithOptions(request, runtime);
}

model SetDomainWebSocketStatusRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  domainName: string(name='DomainName'),
  actionValue: string(name='ActionValue'),
}

model SetDomainWebSocketStatusResponse = {
  requestId: string(name='RequestId'),
}

async function setDomainWebSocketStatusWithOptions(request: SetDomainWebSocketStatusRequest, runtime: Util.RuntimeOptions): SetDomainWebSocketStatusResponse {
  Util.validateModel(request);
  return doRequest('SetDomainWebSocketStatus', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setDomainWebSocketStatus(request: SetDomainWebSocketStatusRequest): SetDomainWebSocketStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainWebSocketStatusWithOptions(request, runtime);
}

model RemoveVpcAccessRequest = {
  securityToken?: string(name='SecurityToken'),
  vpcId: string(name='VpcId'),
  instanceId: string(name='InstanceId'),
  port: integer(name='Port'),
}

model RemoveVpcAccessResponse = {
  requestId: string(name='RequestId'),
}

async function removeVpcAccessWithOptions(request: RemoveVpcAccessRequest, runtime: Util.RuntimeOptions): RemoveVpcAccessResponse {
  Util.validateModel(request);
  return doRequest('RemoveVpcAccess', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function removeVpcAccess(request: RemoveVpcAccessRequest): RemoveVpcAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeVpcAccessWithOptions(request, runtime);
}

model SetVpcAccessRequest = {
  securityToken?: string(name='SecurityToken'),
  name: string(name='Name'),
  vpcId: string(name='VpcId'),
  instanceId: string(name='InstanceId'),
  port: integer(name='Port'),
}

model SetVpcAccessResponse = {
  requestId: string(name='RequestId'),
}

async function setVpcAccessWithOptions(request: SetVpcAccessRequest, runtime: Util.RuntimeOptions): SetVpcAccessResponse {
  Util.validateModel(request);
  return doRequest('SetVpcAccess', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setVpcAccess(request: SetVpcAccessRequest): SetVpcAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return setVpcAccessWithOptions(request, runtime);
}

model DescribeVpcAccessesRequest = {
  securityToken?: string(name='SecurityToken'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
  name?: string(name='Name'),
}

model DescribeVpcAccessesResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  vpcAccessAttributes: {
    vpcAccessAttribute: [
      {
        vpcId: string(name='VpcId'),
        instanceId: string(name='InstanceId'),
        createdTime: string(name='CreatedTime'),
        port: integer(name='Port'),
        regionId: string(name='RegionId'),
        name: string(name='Name'),
      }
    ](name='VpcAccessAttribute'),
  }(name='VpcAccessAttributes'),
}

async function describeVpcAccessesWithOptions(request: DescribeVpcAccessesRequest, runtime: Util.RuntimeOptions): DescribeVpcAccessesResponse {
  Util.validateModel(request);
  return doRequest('DescribeVpcAccesses', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeVpcAccesses(request: DescribeVpcAccessesRequest): DescribeVpcAccessesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcAccessesWithOptions(request, runtime);
}

model ReactivateDomainRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  domainName: string(name='DomainName'),
}

model ReactivateDomainResponse = {
  requestId: string(name='RequestId'),
}

async function reactivateDomainWithOptions(request: ReactivateDomainRequest, runtime: Util.RuntimeOptions): ReactivateDomainResponse {
  Util.validateModel(request);
  return doRequest('ReactivateDomain', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function reactivateDomain(request: ReactivateDomainRequest): ReactivateDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return reactivateDomainWithOptions(request, runtime);
}

model DescribeApiHistoriesRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  stageName?: string(name='StageName'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  pageSize?: string(name='PageSize'),
  pageNumber?: string(name='PageNumber'),
}

model DescribeApiHistoriesResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  apiHisItems: {
    apiHisItem: [
      {
        regionId: string(name='RegionId'),
        apiId: string(name='ApiId'),
        apiName: string(name='ApiName'),
        groupId: string(name='GroupId'),
        groupName: string(name='GroupName'),
        stageName: string(name='StageName'),
        historyVersion: string(name='HistoryVersion'),
        status: string(name='Status'),
        description: string(name='Description'),
        deployedTime: string(name='DeployedTime'),
      }
    ](name='ApiHisItem'),
  }(name='ApiHisItems'),
}

async function describeApiHistoriesWithOptions(request: DescribeApiHistoriesRequest, runtime: Util.RuntimeOptions): DescribeApiHistoriesResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiHistories', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiHistories(request: DescribeApiHistoriesRequest): DescribeApiHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiHistoriesWithOptions(request, runtime);
}

model SdkGenerateByGroupRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  language: string(name='Language'),
}

model SdkGenerateByGroupResponse = {
  requestId: string(name='RequestId'),
  downloadLink: string(name='DownloadLink'),
}

async function sdkGenerateByGroupWithOptions(request: SdkGenerateByGroupRequest, runtime: Util.RuntimeOptions): SdkGenerateByGroupResponse {
  Util.validateModel(request);
  return doRequest('SdkGenerateByGroup', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function sdkGenerateByGroup(request: SdkGenerateByGroupRequest): SdkGenerateByGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return sdkGenerateByGroupWithOptions(request, runtime);
}

model SdkGenerateByAppRequest = {
  securityToken?: string(name='SecurityToken'),
  appId: long(name='AppId'),
  language: string(name='Language'),
}

model SdkGenerateByAppResponse = {
  requestId: string(name='RequestId'),
  downloadLink: string(name='DownloadLink'),
}

async function sdkGenerateByAppWithOptions(request: SdkGenerateByAppRequest, runtime: Util.RuntimeOptions): SdkGenerateByAppResponse {
  Util.validateModel(request);
  return doRequest('SdkGenerateByApp', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function sdkGenerateByApp(request: SdkGenerateByAppRequest): SdkGenerateByAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return sdkGenerateByAppWithOptions(request, runtime);
}

model DescribeApisByAppRequest = {
  securityToken?: string(name='SecurityToken'),
  appId: long(name='AppId'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
  apiUid?: string(name='ApiUid'),
}

model DescribeApisByAppResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  appApiRelationInfos: {
    appApiRelationInfo: [
      {
        regionId: string(name='RegionId'),
        groupId: string(name='GroupId'),
        groupName: string(name='GroupName'),
        stageName: string(name='StageName'),
        operator: string(name='Operator'),
        apiId: string(name='ApiId'),
        apiName: string(name='ApiName'),
        authorizationSource: string(name='AuthorizationSource'),
        description: string(name='Description'),
        createdTime: string(name='CreatedTime'),
        authVaildTime: string(name='AuthVaildTime'),
      }
    ](name='AppApiRelationInfo'),
  }(name='AppApiRelationInfos'),
}

async function describeApisByAppWithOptions(request: DescribeApisByAppRequest, runtime: Util.RuntimeOptions): DescribeApisByAppResponse {
  Util.validateModel(request);
  return doRequest('DescribeApisByApp', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApisByApp(request: DescribeApisByAppRequest): DescribeApisByAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisByAppWithOptions(request, runtime);
}

model DescribeApiStageRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  stageId: string(name='StageId'),
}

model DescribeApiStageResponse = {
  requestId: string(name='RequestId'),
  groupId: string(name='GroupId'),
  stageId: string(name='StageId'),
  stageName: string(name='StageName'),
  description: string(name='Description'),
  createdTime: string(name='CreatedTime'),
  modifiedTime: string(name='ModifiedTime'),
  variables: {
    variableItem: [
      {
        variableName: string(name='VariableName'),
        variableValue: string(name='VariableValue'),
        supportRoute: boolean(name='SupportRoute'),
        stageRouteModel: {
          parameterCatalog: string(name='ParameterCatalog'),
          serviceParameterName: string(name='ServiceParameterName'),
          location: string(name='Location'),
          parameterType: string(name='ParameterType'),
          routeMatchSymbol: string(name='RouteMatchSymbol'),
          routeRules: {
            routeRuleItem: [
              {
                maxValue: long(name='MaxValue'),
                minValue: long(name='MinValue'),
                conditionValue: string(name='ConditionValue'),
                resultValue: string(name='ResultValue'),
              }
            ](name='RouteRuleItem'),
          }(name='RouteRules'),
        }(name='StageRouteModel'),
      }
    ](name='VariableItem'),
  }(name='Variables'),
}

async function describeApiStageWithOptions(request: DescribeApiStageRequest, runtime: Util.RuntimeOptions): DescribeApiStageResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiStage', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiStage(request: DescribeApiStageRequest): DescribeApiStageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiStageWithOptions(request, runtime);
}

model DeleteApiStageVariableRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  stageId: string(name='StageId'),
  variableName: string(name='VariableName'),
}

model DeleteApiStageVariableResponse = {
  requestId: string(name='RequestId'),
}

async function deleteApiStageVariableWithOptions(request: DeleteApiStageVariableRequest, runtime: Util.RuntimeOptions): DeleteApiStageVariableResponse {
  Util.validateModel(request);
  return doRequest('DeleteApiStageVariable', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteApiStageVariable(request: DeleteApiStageVariableRequest): DeleteApiStageVariableResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiStageVariableWithOptions(request, runtime);
}

model CreateApiStageVariableRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  stageId: string(name='StageId'),
  variableName: string(name='VariableName'),
  supportRoute?: boolean(name='SupportRoute'),
  variableValue?: string(name='VariableValue'),
  stageRouteModel?: string(name='StageRouteModel'),
}

model CreateApiStageVariableResponse = {
  requestId: string(name='RequestId'),
}

async function createApiStageVariableWithOptions(request: CreateApiStageVariableRequest, runtime: Util.RuntimeOptions): CreateApiStageVariableResponse {
  Util.validateModel(request);
  return doRequest('CreateApiStageVariable', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createApiStageVariable(request: CreateApiStageVariableRequest): CreateApiStageVariableResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiStageVariableWithOptions(request, runtime);
}

model SwitchApiRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId: string(name='ApiId'),
  stageName: string(name='StageName'),
  description: string(name='Description'),
  historyVersion: string(name='HistoryVersion'),
}

model SwitchApiResponse = {
  requestId: string(name='RequestId'),
}

async function switchApiWithOptions(request: SwitchApiRequest, runtime: Util.RuntimeOptions): SwitchApiResponse {
  Util.validateModel(request);
  return doRequest('SwitchApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function switchApi(request: SwitchApiRequest): SwitchApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchApiWithOptions(request, runtime);
}

model SetTrafficControlApisRequest = {
  securityToken?: string(name='SecurityToken'),
  trafficControlId: string(name='TrafficControlId'),
  groupId: string(name='GroupId'),
  apiIds: string(name='ApiIds'),
  stageName: string(name='StageName'),
}

model SetTrafficControlApisResponse = {
  requestId: string(name='RequestId'),
}

async function setTrafficControlApisWithOptions(request: SetTrafficControlApisRequest, runtime: Util.RuntimeOptions): SetTrafficControlApisResponse {
  Util.validateModel(request);
  return doRequest('SetTrafficControlApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setTrafficControlApis(request: SetTrafficControlApisRequest): SetTrafficControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return setTrafficControlApisWithOptions(request, runtime);
}

model SetSignatureApisRequest = {
  securityToken?: string(name='SecurityToken'),
  signatureId: string(name='SignatureId'),
  groupId: string(name='GroupId'),
  apiIds: string(name='ApiIds'),
  stageName: string(name='StageName'),
}

model SetSignatureApisResponse = {
  requestId: string(name='RequestId'),
}

async function setSignatureApisWithOptions(request: SetSignatureApisRequest, runtime: Util.RuntimeOptions): SetSignatureApisResponse {
  Util.validateModel(request);
  return doRequest('SetSignatureApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setSignatureApis(request: SetSignatureApisRequest): SetSignatureApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return setSignatureApisWithOptions(request, runtime);
}

model SetDomainCertificateRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  domainName: string(name='DomainName'),
  certificateName: string(name='CertificateName'),
  certificateBody?: string(name='CertificateBody'),
  certificatePrivateKey?: string(name='CertificatePrivateKey'),
  caCertificateBody?: string(name='CaCertificateBody'),
}

model SetDomainCertificateResponse = {
  requestId: string(name='RequestId'),
}

async function setDomainCertificateWithOptions(request: SetDomainCertificateRequest, runtime: Util.RuntimeOptions): SetDomainCertificateResponse {
  Util.validateModel(request);
  return doRequest('SetDomainCertificate', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setDomainCertificate(request: SetDomainCertificateRequest): SetDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainCertificateWithOptions(request, runtime);
}

model SetDomainRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  domainName: string(name='DomainName'),
  bindStageName?: string(name='BindStageName'),
  isForce?: boolean(name='IsForce'),
}

model SetDomainResponse = {
  requestId: string(name='RequestId'),
  groupId: string(name='GroupId'),
  domainName: string(name='DomainName'),
  subDomain: string(name='SubDomain'),
  domainBindingStatus: string(name='DomainBindingStatus'),
  domainLegalStatus: string(name='DomainLegalStatus'),
  domainWebSocketStatus: string(name='DomainWebSocketStatus'),
  domainRemark: string(name='DomainRemark'),
}

async function setDomainWithOptions(request: SetDomainRequest, runtime: Util.RuntimeOptions): SetDomainResponse {
  Util.validateModel(request);
  return doRequest('SetDomain', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setDomain(request: SetDomainRequest): SetDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainWithOptions(request, runtime);
}

model SetAppsAuthoritiesRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId: string(name='ApiId'),
  stageName: string(name='StageName'),
  appIds: string(name='AppIds'),
  description?: string(name='Description'),
  authValidTime?: string(name='AuthValidTime'),
}

model SetAppsAuthoritiesResponse = {
  requestId: string(name='RequestId'),
}

async function setAppsAuthoritiesWithOptions(request: SetAppsAuthoritiesRequest, runtime: Util.RuntimeOptions): SetAppsAuthoritiesResponse {
  Util.validateModel(request);
  return doRequest('SetAppsAuthorities', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setAppsAuthorities(request: SetAppsAuthoritiesRequest): SetAppsAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppsAuthoritiesWithOptions(request, runtime);
}

model SetApisAuthoritiesRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  appId: long(name='AppId'),
  stageName: string(name='StageName'),
  apiIds?: string(name='ApiIds'),
  description?: string(name='Description'),
  authValidTime?: string(name='AuthValidTime'),
}

model SetApisAuthoritiesResponse = {
  requestId: string(name='RequestId'),
}

async function setApisAuthoritiesWithOptions(request: SetApisAuthoritiesRequest, runtime: Util.RuntimeOptions): SetApisAuthoritiesResponse {
  Util.validateModel(request);
  return doRequest('SetApisAuthorities', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setApisAuthorities(request: SetApisAuthoritiesRequest): SetApisAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApisAuthoritiesWithOptions(request, runtime);
}

model ResetAppSecretRequest = {
  securityToken?: string(name='SecurityToken'),
  appKey: string(name='AppKey'),
}

model ResetAppSecretResponse = {
  requestId: string(name='RequestId'),
}

async function resetAppSecretWithOptions(request: ResetAppSecretRequest, runtime: Util.RuntimeOptions): ResetAppSecretResponse {
  Util.validateModel(request);
  return doRequest('ResetAppSecret', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function resetAppSecret(request: ResetAppSecretRequest): ResetAppSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAppSecretWithOptions(request, runtime);
}

model RemoveTrafficControlApisRequest = {
  securityToken?: string(name='SecurityToken'),
  trafficControlId: string(name='TrafficControlId'),
  groupId: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  stageName: string(name='StageName'),
}

model RemoveTrafficControlApisResponse = {
  requestId: string(name='RequestId'),
}

async function removeTrafficControlApisWithOptions(request: RemoveTrafficControlApisRequest, runtime: Util.RuntimeOptions): RemoveTrafficControlApisResponse {
  Util.validateModel(request);
  return doRequest('RemoveTrafficControlApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function removeTrafficControlApis(request: RemoveTrafficControlApisRequest): RemoveTrafficControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTrafficControlApisWithOptions(request, runtime);
}

model RemoveSignatureApisRequest = {
  securityToken?: string(name='SecurityToken'),
  signatureId: string(name='SignatureId'),
  groupId: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  stageName: string(name='StageName'),
}

model RemoveSignatureApisResponse = {
  requestId: string(name='RequestId'),
}

async function removeSignatureApisWithOptions(request: RemoveSignatureApisRequest, runtime: Util.RuntimeOptions): RemoveSignatureApisResponse {
  Util.validateModel(request);
  return doRequest('RemoveSignatureApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function removeSignatureApis(request: RemoveSignatureApisRequest): RemoveSignatureApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeSignatureApisWithOptions(request, runtime);
}

model RemoveAppsAuthoritiesRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId: string(name='ApiId'),
  stageName: string(name='StageName'),
  appIds: string(name='AppIds'),
}

model RemoveAppsAuthoritiesResponse = {
  requestId: string(name='RequestId'),
}

async function removeAppsAuthoritiesWithOptions(request: RemoveAppsAuthoritiesRequest, runtime: Util.RuntimeOptions): RemoveAppsAuthoritiesResponse {
  Util.validateModel(request);
  return doRequest('RemoveAppsAuthorities', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function removeAppsAuthorities(request: RemoveAppsAuthoritiesRequest): RemoveAppsAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAppsAuthoritiesWithOptions(request, runtime);
}

model RemoveApisAuthoritiesRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  appId: long(name='AppId'),
  stageName: string(name='StageName'),
  apiIds: string(name='ApiIds'),
  description?: string(name='Description'),
}

model RemoveApisAuthoritiesResponse = {
  requestId: string(name='RequestId'),
}

async function removeApisAuthoritiesWithOptions(request: RemoveApisAuthoritiesRequest, runtime: Util.RuntimeOptions): RemoveApisAuthoritiesResponse {
  Util.validateModel(request);
  return doRequest('RemoveApisAuthorities', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function removeApisAuthorities(request: RemoveApisAuthoritiesRequest): RemoveApisAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeApisAuthoritiesWithOptions(request, runtime);
}

model ModifyTrafficControlRequest = {
  securityToken?: string(name='SecurityToken'),
  trafficControlId: string(name='TrafficControlId'),
  trafficControlName?: string(name='TrafficControlName'),
  trafficControlUnit?: string(name='TrafficControlUnit'),
  apiDefault?: integer(name='ApiDefault'),
  userDefault?: integer(name='UserDefault'),
  appDefault?: integer(name='AppDefault'),
  description?: string(name='Description'),
}

model ModifyTrafficControlResponse = {
  requestId: string(name='RequestId'),
}

async function modifyTrafficControlWithOptions(request: ModifyTrafficControlRequest, runtime: Util.RuntimeOptions): ModifyTrafficControlResponse {
  Util.validateModel(request);
  return doRequest('ModifyTrafficControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyTrafficControl(request: ModifyTrafficControlRequest): ModifyTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTrafficControlWithOptions(request, runtime);
}

model ModifySignatureRequest = {
  securityToken?: string(name='SecurityToken'),
  signatureId: string(name='SignatureId'),
  signatureName?: string(name='SignatureName'),
  signatureKey?: string(name='SignatureKey'),
  signatureSecret?: string(name='SignatureSecret'),
}

model ModifySignatureResponse = {
  requestId: string(name='RequestId'),
  signatureId: string(name='SignatureId'),
  signatureName: string(name='SignatureName'),
}

async function modifySignatureWithOptions(request: ModifySignatureRequest, runtime: Util.RuntimeOptions): ModifySignatureResponse {
  Util.validateModel(request);
  return doRequest('ModifySignature', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifySignature(request: ModifySignatureRequest): ModifySignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySignatureWithOptions(request, runtime);
}

model ModifyAppRequest = {
  securityToken?: string(name='SecurityToken'),
  appId: long(name='AppId'),
  appName?: string(name='AppName'),
  description?: string(name='Description'),
  tag?: [
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ModifyAppResponse = {
  requestId: string(name='RequestId'),
}

async function modifyAppWithOptions(request: ModifyAppRequest, runtime: Util.RuntimeOptions): ModifyAppResponse {
  Util.validateModel(request);
  return doRequest('ModifyApp', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppWithOptions(request, runtime);
}

model ModifyApiGroupRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  description?: string(name='Description'),
  userLogConfig?: string(name='UserLogConfig'),
  customTraceConfig?: string(name='CustomTraceConfig'),
  compatibleFlags?: string(name='CompatibleFlags'),
  passthroughHeaders?: string(name='PassthroughHeaders'),
  defaultDomain?: string(name='DefaultDomain'),
  rpcPattern?: string(name='RpcPattern'),
  tag?: [
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag'),
}

model ModifyApiGroupResponse = {
  requestId: string(name='RequestId'),
  groupId: string(name='GroupId'),
  groupName: string(name='GroupName'),
  subDomain: string(name='SubDomain'),
  description: string(name='Description'),
}

async function modifyApiGroupWithOptions(request: ModifyApiGroupRequest, runtime: Util.RuntimeOptions): ModifyApiGroupResponse {
  Util.validateModel(request);
  return doRequest('ModifyApiGroup', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyApiGroup(request: ModifyApiGroupRequest): ModifyApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiGroupWithOptions(request, runtime);
}

model ModifyApiRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId: string(name='ApiId'),
  apiName: string(name='ApiName'),
  description?: string(name='Description'),
  visibility: string(name='Visibility'),
  authType?: string(name='AuthType'),
  requestConfig: string(name='RequestConfig'),
  serviceConfig: string(name='ServiceConfig'),
  requestParameters?: string(name='RequestParameters'),
  systemParameters?: string(name='SystemParameters'),
  constantParameters?: string(name='ConstantParameters'),
  serviceParameters?: string(name='ServiceParameters'),
  serviceParametersMap?: string(name='ServiceParametersMap'),
  resultType?: string(name='ResultType'),
  resultSample?: string(name='ResultSample'),
  failResultSample?: string(name='FailResultSample'),
  errorCodeSamples?: string(name='ErrorCodeSamples'),
  resultDescriptions?: string(name='ResultDescriptions'),
  openIdConnectConfig?: string(name='OpenIdConnectConfig'),
  allowSignatureMethod?: string(name='AllowSignatureMethod'),
  webSocketApiType?: string(name='WebSocketApiType'),
  resultBodyModel?: string(name='ResultBodyModel'),
  forceNonceCheck?: boolean(name='ForceNonceCheck'),
  disableInternet?: boolean(name='DisableInternet'),
  appCodeAuthType?: string(name='AppCodeAuthType'),
}

model ModifyApiResponse = {
  requestId: string(name='RequestId'),
}

async function modifyApiWithOptions(request: ModifyApiRequest, runtime: Util.RuntimeOptions): ModifyApiResponse {
  Util.validateModel(request);
  return doRequest('ModifyApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyApi(request: ModifyApiRequest): ModifyApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiWithOptions(request, runtime);
}

model DescribeTrafficControlsByApiRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  apiId: string(name='ApiId'),
  stageName: string(name='StageName'),
}

model DescribeTrafficControlsByApiResponse = {
  requestId: string(name='RequestId'),
  trafficControlItems: {
    trafficControlItem: [
      {
        trafficControlItemId: string(name='TrafficControlItemId'),
        trafficControlItemName: string(name='TrafficControlItemName'),
        boundTime: string(name='BoundTime'),
      }
    ](name='TrafficControlItem'),
  }(name='TrafficControlItems'),
}

async function describeTrafficControlsByApiWithOptions(request: DescribeTrafficControlsByApiRequest, runtime: Util.RuntimeOptions): DescribeTrafficControlsByApiResponse {
  Util.validateModel(request);
  return doRequest('DescribeTrafficControlsByApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeTrafficControlsByApi(request: DescribeTrafficControlsByApiRequest): DescribeTrafficControlsByApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrafficControlsByApiWithOptions(request, runtime);
}

model DescribeTrafficControlsRequest = {
  securityToken?: string(name='SecurityToken'),
  trafficControlId?: string(name='TrafficControlId'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  stageName?: string(name='StageName'),
  trafficControlName?: string(name='TrafficControlName'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeTrafficControlsResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  trafficControls: {
    trafficControl: [
      {
        trafficControlId: string(name='TrafficControlId'),
        trafficControlName: string(name='TrafficControlName'),
        description: string(name='Description'),
        trafficControlUnit: string(name='TrafficControlUnit'),
        apiDefault: integer(name='ApiDefault'),
        userDefault: integer(name='UserDefault'),
        appDefault: integer(name='AppDefault'),
        createdTime: string(name='CreatedTime'),
        modifiedTime: string(name='ModifiedTime'),
        specialPolicies: {
          specialPolicy: [
            {
              specialType: string(name='SpecialType'),
              specials: {
                special: [
                  {
                    specialKey: string(name='SpecialKey'),
                    trafficValue: integer(name='TrafficValue'),
                  }
                ](name='Special'),
              }(name='Specials'),
            }
          ](name='SpecialPolicy'),
        }(name='SpecialPolicies'),
      }
    ](name='TrafficControl'),
  }(name='TrafficControls'),
}

async function describeTrafficControlsWithOptions(request: DescribeTrafficControlsRequest, runtime: Util.RuntimeOptions): DescribeTrafficControlsResponse {
  Util.validateModel(request);
  return doRequest('DescribeTrafficControls', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeTrafficControls(request: DescribeTrafficControlsRequest): DescribeTrafficControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrafficControlsWithOptions(request, runtime);
}

model DescribeSystemParametersRequest = {
  securityToken?: string(name='SecurityToken'),
}

model DescribeSystemParametersResponse = {
  requestId: string(name='RequestId'),
  systemParams: {
    systemParamItem: [
      {
        paramName: string(name='ParamName'),
        paramType: string(name='ParamType'),
        demoValue: string(name='DemoValue'),
        description: string(name='Description'),
      }
    ](name='SystemParamItem'),
  }(name='SystemParams'),
}

async function describeSystemParametersWithOptions(request: DescribeSystemParametersRequest, runtime: Util.RuntimeOptions): DescribeSystemParametersResponse {
  Util.validateModel(request);
  return doRequest('DescribeSystemParameters', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeSystemParameters(request: DescribeSystemParametersRequest): DescribeSystemParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSystemParametersWithOptions(request, runtime);
}

model DescribeSignaturesByApiRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  apiId: string(name='ApiId'),
  stageName: string(name='StageName'),
}

model DescribeSignaturesByApiResponse = {
  requestId: string(name='RequestId'),
  signatures: {
    signatureItem: [
      {
        signatureId: string(name='SignatureId'),
        signatureName: string(name='SignatureName'),
        boundTime: string(name='BoundTime'),
      }
    ](name='SignatureItem'),
  }(name='Signatures'),
}

async function describeSignaturesByApiWithOptions(request: DescribeSignaturesByApiRequest, runtime: Util.RuntimeOptions): DescribeSignaturesByApiResponse {
  Util.validateModel(request);
  return doRequest('DescribeSignaturesByApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeSignaturesByApi(request: DescribeSignaturesByApiRequest): DescribeSignaturesByApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSignaturesByApiWithOptions(request, runtime);
}

model DescribeSignaturesRequest = {
  securityToken?: string(name='SecurityToken'),
  signatureId?: string(name='SignatureId'),
  signatureName?: string(name='SignatureName'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeSignaturesResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  signatureInfos: {
    signatureInfo: [
      {
        regionId: string(name='RegionId'),
        signatureId: string(name='SignatureId'),
        signatureName: string(name='SignatureName'),
        signatureKey: string(name='SignatureKey'),
        signatureSecret: string(name='SignatureSecret'),
        createdTime: string(name='CreatedTime'),
        modifiedTime: string(name='ModifiedTime'),
      }
    ](name='SignatureInfo'),
  }(name='SignatureInfos'),
}

async function describeSignaturesWithOptions(request: DescribeSignaturesRequest, runtime: Util.RuntimeOptions): DescribeSignaturesResponse {
  Util.validateModel(request);
  return doRequest('DescribeSignatures', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeSignatures(request: DescribeSignaturesRequest): DescribeSignaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSignaturesWithOptions(request, runtime);
}

model DescribeRegionsRequest = {
  securityToken?: string(name='SecurityToken'),
  language?: string(name='Language'),
}

model DescribeRegionsResponse = {
  requestId: string(name='RequestId'),
  regions: {
    region: [
      {
        regionId: string(name='RegionId'),
        localName: string(name='LocalName'),
        regionEndpoint: string(name='RegionEndpoint'),
      }
    ](name='Region'),
  }(name='Regions'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRegions', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribePurchasedApisRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  visibility?: string(name='Visibility'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
}

model DescribePurchasedApisResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  purchasedApis: {
    purchasedApi: [
      {
        regionId: string(name='RegionId'),
        groupId: string(name='GroupId'),
        groupName: string(name='GroupName'),
        apiId: string(name='ApiId'),
        apiName: string(name='ApiName'),
        stageName: string(name='StageName'),
        description: string(name='Description'),
        purchasedTime: string(name='PurchasedTime'),
        deployedTime: string(name='DeployedTime'),
        modifiedTime: string(name='ModifiedTime'),
        visibility: string(name='Visibility'),
      }
    ](name='PurchasedApi'),
  }(name='PurchasedApis'),
}

async function describePurchasedApisWithOptions(request: DescribePurchasedApisRequest, runtime: Util.RuntimeOptions): DescribePurchasedApisResponse {
  Util.validateModel(request);
  return doRequest('DescribePurchasedApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describePurchasedApis(request: DescribePurchasedApisRequest): DescribePurchasedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApisWithOptions(request, runtime);
}

model DescribePurchasedApiGroupsRequest = {
  securityToken?: string(name='SecurityToken'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribePurchasedApiGroupsResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  purchasedApiGroupAttributes: {
    purchasedApiGroupAttribute: [
      {
        groupId: string(name='GroupId'),
        groupName: string(name='GroupName'),
        description: string(name='Description'),
        purchasedTime: string(name='PurchasedTime'),
        expireTime: string(name='ExpireTime'),
        regionId: string(name='RegionId'),
        billingType: string(name='BillingType'),
        invokeTimesMax: long(name='InvokeTimesMax'),
        invokeTimesNow: long(name='InvokeTimesNow'),
        status: string(name='Status'),
      }
    ](name='PurchasedApiGroupAttribute'),
  }(name='PurchasedApiGroupAttributes'),
}

async function describePurchasedApiGroupsWithOptions(request: DescribePurchasedApiGroupsRequest, runtime: Util.RuntimeOptions): DescribePurchasedApiGroupsResponse {
  Util.validateModel(request);
  return doRequest('DescribePurchasedApiGroups', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describePurchasedApiGroups(request: DescribePurchasedApiGroupsRequest): DescribePurchasedApiGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApiGroupsWithOptions(request, runtime);
}

model DescribePurchasedApiGroupRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
}

model DescribePurchasedApiGroupResponse = {
  requestId: string(name='RequestId'),
  groupId: string(name='GroupId'),
  groupName: string(name='GroupName'),
  description: string(name='Description'),
  purchasedTime: string(name='PurchasedTime'),
  regionId: string(name='RegionId'),
  status: string(name='Status'),
  domains: {
    domainItem: [
      {
        domainName: string(name='DomainName'),
      }
    ](name='DomainItem'),
  }(name='Domains'),
}

async function describePurchasedApiGroupWithOptions(request: DescribePurchasedApiGroupRequest, runtime: Util.RuntimeOptions): DescribePurchasedApiGroupResponse {
  Util.validateModel(request);
  return doRequest('DescribePurchasedApiGroup', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describePurchasedApiGroup(request: DescribePurchasedApiGroupRequest): DescribePurchasedApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApiGroupWithOptions(request, runtime);
}

model DescribeHistoryApisRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  stageName?: string(name='StageName'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  pageSize?: string(name='PageSize'),
  pageNumber?: string(name='PageNumber'),
}

model DescribeHistoryApisResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  apiHisItems: {
    apiHisItem: [
      {
        regionId: string(name='RegionId'),
        apiId: string(name='ApiId'),
        apiName: string(name='ApiName'),
        groupId: string(name='GroupId'),
        groupName: string(name='GroupName'),
        stageName: string(name='StageName'),
        historyVersion: string(name='HistoryVersion'),
        status: string(name='Status'),
        description: string(name='Description'),
        deployedTime: string(name='DeployedTime'),
      }
    ](name='ApiHisItem'),
  }(name='ApiHisItems'),
}

async function describeHistoryApisWithOptions(request: DescribeHistoryApisRequest, runtime: Util.RuntimeOptions): DescribeHistoryApisResponse {
  Util.validateModel(request);
  return doRequest('DescribeHistoryApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeHistoryApis(request: DescribeHistoryApisRequest): DescribeHistoryApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHistoryApisWithOptions(request, runtime);
}

model DescribeDomainsResolutionRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  domainNames: string(name='DomainNames'),
}

model DescribeDomainsResolutionResponse = {
  requestId: string(name='RequestId'),
  groupId: string(name='GroupId'),
  domainResolutions: {
    domainResolution: [
      {
        domainName: string(name='DomainName'),
        domainResolutionStatus: string(name='DomainResolutionStatus'),
      }
    ](name='DomainResolution'),
  }(name='DomainResolutions'),
}

async function describeDomainsResolutionWithOptions(request: DescribeDomainsResolutionRequest, runtime: Util.RuntimeOptions): DescribeDomainsResolutionResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainsResolution', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeDomainsResolution(request: DescribeDomainsResolutionRequest): DescribeDomainsResolutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsResolutionWithOptions(request, runtime);
}

model DescribeDomainRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  domainName: string(name='DomainName'),
}

model DescribeDomainResponse = {
  requestId: string(name='RequestId'),
  groupId: string(name='GroupId'),
  domainName: string(name='DomainName'),
  subDomain: string(name='SubDomain'),
  certificateId: string(name='CertificateId'),
  certificateName: string(name='CertificateName'),
  certificateBody: string(name='CertificateBody'),
  certificatePrivateKey: string(name='CertificatePrivateKey'),
  domainBindingStatus: string(name='DomainBindingStatus'),
  domainCNAMEStatus: string(name='DomainCNAMEStatus'),
  domainLegalStatus: string(name='DomainLegalStatus'),
  domainWebSocketStatus: string(name='DomainWebSocketStatus'),
  domainRemark: string(name='DomainRemark'),
}

async function describeDomainWithOptions(request: DescribeDomainRequest, runtime: Util.RuntimeOptions): DescribeDomainResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomain', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeDomain(request: DescribeDomainRequest): DescribeDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainWithOptions(request, runtime);
}

model DescribeDeployedApisRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
  tag?: [
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag'),
  enableTagAuth?: boolean(name='EnableTagAuth'),
}

model DescribeDeployedApisResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  deployedApis: {
    deployedApiItem: [
      {
        regionId: string(name='RegionId'),
        apiId: string(name='ApiId'),
        apiName: string(name='ApiName'),
        groupId: string(name='GroupId'),
        groupName: string(name='GroupName'),
        stageName: string(name='StageName'),
        visibility: string(name='Visibility'),
        description: string(name='Description'),
        deployedTime: string(name='DeployedTime'),
      }
    ](name='DeployedApiItem'),
  }(name='DeployedApis'),
}

async function describeDeployedApisWithOptions(request: DescribeDeployedApisRequest, runtime: Util.RuntimeOptions): DescribeDeployedApisResponse {
  Util.validateModel(request);
  return doRequest('DescribeDeployedApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeDeployedApis(request: DescribeDeployedApisRequest): DescribeDeployedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeployedApisWithOptions(request, runtime);
}

model DescribeDeployedApiRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId: string(name='ApiId'),
  stageName: string(name='StageName'),
}

model DescribeDeployedApiResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
  groupId: string(name='GroupId'),
  groupName: string(name='GroupName'),
  stageName: string(name='StageName'),
  apiId: string(name='ApiId'),
  apiName: string(name='ApiName'),
  description: string(name='Description'),
  visibility: string(name='Visibility'),
  authType: string(name='AuthType'),
  resultType: string(name='ResultType'),
  resultSample: string(name='ResultSample'),
  failResultSample: string(name='FailResultSample'),
  deployedTime: string(name='DeployedTime'),
  allowSignatureMethod: string(name='AllowSignatureMethod'),
  resultBodyModel: string(name='ResultBodyModel'),
  forceNonceCheck: boolean(name='ForceNonceCheck'),
  disableInternet: boolean(name='DisableInternet'),
  errorCodeSamples: {
    errorCodeSample: [
      {
        code: string(name='Code'),
        message: string(name='Message'),
        description: string(name='Description'),
      }
    ](name='ErrorCodeSample'),
  }(name='ErrorCodeSamples'),
  resultDescriptions: {
    resultDescription: [
      {
        id: string(name='Id'),
        pid: string(name='Pid'),
        hasChild: boolean(name='HasChild'),
        key: string(name='Key'),
        name: string(name='Name'),
        mandatory: boolean(name='Mandatory'),
        type: string(name='Type'),
        description: string(name='Description'),
      }
    ](name='ResultDescription'),
  }(name='ResultDescriptions'),
  systemParameters: {
    systemParameter: [
      {
        parameterName: string(name='ParameterName'),
        serviceParameterName: string(name='ServiceParameterName'),
        location: string(name='Location'),
        demoValue: string(name='DemoValue'),
        description: string(name='Description'),
      }
    ](name='SystemParameter'),
  }(name='SystemParameters'),
  customSystemParameters: {
    customSystemParameter: [
      {
        parameterName: string(name='ParameterName'),
        serviceParameterName: string(name='ServiceParameterName'),
        location: string(name='Location'),
        demoValue: string(name='DemoValue'),
        description: string(name='Description'),
      }
    ](name='CustomSystemParameter'),
  }(name='CustomSystemParameters'),
  constantParameters: {
    constantParameter: [
      {
        serviceParameterName: string(name='ServiceParameterName'),
        constantValue: string(name='ConstantValue'),
        location: string(name='Location'),
        description: string(name='Description'),
      }
    ](name='ConstantParameter'),
  }(name='ConstantParameters'),
  requestParameters: {
    requestParameter: [
      {
        apiParameterName: string(name='ApiParameterName'),
        location: string(name='Location'),
        parameterType: string(name='ParameterType'),
        required: string(name='Required'),
        defaultValue: string(name='DefaultValue'),
        demoValue: string(name='DemoValue'),
        maxValue: long(name='MaxValue'),
        minValue: long(name='MinValue'),
        maxLength: long(name='MaxLength'),
        minLength: long(name='MinLength'),
        regularExpression: string(name='RegularExpression'),
        jsonScheme: string(name='JsonScheme'),
        enumValue: string(name='EnumValue'),
        docShow: string(name='DocShow'),
        docOrder: integer(name='DocOrder'),
        description: string(name='Description'),
        arrayItemsType: string(name='ArrayItemsType'),
      }
    ](name='RequestParameter'),
  }(name='RequestParameters'),
  serviceParameters: {
    serviceParameter: [
      {
        serviceParameterName: string(name='ServiceParameterName'),
        location: string(name='Location'),
        parameterType: string(name='ParameterType'),
      }
    ](name='ServiceParameter'),
  }(name='ServiceParameters'),
  serviceParametersMap: {
    serviceParameterMap: [
      {
        serviceParameterName: string(name='ServiceParameterName'),
        requestParameterName: string(name='RequestParameterName'),
      }
    ](name='ServiceParameterMap'),
  }(name='ServiceParametersMap'),
  requestConfig: {
    requestProtocol: string(name='RequestProtocol'),
    requestHttpMethod: string(name='RequestHttpMethod'),
    requestPath: string(name='RequestPath'),
    bodyFormat: string(name='BodyFormat'),
    postBodyDescription: string(name='PostBodyDescription'),
    requestMode: string(name='RequestMode'),
    bodyModel: string(name='BodyModel'),
  }(name='RequestConfig'),
  serviceConfig: {
    serviceProtocol: string(name='ServiceProtocol'),
    serviceAddress: string(name='ServiceAddress'),
    serviceHttpMethod: string(name='ServiceHttpMethod'),
    servicePath: string(name='ServicePath'),
    serviceTimeout: integer(name='ServiceTimeout'),
    mock: string(name='Mock'),
    mockResult: string(name='MockResult'),
    serviceVpcEnable: string(name='ServiceVpcEnable'),
    mockStatusCode: integer(name='MockStatusCode'),
    vpcId: string(name='VpcId'),
    mockHeaders: {
      mockHeader: [
        {
          headerName: string(name='HeaderName'),
          headerValue: string(name='HeaderValue'),
        }
      ](name='MockHeader'),
    }(name='MockHeaders'),
    vpcConfig: {
      name: string(name='Name'),
      vpcId: string(name='VpcId'),
      instanceId: string(name='InstanceId'),
      port: integer(name='Port'),
    }(name='VpcConfig'),
    functionComputeConfig: {
      regionId: string(name='RegionId'),
      serviceName: string(name='ServiceName'),
      functionName: string(name='FunctionName'),
      roleArn: string(name='RoleArn'),
      qualifier: string(name='Qualifier'),
      fcBaseUrl: string(name='FcBaseUrl'),
      fcType: string(name='FcType'),
      path: string(name='Path'),
      method: string(name='Method'),
      contentTypeCatagory: string(name='ContentTypeCatagory'),
      contentTypeValue: string(name='ContentTypeValue'),
    }(name='FunctionComputeConfig'),
  }(name='ServiceConfig'),
  openIdConnectConfig: {
    openIdApiType: string(name='OpenIdApiType'),
    idTokenParamName: string(name='IdTokenParamName'),
    publicKeyId: string(name='PublicKeyId'),
    publicKey: string(name='PublicKey'),
  }(name='OpenIdConnectConfig'),
}

async function describeDeployedApiWithOptions(request: DescribeDeployedApiRequest, runtime: Util.RuntimeOptions): DescribeDeployedApiResponse {
  Util.validateModel(request);
  return doRequest('DescribeDeployedApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeDeployedApi(request: DescribeDeployedApiRequest): DescribeDeployedApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeployedApiWithOptions(request, runtime);
}

model DescribeAuthorizedAppsRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
  apiId: string(name='ApiId'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
  appId?: long(name='AppId'),
  appName?: string(name='AppName'),
  appOwnerId?: long(name='AppOwnerId'),
}

model DescribeAuthorizedAppsResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  authorizedApps: {
    authorizedApp: [
      {
        stageName: string(name='StageName'),
        appId: long(name='AppId'),
        appName: string(name='AppName'),
        operator: string(name='Operator'),
        authorizationSource: string(name='AuthorizationSource'),
        description: string(name='Description'),
        authorizedTime: string(name='AuthorizedTime'),
        authVaildTime: string(name='AuthVaildTime'),
      }
    ](name='AuthorizedApp'),
  }(name='AuthorizedApps'),
}

async function describeAuthorizedAppsWithOptions(request: DescribeAuthorizedAppsRequest, runtime: Util.RuntimeOptions): DescribeAuthorizedAppsResponse {
  Util.validateModel(request);
  return doRequest('DescribeAuthorizedApps', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeAuthorizedApps(request: DescribeAuthorizedAppsRequest): DescribeAuthorizedAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuthorizedAppsWithOptions(request, runtime);
}

model DescribeAuthorizedApisRequest = {
  securityToken?: string(name='SecurityToken'),
  appId: long(name='AppId'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeAuthorizedApisResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  authorizedApis: {
    authorizedApi: [
      {
        regionId: string(name='RegionId'),
        groupId: string(name='GroupId'),
        groupName: string(name='GroupName'),
        stageName: string(name='StageName'),
        operator: string(name='Operator'),
        apiId: string(name='ApiId'),
        apiName: string(name='ApiName'),
        authorizationSource: string(name='AuthorizationSource'),
        description: string(name='Description'),
        authorizedTime: string(name='AuthorizedTime'),
        authVaildTime: string(name='AuthVaildTime'),
      }
    ](name='AuthorizedApi'),
  }(name='AuthorizedApis'),
}

async function describeAuthorizedApisWithOptions(request: DescribeAuthorizedApisRequest, runtime: Util.RuntimeOptions): DescribeAuthorizedApisResponse {
  Util.validateModel(request);
  return doRequest('DescribeAuthorizedApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeAuthorizedApis(request: DescribeAuthorizedApisRequest): DescribeAuthorizedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuthorizedApisWithOptions(request, runtime);
}

model DescribeAppSecurityRequest = {
  securityToken?: string(name='SecurityToken'),
  appId: long(name='AppId'),
  tag?: [
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeAppSecurityResponse = {
  requestId: string(name='RequestId'),
  appKey: string(name='AppKey'),
  appSecret: string(name='AppSecret'),
  createdTime: string(name='CreatedTime'),
  modifiedTime: string(name='ModifiedTime'),
  appCode: string(name='AppCode'),
}

async function describeAppSecurityWithOptions(request: DescribeAppSecurityRequest, runtime: Util.RuntimeOptions): DescribeAppSecurityResponse {
  Util.validateModel(request);
  return doRequest('DescribeAppSecurity', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeAppSecurity(request: DescribeAppSecurityRequest): DescribeAppSecurityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppSecurityWithOptions(request, runtime);
}

model DescribeAppsRequest = {
  securityToken?: string(name='SecurityToken'),
  appId?: long(name='AppId'),
  appOwner?: long(name='AppOwner'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeAppsResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  apps: {
    appItem: [
      {
        appId: long(name='AppId'),
        appName: string(name='AppName'),
        description: string(name='Description'),
      }
    ](name='AppItem'),
  }(name='Apps'),
}

async function describeAppsWithOptions(request: DescribeAppsRequest, runtime: Util.RuntimeOptions): DescribeAppsResponse {
  Util.validateModel(request);
  return doRequest('DescribeApps', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppsWithOptions(request, runtime);
}

model DescribeAppAttributesRequest = {
  securityToken?: string(name='SecurityToken'),
  appId?: long(name='AppId'),
  appName?: string(name='AppName'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
  sort?: string(name='Sort'),
  tag?: [
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  enableTagAuth?: boolean(name='EnableTagAuth'),
}

model DescribeAppAttributesResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  apps: {
    appAttribute: [
      {
        appId: long(name='AppId'),
        appName: string(name='AppName'),
        description: string(name='Description'),
        createdTime: string(name='CreatedTime'),
        modifiedTime: string(name='ModifiedTime'),
        tags: {
          tagInfo: [
            {
              key: string(name='Key'),
              value: string(name='Value'),
            }
          ](name='TagInfo'),
        }(name='Tags'),
      }
    ](name='AppAttribute'),
  }(name='Apps'),
}

async function describeAppAttributesWithOptions(request: DescribeAppAttributesRequest, runtime: Util.RuntimeOptions): DescribeAppAttributesResponse {
  Util.validateModel(request);
  return doRequest('DescribeAppAttributes', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeAppAttributes(request: DescribeAppAttributesRequest): DescribeAppAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppAttributesWithOptions(request, runtime);
}

model DescribeApiTrafficDataRequest = {
  securityToken?: string(name='SecurityToken'),
  apiId: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model DescribeApiTrafficDataResponse = {
  requestId: string(name='RequestId'),
  callUploads: {
    monitorItem: [
      {
        itemTime: string(name='ItemTime'),
        itemValue: string(name='ItemValue'),
      }
    ](name='MonitorItem'),
  }(name='CallUploads'),
  callDownloads: {
    monitorItem: [
      {
        itemTime: string(name='ItemTime'),
        itemValue: string(name='ItemValue'),
      }
    ](name='MonitorItem'),
  }(name='CallDownloads'),
}

async function describeApiTrafficDataWithOptions(request: DescribeApiTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeApiTrafficDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiTrafficData', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiTrafficData(request: DescribeApiTrafficDataRequest): DescribeApiTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiTrafficDataWithOptions(request, runtime);
}

model DescribeApiTrafficControlsRequest = {
  securityToken?: string(name='SecurityToken'),
  stageName: string(name='StageName'),
  groupId: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeApiTrafficControlsResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  apiTrafficControls: {
    apiTrafficControlItem: [
      {
        apiId: string(name='ApiId'),
        apiName: string(name='ApiName'),
        trafficControlId: string(name='TrafficControlId'),
        trafficControlName: string(name='TrafficControlName'),
        boundTime: string(name='BoundTime'),
      }
    ](name='ApiTrafficControlItem'),
  }(name='ApiTrafficControls'),
}

async function describeApiTrafficControlsWithOptions(request: DescribeApiTrafficControlsRequest, runtime: Util.RuntimeOptions): DescribeApiTrafficControlsResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiTrafficControls', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiTrafficControls(request: DescribeApiTrafficControlsRequest): DescribeApiTrafficControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiTrafficControlsWithOptions(request, runtime);
}

model DescribeApiSignaturesRequest = {
  securityToken?: string(name='SecurityToken'),
  stageName: string(name='StageName'),
  groupId: string(name='GroupId'),
  apiIds?: string(name='ApiIds'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeApiSignaturesResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  apiSignatures: {
    apiSignatureItem: [
      {
        apiId: string(name='ApiId'),
        apiName: string(name='ApiName'),
        signatureId: string(name='SignatureId'),
        signatureName: string(name='SignatureName'),
        boundTime: string(name='BoundTime'),
      }
    ](name='ApiSignatureItem'),
  }(name='ApiSignatures'),
}

async function describeApiSignaturesWithOptions(request: DescribeApiSignaturesRequest, runtime: Util.RuntimeOptions): DescribeApiSignaturesResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiSignatures', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiSignatures(request: DescribeApiSignaturesRequest): DescribeApiSignaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiSignaturesWithOptions(request, runtime);
}

model DescribeApisByTrafficControlRequest = {
  securityToken?: string(name='SecurityToken'),
  trafficControlId: string(name='TrafficControlId'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
}

model DescribeApisByTrafficControlResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  apiInfos: {
    apiInfo: [
      {
        regionId: string(name='RegionId'),
        groupId: string(name='GroupId'),
        groupName: string(name='GroupName'),
        stageName: string(name='StageName'),
        apiId: string(name='ApiId'),
        apiName: string(name='ApiName'),
        description: string(name='Description'),
        visibility: string(name='Visibility'),
        boundTime: string(name='BoundTime'),
      }
    ](name='ApiInfo'),
  }(name='ApiInfos'),
}

async function describeApisByTrafficControlWithOptions(request: DescribeApisByTrafficControlRequest, runtime: Util.RuntimeOptions): DescribeApisByTrafficControlResponse {
  Util.validateModel(request);
  return doRequest('DescribeApisByTrafficControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApisByTrafficControl(request: DescribeApisByTrafficControlRequest): DescribeApisByTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisByTrafficControlWithOptions(request, runtime);
}

model DescribeApisBySignatureRequest = {
  securityToken?: string(name='SecurityToken'),
  signatureId: string(name='SignatureId'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
}

model DescribeApisBySignatureResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  apiInfos: {
    apiInfo: [
      {
        regionId: string(name='RegionId'),
        groupId: string(name='GroupId'),
        groupName: string(name='GroupName'),
        stageName: string(name='StageName'),
        apiId: string(name='ApiId'),
        apiName: string(name='ApiName'),
        description: string(name='Description'),
        visibility: string(name='Visibility'),
        boundTime: string(name='BoundTime'),
      }
    ](name='ApiInfo'),
  }(name='ApiInfos'),
}

async function describeApisBySignatureWithOptions(request: DescribeApisBySignatureRequest, runtime: Util.RuntimeOptions): DescribeApisBySignatureResponse {
  Util.validateModel(request);
  return doRequest('DescribeApisBySignature', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApisBySignature(request: DescribeApisBySignatureRequest): DescribeApisBySignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisBySignatureWithOptions(request, runtime);
}

model DescribeApisRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  catalogId?: string(name='CatalogId'),
  visibility?: string(name='Visibility'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
  enableTagAuth?: boolean(name='EnableTagAuth'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeApisResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  apiSummarys: {
    apiSummary: [
      {
        regionId: string(name='RegionId'),
        groupId: string(name='GroupId'),
        groupName: string(name='GroupName'),
        apiId: string(name='ApiId'),
        apiName: string(name='ApiName'),
        visibility: string(name='Visibility'),
        description: string(name='Description'),
        createdTime: string(name='CreatedTime'),
        modifiedTime: string(name='ModifiedTime'),
      }
    ](name='ApiSummary'),
  }(name='ApiSummarys'),
}

async function describeApisWithOptions(request: DescribeApisRequest, runtime: Util.RuntimeOptions): DescribeApisResponse {
  Util.validateModel(request);
  return doRequest('DescribeApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApis(request: DescribeApisRequest): DescribeApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisWithOptions(request, runtime);
}

model DescribeApiQpsDataRequest = {
  securityToken?: string(name='SecurityToken'),
  apiId: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model DescribeApiQpsDataResponse = {
  requestId: string(name='RequestId'),
  callSuccesses: {
    monitorItem: [
      {
        itemTime: string(name='ItemTime'),
        itemValue: string(name='ItemValue'),
      }
    ](name='MonitorItem'),
  }(name='CallSuccesses'),
  callFails: {
    monitorItem: [
      {
        itemTime: string(name='ItemTime'),
        itemValue: string(name='ItemValue'),
      }
    ](name='MonitorItem'),
  }(name='CallFails'),
}

async function describeApiQpsDataWithOptions(request: DescribeApiQpsDataRequest, runtime: Util.RuntimeOptions): DescribeApiQpsDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiQpsData', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiQpsData(request: DescribeApiQpsDataRequest): DescribeApiQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiQpsDataWithOptions(request, runtime);
}

model DescribeApiLatencyDataRequest = {
  securityToken?: string(name='SecurityToken'),
  apiId: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model DescribeApiLatencyDataResponse = {
  requestId: string(name='RequestId'),
  callLatencys: {
    monitorItem: [
      {
        itemTime: string(name='ItemTime'),
        itemValue: string(name='ItemValue'),
      }
    ](name='MonitorItem'),
  }(name='CallLatencys'),
}

async function describeApiLatencyDataWithOptions(request: DescribeApiLatencyDataRequest, runtime: Util.RuntimeOptions): DescribeApiLatencyDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiLatencyData', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiLatencyData(request: DescribeApiLatencyDataRequest): DescribeApiLatencyDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiLatencyDataWithOptions(request, runtime);
}

model DescribeApiHistoryRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId: string(name='ApiId'),
  stageName: string(name='StageName'),
  historyVersion: string(name='HistoryVersion'),
}

model DescribeApiHistoryResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
  groupId: string(name='GroupId'),
  groupName: string(name='GroupName'),
  stageName: string(name='StageName'),
  apiId: string(name='ApiId'),
  apiName: string(name='ApiName'),
  description: string(name='Description'),
  historyVersion: string(name='HistoryVersion'),
  status: string(name='Status'),
  visibility: string(name='Visibility'),
  authType: string(name='AuthType'),
  resultType: string(name='ResultType'),
  resultSample: string(name='ResultSample'),
  failResultSample: string(name='FailResultSample'),
  deployedTime: string(name='DeployedTime'),
  allowSignatureMethod: string(name='AllowSignatureMethod'),
  resultBodyModel: string(name='ResultBodyModel'),
  forceNonceCheck: boolean(name='ForceNonceCheck'),
  disableInternet: boolean(name='DisableInternet'),
  errorCodeSamples: {
    errorCodeSample: [
      {
        code: string(name='Code'),
        message: string(name='Message'),
        description: string(name='Description'),
      }
    ](name='ErrorCodeSample'),
  }(name='ErrorCodeSamples'),
  resultDescriptions: {
    resultDescription: [
      {
        id: string(name='Id'),
        pid: string(name='Pid'),
        hasChild: boolean(name='HasChild'),
        key: string(name='Key'),
        name: string(name='Name'),
        mandatory: boolean(name='Mandatory'),
        type: string(name='Type'),
        description: string(name='Description'),
      }
    ](name='ResultDescription'),
  }(name='ResultDescriptions'),
  systemParameters: {
    systemParameter: [
      {
        parameterName: string(name='ParameterName'),
        serviceParameterName: string(name='ServiceParameterName'),
        location: string(name='Location'),
        demoValue: string(name='DemoValue'),
        description: string(name='Description'),
      }
    ](name='SystemParameter'),
  }(name='SystemParameters'),
  customSystemParameters: {
    customSystemParameter: [
      {
        parameterName: string(name='ParameterName'),
        serviceParameterName: string(name='ServiceParameterName'),
        location: string(name='Location'),
        demoValue: string(name='DemoValue'),
        description: string(name='Description'),
      }
    ](name='CustomSystemParameter'),
  }(name='CustomSystemParameters'),
  constantParameters: {
    constantParameter: [
      {
        serviceParameterName: string(name='ServiceParameterName'),
        constantValue: string(name='ConstantValue'),
        location: string(name='Location'),
        description: string(name='Description'),
      }
    ](name='ConstantParameter'),
  }(name='ConstantParameters'),
  requestParameters: {
    requestParameter: [
      {
        apiParameterName: string(name='ApiParameterName'),
        location: string(name='Location'),
        parameterType: string(name='ParameterType'),
        required: string(name='Required'),
        defaultValue: string(name='DefaultValue'),
        demoValue: string(name='DemoValue'),
        maxValue: long(name='MaxValue'),
        minValue: long(name='MinValue'),
        maxLength: long(name='MaxLength'),
        minLength: long(name='MinLength'),
        regularExpression: string(name='RegularExpression'),
        jsonScheme: string(name='JsonScheme'),
        enumValue: string(name='EnumValue'),
        docShow: string(name='DocShow'),
        docOrder: integer(name='DocOrder'),
        description: string(name='Description'),
        arrayItemsType: string(name='ArrayItemsType'),
      }
    ](name='RequestParameter'),
  }(name='RequestParameters'),
  serviceParameters: {
    serviceParameter: [
      {
        serviceParameterName: string(name='ServiceParameterName'),
        location: string(name='Location'),
        parameterType: string(name='ParameterType'),
      }
    ](name='ServiceParameter'),
  }(name='ServiceParameters'),
  serviceParametersMap: {
    serviceParameterMap: [
      {
        serviceParameterName: string(name='ServiceParameterName'),
        requestParameterName: string(name='RequestParameterName'),
      }
    ](name='ServiceParameterMap'),
  }(name='ServiceParametersMap'),
  requestConfig: {
    requestProtocol: string(name='RequestProtocol'),
    requestHttpMethod: string(name='RequestHttpMethod'),
    requestPath: string(name='RequestPath'),
    bodyFormat: string(name='BodyFormat'),
    postBodyDescription: string(name='PostBodyDescription'),
    requestMode: string(name='RequestMode'),
    bodyModel: string(name='BodyModel'),
  }(name='RequestConfig'),
  serviceConfig: {
    serviceProtocol: string(name='ServiceProtocol'),
    serviceAddress: string(name='ServiceAddress'),
    serviceHttpMethod: string(name='ServiceHttpMethod'),
    servicePath: string(name='ServicePath'),
    serviceTimeout: integer(name='ServiceTimeout'),
    mock: string(name='Mock'),
    mockResult: string(name='MockResult'),
    serviceVpcEnable: string(name='ServiceVpcEnable'),
    mockStatusCode: integer(name='MockStatusCode'),
    vpcId: string(name='VpcId'),
    mockHeaders: {
      mockHeader: [
        {
          headerName: string(name='HeaderName'),
          headerValue: string(name='HeaderValue'),
        }
      ](name='MockHeader'),
    }(name='MockHeaders'),
    vpcConfig: {
      name: string(name='Name'),
      vpcId: string(name='VpcId'),
      instanceId: string(name='InstanceId'),
      port: integer(name='Port'),
    }(name='VpcConfig'),
    functionComputeConfig: {
      regionId: string(name='RegionId'),
      serviceName: string(name='ServiceName'),
      functionName: string(name='FunctionName'),
      roleArn: string(name='RoleArn'),
      qualifier: string(name='Qualifier'),
      fcBaseUrl: string(name='FcBaseUrl'),
      fcType: string(name='FcType'),
      path: string(name='Path'),
      method: string(name='Method'),
      contentTypeCatagory: string(name='ContentTypeCatagory'),
      contentTypeValue: string(name='ContentTypeValue'),
    }(name='FunctionComputeConfig'),
  }(name='ServiceConfig'),
  openIdConnectConfig: {
    openIdApiType: string(name='OpenIdApiType'),
    idTokenParamName: string(name='IdTokenParamName'),
    publicKeyId: string(name='PublicKeyId'),
    publicKey: string(name='PublicKey'),
  }(name='OpenIdConnectConfig'),
}

async function describeApiHistoryWithOptions(request: DescribeApiHistoryRequest, runtime: Util.RuntimeOptions): DescribeApiHistoryResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiHistory', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiHistory(request: DescribeApiHistoryRequest): DescribeApiHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiHistoryWithOptions(request, runtime);
}

model DescribeApiGroupsRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  enableTagAuth?: boolean(name='EnableTagAuth'),
  instanceId?: string(name='InstanceId'),
  sort?: string(name='Sort'),
}

model DescribeApiGroupsResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  pageSize: integer(name='PageSize'),
  pageNumber: integer(name='PageNumber'),
  apiGroupAttributes: {
    apiGroupAttribute: [
      {
        groupId: string(name='GroupId'),
        groupName: string(name='GroupName'),
        subDomain: string(name='SubDomain'),
        description: string(name='Description'),
        createdTime: string(name='CreatedTime'),
        modifiedTime: string(name='ModifiedTime'),
        regionId: string(name='RegionId'),
        trafficLimit: integer(name='TrafficLimit'),
        billingStatus: string(name='BillingStatus'),
        illegalStatus: string(name='IllegalStatus'),
        instanceId: string(name='InstanceId'),
        instanceType: string(name='InstanceType'),
        httpsPolicy: string(name='HttpsPolicy'),
        tags: {
          tagInfo: [
            {
              key: string(name='Key'),
              value: string(name='Value'),
            }
          ](name='TagInfo'),
        }(name='Tags'),
      }
    ](name='ApiGroupAttribute'),
  }(name='ApiGroupAttributes'),
}

async function describeApiGroupsWithOptions(request: DescribeApiGroupsRequest, runtime: Util.RuntimeOptions): DescribeApiGroupsResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiGroups', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiGroups(request: DescribeApiGroupsRequest): DescribeApiGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiGroupsWithOptions(request, runtime);
}

model DescribeApiGroupRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  tag?: [
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeApiGroupResponse = {
  requestId: string(name='RequestId'),
  groupId: string(name='GroupId'),
  groupName: string(name='GroupName'),
  subDomain: string(name='SubDomain'),
  description: string(name='Description'),
  createdTime: string(name='CreatedTime'),
  modifiedTime: string(name='ModifiedTime'),
  regionId: string(name='RegionId'),
  status: string(name='Status'),
  billingStatus: string(name='BillingStatus'),
  illegalStatus: string(name='IllegalStatus'),
  ipv6Status: string(name='Ipv6Status'),
  trafficLimit: integer(name='TrafficLimit'),
  vpcDomain: string(name='VpcDomain'),
  instanceType: string(name='InstanceType'),
  instanceId: string(name='InstanceId'),
  instanceVipList: string(name='InstanceVipList'),
  httpsPolicy: string(name='HttpsPolicy'),
  userLogConfig: string(name='UserLogConfig'),
  customTraceConfig: string(name='CustomTraceConfig'),
  passthroughHeaders: string(name='PassthroughHeaders'),
  defaultDomain: string(name='DefaultDomain'),
  rpcPattern: string(name='RpcPattern'),
  compatibleFlags: string(name='CompatibleFlags'),
  classicVpcSubDomain: string(name='ClassicVpcSubDomain'),
  customDomains: {
    domainItem: [
      {
        domainName: string(name='DomainName'),
        certificateId: string(name='CertificateId'),
        certificateName: string(name='CertificateName'),
        domainCNAMEStatus: string(name='DomainCNAMEStatus'),
        domainBindingStatus: string(name='DomainBindingStatus'),
        bindStageName: string(name='BindStageName'),
        domainLegalStatus: string(name='DomainLegalStatus'),
        domainWebSocketStatus: string(name='DomainWebSocketStatus'),
        domainRemark: string(name='DomainRemark'),
      }
    ](name='DomainItem'),
  }(name='CustomDomains'),
  stageItems: {
    stageInfo: [
      {
        stageId: string(name='StageId'),
        stageName: string(name='StageName'),
        description: string(name='Description'),
      }
    ](name='StageInfo'),
  }(name='StageItems'),
}

async function describeApiGroupWithOptions(request: DescribeApiGroupRequest, runtime: Util.RuntimeOptions): DescribeApiGroupResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiGroup', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiGroup(request: DescribeApiGroupRequest): DescribeApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiGroupWithOptions(request, runtime);
}

model DescribeApiErrorDataRequest = {
  securityToken?: string(name='SecurityToken'),
  apiId: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model DescribeApiErrorDataResponse = {
  requestId: string(name='RequestId'),
  clientErrors: {
    monitorItem: [
      {
        itemTime: string(name='ItemTime'),
        itemValue: string(name='ItemValue'),
      }
    ](name='MonitorItem'),
  }(name='ClientErrors'),
  serverErrors: {
    monitorItem: [
      {
        itemTime: string(name='ItemTime'),
        itemValue: string(name='ItemValue'),
      }
    ](name='MonitorItem'),
  }(name='ServerErrors'),
}

async function describeApiErrorDataWithOptions(request: DescribeApiErrorDataRequest, runtime: Util.RuntimeOptions): DescribeApiErrorDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiErrorData', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiErrorData(request: DescribeApiErrorDataRequest): DescribeApiErrorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiErrorDataWithOptions(request, runtime);
}

model DescribeApiDocRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
  apiId: string(name='ApiId'),
}

model DescribeApiDocResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
  groupId: string(name='GroupId'),
  groupName: string(name='GroupName'),
  stageName: string(name='StageName'),
  apiId: string(name='ApiId'),
  apiName: string(name='ApiName'),
  description: string(name='Description'),
  visibility: string(name='Visibility'),
  authType: string(name='AuthType'),
  resultType: string(name='ResultType'),
  resultSample: string(name='ResultSample'),
  failResultSample: string(name='FailResultSample'),
  deployedTime: string(name='DeployedTime'),
  forceNonceCheck: boolean(name='ForceNonceCheck'),
  disableInternet: boolean(name='DisableInternet'),
  errorCodeSamples: {
    errorCodeSample: [
      {
        code: string(name='Code'),
        message: string(name='Message'),
        description: string(name='Description'),
      }
    ](name='ErrorCodeSample'),
  }(name='ErrorCodeSamples'),
  resultDescriptions: {
    resultDescription: [
      {
        id: string(name='Id'),
        pid: string(name='Pid'),
        hasChild: boolean(name='HasChild'),
        key: string(name='Key'),
        name: string(name='Name'),
        mandatory: boolean(name='Mandatory'),
        type: string(name='Type'),
        description: string(name='Description'),
      }
    ](name='ResultDescription'),
  }(name='ResultDescriptions'),
  requestParameters: {
    requestParameter: [
      {
        apiParameterName: string(name='ApiParameterName'),
        location: string(name='Location'),
        parameterType: string(name='ParameterType'),
        required: string(name='Required'),
        defaultValue: string(name='DefaultValue'),
        demoValue: string(name='DemoValue'),
        maxValue: long(name='MaxValue'),
        minValue: long(name='MinValue'),
        maxLength: long(name='MaxLength'),
        minLength: long(name='MinLength'),
        regularExpression: string(name='RegularExpression'),
        jsonScheme: string(name='JsonScheme'),
        enumValue: string(name='EnumValue'),
        docShow: string(name='DocShow'),
        docOrder: integer(name='DocOrder'),
        description: string(name='Description'),
        arrayItemsType: string(name='ArrayItemsType'),
      }
    ](name='RequestParameter'),
  }(name='RequestParameters'),
  requestConfig: {
    requestProtocol: string(name='RequestProtocol'),
    requestHttpMethod: string(name='RequestHttpMethod'),
    requestPath: string(name='RequestPath'),
    bodyFormat: string(name='BodyFormat'),
    postBodyDescription: string(name='PostBodyDescription'),
    requestMode: string(name='RequestMode'),
  }(name='RequestConfig'),
}

async function describeApiDocWithOptions(request: DescribeApiDocRequest, runtime: Util.RuntimeOptions): DescribeApiDocResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiDoc', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiDoc(request: DescribeApiDocRequest): DescribeApiDocResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiDocWithOptions(request, runtime);
}

model DescribeApiRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId: string(name='ApiId'),
}

model DescribeApiResponse = {
  requestId: string(name='RequestId'),
  regionId: string(name='RegionId'),
  apiId: string(name='ApiId'),
  apiName: string(name='ApiName'),
  groupId: string(name='GroupId'),
  groupName: string(name='GroupName'),
  visibility: string(name='Visibility'),
  authType: string(name='AuthType'),
  resultType: string(name='ResultType'),
  resultSample: string(name='ResultSample'),
  failResultSample: string(name='FailResultSample'),
  createdTime: string(name='CreatedTime'),
  modifiedTime: string(name='ModifiedTime'),
  description: string(name='Description'),
  mock: string(name='Mock'),
  mockResult: string(name='MockResult'),
  allowSignatureMethod: string(name='AllowSignatureMethod'),
  webSocketApiType: string(name='WebSocketApiType'),
  resultBodyModel: string(name='ResultBodyModel'),
  forceNonceCheck: boolean(name='ForceNonceCheck'),
  disableInternet: boolean(name='DisableInternet'),
  appCodeAuthType: string(name='AppCodeAuthType'),
  errorCodeSamples: {
    errorCodeSample: [
      {
        code: string(name='Code'),
        message: string(name='Message'),
        description: string(name='Description'),
        model: string(name='Model'),
      }
    ](name='ErrorCodeSample'),
  }(name='ErrorCodeSamples'),
  resultDescriptions: {
    resultDescription: [
      {
        id: string(name='Id'),
        pid: string(name='Pid'),
        hasChild: boolean(name='HasChild'),
        key: string(name='Key'),
        name: string(name='Name'),
        mandatory: boolean(name='Mandatory'),
        type: string(name='Type'),
        description: string(name='Description'),
      }
    ](name='ResultDescription'),
  }(name='ResultDescriptions'),
  systemParameters: {
    systemParameter: [
      {
        parameterName: string(name='ParameterName'),
        serviceParameterName: string(name='ServiceParameterName'),
        location: string(name='Location'),
        demoValue: string(name='DemoValue'),
        description: string(name='Description'),
      }
    ](name='SystemParameter'),
  }(name='SystemParameters'),
  customSystemParameters: {
    customSystemParameter: [
      {
        parameterName: string(name='ParameterName'),
        serviceParameterName: string(name='ServiceParameterName'),
        location: string(name='Location'),
        demoValue: string(name='DemoValue'),
        description: string(name='Description'),
      }
    ](name='CustomSystemParameter'),
  }(name='CustomSystemParameters'),
  constantParameters: {
    constantParameter: [
      {
        serviceParameterName: string(name='ServiceParameterName'),
        constantValue: string(name='ConstantValue'),
        location: string(name='Location'),
        description: string(name='Description'),
      }
    ](name='ConstantParameter'),
  }(name='ConstantParameters'),
  requestParameters: {
    requestParameter: [
      {
        apiParameterName: string(name='ApiParameterName'),
        location: string(name='Location'),
        parameterType: string(name='ParameterType'),
        required: string(name='Required'),
        defaultValue: string(name='DefaultValue'),
        demoValue: string(name='DemoValue'),
        maxValue: long(name='MaxValue'),
        minValue: long(name='MinValue'),
        maxLength: long(name='MaxLength'),
        minLength: long(name='MinLength'),
        regularExpression: string(name='RegularExpression'),
        jsonScheme: string(name='JsonScheme'),
        enumValue: string(name='EnumValue'),
        docShow: string(name='DocShow'),
        docOrder: integer(name='DocOrder'),
        description: string(name='Description'),
        arrayItemsType: string(name='ArrayItemsType'),
      }
    ](name='RequestParameter'),
  }(name='RequestParameters'),
  serviceParameters: {
    serviceParameter: [
      {
        serviceParameterName: string(name='ServiceParameterName'),
        location: string(name='Location'),
        parameterType: string(name='ParameterType'),
      }
    ](name='ServiceParameter'),
  }(name='ServiceParameters'),
  serviceParametersMap: {
    serviceParameterMap: [
      {
        serviceParameterName: string(name='ServiceParameterName'),
        requestParameterName: string(name='RequestParameterName'),
      }
    ](name='ServiceParameterMap'),
  }(name='ServiceParametersMap'),
  deployedInfos: {
    deployedInfo: [
      {
        stageName: string(name='StageName'),
        effectiveVersion: string(name='EffectiveVersion'),
        deployedStatus: string(name='DeployedStatus'),
      }
    ](name='DeployedInfo'),
  }(name='DeployedInfos'),
  requestConfig: {
    requestProtocol: string(name='RequestProtocol'),
    requestHttpMethod: string(name='RequestHttpMethod'),
    requestPath: string(name='RequestPath'),
    bodyFormat: string(name='BodyFormat'),
    postBodyDescription: string(name='PostBodyDescription'),
    requestMode: string(name='RequestMode'),
    bodyModel: string(name='BodyModel'),
  }(name='RequestConfig'),
  serviceConfig: {
    serviceProtocol: string(name='ServiceProtocol'),
    serviceAddress: string(name='ServiceAddress'),
    serviceHttpMethod: string(name='ServiceHttpMethod'),
    servicePath: string(name='ServicePath'),
    serviceTimeout: integer(name='ServiceTimeout'),
    contentTypeCatagory: string(name='ContentTypeCatagory'),
    contentTypeValue: string(name='ContentTypeValue'),
    mock: string(name='Mock'),
    mockResult: string(name='MockResult'),
    serviceVpcEnable: string(name='ServiceVpcEnable'),
    aoneAppName: string(name='AoneAppName'),
    mockStatusCode: integer(name='MockStatusCode'),
    mockHeaders: {
      mockHeader: [
        {
          headerName: string(name='HeaderName'),
          headerValue: string(name='HeaderValue'),
        }
      ](name='MockHeader'),
    }(name='MockHeaders'),
    vpcConfig: {
      name: string(name='Name'),
      vpcId: string(name='VpcId'),
      instanceId: string(name='InstanceId'),
      port: integer(name='Port'),
    }(name='VpcConfig'),
    functionComputeConfig: {
      regionId: string(name='RegionId'),
      serviceName: string(name='ServiceName'),
      functionName: string(name='FunctionName'),
      roleArn: string(name='RoleArn'),
      qualifier: string(name='Qualifier'),
      fcBaseUrl: string(name='FcBaseUrl'),
      fcType: string(name='FcType'),
      path: string(name='Path'),
      method: string(name='Method'),
      contentTypeCatagory: string(name='ContentTypeCatagory'),
      contentTypeValue: string(name='ContentTypeValue'),
    }(name='FunctionComputeConfig'),
  }(name='ServiceConfig'),
  openIdConnectConfig: {
    openIdApiType: string(name='OpenIdApiType'),
    idTokenParamName: string(name='IdTokenParamName'),
    publicKeyId: string(name='PublicKeyId'),
    publicKey: string(name='PublicKey'),
  }(name='OpenIdConnectConfig'),
}

async function describeApiWithOptions(request: DescribeApiRequest, runtime: Util.RuntimeOptions): DescribeApiResponse {
  Util.validateModel(request);
  return doRequest('DescribeApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApi(request: DescribeApiRequest): DescribeApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiWithOptions(request, runtime);
}

model DeployApiRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId: string(name='ApiId'),
  stageName: string(name='StageName'),
  description: string(name='Description'),
}

model DeployApiResponse = {
  requestId: string(name='RequestId'),
}

async function deployApiWithOptions(request: DeployApiRequest, runtime: Util.RuntimeOptions): DeployApiResponse {
  Util.validateModel(request);
  return doRequest('DeployApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deployApi(request: DeployApiRequest): DeployApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployApiWithOptions(request, runtime);
}

model DeleteTrafficSpecialControlRequest = {
  securityToken?: string(name='SecurityToken'),
  trafficControlId: string(name='TrafficControlId'),
  specialType: string(name='SpecialType'),
  specialKey: string(name='SpecialKey'),
}

model DeleteTrafficSpecialControlResponse = {
  requestId: string(name='RequestId'),
}

async function deleteTrafficSpecialControlWithOptions(request: DeleteTrafficSpecialControlRequest, runtime: Util.RuntimeOptions): DeleteTrafficSpecialControlResponse {
  Util.validateModel(request);
  return doRequest('DeleteTrafficSpecialControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteTrafficSpecialControl(request: DeleteTrafficSpecialControlRequest): DeleteTrafficSpecialControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrafficSpecialControlWithOptions(request, runtime);
}

model DeleteTrafficControlRequest = {
  securityToken?: string(name='SecurityToken'),
  trafficControlId: string(name='TrafficControlId'),
}

model DeleteTrafficControlResponse = {
  requestId: string(name='RequestId'),
}

async function deleteTrafficControlWithOptions(request: DeleteTrafficControlRequest, runtime: Util.RuntimeOptions): DeleteTrafficControlResponse {
  Util.validateModel(request);
  return doRequest('DeleteTrafficControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteTrafficControl(request: DeleteTrafficControlRequest): DeleteTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrafficControlWithOptions(request, runtime);
}

model DeleteSignatureRequest = {
  securityToken?: string(name='SecurityToken'),
  signatureId: string(name='SignatureId'),
}

model DeleteSignatureResponse = {
  requestId: string(name='RequestId'),
}

async function deleteSignatureWithOptions(request: DeleteSignatureRequest, runtime: Util.RuntimeOptions): DeleteSignatureResponse {
  Util.validateModel(request);
  return doRequest('DeleteSignature', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteSignature(request: DeleteSignatureRequest): DeleteSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSignatureWithOptions(request, runtime);
}

model DeleteDomainCertificateRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  domainName: string(name='DomainName'),
  certificateId: string(name='CertificateId'),
}

model DeleteDomainCertificateResponse = {
  requestId: string(name='RequestId'),
}

async function deleteDomainCertificateWithOptions(request: DeleteDomainCertificateRequest, runtime: Util.RuntimeOptions): DeleteDomainCertificateResponse {
  Util.validateModel(request);
  return doRequest('DeleteDomainCertificate', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteDomainCertificate(request: DeleteDomainCertificateRequest): DeleteDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainCertificateWithOptions(request, runtime);
}

model DeleteDomainRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  domainName: string(name='DomainName'),
}

model DeleteDomainResponse = {
  requestId: string(name='RequestId'),
}

async function deleteDomainWithOptions(request: DeleteDomainRequest, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  return doRequest('DeleteDomain', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainWithOptions(request, runtime);
}

model DeleteAppRequest = {
  securityToken?: string(name='SecurityToken'),
  appId: long(name='AppId'),
  tag?: [
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DeleteAppResponse = {
  requestId: string(name='RequestId'),
}

async function deleteAppWithOptions(request: DeleteAppRequest, runtime: Util.RuntimeOptions): DeleteAppResponse {
  Util.validateModel(request);
  return doRequest('DeleteApp', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppWithOptions(request, runtime);
}

model DeleteApiGroupRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  tag?: [
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag'),
}

model DeleteApiGroupResponse = {
  requestId: string(name='RequestId'),
}

async function deleteApiGroupWithOptions(request: DeleteApiGroupRequest, runtime: Util.RuntimeOptions): DeleteApiGroupResponse {
  Util.validateModel(request);
  return doRequest('DeleteApiGroup', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteApiGroup(request: DeleteApiGroupRequest): DeleteApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiGroupWithOptions(request, runtime);
}

model DeleteApiRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId: string(name='ApiId'),
}

model DeleteApiResponse = {
  requestId: string(name='RequestId'),
}

async function deleteApiWithOptions(request: DeleteApiRequest, runtime: Util.RuntimeOptions): DeleteApiResponse {
  Util.validateModel(request);
  return doRequest('DeleteApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteApi(request: DeleteApiRequest): DeleteApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiWithOptions(request, runtime);
}

model DeleteAllTrafficSpecialControlRequest = {
  securityToken?: string(name='SecurityToken'),
  trafficControlId: string(name='TrafficControlId'),
}

model DeleteAllTrafficSpecialControlResponse = {
  requestId: string(name='RequestId'),
}

async function deleteAllTrafficSpecialControlWithOptions(request: DeleteAllTrafficSpecialControlRequest, runtime: Util.RuntimeOptions): DeleteAllTrafficSpecialControlResponse {
  Util.validateModel(request);
  return doRequest('DeleteAllTrafficSpecialControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteAllTrafficSpecialControl(request: DeleteAllTrafficSpecialControlRequest): DeleteAllTrafficSpecialControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAllTrafficSpecialControlWithOptions(request, runtime);
}

model CreateTrafficControlRequest = {
  securityToken?: string(name='SecurityToken'),
  trafficControlName: string(name='TrafficControlName'),
  trafficControlUnit: string(name='TrafficControlUnit'),
  apiDefault: integer(name='ApiDefault'),
  userDefault?: integer(name='UserDefault'),
  appDefault?: integer(name='AppDefault'),
  description?: string(name='Description'),
}

model CreateTrafficControlResponse = {
  requestId: string(name='RequestId'),
  trafficControlId: string(name='TrafficControlId'),
}

async function createTrafficControlWithOptions(request: CreateTrafficControlRequest, runtime: Util.RuntimeOptions): CreateTrafficControlResponse {
  Util.validateModel(request);
  return doRequest('CreateTrafficControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createTrafficControl(request: CreateTrafficControlRequest): CreateTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTrafficControlWithOptions(request, runtime);
}

model CreateSignatureRequest = {
  securityToken?: string(name='SecurityToken'),
  signatureName: string(name='SignatureName'),
  signatureKey: string(name='SignatureKey'),
  signatureSecret: string(name='SignatureSecret'),
}

model CreateSignatureResponse = {
  requestId: string(name='RequestId'),
  signatureId: string(name='SignatureId'),
  signatureName: string(name='SignatureName'),
}

async function createSignatureWithOptions(request: CreateSignatureRequest, runtime: Util.RuntimeOptions): CreateSignatureResponse {
  Util.validateModel(request);
  return doRequest('CreateSignature', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createSignature(request: CreateSignatureRequest): CreateSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSignatureWithOptions(request, runtime);
}

model CreateAppRequest = {
  securityToken?: string(name='SecurityToken'),
  appName: string(name='AppName'),
  description?: string(name='Description'),
  source?: string(name='Source'),
  tag?: [
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateAppResponse = {
  requestId: string(name='RequestId'),
  appId: long(name='AppId'),
  tagStatus: boolean(name='TagStatus'),
}

async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  return doRequest('CreateApp', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

model CreateApiGroupRequest = {
  securityToken?: string(name='SecurityToken'),
  groupName: string(name='GroupName'),
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateApiGroupResponse = {
  requestId: string(name='RequestId'),
  groupId: string(name='GroupId'),
  groupName: string(name='GroupName'),
  subDomain: string(name='SubDomain'),
  description: string(name='Description'),
  instanceId: string(name='InstanceId'),
  instanceType: string(name='InstanceType'),
  tagStatus: boolean(name='TagStatus'),
}

async function createApiGroupWithOptions(request: CreateApiGroupRequest, runtime: Util.RuntimeOptions): CreateApiGroupResponse {
  Util.validateModel(request);
  return doRequest('CreateApiGroup', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createApiGroup(request: CreateApiGroupRequest): CreateApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiGroupWithOptions(request, runtime);
}

model CreateApiRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId: string(name='GroupId'),
  apiName: string(name='ApiName'),
  visibility: string(name='Visibility'),
  description?: string(name='Description'),
  authType?: string(name='AuthType'),
  requestConfig: string(name='RequestConfig'),
  serviceConfig: string(name='ServiceConfig'),
  requestParameters?: string(name='RequestParameters'),
  systemParameters?: string(name='SystemParameters'),
  constantParameters?: string(name='ConstantParameters'),
  serviceParameters?: string(name='ServiceParameters'),
  serviceParametersMap?: string(name='ServiceParametersMap'),
  resultType?: string(name='ResultType'),
  resultSample?: string(name='ResultSample'),
  failResultSample?: string(name='FailResultSample'),
  errorCodeSamples?: string(name='ErrorCodeSamples'),
  resultDescriptions?: string(name='ResultDescriptions'),
  openIdConnectConfig?: string(name='OpenIdConnectConfig'),
  allowSignatureMethod?: string(name='AllowSignatureMethod'),
  webSocketApiType?: string(name='WebSocketApiType'),
  resultBodyModel?: string(name='ResultBodyModel'),
  forceNonceCheck?: boolean(name='ForceNonceCheck'),
  disableInternet?: boolean(name='DisableInternet'),
  appCodeAuthType?: string(name='AppCodeAuthType'),
}

model CreateApiResponse = {
  requestId: string(name='RequestId'),
  apiId: string(name='ApiId'),
}

async function createApiWithOptions(request: CreateApiRequest, runtime: Util.RuntimeOptions): CreateApiResponse {
  Util.validateModel(request);
  return doRequest('CreateApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createApi(request: CreateApiRequest): CreateApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiWithOptions(request, runtime);
}

model AddTrafficSpecialControlRequest = {
  securityToken?: string(name='SecurityToken'),
  trafficControlId: string(name='TrafficControlId'),
  specialType: string(name='SpecialType'),
  specialKey: string(name='SpecialKey'),
  trafficValue: integer(name='TrafficValue'),
}

model AddTrafficSpecialControlResponse = {
  requestId: string(name='RequestId'),
}

async function addTrafficSpecialControlWithOptions(request: AddTrafficSpecialControlRequest, runtime: Util.RuntimeOptions): AddTrafficSpecialControlResponse {
  Util.validateModel(request);
  return doRequest('AddTrafficSpecialControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function addTrafficSpecialControl(request: AddTrafficSpecialControlRequest): AddTrafficSpecialControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTrafficSpecialControlWithOptions(request, runtime);
}

model AbolishApiRequest = {
  securityToken?: string(name='SecurityToken'),
  groupId?: string(name='GroupId'),
  apiId: string(name='ApiId'),
  stageName: string(name='StageName'),
}

model AbolishApiResponse = {
  requestId: string(name='RequestId'),
}

async function abolishApiWithOptions(request: AbolishApiRequest, runtime: Util.RuntimeOptions): AbolishApiResponse {
  Util.validateModel(request);
  return doRequest('AbolishApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function abolishApi(request: AbolishApiRequest): AbolishApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return abolishApiWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
