import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'live.aliyuncs.com',
    cn-beijing = 'live.aliyuncs.com',
    cn-hangzhou = 'live.aliyuncs.com',
    cn-shanghai = 'live.aliyuncs.com',
    cn-shenzhen = 'live.aliyuncs.com',
    ap-southeast-1 = 'live.aliyuncs.com',
    ap-southeast-5 = 'live.aliyuncs.com',
    ap-northeast-1 = 'live.aliyuncs.com',
    eu-central-1 = 'live.aliyuncs.com',
    ap-south-1 = 'live.aliyuncs.com',
    ap-northeast-2-pop = 'live.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'live.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'live.ap-southeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'live.aliyuncs.com',
    cn-beijing-finance-pop = 'live.aliyuncs.com',
    cn-beijing-gov-1 = 'live.aliyuncs.com',
    cn-beijing-nu16-b01 = 'live.aliyuncs.com',
    cn-chengdu = 'live.aliyuncs.com',
    cn-edge-1 = 'live.aliyuncs.com',
    cn-fujian = 'live.aliyuncs.com',
    cn-haidian-cm12-c01 = 'live.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'live.aliyuncs.com',
    cn-hangzhou-finance = 'live.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'live.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'live.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'live.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'live.aliyuncs.com',
    cn-hangzhou-test-306 = 'live.aliyuncs.com',
    cn-hongkong = 'live.aliyuncs.com',
    cn-hongkong-finance-pop = 'live.aliyuncs.com',
    cn-huhehaote = 'live.aliyuncs.com',
    cn-north-2-gov-1 = 'live.aliyuncs.com',
    cn-qingdao-nebula = 'live.aliyuncs.com',
    cn-shanghai-et15-b01 = 'live.aliyuncs.com',
    cn-shanghai-et2-b01 = 'live.aliyuncs.com',
    cn-shanghai-finance-1 = 'live.aliyuncs.com',
    cn-shanghai-inner = 'live.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'live.aliyuncs.com',
    cn-shenzhen-finance-1 = 'live.aliyuncs.com',
    cn-shenzhen-inner = 'live.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'live.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'live.aliyuncs.com',
    cn-wuhan = 'live.aliyuncs.com',
    cn-yushanfang = 'live.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'live.aliyuncs.com',
    cn-zhangjiakou = 'live.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'live.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'live.aliyuncs.com',
    eu-west-1 = 'live.ap-southeast-1.aliyuncs.com',
    eu-west-1-oxs = 'live.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'live.ap-southeast-1.aliyuncs.com',
    rus-west-1-pop = 'live.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'live.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'live.ap-southeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('live', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model AddLiveASRConfigRequest = {
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  mnsTopic?: string(name='MnsTopic'),
  mnsRegion?: string(name='MnsRegion'),
  period?: integer(name='Period'),
  httpCallbackURL?: string(name='HttpCallbackURL'),
}

model AddLiveASRConfigResponse = {
  requestId: string(name='RequestId'),
}

async function addLiveASRConfigWithOptions(request: AddLiveASRConfigRequest, runtime: Util.RuntimeOptions): AddLiveASRConfigResponse {
  Util.validateModel(request);
  return doRequest('AddLiveASRConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addLiveASRConfig(request: AddLiveASRConfigRequest): AddLiveASRConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveASRConfigWithOptions(request, runtime);
}

model DescribeLiveAsrConfigRequest = {
  domainName: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
}

model DescribeLiveAsrConfigResponse = {
  requestId: string(name='RequestId'),
  liveAsrConfig: {
    liveAsrConfigList: [
      {
        domainName: integer(name='DomainName'),
        appName: string(name='AppName'),
        streamName: string(name='StreamName'),
        period: integer(name='Period'),
        mnsTopic: string(name='MnsTopic'),
        mnsRegion: string(name='MnsRegion'),
        httpCallbackURL: string(name='HttpCallbackURL'),
      }
    ](name='LiveAsrConfigList'),
  }(name='LiveAsrConfig'),
}

async function describeLiveAsrConfigWithOptions(request: DescribeLiveAsrConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveAsrConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveAsrConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveAsrConfig(request: DescribeLiveAsrConfigRequest): DescribeLiveAsrConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveAsrConfigWithOptions(request, runtime);
}

model DeleteLiveASRConfigRequest = {
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
}

model DeleteLiveASRConfigResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveASRConfigWithOptions(request: DeleteLiveASRConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveASRConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveASRConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteLiveASRConfig(request: DeleteLiveASRConfigRequest): DeleteLiveASRConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveASRConfigWithOptions(request, runtime);
}

model UpdateLiveASRConfigRequest = {
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  mnsTopic?: string(name='MnsTopic'),
  mnsRegion?: string(name='MnsRegion'),
  period?: integer(name='Period'),
  httpCallbackURL?: string(name='HttpCallbackURL'),
}

model UpdateLiveASRConfigResponse = {
  requestId: string(name='RequestId'),
}

async function updateLiveASRConfigWithOptions(request: UpdateLiveASRConfigRequest, runtime: Util.RuntimeOptions): UpdateLiveASRConfigResponse {
  Util.validateModel(request);
  return doRequest('UpdateLiveASRConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function updateLiveASRConfig(request: UpdateLiveASRConfigRequest): UpdateLiveASRConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveASRConfigWithOptions(request, runtime);
}

model DeleteMixStreamRequest = {
  domainName: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  mixStreamId: string(name='MixStreamId'),
}

model DeleteMixStreamResponse = {
  requestId: string(name='RequestId'),
  mixStreamId: string(name='MixStreamId'),
}

async function deleteMixStreamWithOptions(request: DeleteMixStreamRequest, runtime: Util.RuntimeOptions): DeleteMixStreamResponse {
  Util.validateModel(request);
  return doRequest('DeleteMixStream', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteMixStream(request: DeleteMixStreamRequest): DeleteMixStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMixStreamWithOptions(request, runtime);
}

model UpdateMixStreamRequest = {
  domainName: string(name='DomainName'),
  mixStreamId: string(name='MixStreamId'),
  inputStreamList: string(name='InputStreamList'),
  layoutId?: string(name='LayoutId'),
}

model UpdateMixStreamResponse = {
  requestId: string(name='RequestId'),
  mixStreamId: string(name='MixStreamId'),
}

async function updateMixStreamWithOptions(request: UpdateMixStreamRequest, runtime: Util.RuntimeOptions): UpdateMixStreamResponse {
  Util.validateModel(request);
  return doRequest('UpdateMixStream', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function updateMixStream(request: UpdateMixStreamRequest): UpdateMixStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMixStreamWithOptions(request, runtime);
}

model CreateMixStreamRequest = {
  domainName: string(name='DomainName'),
  layoutId: string(name='LayoutId'),
  inputStreamList: string(name='InputStreamList'),
  outputConfig: string(name='OutputConfig'),
  callbackConfig?: string(name='CallbackConfig'),
}

model CreateMixStreamResponse = {
  requestId: string(name='RequestId'),
  mixStreamId: string(name='MixStreamId'),
}

async function createMixStreamWithOptions(request: CreateMixStreamRequest, runtime: Util.RuntimeOptions): CreateMixStreamResponse {
  Util.validateModel(request);
  return doRequest('CreateMixStream', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function createMixStream(request: CreateMixStreamRequest): CreateMixStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMixStreamWithOptions(request, runtime);
}

model DescribeMixStreamListRequest = {
  domainName?: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  mixStreamId?: string(name='MixStreamId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNo?: integer(name='PageNo'),
  pageSize?: integer(name='PageSize'),
}

model DescribeMixStreamListResponse = {
  requestId: string(name='RequestId'),
  total: integer(name='Total'),
  mixStreamList: [
    {
      mixstreamId: string(name='MixstreamId'),
      domainName: string(name='DomainName'),
      appName: string(name='AppName'),
      streamName: string(name='StreamName'),
      layoutId: string(name='LayoutId'),
      inputStreamNumber: integer(name='InputStreamNumber'),
      mixStreamTemplate: string(name='MixStreamTemplate'),
      gmtCreate: string(name='GmtCreate'),
      gmtModified: string(name='GmtModified'),
    }
  ](name='MixStreamList'),
}

async function describeMixStreamListWithOptions(request: DescribeMixStreamListRequest, runtime: Util.RuntimeOptions): DescribeMixStreamListResponse {
  Util.validateModel(request);
  return doRequest('DescribeMixStreamList', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeMixStreamList(request: DescribeMixStreamListRequest): DescribeMixStreamListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMixStreamListWithOptions(request, runtime);
}

model AddRtsLiveStreamTranscodeRequest = {
  domain: string(name='Domain'),
  app: string(name='App'),
  template: string(name='Template'),
  templateType: string(name='TemplateType'),
  height?: integer(name='Height'),
  width?: integer(name='Width'),
  FPS?: integer(name='FPS'),
  videoBitrate?: integer(name='VideoBitrate'),
  audioBitrate?: integer(name='AudioBitrate'),
  gop?: string(name='Gop'),
  deleteBframes?: boolean(name='DeleteBframes'),
  opus?: boolean(name='Opus'),
  profile?: integer(name='Profile'),
  audioProfile?: string(name='AudioProfile'),
  audioCodec?: string(name='AudioCodec'),
  audioRate?: integer(name='AudioRate'),
  audioChannelNum?: integer(name='AudioChannelNum'),
  lazy?: string(name='Lazy'),
}

model AddRtsLiveStreamTranscodeResponse = {
  requestId: string(name='RequestId'),
}

async function addRtsLiveStreamTranscodeWithOptions(request: AddRtsLiveStreamTranscodeRequest, runtime: Util.RuntimeOptions): AddRtsLiveStreamTranscodeResponse {
  Util.validateModel(request);
  return doRequest('AddRtsLiveStreamTranscode', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addRtsLiveStreamTranscode(request: AddRtsLiveStreamTranscodeRequest): AddRtsLiveStreamTranscodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRtsLiveStreamTranscodeWithOptions(request, runtime);
}

model DescribeLiveDomainTimeShiftDataRequest = {
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
}

model DescribeLiveDomainTimeShiftDataResponse = {
  requestId: string(name='RequestId'),
  timeShiftData: {
    dataModule: [
      {
        timeStamp: string(name='TimeStamp'),
        size: string(name='Size'),
        type: string(name='Type'),
      }
    ](name='DataModule'),
  }(name='TimeShiftData'),
}

async function describeLiveDomainTimeShiftDataWithOptions(request: DescribeLiveDomainTimeShiftDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainTimeShiftDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainTimeShiftData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainTimeShiftData(request: DescribeLiveDomainTimeShiftDataRequest): DescribeLiveDomainTimeShiftDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainTimeShiftDataWithOptions(request, runtime);
}

model DeleteHtmlResourceRequest = {
  htmlResourceId?: string(name='HtmlResourceId'),
  htmlUrl?: string(name='htmlUrl'),
  casterId?: string(name='CasterId'),
}

model DeleteHtmlResourceResponse = {
  requestId: string(name='RequestId'),
}

async function deleteHtmlResourceWithOptions(request: DeleteHtmlResourceRequest, runtime: Util.RuntimeOptions): DeleteHtmlResourceResponse {
  Util.validateModel(request);
  return doRequest('DeleteHtmlResource', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteHtmlResource(request: DeleteHtmlResourceRequest): DeleteHtmlResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHtmlResourceWithOptions(request, runtime);
}

model DescribeHtmlResourceRequest = {
  htmlResourceId?: string(name='HtmlResourceId'),
  htmlUrl?: string(name='htmlUrl'),
  casterId?: string(name='CasterId'),
}

model DescribeHtmlResourceResponse = {
  requestId: string(name='RequestId'),
  htmlResource: {
    htmlResourceId: string(name='HtmlResourceId'),
    htmlUrl: string(name='HtmlUrl'),
    htmlContent: string(name='HtmlContent'),
    casterId: string(name='CasterId'),
    config: string(name='Config'),
    streamId: string(name='StreamId'),
  }(name='HtmlResource'),
}

async function describeHtmlResourceWithOptions(request: DescribeHtmlResourceRequest, runtime: Util.RuntimeOptions): DescribeHtmlResourceResponse {
  Util.validateModel(request);
  return doRequest('DescribeHtmlResource', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeHtmlResource(request: DescribeHtmlResourceRequest): DescribeHtmlResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHtmlResourceWithOptions(request, runtime);
}

model ControlHtmlResourceRequest = {
  htmlResourceId?: string(name='HtmlResourceId'),
  htmlUrl?: string(name='htmlUrl'),
  casterId?: string(name='CasterId'),
  operate: string(name='Operate'),
}

model ControlHtmlResourceResponse = {
  requestId: string(name='RequestId'),
  streamId: string(name='StreamId'),
}

async function controlHtmlResourceWithOptions(request: ControlHtmlResourceRequest, runtime: Util.RuntimeOptions): ControlHtmlResourceResponse {
  Util.validateModel(request);
  return doRequest('ControlHtmlResource', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function controlHtmlResource(request: ControlHtmlResourceRequest): ControlHtmlResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return controlHtmlResourceWithOptions(request, runtime);
}

model EditHtmlResourceRequest = {
  htmlResourceId?: string(name='HtmlResourceId'),
  casterId?: string(name='CasterId'),
  htmlUrl?: string(name='HtmlUrl'),
  htmlContent?: string(name='htmlContent'),
  config?: string(name='Config'),
}

model EditHtmlResourceResponse = {
  requestId: string(name='RequestId'),
  htmlResourceId: string(name='HtmlResourceId'),
}

async function editHtmlResourceWithOptions(request: EditHtmlResourceRequest, runtime: Util.RuntimeOptions): EditHtmlResourceResponse {
  Util.validateModel(request);
  return doRequest('EditHtmlResource', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function editHtmlResource(request: EditHtmlResourceRequest): EditHtmlResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return editHtmlResourceWithOptions(request, runtime);
}

model DescribeLiveUserTagsRequest = {
}

model DescribeLiveUserTagsResponse = {
  requestId: string(name='RequestId'),
  tags: [
    {
      key: string(name='Key'),
      value: [ string ](name='Value'),
    }
  ](name='Tags'),
}

async function describeLiveUserTagsWithOptions(request: DescribeLiveUserTagsRequest, runtime: Util.RuntimeOptions): DescribeLiveUserTagsResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveUserTags', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveUserTags(request: DescribeLiveUserTagsRequest): DescribeLiveUserTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveUserTagsWithOptions(request, runtime);
}

model UnTagLiveResourcesRequest = {
  resourceId: [ string ](name='ResourceId'),
  resourceType: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
  all?: boolean(name='All'),
}

model UnTagLiveResourcesResponse = {
  requestId: string(name='RequestId'),
}

async function unTagLiveResourcesWithOptions(request: UnTagLiveResourcesRequest, runtime: Util.RuntimeOptions): UnTagLiveResourcesResponse {
  Util.validateModel(request);
  return doRequest('UnTagLiveResources', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function unTagLiveResources(request: UnTagLiveResourcesRequest): UnTagLiveResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unTagLiveResourcesWithOptions(request, runtime);
}

model TagLiveResourcesRequest = {
  resourceId: [ string ](name='ResourceId'),
  resourceType: string(name='ResourceType'),
  tag: [
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagLiveResourcesResponse = {
  requestId: string(name='RequestId'),
}

async function tagLiveResourcesWithOptions(request: TagLiveResourcesRequest, runtime: Util.RuntimeOptions): TagLiveResourcesResponse {
  Util.validateModel(request);
  return doRequest('TagLiveResources', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function tagLiveResources(request: TagLiveResourcesRequest): TagLiveResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagLiveResourcesWithOptions(request, runtime);
}

model DescribeLiveTagResourcesRequest = {
  resourceId: [ string ](name='ResourceId'),
  resourceType: string(name='ResourceType'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeLiveTagResourcesResponse = {
  requestId: string(name='RequestId'),
  tagResources: [
    {
      resourceId: string(name='ResourceId'),
      tag: [
        {
          key: string(name='Key'),
          value: string(name='Value'),
        }
      ](name='Tag'),
    }
  ](name='TagResources'),
}

async function describeLiveTagResourcesWithOptions(request: DescribeLiveTagResourcesRequest, runtime: Util.RuntimeOptions): DescribeLiveTagResourcesResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveTagResources', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveTagResources(request: DescribeLiveTagResourcesRequest): DescribeLiveTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveTagResourcesWithOptions(request, runtime);
}

model AddLiveAudioAuditConfigRequest = {
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossObject?: string(name='OssObject'),
  bizType?: string(name='BizType'),
}

model AddLiveAudioAuditConfigResponse = {
  requestId: string(name='RequestId'),
}

async function addLiveAudioAuditConfigWithOptions(request: AddLiveAudioAuditConfigRequest, runtime: Util.RuntimeOptions): AddLiveAudioAuditConfigResponse {
  Util.validateModel(request);
  return doRequest('AddLiveAudioAuditConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addLiveAudioAuditConfig(request: AddLiveAudioAuditConfigRequest): AddLiveAudioAuditConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveAudioAuditConfigWithOptions(request, runtime);
}

model DeleteLiveAudioAuditConfigRequest = {
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
}

model DeleteLiveAudioAuditConfigResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveAudioAuditConfigWithOptions(request: DeleteLiveAudioAuditConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveAudioAuditConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveAudioAuditConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteLiveAudioAuditConfig(request: DeleteLiveAudioAuditConfigRequest): DeleteLiveAudioAuditConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveAudioAuditConfigWithOptions(request, runtime);
}

model DescribeLiveAudioAuditConfigRequest = {
  domainName: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
}

model DescribeLiveAudioAuditConfigResponse = {
  requestId: string(name='RequestId'),
  liveAudioAuditConfigList: {
    liveAudioAuditConfig: [
      {
        domainName: string(name='DomainName'),
        appName: string(name='AppName'),
        streamName: string(name='StreamName'),
        bizType: string(name='BizType'),
        scenes: {
          scene: [ string ](name='scene', description='scene'),
        }(name='Scenes'),
      }
    ](name='LiveAudioAuditConfig'),
  }(name='LiveAudioAuditConfigList'),
}

async function describeLiveAudioAuditConfigWithOptions(request: DescribeLiveAudioAuditConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveAudioAuditConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveAudioAuditConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveAudioAuditConfig(request: DescribeLiveAudioAuditConfigRequest): DescribeLiveAudioAuditConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveAudioAuditConfigWithOptions(request, runtime);
}

model UpdateLiveAudioAuditConfigRequest = {
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossObject?: string(name='OssObject'),
  bizType?: string(name='BizType'),
}

model UpdateLiveAudioAuditConfigResponse = {
  requestId: string(name='RequestId'),
}

async function updateLiveAudioAuditConfigWithOptions(request: UpdateLiveAudioAuditConfigRequest, runtime: Util.RuntimeOptions): UpdateLiveAudioAuditConfigResponse {
  Util.validateModel(request);
  return doRequest('UpdateLiveAudioAuditConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function updateLiveAudioAuditConfig(request: UpdateLiveAudioAuditConfigRequest): UpdateLiveAudioAuditConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveAudioAuditConfigWithOptions(request, runtime);
}

model AddLiveAudioAuditNotifyConfigRequest = {
  domainName: string(name='DomainName'),
  callback?: string(name='Callback'),
  callbackTemplate?: string(name='CallbackTemplate'),
}

model AddLiveAudioAuditNotifyConfigResponse = {
  requestId: string(name='RequestId'),
}

async function addLiveAudioAuditNotifyConfigWithOptions(request: AddLiveAudioAuditNotifyConfigRequest, runtime: Util.RuntimeOptions): AddLiveAudioAuditNotifyConfigResponse {
  Util.validateModel(request);
  return doRequest('AddLiveAudioAuditNotifyConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addLiveAudioAuditNotifyConfig(request: AddLiveAudioAuditNotifyConfigRequest): AddLiveAudioAuditNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveAudioAuditNotifyConfigWithOptions(request, runtime);
}

model DeleteLiveAudioAuditNotifyConfigRequest = {
  domainName: string(name='DomainName'),
}

model DeleteLiveAudioAuditNotifyConfigResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveAudioAuditNotifyConfigWithOptions(request: DeleteLiveAudioAuditNotifyConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveAudioAuditNotifyConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveAudioAuditNotifyConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteLiveAudioAuditNotifyConfig(request: DeleteLiveAudioAuditNotifyConfigRequest): DeleteLiveAudioAuditNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveAudioAuditNotifyConfigWithOptions(request, runtime);
}

model DescribeLiveAudioAuditNotifyConfigRequest = {
  domainName: string(name='DomainName'),
}

model DescribeLiveAudioAuditNotifyConfigResponse = {
  requestId: string(name='RequestId'),
  liveAudioAuditNotifyConfigList: {
    liveAudioAuditNotifyConfig: [
      {
        domainName: string(name='DomainName'),
        callback: string(name='Callback'),
        callbackTemplate: string(name='CallbackTemplate'),
      }
    ](name='LiveAudioAuditNotifyConfig'),
  }(name='LiveAudioAuditNotifyConfigList'),
}

async function describeLiveAudioAuditNotifyConfigWithOptions(request: DescribeLiveAudioAuditNotifyConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveAudioAuditNotifyConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveAudioAuditNotifyConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveAudioAuditNotifyConfig(request: DescribeLiveAudioAuditNotifyConfigRequest): DescribeLiveAudioAuditNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveAudioAuditNotifyConfigWithOptions(request, runtime);
}

model UpdateLiveAudioAuditNotifyConfigRequest = {
  domainName: string(name='DomainName'),
  callback?: string(name='Callback'),
  callbackTemplate?: string(name='CallbackTemplate'),
}

model UpdateLiveAudioAuditNotifyConfigResponse = {
  requestId: string(name='RequestId'),
}

async function updateLiveAudioAuditNotifyConfigWithOptions(request: UpdateLiveAudioAuditNotifyConfigRequest, runtime: Util.RuntimeOptions): UpdateLiveAudioAuditNotifyConfigResponse {
  Util.validateModel(request);
  return doRequest('UpdateLiveAudioAuditNotifyConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function updateLiveAudioAuditNotifyConfig(request: UpdateLiveAudioAuditNotifyConfigRequest): UpdateLiveAudioAuditNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveAudioAuditNotifyConfigWithOptions(request, runtime);
}

model DescribeLiveDomainPushTrafficDataRequest = {
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeLiveDomainPushTrafficDataResponse = {
  requestId: string(name='RequestId'),
  domainName: string(name='DomainName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  dataInterval: string(name='DataInterval'),
  trafficDataPerInterval: {
    dataModule: [
      {
        timeStamp: string(name='TimeStamp'),
        trafficValue: string(name='TrafficValue'),
      }
    ](name='DataModule'),
  }(name='TrafficDataPerInterval'),
}

async function describeLiveDomainPushTrafficDataWithOptions(request: DescribeLiveDomainPushTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainPushTrafficDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainPushTrafficData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainPushTrafficData(request: DescribeLiveDomainPushTrafficDataRequest): DescribeLiveDomainPushTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainPushTrafficDataWithOptions(request, runtime);
}

model DescribeLiveDomainPushBpsDataRequest = {
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeLiveDomainPushBpsDataResponse = {
  requestId: string(name='RequestId'),
  domainName: string(name='DomainName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  dataInterval: string(name='DataInterval'),
  bpsDataPerInterval: {
    dataModule: [
      {
        timeStamp: string(name='TimeStamp'),
        bpsValue: string(name='BpsValue'),
      }
    ](name='DataModule'),
  }(name='BpsDataPerInterval'),
}

async function describeLiveDomainPushBpsDataWithOptions(request: DescribeLiveDomainPushBpsDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainPushBpsDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainPushBpsData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainPushBpsData(request: DescribeLiveDomainPushBpsDataRequest): DescribeLiveDomainPushBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainPushBpsDataWithOptions(request, runtime);
}

model SetCasterSyncGroupRequest = {
  casterId: string(name='CasterId'),
  syncGroup?: [
    {
      mode?: integer(name='Mode'),
      syncDelayThreshold?: long(name='SyncDelayThreshold'),
      hostResourceId?: string(name='HostResourceId'),
      resourceIds?: [ string ](name='ResourceIds'),
    }
  ](name='SyncGroup'),
}

model SetCasterSyncGroupResponse = {
  requestId: string(name='RequestId'),
}

async function setCasterSyncGroupWithOptions(request: SetCasterSyncGroupRequest, runtime: Util.RuntimeOptions): SetCasterSyncGroupResponse {
  Util.validateModel(request);
  return doRequest('SetCasterSyncGroup', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function setCasterSyncGroup(request: SetCasterSyncGroupRequest): SetCasterSyncGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCasterSyncGroupWithOptions(request, runtime);
}

model DescribeCasterSyncGroupRequest = {
  casterId: string(name='CasterId'),
}

model DescribeCasterSyncGroupResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
  syncGroups: {
    syncGroup: [
      {
        mode: integer(name='Mode'),
        hostResourceId: string(name='HostResourceId'),
        resourceIds: {
          resourceId: [ string ](name='ResourceId', description='ResourceId'),
        }(name='ResourceIds'),
      }
    ](name='SyncGroup'),
  }(name='SyncGroups'),
}

async function describeCasterSyncGroupWithOptions(request: DescribeCasterSyncGroupRequest, runtime: Util.RuntimeOptions): DescribeCasterSyncGroupResponse {
  Util.validateModel(request);
  return doRequest('DescribeCasterSyncGroup', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeCasterSyncGroup(request: DescribeCasterSyncGroupRequest): DescribeCasterSyncGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterSyncGroupWithOptions(request, runtime);
}

model DescribeLiveDetectPornDataRequest = {
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  app?: string(name='App'),
  stream?: string(name='Stream'),
  fee?: string(name='Fee'),
  scene?: string(name='Scene'),
  region?: string(name='Region'),
  splitBy?: string(name='SplitBy'),
}

model DescribeLiveDetectPornDataResponse = {
  requestId: string(name='RequestId'),
  detectPornData: {
    dataModule: [
      {
        timeStamp: string(name='TimeStamp'),
        app: string(name='App'),
        domain: string(name='Domain'),
        stream: string(name='Stream'),
        fee: string(name='Fee'),
        scene: string(name='Scene'),
        region: string(name='Region'),
        count: long(name='Count'),
      }
    ](name='DataModule'),
  }(name='DetectPornData'),
}

async function describeLiveDetectPornDataWithOptions(request: DescribeLiveDetectPornDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDetectPornDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDetectPornData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDetectPornData(request: DescribeLiveDetectPornDataRequest): DescribeLiveDetectPornDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDetectPornDataWithOptions(request, runtime);
}

model DeleteLiveRealTimeLogLogstoreRequest = {
  project: string(name='Project'),
  logstore: string(name='Logstore'),
  region: string(name='Region'),
}

model DeleteLiveRealTimeLogLogstoreResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveRealTimeLogLogstoreWithOptions(request: DeleteLiveRealTimeLogLogstoreRequest, runtime: Util.RuntimeOptions): DeleteLiveRealTimeLogLogstoreResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveRealTimeLogLogstore', 'HTTPS', 'GET', '2016-11-01', 'AK', request, null, runtime);
}

async function deleteLiveRealTimeLogLogstore(request: DeleteLiveRealTimeLogLogstoreRequest): DeleteLiveRealTimeLogLogstoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveRealTimeLogLogstoreWithOptions(request, runtime);
}

model DisableLiveRealtimeLogDeliveryRequest = {
  domainName: string(name='DomainName'),
}

model DisableLiveRealtimeLogDeliveryResponse = {
  requestId: string(name='RequestId'),
}

async function disableLiveRealtimeLogDeliveryWithOptions(request: DisableLiveRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DisableLiveRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  return doRequest('DisableLiveRealtimeLogDelivery', 'HTTPS', 'GET', '2016-11-01', 'AK', request, null, runtime);
}

async function disableLiveRealtimeLogDelivery(request: DisableLiveRealtimeLogDeliveryRequest): DisableLiveRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableLiveRealtimeLogDeliveryWithOptions(request, runtime);
}

model EnableLiveRealtimeLogDeliveryRequest = {
  domainName: string(name='DomainName'),
}

model EnableLiveRealtimeLogDeliveryResponse = {
  requestId: string(name='RequestId'),
}

async function enableLiveRealtimeLogDeliveryWithOptions(request: EnableLiveRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): EnableLiveRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  return doRequest('EnableLiveRealtimeLogDelivery', 'HTTPS', 'GET', '2016-11-01', 'AK', request, null, runtime);
}

async function enableLiveRealtimeLogDelivery(request: EnableLiveRealtimeLogDeliveryRequest): EnableLiveRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableLiveRealtimeLogDeliveryWithOptions(request, runtime);
}

model ListLiveRealtimeLogDeliveryDomainsRequest = {
  project: string(name='Project'),
  logstore: string(name='Logstore'),
  region: string(name='Region'),
}

model ListLiveRealtimeLogDeliveryDomainsResponse = {
  requestId: string(name='RequestId'),
  content: {
    domains: [
      {
        domainName: string(name='DomainName'),
        status: string(name='Status'),
      }
    ](name='Domains'),
  }(name='Content'),
}

async function listLiveRealtimeLogDeliveryDomainsWithOptions(request: ListLiveRealtimeLogDeliveryDomainsRequest, runtime: Util.RuntimeOptions): ListLiveRealtimeLogDeliveryDomainsResponse {
  Util.validateModel(request);
  return doRequest('ListLiveRealtimeLogDeliveryDomains', 'HTTPS', 'GET', '2016-11-01', 'AK', request, null, runtime);
}

async function listLiveRealtimeLogDeliveryDomains(request: ListLiveRealtimeLogDeliveryDomainsRequest): ListLiveRealtimeLogDeliveryDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveRealtimeLogDeliveryDomainsWithOptions(request, runtime);
}

model ModifyLiveRealtimeLogDeliveryRequest = {
  project: string(name='Project'),
  logstore: string(name='Logstore'),
  region: string(name='Region'),
  domainName: string(name='DomainName'),
}

model ModifyLiveRealtimeLogDeliveryResponse = {
  requestId: string(name='RequestId'),
}

async function modifyLiveRealtimeLogDeliveryWithOptions(request: ModifyLiveRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): ModifyLiveRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  return doRequest('ModifyLiveRealtimeLogDelivery', 'HTTPS', 'GET', '2016-11-01', 'AK', request, null, runtime);
}

async function modifyLiveRealtimeLogDelivery(request: ModifyLiveRealtimeLogDeliveryRequest): ModifyLiveRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLiveRealtimeLogDeliveryWithOptions(request, runtime);
}

model DescribeLiveRealtimeDeliveryAccRequest = {
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  project?: string(name='Project'),
  logStore?: string(name='LogStore'),
}

model DescribeLiveRealtimeDeliveryAccResponse = {
  requestId: string(name='RequestId'),
  realTimeDeliveryAccData: {
    accData: [
      {
        timeStamp: string(name='TimeStamp'),
        successNum: integer(name='SuccessNum'),
        failedNum: integer(name='FailedNum'),
      }
    ](name='AccData'),
  }(name='RealTimeDeliveryAccData'),
}

async function describeLiveRealtimeDeliveryAccWithOptions(request: DescribeLiveRealtimeDeliveryAccRequest, runtime: Util.RuntimeOptions): DescribeLiveRealtimeDeliveryAccResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveRealtimeDeliveryAcc', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveRealtimeDeliveryAcc(request: DescribeLiveRealtimeDeliveryAccRequest): DescribeLiveRealtimeDeliveryAccResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveRealtimeDeliveryAccWithOptions(request, runtime);
}

model DescribeLiveRealtimeLogAuthorizedRequest = {
  liveOpenapiReserve?: string(name='LiveOpenapiReserve'),
}

model DescribeLiveRealtimeLogAuthorizedResponse = {
  requestId: string(name='RequestId'),
  authorizedStatus: string(name='AuthorizedStatus'),
}

async function describeLiveRealtimeLogAuthorizedWithOptions(request: DescribeLiveRealtimeLogAuthorizedRequest, runtime: Util.RuntimeOptions): DescribeLiveRealtimeLogAuthorizedResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveRealtimeLogAuthorized', 'HTTPS', 'GET', '2016-11-01', 'AK', request, null, runtime);
}

async function describeLiveRealtimeLogAuthorized(request: DescribeLiveRealtimeLogAuthorizedRequest): DescribeLiveRealtimeLogAuthorizedResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveRealtimeLogAuthorizedWithOptions(request, runtime);
}

model ListLiveRealtimeLogDeliveryRequest = {
  liveOpenapiReserve?: string(name='LiveOpenapiReserve'),
}

model ListLiveRealtimeLogDeliveryResponse = {
  requestId: string(name='RequestId'),
  content: {
    realtimeLogDeliveryInfo: [
      {
        project: string(name='Project'),
        logstore: string(name='Logstore'),
        region: string(name='Region'),
        domainName: string(name='DomainName'),
        dmId: integer(name='DmId'),
        status: string(name='Status'),
      }
    ](name='RealtimeLogDeliveryInfo'),
  }(name='Content'),
}

async function listLiveRealtimeLogDeliveryWithOptions(request: ListLiveRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): ListLiveRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  return doRequest('ListLiveRealtimeLogDelivery', 'HTTPS', 'GET', '2016-11-01', 'AK', request, null, runtime);
}

async function listLiveRealtimeLogDelivery(request: ListLiveRealtimeLogDeliveryRequest): ListLiveRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveRealtimeLogDeliveryWithOptions(request, runtime);
}

model ListLiveRealtimeLogDeliveryInfosRequest = {
  liveOpenapiReserve?: string(name='LiveOpenapiReserve'),
}

model ListLiveRealtimeLogDeliveryInfosResponse = {
  requestId: string(name='RequestId'),
  content: {
    realtimeLogDeliveryInfos: [
      {
        project: string(name='Project'),
        logstore: string(name='Logstore'),
        region: string(name='Region'),
      }
    ](name='RealtimeLogDeliveryInfos'),
  }(name='Content'),
}

async function listLiveRealtimeLogDeliveryInfosWithOptions(request: ListLiveRealtimeLogDeliveryInfosRequest, runtime: Util.RuntimeOptions): ListLiveRealtimeLogDeliveryInfosResponse {
  Util.validateModel(request);
  return doRequest('ListLiveRealtimeLogDeliveryInfos', 'HTTPS', 'GET', '2016-11-01', 'AK', request, null, runtime);
}

async function listLiveRealtimeLogDeliveryInfos(request: ListLiveRealtimeLogDeliveryInfosRequest): ListLiveRealtimeLogDeliveryInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveRealtimeLogDeliveryInfosWithOptions(request, runtime);
}

model DescribeLiveDomainRealtimeLogDeliveryRequest = {
  domainName: string(name='DomainName'),
}

model DescribeLiveDomainRealtimeLogDeliveryResponse = {
  requestId: string(name='RequestId'),
  project: string(name='Project'),
  region: string(name='Region'),
  logstore: string(name='Logstore'),
  status: string(name='Status'),
}

async function describeLiveDomainRealtimeLogDeliveryWithOptions(request: DescribeLiveDomainRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainRealtimeLogDelivery', 'HTTPS', 'GET', '2016-11-01', 'AK', request, null, runtime);
}

async function describeLiveDomainRealtimeLogDelivery(request: DescribeLiveDomainRealtimeLogDeliveryRequest): DescribeLiveDomainRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainRealtimeLogDeliveryWithOptions(request, runtime);
}

model DeleteLiveRealtimeLogDeliveryRequest = {
  domainName: string(name='DomainName'),
  project: string(name='Project'),
  logstore: string(name='Logstore'),
  region: string(name='Region'),
}

model DeleteLiveRealtimeLogDeliveryResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveRealtimeLogDeliveryWithOptions(request: DeleteLiveRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DeleteLiveRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveRealtimeLogDelivery', 'HTTPS', 'GET', '2016-11-01', 'AK', request, null, runtime);
}

async function deleteLiveRealtimeLogDelivery(request: DeleteLiveRealtimeLogDeliveryRequest): DeleteLiveRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveRealtimeLogDeliveryWithOptions(request, runtime);
}

model CreateLiveRealTimeLogDeliveryRequest = {
  project: string(name='Project'),
  logstore: string(name='Logstore'),
  region: string(name='Region'),
  domainName: string(name='DomainName'),
}

model CreateLiveRealTimeLogDeliveryResponse = {
  requestId: string(name='RequestId'),
}

async function createLiveRealTimeLogDeliveryWithOptions(request: CreateLiveRealTimeLogDeliveryRequest, runtime: Util.RuntimeOptions): CreateLiveRealTimeLogDeliveryResponse {
  Util.validateModel(request);
  return doRequest('CreateLiveRealTimeLogDelivery', 'HTTPS', 'GET', '2016-11-01', 'AK', request, null, runtime);
}

async function createLiveRealTimeLogDelivery(request: CreateLiveRealTimeLogDeliveryRequest): CreateLiveRealTimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveRealTimeLogDeliveryWithOptions(request, runtime);
}

model DescribeLiveDomainLimitRequest = {
  domainName: string(name='DomainName'),
  liveapiRequestFrom?: string(name='LiveapiRequestFrom'),
}

model DescribeLiveDomainLimitResponse = {
  requestId: string(name='RequestId'),
  liveDomainLimitList: {
    liveDomainLimit: [
      {
        domainName: string(name='DomainName'),
        limitNum: integer(name='LimitNum'),
        limitTranscodeNum: integer(name='LimitTranscodeNum'),
      }
    ](name='LiveDomainLimit'),
  }(name='LiveDomainLimitList'),
}

async function describeLiveDomainLimitWithOptions(request: DescribeLiveDomainLimitRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainLimitResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainLimit', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainLimit(request: DescribeLiveDomainLimitRequest): DescribeLiveDomainLimitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainLimitWithOptions(request, runtime);
}

model DescribeLiveDomainBpsDataByTimeStampRequest = {
  domainName: string(name='DomainName'),
  timePoint: string(name='TimePoint'),
  ispNames: string(name='IspNames'),
  locationNames: string(name='LocationNames'),
}

model DescribeLiveDomainBpsDataByTimeStampResponse = {
  requestId: string(name='RequestId'),
  domainName: string(name='DomainName'),
  timeStamp: string(name='TimeStamp'),
  bpsDataList: {
    bpsDataModel: [
      {
        timeStamp: string(name='TimeStamp'),
        locationName: string(name='LocationName'),
        ispName: string(name='IspName'),
        bps: long(name='Bps'),
      }
    ](name='BpsDataModel'),
  }(name='BpsDataList'),
}

async function describeLiveDomainBpsDataByTimeStampWithOptions(request: DescribeLiveDomainBpsDataByTimeStampRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainBpsDataByTimeStampResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainBpsDataByTimeStamp', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainBpsDataByTimeStamp(request: DescribeLiveDomainBpsDataByTimeStampRequest): DescribeLiveDomainBpsDataByTimeStampResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainBpsDataByTimeStampWithOptions(request, runtime);
}

model DescribeLiveStreamTranscodeStreamNumRequest = {
  domainName: string(name='DomainName'),
}

model DescribeLiveStreamTranscodeStreamNumResponse = {
  requestId: string(name='RequestId'),
  total: long(name='Total'),
  transcodedNumber: long(name='TranscodedNumber'),
  untranscodeNumber: long(name='UntranscodeNumber'),
  lazyTranscodedNumber: long(name='LazyTranscodedNumber'),
}

async function describeLiveStreamTranscodeStreamNumWithOptions(request: DescribeLiveStreamTranscodeStreamNumRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamTranscodeStreamNumResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamTranscodeStreamNum', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamTranscodeStreamNum(request: DescribeLiveStreamTranscodeStreamNumRequest): DescribeLiveStreamTranscodeStreamNumResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamTranscodeStreamNumWithOptions(request, runtime);
}

model UpdateLiveTopLevelDomainRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  topLevelDomain: string(name='TopLevelDomain'),
}

model UpdateLiveTopLevelDomainResponse = {
  requestId: string(name='RequestId'),
}

async function updateLiveTopLevelDomainWithOptions(request: UpdateLiveTopLevelDomainRequest, runtime: Util.RuntimeOptions): UpdateLiveTopLevelDomainResponse {
  Util.validateModel(request);
  return doRequest('UpdateLiveTopLevelDomain', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function updateLiveTopLevelDomain(request: UpdateLiveTopLevelDomainRequest): UpdateLiveTopLevelDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveTopLevelDomainWithOptions(request, runtime);
}

model DescribeLiveDomainCertificateInfoRequest = {
  domainName: string(name='DomainName'),
}

model DescribeLiveDomainCertificateInfoResponse = {
  requestId: string(name='RequestId'),
  certInfos: {
    certInfo: [
      {
        domainName: string(name='DomainName'),
        certName: string(name='CertName'),
        certDomainName: string(name='CertDomainName'),
        certExpireTime: string(name='CertExpireTime'),
        certLife: string(name='CertLife'),
        certOrg: string(name='CertOrg'),
        certType: string(name='CertType'),
        SSLProtocol: string(name='SSLProtocol'),
        status: string(name='Status'),
        SSLPub: string(name='SSLPub'),
      }
    ](name='CertInfo'),
  }(name='CertInfos'),
}

async function describeLiveDomainCertificateInfoWithOptions(request: DescribeLiveDomainCertificateInfoRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainCertificateInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainCertificateInfo', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainCertificateInfo(request: DescribeLiveDomainCertificateInfoRequest): DescribeLiveDomainCertificateInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainCertificateInfoWithOptions(request, runtime);
}

model ModifyLiveDomainSchdmByPropertyRequest = {
  domainName: string(name='DomainName'),
  property: string(name='Property'),
}

model ModifyLiveDomainSchdmByPropertyResponse = {
  requestId: string(name='RequestId'),
}

async function modifyLiveDomainSchdmByPropertyWithOptions(request: ModifyLiveDomainSchdmByPropertyRequest, runtime: Util.RuntimeOptions): ModifyLiveDomainSchdmByPropertyResponse {
  Util.validateModel(request);
  return doRequest('ModifyLiveDomainSchdmByProperty', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function modifyLiveDomainSchdmByProperty(request: ModifyLiveDomainSchdmByPropertyRequest): ModifyLiveDomainSchdmByPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLiveDomainSchdmByPropertyWithOptions(request, runtime);
}

model SetLiveStreamOptimizedFeatureConfigRequest = {
  domainName: string(name='DomainName'),
  configName: string(name='ConfigName'),
  configStatus: string(name='ConfigStatus'),
  configValue?: string(name='ConfigValue'),
}

model SetLiveStreamOptimizedFeatureConfigResponse = {
  requestId: string(name='RequestId'),
}

async function setLiveStreamOptimizedFeatureConfigWithOptions(request: SetLiveStreamOptimizedFeatureConfigRequest, runtime: Util.RuntimeOptions): SetLiveStreamOptimizedFeatureConfigResponse {
  Util.validateModel(request);
  return doRequest('SetLiveStreamOptimizedFeatureConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function setLiveStreamOptimizedFeatureConfig(request: SetLiveStreamOptimizedFeatureConfigRequest): SetLiveStreamOptimizedFeatureConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setLiveStreamOptimizedFeatureConfigWithOptions(request, runtime);
}

model DescribeLiveStreamOptimizedFeatureConfigRequest = {
  domainName: string(name='DomainName'),
  configName: string(name='ConfigName'),
}

model DescribeLiveStreamOptimizedFeatureConfigResponse = {
  requestId: string(name='RequestId'),
  liveStreamOptimizedFeatureConfigList: {
    liveStreamOptimizedFeatureConfig: [
      {
        domainName: string(name='DomainName'),
        configName: string(name='ConfigName'),
        configStatus: string(name='ConfigStatus'),
        configValue: string(name='ConfigValue'),
      }
    ](name='LiveStreamOptimizedFeatureConfig'),
  }(name='LiveStreamOptimizedFeatureConfigList'),
}

async function describeLiveStreamOptimizedFeatureConfigWithOptions(request: DescribeLiveStreamOptimizedFeatureConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamOptimizedFeatureConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamOptimizedFeatureConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamOptimizedFeatureConfig(request: DescribeLiveStreamOptimizedFeatureConfigRequest): DescribeLiveStreamOptimizedFeatureConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamOptimizedFeatureConfigWithOptions(request, runtime);
}

model SetLiveStreamDelayConfigRequest = {
  domainName: string(name='DomainName'),
  hlsDelay?: integer(name='HlsDelay'),
  hlsLevel?: string(name='HlsLevel'),
  flvDelay?: integer(name='FlvDelay'),
  flvLevel?: string(name='FlvLevel'),
  rtmpDelay?: integer(name='RtmpDelay'),
  rtmpLevel?: string(name='RtmpLevel'),
}

model SetLiveStreamDelayConfigResponse = {
  requestId: string(name='RequestId'),
}

async function setLiveStreamDelayConfigWithOptions(request: SetLiveStreamDelayConfigRequest, runtime: Util.RuntimeOptions): SetLiveStreamDelayConfigResponse {
  Util.validateModel(request);
  return doRequest('SetLiveStreamDelayConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function setLiveStreamDelayConfig(request: SetLiveStreamDelayConfigRequest): SetLiveStreamDelayConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setLiveStreamDelayConfigWithOptions(request, runtime);
}

model DescribeLiveStreamDelayConfigRequest = {
  domainName: string(name='DomainName'),
}

model DescribeLiveStreamDelayConfigResponse = {
  requestId: string(name='RequestId'),
  liveStreamHlsDelayConfig: {
    level: string(name='Level'),
    delay: integer(name='Delay'),
  }(name='LiveStreamHlsDelayConfig'),
  liveStreamFlvDelayConfig: {
    level: string(name='Level'),
    delay: integer(name='Delay'),
  }(name='LiveStreamFlvDelayConfig'),
  liveStreamRtmpDelayConfig: {
    level: string(name='Level'),
    delay: integer(name='Delay'),
  }(name='LiveStreamRtmpDelayConfig'),
}

async function describeLiveStreamDelayConfigWithOptions(request: DescribeLiveStreamDelayConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamDelayConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamDelayConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamDelayConfig(request: DescribeLiveStreamDelayConfigRequest): DescribeLiveStreamDelayConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamDelayConfigWithOptions(request, runtime);
}

model DescribeLiveDomainOnlineUserNumRequest = {
  domainName: string(name='DomainName'),
  queryTime?: string(name='QueryTime'),
}

model DescribeLiveDomainOnlineUserNumResponse = {
  requestId: string(name='RequestId'),
  streamCount: integer(name='StreamCount'),
  userCount: integer(name='UserCount'),
  onlineUserInfo: {
    liveStreamOnlineUserNumInfo: [
      {
        streamName: string(name='StreamName'),
        infos: {
          info: [
            {
              transcodeTemplate: string(name='TranscodeTemplate'),
              userNumber: long(name='UserNumber'),
            }
          ](name='Info'),
        }(name='Infos'),
      }
    ](name='LiveStreamOnlineUserNumInfo'),
  }(name='OnlineUserInfo'),
}

async function describeLiveDomainOnlineUserNumWithOptions(request: DescribeLiveDomainOnlineUserNumRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainOnlineUserNumResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainOnlineUserNum', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainOnlineUserNum(request: DescribeLiveDomainOnlineUserNumRequest): DescribeLiveDomainOnlineUserNumResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainOnlineUserNumWithOptions(request, runtime);
}

model DescribeLiveDomainFrameRateAndBitRateDataRequest = {
  domainName: string(name='DomainName'),
  queryTime: string(name='QueryTime'),
}

model DescribeLiveDomainFrameRateAndBitRateDataResponse = {
  requestId: string(name='RequestId'),
  frameRateAndBitRateInfos: {
    frameRateAndBitRateInfo: [
      {
        audioFrameRate: float(name='AudioFrameRate'),
        bitRate: float(name='BitRate'),
        videoFrameRate: float(name='VideoFrameRate'),
        streamUrl: string(name='StreamUrl'),
      }
    ](name='FrameRateAndBitRateInfo'),
  }(name='FrameRateAndBitRateInfos'),
}

async function describeLiveDomainFrameRateAndBitRateDataWithOptions(request: DescribeLiveDomainFrameRateAndBitRateDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainFrameRateAndBitRateDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainFrameRateAndBitRateData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainFrameRateAndBitRateData(request: DescribeLiveDomainFrameRateAndBitRateDataRequest): DescribeLiveDomainFrameRateAndBitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainFrameRateAndBitRateDataWithOptions(request, runtime);
}

model SetBoardCallbackRequest = {
  appId: string(name='AppId'),
  authKey?: string(name='AuthKey'),
  authSwitch?: string(name='AuthSwitch'),
  callbackEnable: integer(name='CallbackEnable'),
  callbackUri?: string(name='CallbackUri'),
  callbackEvents?: string(name='CallbackEvents'),
}

model SetBoardCallbackResponse = {
  requestId: string(name='RequestId'),
}

async function setBoardCallbackWithOptions(request: SetBoardCallbackRequest, runtime: Util.RuntimeOptions): SetBoardCallbackResponse {
  Util.validateModel(request);
  return doRequest('SetBoardCallback', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function setBoardCallback(request: SetBoardCallbackRequest): SetBoardCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return setBoardCallbackWithOptions(request, runtime);
}

model DescribeRecordsRequest = {
  appId: string(name='AppId'),
  pageNum: integer(name='PageNum'),
  pageSize: integer(name='PageSize'),
  recordState?: string(name='RecordState'),
}

model DescribeRecordsResponse = {
  requestId: string(name='RequestId'),
  records: [
    {
      recordId: string(name='RecordId'),
      appId: string(name='AppId'),
      boardId: integer(name='BoardId'),
      recordStartTime: long(name='RecordStartTime'),
      startTime: long(name='StartTime'),
      endTime: long(name='EndTime'),
      state: integer(name='State'),
      ossPath: string(name='OssPath'),
      ossBucket: string(name='OssBucket'),
      ossEndpoint: string(name='OssEndpoint'),
    }
  ](name='Records'),
}

async function describeRecordsWithOptions(request: DescribeRecordsRequest, runtime: Util.RuntimeOptions): DescribeRecordsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRecords', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeRecords(request: DescribeRecordsRequest): DescribeRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordsWithOptions(request, runtime);
}

model DescribeRecordRequest = {
  appId: string(name='AppId'),
  recordId: string(name='RecordId'),
}

model DescribeRecordResponse = {
  requestId: string(name='RequestId'),
  recordId: string(name='RecordId'),
  appId: string(name='AppId'),
  boardId: integer(name='BoardId'),
  recordStartTime: long(name='RecordStartTime'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  state: integer(name='State'),
  ossPath: string(name='OssPath'),
  ossBucket: string(name='OssBucket'),
  ossEndpoint: string(name='OssEndpoint'),
}

async function describeRecordWithOptions(request: DescribeRecordRequest, runtime: Util.RuntimeOptions): DescribeRecordResponse {
  Util.validateModel(request);
  return doRequest('DescribeRecord', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeRecord(request: DescribeRecordRequest): DescribeRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordWithOptions(request, runtime);
}

model CompleteBoardRecordRequest = {
  appId: string(name='AppId'),
  recordId: string(name='RecordId'),
  endTime: string(name='EndTime'),
}

model CompleteBoardRecordResponse = {
  requestId: string(name='RequestId'),
  ossPath: string(name='OssPath'),
}

async function completeBoardRecordWithOptions(request: CompleteBoardRecordRequest, runtime: Util.RuntimeOptions): CompleteBoardRecordResponse {
  Util.validateModel(request);
  return doRequest('CompleteBoardRecord', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function completeBoardRecord(request: CompleteBoardRecordRequest): CompleteBoardRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeBoardRecordWithOptions(request, runtime);
}

model StartBoardRecordRequest = {
  appId: string(name='AppId'),
  boardId: string(name='BoardId'),
  startTime: string(name='StartTime'),
}

model StartBoardRecordResponse = {
  requestId: string(name='RequestId'),
  recordId: string(name='RecordId'),
}

async function startBoardRecordWithOptions(request: StartBoardRecordRequest, runtime: Util.RuntimeOptions): StartBoardRecordResponse {
  Util.validateModel(request);
  return doRequest('StartBoardRecord', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function startBoardRecord(request: StartBoardRecordRequest): StartBoardRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return startBoardRecordWithOptions(request, runtime);
}

model ApplyRecordTokenRequest = {
  appId: string(name='AppId'),
}

model ApplyRecordTokenResponse = {
  requestId: string(name='RequestId'),
  securityToken: string(name='SecurityToken'),
  accessKeySecret: string(name='AccessKeySecret'),
  accessKeyId: string(name='AccessKeyId'),
  expiration: string(name='Expiration'),
}

async function applyRecordTokenWithOptions(request: ApplyRecordTokenRequest, runtime: Util.RuntimeOptions): ApplyRecordTokenResponse {
  Util.validateModel(request);
  return doRequest('ApplyRecordToken', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function applyRecordToken(request: ApplyRecordTokenRequest): ApplyRecordTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyRecordTokenWithOptions(request, runtime);
}

model UpdateBoardCallbackRequest = {
  appId: string(name='AppId'),
  authKey?: string(name='AuthKey'),
  authSwitch?: string(name='AuthSwitch'),
  callbackEnable: integer(name='CallbackEnable'),
  callbackUri?: string(name='CallbackUri'),
  callbackEvents?: string(name='CallbackEvents'),
}

model UpdateBoardCallbackResponse = {
  requestId: string(name='RequestId'),
}

async function updateBoardCallbackWithOptions(request: UpdateBoardCallbackRequest, runtime: Util.RuntimeOptions): UpdateBoardCallbackResponse {
  Util.validateModel(request);
  return doRequest('UpdateBoardCallback', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function updateBoardCallback(request: UpdateBoardCallbackRequest): UpdateBoardCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBoardCallbackWithOptions(request, runtime);
}

model DescribeLiveDomainMappingRequest = {
  domainName: string(name='DomainName'),
}

model DescribeLiveDomainMappingResponse = {
  requestId: string(name='RequestId'),
  liveDomainModels: {
    liveDomainModel: [
      {
        domainName: string(name='DomainName'),
        type: string(name='Type'),
      }
    ](name='LiveDomainModel'),
  }(name='LiveDomainModels'),
}

async function describeLiveDomainMappingWithOptions(request: DescribeLiveDomainMappingRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainMappingResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainMapping', 'HTTPS', 'GET', '2016-11-01', 'AK', request, null, runtime);
}

async function describeLiveDomainMapping(request: DescribeLiveDomainMappingRequest): DescribeLiveDomainMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainMappingWithOptions(request, runtime);
}

model StopLiveIndexRequest = {
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  taskId: string(name='TaskId'),
}

model StopLiveIndexResponse = {
  requestId: string(name='RequestId'),
}

async function stopLiveIndexWithOptions(request: StopLiveIndexRequest, runtime: Util.RuntimeOptions): StopLiveIndexResponse {
  Util.validateModel(request);
  return doRequest('StopLiveIndex', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function stopLiveIndex(request: StopLiveIndexRequest): StopLiveIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopLiveIndexWithOptions(request, runtime);
}

model StartLiveIndexRequest = {
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  tokenId: string(name='TokenId'),
  inputUrl: string(name='InputUrl'),
  interval?: integer(name='Interval'),
  ossBucket?: string(name='OssBucket'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossUserId?: string(name='OssUserId'),
  ossRamRole?: string(name='OssRamRole'),
}

model StartLiveIndexResponse = {
  requestId: string(name='RequestId'),
  taskId: string(name='TaskId'),
}

async function startLiveIndexWithOptions(request: StartLiveIndexRequest, runtime: Util.RuntimeOptions): StartLiveIndexResponse {
  Util.validateModel(request);
  return doRequest('StartLiveIndex', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function startLiveIndex(request: StartLiveIndexRequest): StartLiveIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  return startLiveIndexWithOptions(request, runtime);
}

model RealTimeSnapshotCommandRequest = {
  command: string(name='Command'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  mode?: integer(name='Mode'),
  interval?: integer(name='Interval'),
}

model RealTimeSnapshotCommandResponse = {
  requestId: string(name='RequestId'),
}

async function realTimeSnapshotCommandWithOptions(request: RealTimeSnapshotCommandRequest, runtime: Util.RuntimeOptions): RealTimeSnapshotCommandResponse {
  Util.validateModel(request);
  return doRequest('RealTimeSnapshotCommand', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function realTimeSnapshotCommand(request: RealTimeSnapshotCommandRequest): RealTimeSnapshotCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return realTimeSnapshotCommandWithOptions(request, runtime);
}

model DescribeLiveTopDomainsByFlowRequest = {
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  limit?: long(name='Limit'),
}

model DescribeLiveTopDomainsByFlowResponse = {
  requestId: string(name='RequestId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  domainCount: long(name='DomainCount'),
  domainOnlineCount: long(name='DomainOnlineCount'),
  topDomains: {
    topDomain: [
      {
        domainName: string(name='DomainName'),
        rank: long(name='Rank'),
        totalTraffic: string(name='TotalTraffic'),
        trafficPercent: string(name='TrafficPercent'),
        maxBps: long(name='MaxBps'),
        maxBpsTime: string(name='MaxBpsTime'),
        totalAccess: long(name='TotalAccess'),
      }
    ](name='TopDomain'),
  }(name='TopDomains'),
}

async function describeLiveTopDomainsByFlowWithOptions(request: DescribeLiveTopDomainsByFlowRequest, runtime: Util.RuntimeOptions): DescribeLiveTopDomainsByFlowResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveTopDomainsByFlow', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveTopDomainsByFlow(request: DescribeLiveTopDomainsByFlowRequest): DescribeLiveTopDomainsByFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveTopDomainsByFlowWithOptions(request, runtime);
}

model DescribeLiveDomainRealTimeBpsDataRequest = {
  domainName: string(name='DomainName'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeLiveDomainRealTimeBpsDataResponse = {
  requestId: string(name='RequestId'),
  domainName: string(name='DomainName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  dataInterval: string(name='DataInterval'),
  realTimeBpsDataPerInterval: {
    dataModule: [
      {
        timeStamp: string(name='TimeStamp'),
        value: string(name='Value'),
      }
    ](name='DataModule'),
  }(name='RealTimeBpsDataPerInterval'),
}

async function describeLiveDomainRealTimeBpsDataWithOptions(request: DescribeLiveDomainRealTimeBpsDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainRealTimeBpsDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainRealTimeBpsData', 'HTTPS', 'GET', '2016-11-01', 'AK', request, null, runtime);
}

async function describeLiveDomainRealTimeBpsData(request: DescribeLiveDomainRealTimeBpsDataRequest): DescribeLiveDomainRealTimeBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainRealTimeBpsDataWithOptions(request, runtime);
}

model DescribeLiveDomainRealTimeHttpCodeDataRequest = {
  domainName: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeLiveDomainRealTimeHttpCodeDataResponse = {
  requestId: string(name='RequestId'),
  domainName: string(name='DomainName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  dataInterval: string(name='DataInterval'),
  realTimeHttpCodeData: {
    usageData: [
      {
        timeStamp: string(name='TimeStamp'),
        value: {
          realTimeCodeProportionData: [
            {
              code: string(name='Code'),
              proportion: string(name='Proportion'),
              count: string(name='Count'),
            }
          ](name='RealTimeCodeProportionData'),
        }(name='Value'),
      }
    ](name='UsageData'),
  }(name='RealTimeHttpCodeData'),
}

async function describeLiveDomainRealTimeHttpCodeDataWithOptions(request: DescribeLiveDomainRealTimeHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainRealTimeHttpCodeDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainRealTimeHttpCodeData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainRealTimeHttpCodeData(request: DescribeLiveDomainRealTimeHttpCodeDataRequest): DescribeLiveDomainRealTimeHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainRealTimeHttpCodeDataWithOptions(request, runtime);
}

model DescribeLiveDomainRealTimeTrafficDataRequest = {
  domainName: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  endTime?: string(name='EndTime'),
}

model DescribeLiveDomainRealTimeTrafficDataResponse = {
  requestId: string(name='RequestId'),
  domainName: string(name='DomainName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  dataInterval: string(name='DataInterval'),
  realTimeTrafficDataPerInterval: {
    dataModule: [
      {
        timeStamp: string(name='TimeStamp'),
        value: string(name='Value'),
      }
    ](name='DataModule'),
  }(name='RealTimeTrafficDataPerInterval'),
}

async function describeLiveDomainRealTimeTrafficDataWithOptions(request: DescribeLiveDomainRealTimeTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainRealTimeTrafficDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainRealTimeTrafficData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainRealTimeTrafficData(request: DescribeLiveDomainRealTimeTrafficDataRequest): DescribeLiveDomainRealTimeTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainRealTimeTrafficDataWithOptions(request, runtime);
}

model AddLiveDomainPlayMappingRequest = {
  playDomain: string(name='PlayDomain'),
  pullDomain: string(name='PullDomain'),
}

model AddLiveDomainPlayMappingResponse = {
  requestId: string(name='RequestId'),
}

async function addLiveDomainPlayMappingWithOptions(request: AddLiveDomainPlayMappingRequest, runtime: Util.RuntimeOptions): AddLiveDomainPlayMappingResponse {
  Util.validateModel(request);
  return doRequest('AddLiveDomainPlayMapping', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addLiveDomainPlayMapping(request: AddLiveDomainPlayMappingRequest): AddLiveDomainPlayMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveDomainPlayMappingWithOptions(request, runtime);
}

model DeleteLiveLazyPullStreamInfoConfigRequest = {
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
}

model DeleteLiveLazyPullStreamInfoConfigResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveLazyPullStreamInfoConfigWithOptions(request: DeleteLiveLazyPullStreamInfoConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveLazyPullStreamInfoConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveLazyPullStreamInfoConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteLiveLazyPullStreamInfoConfig(request: DeleteLiveLazyPullStreamInfoConfigRequest): DeleteLiveLazyPullStreamInfoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveLazyPullStreamInfoConfigWithOptions(request, runtime);
}

model DescribeLiveLazyPullStreamConfigRequest = {
  domainName: string(name='DomainName'),
  appName?: string(name='AppName'),
  liveapiRequestFrom?: string(name='LiveapiRequestFrom'),
}

model DescribeLiveLazyPullStreamConfigResponse = {
  requestId: string(name='RequestId'),
  liveLazyPullConfigList: {
    liveLazyPullConfig: [
      {
        domainName: string(name='DomainName'),
        appName: string(name='AppName'),
        pullDomainName: string(name='PullDomainName'),
        pullAppName: string(name='PullAppName'),
        pullProtocol: string(name='PullProtocol'),
        pullAuthType: string(name='PullAuthType'),
        pullAuthKey: string(name='PullAuthKey'),
        pullArgs: string(name='PullArgs'),
      }
    ](name='LiveLazyPullConfig'),
  }(name='LiveLazyPullConfigList'),
}

async function describeLiveLazyPullStreamConfigWithOptions(request: DescribeLiveLazyPullStreamConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveLazyPullStreamConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveLazyPullStreamConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveLazyPullStreamConfig(request: DescribeLiveLazyPullStreamConfigRequest): DescribeLiveLazyPullStreamConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveLazyPullStreamConfigWithOptions(request, runtime);
}

model SetLiveLazyPullStreamInfoConfigRequest = {
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  pullDomainName: string(name='PullDomainName'),
  pullAppName?: string(name='PullAppName'),
  pullProtocol: string(name='PullProtocol'),
  pullAuthType?: string(name='PullAuthType'),
  pullAuthKey?: string(name='PullAuthKey'),
  pullArgs?: string(name='PullArgs'),
  liveapiRequestFrom?: string(name='LiveapiRequestFrom'),
}

model SetLiveLazyPullStreamInfoConfigResponse = {
  requestId: string(name='RequestId'),
}

async function setLiveLazyPullStreamInfoConfigWithOptions(request: SetLiveLazyPullStreamInfoConfigRequest, runtime: Util.RuntimeOptions): SetLiveLazyPullStreamInfoConfigResponse {
  Util.validateModel(request);
  return doRequest('SetLiveLazyPullStreamInfoConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function setLiveLazyPullStreamInfoConfig(request: SetLiveLazyPullStreamInfoConfigRequest): SetLiveLazyPullStreamInfoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setLiveLazyPullStreamInfoConfigWithOptions(request, runtime);
}

model UpdateCasterSceneAudioRequest = {
  casterId: string(name='CasterId'),
  sceneId: string(name='SceneId'),
  followEnable?: integer(name='FollowEnable'),
  audioLayer?: [
    {
      volumeRate?: float(name='VolumeRate'),
      validChannel?: string(name='ValidChannel'),
      fixedDelayDuration?: integer(name='FixedDelayDuration'),
    }
  ](name='AudioLayer'),
  mixList?: [ string ](name='MixList'),
}

model UpdateCasterSceneAudioResponse = {
  requestId: string(name='RequestId'),
}

async function updateCasterSceneAudioWithOptions(request: UpdateCasterSceneAudioRequest, runtime: Util.RuntimeOptions): UpdateCasterSceneAudioResponse {
  Util.validateModel(request);
  return doRequest('UpdateCasterSceneAudio', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function updateCasterSceneAudio(request: UpdateCasterSceneAudioRequest): UpdateCasterSceneAudioResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCasterSceneAudioWithOptions(request, runtime);
}

model SetCasterChannelRequest = {
  casterId: string(name='CasterId'),
  channelId: string(name='ChannelId'),
  resourceId?: string(name='ResourceId'),
  seekOffset?: integer(name='SeekOffset'),
  playStatus?: integer(name='PlayStatus'),
  reloadFlag?: integer(name='ReloadFlag'),
}

model SetCasterChannelResponse = {
  requestId: string(name='RequestId'),
}

async function setCasterChannelWithOptions(request: SetCasterChannelRequest, runtime: Util.RuntimeOptions): SetCasterChannelResponse {
  Util.validateModel(request);
  return doRequest('SetCasterChannel', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function setCasterChannel(request: SetCasterChannelRequest): SetCasterChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCasterChannelWithOptions(request, runtime);
}

model DescribeCasterSceneAudioRequest = {
  casterId: string(name='CasterId'),
  sceneId: string(name='SceneId'),
}

model DescribeCasterSceneAudioResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
  followEnable: integer(name='FollowEnable'),
  audioLayers: {
    audioLayer: [
      {
        volumeRate: float(name='VolumeRate'),
        validChannel: string(name='ValidChannel'),
        fixedDelayDuration: integer(name='FixedDelayDuration'),
      }
    ](name='AudioLayer'),
  }(name='AudioLayers'),
  mixList: {
    locationId: [ string ](name='LocationId'),
  }(name='MixList'),
}

async function describeCasterSceneAudioWithOptions(request: DescribeCasterSceneAudioRequest, runtime: Util.RuntimeOptions): DescribeCasterSceneAudioResponse {
  Util.validateModel(request);
  return doRequest('DescribeCasterSceneAudio', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeCasterSceneAudio(request: DescribeCasterSceneAudioRequest): DescribeCasterSceneAudioResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterSceneAudioWithOptions(request, runtime);
}

model DescribeCasterChannelsRequest = {
  casterId: string(name='CasterId'),
}

model DescribeCasterChannelsResponse = {
  requestId: string(name='RequestId'),
  total: integer(name='Total'),
  channels: {
    channel: [
      {
        channelId: string(name='ChannelId'),
        resourceId: string(name='ResourceId'),
        streamUrl: string(name='StreamUrl'),
        rtmpUrl: string(name='RtmpUrl'),
      }
    ](name='Channel'),
  }(name='Channels'),
}

async function describeCasterChannelsWithOptions(request: DescribeCasterChannelsRequest, runtime: Util.RuntimeOptions): DescribeCasterChannelsResponse {
  Util.validateModel(request);
  return doRequest('DescribeCasterChannels', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeCasterChannels(request: DescribeCasterChannelsRequest): DescribeCasterChannelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterChannelsWithOptions(request, runtime);
}

model UpdateBoardRequest = {
  appId: string(name='AppId'),
  boardData: string(name='BoardData'),
}

model UpdateBoardResponse = {
  requestId: string(name='RequestId'),
}

async function updateBoardWithOptions(request: UpdateBoardRequest, runtime: Util.RuntimeOptions): UpdateBoardResponse {
  Util.validateModel(request);
  return doRequest('UpdateBoard', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function updateBoard(request: UpdateBoardRequest): UpdateBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBoardWithOptions(request, runtime);
}

model JoinBoardRequest = {
  appId: string(name='AppId'),
  appUid: string(name='AppUid'),
  boardId: string(name='BoardId'),
}

model JoinBoardResponse = {
  requestId: string(name='RequestId'),
  token: string(name='Token'),
  boardId: string(name='BoardId'),
  topicId: string(name='TopicId'),
  keepaliveTopic: string(name='KeepaliveTopic'),
  keepaliveInterval: integer(name='KeepaliveInterval'),
}

async function joinBoardWithOptions(request: JoinBoardRequest, runtime: Util.RuntimeOptions): JoinBoardResponse {
  Util.validateModel(request);
  return doRequest('JoinBoard', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function joinBoard(request: JoinBoardRequest): JoinBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinBoardWithOptions(request, runtime);
}

model DescribeBoardSnapshotRequest = {
  appId: string(name='AppId'),
  boardId: string(name='BoardId'),
}

model DescribeBoardSnapshotResponse = {
  requestId: string(name='RequestId'),
  snapshot: {
    board: {
      boardId: string(name='BoardId'),
      appUid: string(name='AppUid'),
      eventTimestamp: long(name='EventTimestamp'),
      createTimestamp: long(name='CreateTimestamp'),
      updateTimestamp: long(name='UpdateTimestamp'),
      pages: [
        {
          pageIndex: integer(name='PageIndex'),
          elements: [
            {
              elementIndex: string(name='ElementIndex'),
              ownerId: string(name='OwnerId'),
              elementType: integer(name='ElementType'),
              updateTimestamp: long(name='UpdateTimestamp'),
              data: string(name='Data'),
            }
          ](name='Elements'),
        }
      ](name='Pages'),
      configs: [
        {
          appUid: string(name='AppUid'),
          data: string(name='Data'),
        }
      ](name='Configs'),
    }(name='Board'),
  }(name='Snapshot'),
}

async function describeBoardSnapshotWithOptions(request: DescribeBoardSnapshotRequest, runtime: Util.RuntimeOptions): DescribeBoardSnapshotResponse {
  Util.validateModel(request);
  return doRequest('DescribeBoardSnapshot', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeBoardSnapshot(request: DescribeBoardSnapshotRequest): DescribeBoardSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBoardSnapshotWithOptions(request, runtime);
}

model DescribeBoardsRequest = {
  appId: string(name='AppId'),
  pageNum: integer(name='PageNum'),
  pageSize: integer(name='PageSize'),
}

model DescribeBoardsResponse = {
  requestId: string(name='RequestId'),
  boards: [
    {
      boardId: string(name='BoardId'),
      topic: string(name='Topic'),
      state: integer(name='State'),
      userId: string(name='UserId'),
    }
  ](name='Boards'),
}

async function describeBoardsWithOptions(request: DescribeBoardsRequest, runtime: Util.RuntimeOptions): DescribeBoardsResponse {
  Util.validateModel(request);
  return doRequest('DescribeBoards', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeBoards(request: DescribeBoardsRequest): DescribeBoardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBoardsWithOptions(request, runtime);
}

model DescribeBoardEventsRequest = {
  appId: string(name='AppId'),
  startTime: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  boardId: string(name='BoardId'),
}

model DescribeBoardEventsResponse = {
  requestId: string(name='RequestId'),
  events: [
    {
      eventId: long(name='EventId'),
      eventType: integer(name='EventType'),
      userId: integer(name='UserId'),
      data: string(name='Data'),
      timestamp: long(name='Timestamp'),
    }
  ](name='Events'),
}

async function describeBoardEventsWithOptions(request: DescribeBoardEventsRequest, runtime: Util.RuntimeOptions): DescribeBoardEventsResponse {
  Util.validateModel(request);
  return doRequest('DescribeBoardEvents', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeBoardEvents(request: DescribeBoardEventsRequest): DescribeBoardEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBoardEventsWithOptions(request, runtime);
}

model DeleteBoardRequest = {
  appId: string(name='AppId'),
  boardId: string(name='BoardId'),
}

model DeleteBoardResponse = {
  requestId: string(name='RequestId'),
}

async function deleteBoardWithOptions(request: DeleteBoardRequest, runtime: Util.RuntimeOptions): DeleteBoardResponse {
  Util.validateModel(request);
  return doRequest('DeleteBoard', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteBoard(request: DeleteBoardRequest): DeleteBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBoardWithOptions(request, runtime);
}

model CreateBoardRequest = {
  appId: string(name='AppId'),
  appUid: string(name='AppUid'),
}

model CreateBoardResponse = {
  requestId: string(name='RequestId'),
  boardId: string(name='BoardId'),
}

async function createBoardWithOptions(request: CreateBoardRequest, runtime: Util.RuntimeOptions): CreateBoardResponse {
  Util.validateModel(request);
  return doRequest('CreateBoard', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function createBoard(request: CreateBoardRequest): CreateBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBoardWithOptions(request, runtime);
}

model CompleteBoardRequest = {
  appId: string(name='AppId'),
  boardId: string(name='BoardId'),
}

model CompleteBoardResponse = {
  requestId: string(name='RequestId'),
}

async function completeBoardWithOptions(request: CompleteBoardRequest, runtime: Util.RuntimeOptions): CompleteBoardResponse {
  Util.validateModel(request);
  return doRequest('CompleteBoard', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function completeBoard(request: CompleteBoardRequest): CompleteBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeBoardWithOptions(request, runtime);
}

model ApplyBoardTokenRequest = {
  appId: string(name='AppId'),
  appUid: string(name='AppUid'),
  boardId: string(name='BoardId'),
}

model ApplyBoardTokenResponse = {
  requestId: string(name='RequestId'),
  token: string(name='Token'),
  expired: string(name='Expired'),
}

async function applyBoardTokenWithOptions(request: ApplyBoardTokenRequest, runtime: Util.RuntimeOptions): ApplyBoardTokenResponse {
  Util.validateModel(request);
  return doRequest('ApplyBoardToken', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function applyBoardToken(request: ApplyBoardTokenRequest): ApplyBoardTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyBoardTokenWithOptions(request, runtime);
}

model DescribeLiveStreamCountRequest = {
  domainName: string(name='DomainName'),
}

model DescribeLiveStreamCountResponse = {
  requestId: string(name='RequestId'),
  streamCountInfos: {
    streamCountInfo: [
      {
        count: long(name='Count'),
        limit: long(name='Limit'),
        type: string(name='Type'),
        streamCountDetails: {
          streamCountDetail: [
            {
              format: string(name='Format'),
              videoDataRate: long(name='VideoDataRate'),
              count: long(name='Count'),
            }
          ](name='StreamCountDetail'),
        }(name='StreamCountDetails'),
      }
    ](name='StreamCountInfo'),
  }(name='StreamCountInfos'),
}

async function describeLiveStreamCountWithOptions(request: DescribeLiveStreamCountRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamCountResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamCount', 'HTTPS', 'GET', '2016-11-01', 'AK', request, null, runtime);
}

async function describeLiveStreamCount(request: DescribeLiveStreamCountRequest): DescribeLiveStreamCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamCountWithOptions(request, runtime);
}

model DescribeLiveCertificateDetailRequest = {
  securityToken?: string(name='SecurityToken'),
  certName: string(name='CertName'),
}

model DescribeLiveCertificateDetailResponse = {
  requestId: string(name='RequestId'),
  cert: string(name='Cert'),
  key: string(name='Key'),
  certId: long(name='CertId'),
  certName: string(name='CertName'),
}

async function describeLiveCertificateDetailWithOptions(request: DescribeLiveCertificateDetailRequest, runtime: Util.RuntimeOptions): DescribeLiveCertificateDetailResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveCertificateDetail', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveCertificateDetail(request: DescribeLiveCertificateDetailRequest): DescribeLiveCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveCertificateDetailWithOptions(request, runtime);
}

model DescribeHlsLiveStreamRealTimeBpsDataRequest = {
  domainName?: string(name='DomainName'),
  time: string(name='Time'),
}

model DescribeHlsLiveStreamRealTimeBpsDataResponse = {
  time: string(name='Time'),
  requestId: string(name='RequestId'),
  usageData: [
    {
      domainName: string(name='DomainName'),
      streamInfos: [
        {
          streamName: string(name='StreamName'),
          infos: [
            {
              downFlow: float(name='DownFlow'),
              rate: string(name='Rate'),
              online: float(name='Online'),
            }
          ](name='Infos'),
        }
      ](name='StreamInfos'),
    }
  ](name='UsageData'),
}

async function describeHlsLiveStreamRealTimeBpsDataWithOptions(request: DescribeHlsLiveStreamRealTimeBpsDataRequest, runtime: Util.RuntimeOptions): DescribeHlsLiveStreamRealTimeBpsDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeHlsLiveStreamRealTimeBpsData', 'HTTPS', 'GET', '2016-11-01', 'AK', request, null, runtime);
}

async function describeHlsLiveStreamRealTimeBpsData(request: DescribeHlsLiveStreamRealTimeBpsDataRequest): DescribeHlsLiveStreamRealTimeBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHlsLiveStreamRealTimeBpsDataWithOptions(request, runtime);
}

model StopLiveDomainRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
}

model StopLiveDomainResponse = {
  requestId: string(name='RequestId'),
}

async function stopLiveDomainWithOptions(request: StopLiveDomainRequest, runtime: Util.RuntimeOptions): StopLiveDomainResponse {
  Util.validateModel(request);
  return doRequest('StopLiveDomain', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function stopLiveDomain(request: StopLiveDomainRequest): StopLiveDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopLiveDomainWithOptions(request, runtime);
}

model StartLiveDomainRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
}

model StartLiveDomainResponse = {
  requestId: string(name='RequestId'),
}

async function startLiveDomainWithOptions(request: StartLiveDomainRequest, runtime: Util.RuntimeOptions): StartLiveDomainResponse {
  Util.validateModel(request);
  return doRequest('StartLiveDomain', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function startLiveDomain(request: StartLiveDomainRequest): StartLiveDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return startLiveDomainWithOptions(request, runtime);
}

model SetLiveDomainCertificateRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  certName?: string(name='CertName'),
  certType?: string(name='CertType'),
  SSLProtocol: string(name='SSLProtocol'),
  SSLPub?: string(name='SSLPub'),
  SSLPri?: string(name='SSLPri'),
  forceSet?: string(name='ForceSet'),
}

model SetLiveDomainCertificateResponse = {
  requestId: string(name='RequestId'),
}

async function setLiveDomainCertificateWithOptions(request: SetLiveDomainCertificateRequest, runtime: Util.RuntimeOptions): SetLiveDomainCertificateResponse {
  Util.validateModel(request);
  return doRequest('SetLiveDomainCertificate', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function setLiveDomainCertificate(request: SetLiveDomainCertificateRequest): SetLiveDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setLiveDomainCertificateWithOptions(request, runtime);
}

model BatchSetLiveDomainConfigsRequest = {
  securityToken?: string(name='SecurityToken'),
  domainNames: string(name='DomainNames'),
  functions: string(name='Functions'),
}

model BatchSetLiveDomainConfigsResponse = {
  requestId: string(name='RequestId'),
}

async function batchSetLiveDomainConfigsWithOptions(request: BatchSetLiveDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchSetLiveDomainConfigsResponse {
  Util.validateModel(request);
  return doRequest('BatchSetLiveDomainConfigs', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function batchSetLiveDomainConfigs(request: BatchSetLiveDomainConfigsRequest): BatchSetLiveDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetLiveDomainConfigsWithOptions(request, runtime);
}

model DescribeLiveCertificateListRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model DescribeLiveCertificateListResponse = {
  requestId: string(name='RequestId'),
  certificateListModel: {
    count: integer(name='Count'),
    certList: {
      cert: [
        {
          certName: string(name='CertName'),
          certId: long(name='CertId'),
          fingerprint: string(name='Fingerprint'),
          common: string(name='Common'),
          issuer: string(name='Issuer'),
          lastTime: long(name='LastTime'),
        }
      ](name='Cert'),
    }(name='CertList'),
  }(name='CertificateListModel'),
}

async function describeLiveCertificateListWithOptions(request: DescribeLiveCertificateListRequest, runtime: Util.RuntimeOptions): DescribeLiveCertificateListResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveCertificateList', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveCertificateList(request: DescribeLiveCertificateListRequest): DescribeLiveCertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveCertificateListWithOptions(request, runtime);
}

model DeleteLiveDomainRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
}

model DeleteLiveDomainResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveDomainWithOptions(request: DeleteLiveDomainRequest, runtime: Util.RuntimeOptions): DeleteLiveDomainResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveDomain', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteLiveDomain(request: DeleteLiveDomainRequest): DeleteLiveDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveDomainWithOptions(request, runtime);
}

model DescribeLiveDomainConfigsRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  functionNames: string(name='FunctionNames'),
}

model DescribeLiveDomainConfigsResponse = {
  requestId: string(name='RequestId'),
  domainConfigs: {
    domainConfig: [
      {
        functionName: string(name='FunctionName'),
        configId: string(name='ConfigId'),
        status: string(name='Status'),
        functionArgs: {
          functionArg: [
            {
              argName: string(name='ArgName'),
              argValue: string(name='ArgValue'),
            }
          ](name='FunctionArg'),
        }(name='FunctionArgs'),
      }
    ](name='DomainConfig'),
  }(name='DomainConfigs'),
}

async function describeLiveDomainConfigsWithOptions(request: DescribeLiveDomainConfigsRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainConfigsResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainConfigs', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainConfigs(request: DescribeLiveDomainConfigsRequest): DescribeLiveDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainConfigsWithOptions(request, runtime);
}

model AddLiveDomainRequest = {
  securityToken?: string(name='SecurityToken'),
  liveDomainType: string(name='LiveDomainType'),
  domainName: string(name='DomainName'),
  region: string(name='Region'),
  checkUrl?: string(name='CheckUrl'),
  scope?: string(name='Scope'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model AddLiveDomainResponse = {
  requestId: string(name='RequestId'),
}

async function addLiveDomainWithOptions(request: AddLiveDomainRequest, runtime: Util.RuntimeOptions): AddLiveDomainResponse {
  Util.validateModel(request);
  return doRequest('AddLiveDomain', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addLiveDomain(request: AddLiveDomainRequest): AddLiveDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveDomainWithOptions(request, runtime);
}

model DescribeLiveDomainDetailRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
}

model DescribeLiveDomainDetailResponse = {
  requestId: string(name='RequestId'),
  domainDetail: {
    gmtCreated: string(name='GmtCreated'),
    gmtModified: string(name='GmtModified'),
    domainStatus: string(name='DomainStatus'),
    cname: string(name='Cname'),
    domainName: string(name='DomainName'),
    liveDomainType: string(name='LiveDomainType'),
    region: string(name='Region'),
    description: string(name='Description'),
    SSLProtocol: string(name='SSLProtocol'),
    SSLPub: string(name='SSLPub'),
    scope: string(name='Scope'),
    certName: string(name='CertName'),
  }(name='DomainDetail'),
}

async function describeLiveDomainDetailWithOptions(request: DescribeLiveDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainDetailResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainDetail', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainDetail(request: DescribeLiveDomainDetailRequest): DescribeLiveDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainDetailWithOptions(request, runtime);
}

model BatchDeleteLiveDomainConfigsRequest = {
  securityToken?: string(name='SecurityToken'),
  domainNames: string(name='DomainNames'),
  functionNames: string(name='FunctionNames'),
}

model BatchDeleteLiveDomainConfigsResponse = {
  requestId: string(name='RequestId'),
}

async function batchDeleteLiveDomainConfigsWithOptions(request: BatchDeleteLiveDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchDeleteLiveDomainConfigsResponse {
  Util.validateModel(request);
  return doRequest('BatchDeleteLiveDomainConfigs', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function batchDeleteLiveDomainConfigs(request: BatchDeleteLiveDomainConfigsRequest): BatchDeleteLiveDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteLiveDomainConfigsWithOptions(request, runtime);
}

model DescribeRoomStatusRequest = {
  appId: string(name='AppId'),
  roomId: string(name='RoomId'),
}

model DescribeRoomStatusResponse = {
  requestId: string(name='RequestId'),
  roomStatus: integer(name='RoomStatus'),
}

async function describeRoomStatusWithOptions(request: DescribeRoomStatusRequest, runtime: Util.RuntimeOptions): DescribeRoomStatusResponse {
  Util.validateModel(request);
  return doRequest('DescribeRoomStatus', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeRoomStatus(request: DescribeRoomStatusRequest): DescribeRoomStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoomStatusWithOptions(request, runtime);
}

model DescribeRoomListRequest = {
  appId: string(name='AppId'),
  roomId?: string(name='RoomId'),
  anchorId?: string(name='AnchorId'),
  roomStatus?: integer(name='RoomStatus'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  order?: string(name='Order'),
  pageNum?: integer(name='PageNum'),
  pageSize?: integer(name='PageSize'),
}

model DescribeRoomListResponse = {
  requestId: string(name='RequestId'),
  totalNum: integer(name='TotalNum'),
  totalPage: integer(name='TotalPage'),
  roomList: [
    {
      roomId: string(name='RoomId'),
      anchorId: string(name='AnchorId'),
      roomStatus: integer(name='RoomStatus'),
      forbidStream: string(name='ForbidStream'),
      createTime: string(name='CreateTime'),
    }
  ](name='RoomList'),
}

async function describeRoomListWithOptions(request: DescribeRoomListRequest, runtime: Util.RuntimeOptions): DescribeRoomListResponse {
  Util.validateModel(request);
  return doRequest('DescribeRoomList', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeRoomList(request: DescribeRoomListRequest): DescribeRoomListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoomListWithOptions(request, runtime);
}

model DescribeRoomKickoutUserListRequest = {
  appId: string(name='AppId'),
  roomId: string(name='RoomId'),
  order?: string(name='Order'),
  pageNum?: integer(name='PageNum'),
  pageSize?: integer(name='PageSize'),
}

model DescribeRoomKickoutUserListResponse = {
  requestId: string(name='RequestId'),
  totalNum: integer(name='TotalNum'),
  totalPage: integer(name='TotalPage'),
  userList: [
    {
      appUid: string(name='AppUid'),
      opStartTime: string(name='OpStartTime'),
      opEndTime: string(name='OpEndTime'),
    }
  ](name='UserList'),
}

async function describeRoomKickoutUserListWithOptions(request: DescribeRoomKickoutUserListRequest, runtime: Util.RuntimeOptions): DescribeRoomKickoutUserListResponse {
  Util.validateModel(request);
  return doRequest('DescribeRoomKickoutUserList', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeRoomKickoutUserList(request: DescribeRoomKickoutUserListRequest): DescribeRoomKickoutUserListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoomKickoutUserListWithOptions(request, runtime);
}

model SendRoomUserNotificationRequest = {
  appId: string(name='AppId'),
  roomId: string(name='RoomId'),
  appUid: string(name='AppUid'),
  toAppUid: string(name='ToAppUid'),
  data: string(name='Data'),
  priority?: integer(name='Priority'),
}

model SendRoomUserNotificationResponse = {
  requestId: string(name='RequestId'),
  messageId: string(name='MessageId'),
}

async function sendRoomUserNotificationWithOptions(request: SendRoomUserNotificationRequest, runtime: Util.RuntimeOptions): SendRoomUserNotificationResponse {
  Util.validateModel(request);
  return doRequest('SendRoomUserNotification', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function sendRoomUserNotification(request: SendRoomUserNotificationRequest): SendRoomUserNotificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendRoomUserNotificationWithOptions(request, runtime);
}

model DescribeForbidPushStreamRoomListRequest = {
  appId: string(name='AppId'),
  order?: string(name='Order'),
  pageNum?: integer(name='PageNum'),
  pageSize?: integer(name='PageSize'),
}

model DescribeForbidPushStreamRoomListResponse = {
  requestId: string(name='RequestId'),
  totalNum: integer(name='TotalNum'),
  totalPage: integer(name='TotalPage'),
  roomList: [
    {
      roomId: string(name='RoomId'),
      anchorId: string(name='AnchorId'),
      opStartTime: string(name='OpStartTime'),
      opEndTime: string(name='OpEndTime'),
    }
  ](name='RoomList'),
}

async function describeForbidPushStreamRoomListWithOptions(request: DescribeForbidPushStreamRoomListRequest, runtime: Util.RuntimeOptions): DescribeForbidPushStreamRoomListResponse {
  Util.validateModel(request);
  return doRequest('DescribeForbidPushStreamRoomList', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeForbidPushStreamRoomList(request: DescribeForbidPushStreamRoomListRequest): DescribeForbidPushStreamRoomListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeForbidPushStreamRoomListWithOptions(request, runtime);
}

model SendRoomNotificationRequest = {
  appId: string(name='AppId'),
  roomId: string(name='RoomId'),
  appUid?: string(name='AppUid'),
  data: string(name='Data'),
  priority?: integer(name='Priority'),
}

model SendRoomNotificationResponse = {
  requestId: string(name='RequestId'),
  messageId: string(name='MessageId'),
}

async function sendRoomNotificationWithOptions(request: SendRoomNotificationRequest, runtime: Util.RuntimeOptions): SendRoomNotificationResponse {
  Util.validateModel(request);
  return doRequest('SendRoomNotification', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function sendRoomNotification(request: SendRoomNotificationRequest): SendRoomNotificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendRoomNotificationWithOptions(request, runtime);
}

model ForbidPushStreamRequest = {
  appId: string(name='AppId'),
  roomId: string(name='RoomId'),
  userData?: string(name='UserData'),
  endTime?: string(name='EndTime'),
}

model ForbidPushStreamResponse = {
  requestId: string(name='RequestId'),
}

async function forbidPushStreamWithOptions(request: ForbidPushStreamRequest, runtime: Util.RuntimeOptions): ForbidPushStreamResponse {
  Util.validateModel(request);
  return doRequest('ForbidPushStream', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function forbidPushStream(request: ForbidPushStreamRequest): ForbidPushStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return forbidPushStreamWithOptions(request, runtime);
}

model DeleteRoomRequest = {
  appId: string(name='AppId'),
  roomId: string(name='RoomId'),
}

model DeleteRoomResponse = {
  requestId: string(name='RequestId'),
}

async function deleteRoomWithOptions(request: DeleteRoomRequest, runtime: Util.RuntimeOptions): DeleteRoomResponse {
  Util.validateModel(request);
  return doRequest('DeleteRoom', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteRoom(request: DeleteRoomRequest): DeleteRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoomWithOptions(request, runtime);
}

model CreateRoomRequest = {
  appId: string(name='AppId'),
  roomId: string(name='RoomId'),
  anchorId: string(name='AnchorId'),
  templateIds?: string(name='TemplateIds'),
  useAppTranscode?: boolean(name='UseAppTranscode'),
}

model CreateRoomResponse = {
  requestId: string(name='RequestId'),
  appId: string(name='AppId'),
  roomId: string(name='RoomId'),
  anchorId: string(name='AnchorId'),
}

async function createRoomWithOptions(request: CreateRoomRequest, runtime: Util.RuntimeOptions): CreateRoomResponse {
  Util.validateModel(request);
  return doRequest('CreateRoom', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function createRoom(request: CreateRoomRequest): CreateRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRoomWithOptions(request, runtime);
}

model AllowPushStreamRequest = {
  appId: string(name='AppId'),
  roomId: string(name='RoomId'),
}

model AllowPushStreamResponse = {
  requestId: string(name='RequestId'),
}

async function allowPushStreamWithOptions(request: AllowPushStreamRequest, runtime: Util.RuntimeOptions): AllowPushStreamResponse {
  Util.validateModel(request);
  return doRequest('AllowPushStream', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function allowPushStream(request: AllowPushStreamRequest): AllowPushStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return allowPushStreamWithOptions(request, runtime);
}

model DescribeLiveUserDomainsRequest = {
  securityToken?: string(name='SecurityToken'),
  liveDomainType?: string(name='LiveDomainType'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
  domainName?: string(name='DomainName'),
  regionName?: string(name='RegionName'),
  domainSearchType?: string(name='DomainSearchType'),
  domainStatus?: string(name='DomainStatus'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeLiveUserDomainsResponse = {
  requestId: string(name='RequestId'),
  pageNumber: long(name='PageNumber'),
  pageSize: long(name='PageSize'),
  totalCount: long(name='TotalCount'),
  domains: {
    pageData: [
      {
        domainName: string(name='DomainName'),
        cname: string(name='Cname'),
        liveDomainType: string(name='LiveDomainType'),
        gmtCreated: string(name='GmtCreated'),
        gmtModified: string(name='GmtModified'),
        description: string(name='Description'),
        liveDomainStatus: string(name='LiveDomainStatus'),
        regionName: string(name='RegionName'),
      }
    ](name='PageData'),
  }(name='Domains'),
}

async function describeLiveUserDomainsWithOptions(request: DescribeLiveUserDomainsRequest, runtime: Util.RuntimeOptions): DescribeLiveUserDomainsResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveUserDomains', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveUserDomains(request: DescribeLiveUserDomainsRequest): DescribeLiveUserDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveUserDomainsWithOptions(request, runtime);
}

model DescribeCasterRtcInfoRequest = {
  casterId: string(name='CasterId'),
}

model DescribeCasterRtcInfoResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
  authToken: string(name='AuthToken'),
}

async function describeCasterRtcInfoWithOptions(request: DescribeCasterRtcInfoRequest, runtime: Util.RuntimeOptions): DescribeCasterRtcInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeCasterRtcInfo', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeCasterRtcInfo(request: DescribeCasterRtcInfoRequest): DescribeCasterRtcInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterRtcInfoWithOptions(request, runtime);
}

model DescribeUpBpsPeakDataRequest = {
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  domainSwitch?: string(name='DomainSwitch'),
  domainName?: string(name='DomainName'),
}

model DescribeUpBpsPeakDataResponse = {
  requestId: string(name='RequestId'),
  describeUpPeakTraffics: {
    describeUpPeakTraffic: [
      {
        peakTime: string(name='PeakTime'),
        queryTime: string(name='QueryTime'),
        statName: string(name='StatName'),
        bandWidth: string(name='BandWidth'),
      }
    ](name='DescribeUpPeakTraffic'),
  }(name='DescribeUpPeakTraffics'),
}

async function describeUpBpsPeakDataWithOptions(request: DescribeUpBpsPeakDataRequest, runtime: Util.RuntimeOptions): DescribeUpBpsPeakDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeUpBpsPeakData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeUpBpsPeakData(request: DescribeUpBpsPeakDataRequest): DescribeUpBpsPeakDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUpBpsPeakDataWithOptions(request, runtime);
}

model DescribeUpBpsPeakOfLineRequest = {
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  line: string(name='Line'),
  domainSwitch?: string(name='DomainSwitch'),
  domainName?: string(name='DomainName'),
}

model DescribeUpBpsPeakOfLineResponse = {
  requestId: string(name='RequestId'),
  describeUpBpsPeakOfLines: {
    describeUpBpsPeakOfLine: [
      {
        bandWidth: float(name='BandWidth'),
        peakTime: string(name='PeakTime'),
        queryTime: string(name='QueryTime'),
        statName: string(name='StatName'),
      }
    ](name='DescribeUpBpsPeakOfLine'),
  }(name='DescribeUpBpsPeakOfLines'),
}

async function describeUpBpsPeakOfLineWithOptions(request: DescribeUpBpsPeakOfLineRequest, runtime: Util.RuntimeOptions): DescribeUpBpsPeakOfLineResponse {
  Util.validateModel(request);
  return doRequest('DescribeUpBpsPeakOfLine', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeUpBpsPeakOfLine(request: DescribeUpBpsPeakOfLineRequest): DescribeUpBpsPeakOfLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUpBpsPeakOfLineWithOptions(request, runtime);
}

model DescribeUpPeakPublishStreamDataRequest = {
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  domainSwitch?: string(name='DomainSwitch'),
  domainName?: string(name='DomainName'),
}

model DescribeUpPeakPublishStreamDataResponse = {
  requestId: string(name='RequestId'),
  describeUpPeakPublishStreamDatas: {
    describeUpPeakPublishStreamData: [
      {
        publishStreamNum: integer(name='PublishStreamNum'),
        peakTime: string(name='PeakTime'),
        queryTime: string(name='QueryTime'),
        statName: string(name='StatName'),
        bandWidth: string(name='BandWidth'),
      }
    ](name='DescribeUpPeakPublishStreamData'),
  }(name='DescribeUpPeakPublishStreamDatas'),
}

async function describeUpPeakPublishStreamDataWithOptions(request: DescribeUpPeakPublishStreamDataRequest, runtime: Util.RuntimeOptions): DescribeUpPeakPublishStreamDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeUpPeakPublishStreamData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeUpPeakPublishStreamData(request: DescribeUpPeakPublishStreamDataRequest): DescribeUpPeakPublishStreamDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUpPeakPublishStreamDataWithOptions(request, runtime);
}

model DeleteLiveDomainMappingRequest = {
  securityToken?: string(name='SecurityToken'),
  pushDomain: string(name='PushDomain'),
  pullDomain: string(name='PullDomain'),
}

model DeleteLiveDomainMappingResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveDomainMappingWithOptions(request: DeleteLiveDomainMappingRequest, runtime: Util.RuntimeOptions): DeleteLiveDomainMappingResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveDomainMapping', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteLiveDomainMapping(request: DeleteLiveDomainMappingRequest): DeleteLiveDomainMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveDomainMappingWithOptions(request, runtime);
}

model AddLiveDomainMappingRequest = {
  securityToken?: string(name='SecurityToken'),
  pushDomain: string(name='PushDomain'),
  pullDomain: string(name='PullDomain'),
}

model AddLiveDomainMappingResponse = {
  requestId: string(name='RequestId'),
}

async function addLiveDomainMappingWithOptions(request: AddLiveDomainMappingRequest, runtime: Util.RuntimeOptions): AddLiveDomainMappingResponse {
  Util.validateModel(request);
  return doRequest('AddLiveDomainMapping', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addLiveDomainMapping(request: AddLiveDomainMappingRequest): AddLiveDomainMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveDomainMappingWithOptions(request, runtime);
}

model AddCasterEpisodeGroupContentRequest = {
  clientToken: string(name='ClientToken'),
  content: string(name='Content'),
}

model AddCasterEpisodeGroupContentResponse = {
  requestId: string(name='RequestId'),
  programId: string(name='ProgramId'),
  itemIds: {
    itemId: [ string ](name='ItemId'),
  }(name='ItemIds'),
}

async function addCasterEpisodeGroupContentWithOptions(request: AddCasterEpisodeGroupContentRequest, runtime: Util.RuntimeOptions): AddCasterEpisodeGroupContentResponse {
  Util.validateModel(request);
  return doRequest('AddCasterEpisodeGroupContent', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addCasterEpisodeGroupContent(request: AddCasterEpisodeGroupContentRequest): AddCasterEpisodeGroupContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCasterEpisodeGroupContentWithOptions(request, runtime);
}

model ModifyCasterProgramRequest = {
  casterId: string(name='CasterId'),
  episode: [
    {
      episodeId?: string(name='EpisodeId'),
      episodeType?: string(name='EpisodeType'),
      episodeName?: string(name='EpisodeName'),
      resourceId?: string(name='ResourceId'),
      componentId?: [ string ](name='ComponentId'),
      startTime?: string(name='StartTime'),
      endTime?: string(name='EndTime'),
      switchType?: string(name='SwitchType'),
    }
  ](name='Episode'),
}

model ModifyCasterProgramResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
}

async function modifyCasterProgramWithOptions(request: ModifyCasterProgramRequest, runtime: Util.RuntimeOptions): ModifyCasterProgramResponse {
  Util.validateModel(request);
  return doRequest('ModifyCasterProgram', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function modifyCasterProgram(request: ModifyCasterProgramRequest): ModifyCasterProgramResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCasterProgramWithOptions(request, runtime);
}

model ModifyCasterEpisodeRequest = {
  casterId: string(name='CasterId'),
  episodeId: string(name='EpisodeId'),
  episodeName?: string(name='EpisodeName'),
  resourceId?: string(name='ResourceId'),
  componentId?: [ string ](name='ComponentId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  switchType?: string(name='SwitchType'),
}

model ModifyCasterEpisodeResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
  episodeId: string(name='EpisodeId'),
}

async function modifyCasterEpisodeWithOptions(request: ModifyCasterEpisodeRequest, runtime: Util.RuntimeOptions): ModifyCasterEpisodeResponse {
  Util.validateModel(request);
  return doRequest('ModifyCasterEpisode', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function modifyCasterEpisode(request: ModifyCasterEpisodeRequest): ModifyCasterEpisodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCasterEpisodeWithOptions(request, runtime);
}

model DescribeCasterProgramRequest = {
  casterId: string(name='CasterId'),
  episodeId?: string(name='EpisodeId'),
  episodeType?: string(name='EpisodeType'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNum?: integer(name='PageNum'),
  pageSize?: integer(name='PageSize'),
  status?: integer(name='Status'),
}

model DescribeCasterProgramResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
  programName: string(name='ProgramName'),
  programEffect: integer(name='ProgramEffect'),
  total: integer(name='Total'),
  episodes: {
    episode: [
      {
        episodeId: string(name='EpisodeId'),
        episodeType: string(name='EpisodeType'),
        episodeName: string(name='EpisodeName'),
        resourceId: string(name='ResourceId'),
        startTime: string(name='StartTime'),
        endTime: string(name='EndTime'),
        switchType: string(name='SwitchType'),
        status: integer(name='Status'),
        componentIds: {
          componentId: [ string ](name='ComponentId', description='ComponentId'),
        }(name='ComponentIds'),
      }
    ](name='Episode'),
  }(name='Episodes'),
}

async function describeCasterProgramWithOptions(request: DescribeCasterProgramRequest, runtime: Util.RuntimeOptions): DescribeCasterProgramResponse {
  Util.validateModel(request);
  return doRequest('DescribeCasterProgram', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeCasterProgram(request: DescribeCasterProgramRequest): DescribeCasterProgramResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterProgramWithOptions(request, runtime);
}

model DeleteCasterProgramRequest = {
  casterId: string(name='CasterId'),
}

model DeleteCasterProgramResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
}

async function deleteCasterProgramWithOptions(request: DeleteCasterProgramRequest, runtime: Util.RuntimeOptions): DeleteCasterProgramResponse {
  Util.validateModel(request);
  return doRequest('DeleteCasterProgram', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteCasterProgram(request: DeleteCasterProgramRequest): DeleteCasterProgramResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterProgramWithOptions(request, runtime);
}

model DeleteCasterEpisodeGroupRequest = {
  programId: string(name='ProgramId'),
}

model DeleteCasterEpisodeGroupResponse = {
  requestId: string(name='RequestId'),
}

async function deleteCasterEpisodeGroupWithOptions(request: DeleteCasterEpisodeGroupRequest, runtime: Util.RuntimeOptions): DeleteCasterEpisodeGroupResponse {
  Util.validateModel(request);
  return doRequest('DeleteCasterEpisodeGroup', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteCasterEpisodeGroup(request: DeleteCasterEpisodeGroupRequest): DeleteCasterEpisodeGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterEpisodeGroupWithOptions(request, runtime);
}

model DeleteCasterEpisodeRequest = {
  casterId: string(name='CasterId'),
  episodeId: string(name='EpisodeId'),
}

model DeleteCasterEpisodeResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
  episodeId: string(name='EpisodeId'),
}

async function deleteCasterEpisodeWithOptions(request: DeleteCasterEpisodeRequest, runtime: Util.RuntimeOptions): DeleteCasterEpisodeResponse {
  Util.validateModel(request);
  return doRequest('DeleteCasterEpisode', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteCasterEpisode(request: DeleteCasterEpisodeRequest): DeleteCasterEpisodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterEpisodeWithOptions(request, runtime);
}

model AddCasterProgramRequest = {
  casterId: string(name='CasterId'),
  episode: [
    {
      episodeType?: string(name='EpisodeType'),
      episodeName?: string(name='EpisodeName'),
      resourceId?: string(name='ResourceId'),
      componentId?: [ string ](name='ComponentId'),
      startTime?: string(name='StartTime'),
      endTime?: string(name='EndTime'),
      switchType?: string(name='SwitchType'),
    }
  ](name='Episode'),
}

model AddCasterProgramResponse = {
  requestId: string(name='RequestId'),
  episodeIds: {
    episodeId: [
      {
        episodeId: string(name='EpisodeId'),
      }
    ](name='EpisodeId'),
  }(name='EpisodeIds'),
}

async function addCasterProgramWithOptions(request: AddCasterProgramRequest, runtime: Util.RuntimeOptions): AddCasterProgramResponse {
  Util.validateModel(request);
  return doRequest('AddCasterProgram', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addCasterProgram(request: AddCasterProgramRequest): AddCasterProgramResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCasterProgramWithOptions(request, runtime);
}

model AddCasterEpisodeGroupRequest = {
  clientToken: string(name='ClientToken'),
  domainName: string(name='DomainName'),
  item: [
    {
      itemName?: string(name='ItemName'),
      vodUrl?: string(name='VodUrl'),
    }
  ](name='Item'),
  startTime: string(name='StartTime'),
  repeatNum: integer(name='RepeatNum'),
  sideOutputUrl: string(name='SideOutputUrl'),
  callbackUrl: string(name='CallbackUrl'),
}

model AddCasterEpisodeGroupResponse = {
  requestId: string(name='RequestId'),
  programId: string(name='ProgramId'),
  itemIds: {
    itemId: [ string ](name='ItemId'),
  }(name='ItemIds'),
}

async function addCasterEpisodeGroupWithOptions(request: AddCasterEpisodeGroupRequest, runtime: Util.RuntimeOptions): AddCasterEpisodeGroupResponse {
  Util.validateModel(request);
  return doRequest('AddCasterEpisodeGroup', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addCasterEpisodeGroup(request: AddCasterEpisodeGroupRequest): AddCasterEpisodeGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCasterEpisodeGroupWithOptions(request, runtime);
}

model AddCasterEpisodeRequest = {
  casterId: string(name='CasterId'),
  episodeType: string(name='EpisodeType'),
  episodeName?: string(name='EpisodeName'),
  resourceId?: string(name='ResourceId'),
  componentId?: [ string ](name='ComponentId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  switchType: string(name='SwitchType'),
}

model AddCasterEpisodeResponse = {
  requestId: string(name='RequestId'),
  episodeId: string(name='EpisodeId'),
}

async function addCasterEpisodeWithOptions(request: AddCasterEpisodeRequest, runtime: Util.RuntimeOptions): AddCasterEpisodeResponse {
  Util.validateModel(request);
  return doRequest('AddCasterEpisode', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addCasterEpisode(request: AddCasterEpisodeRequest): AddCasterEpisodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCasterEpisodeWithOptions(request, runtime);
}

model DescribeLiveDomainTranscodeDataRequest = {
  domainName?: string(name='DomainName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model DescribeLiveDomainTranscodeDataResponse = {
  requestId: string(name='RequestId'),
  transcodeDataInfos: {
    transcodeDataInfo: [
      {
        date: string(name='Date'),
        total: integer(name='Total'),
        detail: string(name='Detail'),
      }
    ](name='TranscodeDataInfo'),
  }(name='TranscodeDataInfos'),
}

async function describeLiveDomainTranscodeDataWithOptions(request: DescribeLiveDomainTranscodeDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainTranscodeDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainTranscodeData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainTranscodeData(request: DescribeLiveDomainTranscodeDataRequest): DescribeLiveDomainTranscodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainTranscodeDataWithOptions(request, runtime);
}

model DescribeLiveDomainSnapshotDataRequest = {
  domainName?: string(name='DomainName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model DescribeLiveDomainSnapshotDataResponse = {
  requestId: string(name='RequestId'),
  snapshotDataInfos: {
    snapshotDataInfo: [
      {
        date: string(name='Date'),
        total: integer(name='Total'),
      }
    ](name='SnapshotDataInfo'),
  }(name='SnapshotDataInfos'),
}

async function describeLiveDomainSnapshotDataWithOptions(request: DescribeLiveDomainSnapshotDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainSnapshotDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainSnapshotData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainSnapshotData(request: DescribeLiveDomainSnapshotDataRequest): DescribeLiveDomainSnapshotDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainSnapshotDataWithOptions(request, runtime);
}

model DescribeLiveDomainRecordDataRequest = {
  domainName?: string(name='DomainName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  recordType?: string(name='RecordType'),
}

model DescribeLiveDomainRecordDataResponse = {
  requestId: string(name='RequestId'),
  recordDataInfos: {
    recordDataInfo: [
      {
        date: string(name='Date'),
        total: integer(name='Total'),
        detail: {
          MP4: integer(name='MP4'),
          FLV: integer(name='FLV'),
          TS: integer(name='TS'),
        }(name='Detail'),
      }
    ](name='RecordDataInfo'),
  }(name='RecordDataInfos'),
}

async function describeLiveDomainRecordDataWithOptions(request: DescribeLiveDomainRecordDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainRecordDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainRecordData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainRecordData(request: DescribeLiveDomainRecordDataRequest): DescribeLiveDomainRecordDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainRecordDataWithOptions(request, runtime);
}

model RealTimeRecordCommandRequest = {
  command: string(name='Command'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
}

model RealTimeRecordCommandResponse = {
  requestId: string(name='RequestId'),
}

async function realTimeRecordCommandWithOptions(request: RealTimeRecordCommandRequest, runtime: Util.RuntimeOptions): RealTimeRecordCommandResponse {
  Util.validateModel(request);
  return doRequest('RealTimeRecordCommand', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function realTimeRecordCommand(request: RealTimeRecordCommandRequest): RealTimeRecordCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return realTimeRecordCommandWithOptions(request, runtime);
}

model DescribeLiveDomainTrafficDataRequest = {
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeLiveDomainTrafficDataResponse = {
  requestId: string(name='RequestId'),
  domainName: string(name='DomainName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  dataInterval: string(name='DataInterval'),
  trafficDataPerInterval: {
    dataModule: [
      {
        timeStamp: string(name='TimeStamp'),
        trafficValue: string(name='TrafficValue'),
        httpTrafficValue: string(name='HttpTrafficValue'),
        httpsTrafficValue: string(name='HttpsTrafficValue'),
      }
    ](name='DataModule'),
  }(name='TrafficDataPerInterval'),
}

async function describeLiveDomainTrafficDataWithOptions(request: DescribeLiveDomainTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainTrafficDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainTrafficData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainTrafficData(request: DescribeLiveDomainTrafficDataRequest): DescribeLiveDomainTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainTrafficDataWithOptions(request, runtime);
}

model DescribeLiveDomainBpsDataRequest = {
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeLiveDomainBpsDataResponse = {
  requestId: string(name='RequestId'),
  domainName: string(name='DomainName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  dataInterval: string(name='DataInterval'),
  bpsDataPerInterval: {
    dataModule: [
      {
        timeStamp: string(name='TimeStamp'),
        bpsValue: string(name='BpsValue'),
        httpBpsValue: string(name='HttpBpsValue'),
        httpsBpsValue: string(name='HttpsBpsValue'),
      }
    ](name='DataModule'),
  }(name='BpsDataPerInterval'),
}

async function describeLiveDomainBpsDataWithOptions(request: DescribeLiveDomainBpsDataRequest, runtime: Util.RuntimeOptions): DescribeLiveDomainBpsDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDomainBpsData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDomainBpsData(request: DescribeLiveDomainBpsDataRequest): DescribeLiveDomainBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDomainBpsDataWithOptions(request, runtime);
}

model AddTrancodeSEIRequest = {
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  text: string(name='Text'),
  pattern: string(name='Pattern'),
  repeat: integer(name='Repeat'),
  delay: integer(name='Delay'),
}

model AddTrancodeSEIResponse = {
  requestId: string(name='RequestId'),
}

async function addTrancodeSEIWithOptions(request: AddTrancodeSEIRequest, runtime: Util.RuntimeOptions): AddTrancodeSEIResponse {
  Util.validateModel(request);
  return doRequest('AddTrancodeSEI', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addTrancodeSEI(request: AddTrancodeSEIRequest): AddTrancodeSEIResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTrancodeSEIWithOptions(request, runtime);
}

model DeleteCasterSceneConfigRequest = {
  casterId: string(name='CasterId'),
  sceneId: string(name='SceneId'),
  type: string(name='Type'),
}

model DeleteCasterSceneConfigResponse = {
  requestId: string(name='RequestId'),
}

async function deleteCasterSceneConfigWithOptions(request: DeleteCasterSceneConfigRequest, runtime: Util.RuntimeOptions): DeleteCasterSceneConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteCasterSceneConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteCasterSceneConfig(request: DeleteCasterSceneConfigRequest): DeleteCasterSceneConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterSceneConfigWithOptions(request, runtime);
}

model AddCustomLiveStreamTranscodeRequest = {
  domain: string(name='Domain'),
  app: string(name='App'),
  template: string(name='Template'),
  templateType: string(name='TemplateType'),
  height?: integer(name='Height'),
  width?: integer(name='Width'),
  FPS?: integer(name='FPS'),
  videoBitrate?: integer(name='VideoBitrate'),
  audioBitrate?: integer(name='AudioBitrate'),
  gop?: string(name='Gop'),
  profile?: integer(name='Profile'),
  audioProfile?: string(name='AudioProfile'),
  audioCodec?: string(name='AudioCodec'),
  audioRate?: integer(name='AudioRate'),
  audioChannelNum?: integer(name='AudioChannelNum'),
  lazy?: string(name='Lazy'),
}

model AddCustomLiveStreamTranscodeResponse = {
  requestId: string(name='RequestId'),
}

async function addCustomLiveStreamTranscodeWithOptions(request: AddCustomLiveStreamTranscodeRequest, runtime: Util.RuntimeOptions): AddCustomLiveStreamTranscodeResponse {
  Util.validateModel(request);
  return doRequest('AddCustomLiveStreamTranscode', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addCustomLiveStreamTranscode(request: AddCustomLiveStreamTranscodeRequest): AddCustomLiveStreamTranscodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCustomLiveStreamTranscodeWithOptions(request, runtime);
}

model DescribeLiveRecordVodConfigsRequest = {
  domainName: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
}

model DescribeLiveRecordVodConfigsResponse = {
  requestId: string(name='RequestId'),
  pageNum: integer(name='PageNum'),
  pageSize: integer(name='PageSize'),
  total: string(name='Total'),
  liveRecordVodConfigs: {
    liveRecordVodConfig: [
      {
        createTime: string(name='CreateTime'),
        domainName: string(name='DomainName'),
        appName: string(name='AppName'),
        streamName: string(name='StreamName'),
        vodTranscodeGroupId: string(name='VodTranscodeGroupId'),
        cycleDuration: integer(name='CycleDuration'),
        autoCompose: string(name='AutoCompose'),
        composeVodTranscodeGroupId: string(name='ComposeVodTranscodeGroupId'),
      }
    ](name='LiveRecordVodConfig'),
  }(name='LiveRecordVodConfigs'),
}

async function describeLiveRecordVodConfigsWithOptions(request: DescribeLiveRecordVodConfigsRequest, runtime: Util.RuntimeOptions): DescribeLiveRecordVodConfigsResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveRecordVodConfigs', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveRecordVodConfigs(request: DescribeLiveRecordVodConfigsRequest): DescribeLiveRecordVodConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveRecordVodConfigsWithOptions(request, runtime);
}

model DeleteLiveRecordVodConfigRequest = {
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName?: string(name='StreamName'),
}

model DeleteLiveRecordVodConfigResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveRecordVodConfigWithOptions(request: DeleteLiveRecordVodConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveRecordVodConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveRecordVodConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteLiveRecordVodConfig(request: DeleteLiveRecordVodConfigRequest): DeleteLiveRecordVodConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveRecordVodConfigWithOptions(request, runtime);
}

model AddLiveRecordVodConfigRequest = {
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName?: string(name='StreamName'),
  vodTranscodeGroupId: string(name='VodTranscodeGroupId'),
  cycleDuration?: integer(name='CycleDuration'),
  autoCompose?: string(name='AutoCompose'),
  storageLocation?: string(name='StorageLocation'),
  composeVodTranscodeGroupId?: string(name='ComposeVodTranscodeGroupId'),
}

model AddLiveRecordVodConfigResponse = {
  requestId: string(name='RequestId'),
}

async function addLiveRecordVodConfigWithOptions(request: AddLiveRecordVodConfigRequest, runtime: Util.RuntimeOptions): AddLiveRecordVodConfigResponse {
  Util.validateModel(request);
  return doRequest('AddLiveRecordVodConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addLiveRecordVodConfig(request: AddLiveRecordVodConfigRequest): AddLiveRecordVodConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveRecordVodConfigWithOptions(request, runtime);
}

model ModifyCasterComponentRequest = {
  casterId: string(name='CasterId'),
  componentId: string(name='ComponentId'),
  componentName?: string(name='ComponentName'),
  componentType?: string(name='ComponentType'),
  effect?: string(name='Effect'),
  componentLayer?: string(name='ComponentLayer'),
  textLayerContent?: string(name='TextLayerContent'),
  imageLayerContent?: string(name='ImageLayerContent'),
  captionLayerContent?: string(name='CaptionLayerContent'),
}

model ModifyCasterComponentResponse = {
  requestId: string(name='RequestId'),
  componentId: string(name='ComponentId'),
}

async function modifyCasterComponentWithOptions(request: ModifyCasterComponentRequest, runtime: Util.RuntimeOptions): ModifyCasterComponentResponse {
  Util.validateModel(request);
  return doRequest('ModifyCasterComponent', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function modifyCasterComponent(request: ModifyCasterComponentRequest): ModifyCasterComponentResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCasterComponentWithOptions(request, runtime);
}

model DescribeCasterComponentsRequest = {
  casterId: string(name='CasterId'),
  componentId?: string(name='ComponentId'),
}

model DescribeCasterComponentsResponse = {
  requestId: string(name='RequestId'),
  total: integer(name='Total'),
  components: {
    component: [
      {
        componentId: string(name='ComponentId'),
        componentName: string(name='ComponentName'),
        locationId: string(name='LocationId'),
        componentType: string(name='ComponentType'),
        effect: string(name='Effect'),
        componentLayer: {
          heightNormalized: float(name='HeightNormalized'),
          widthNormalized: float(name='WidthNormalized'),
          positionRefer: string(name='PositionRefer'),
          transparency: integer(name='Transparency'),
          positionNormalizeds: {
            position: [ float ](name='Position', description='Position'),
          }(name='PositionNormalizeds'),
        }(name='ComponentLayer'),
        textLayerContent: {
          text: string(name='Text'),
          color: string(name='Color'),
          fontName: string(name='FontName'),
          sizeNormalized: float(name='SizeNormalized'),
          borderWidthNormalized: float(name='BorderWidthNormalized'),
          borderColor: string(name='BorderColor'),
        }(name='TextLayerContent'),
        imageLayerContent: {
          materialId: string(name='MaterialId'),
        }(name='ImageLayerContent'),
        captionLayerContent: {
          locationId: string(name='LocationId'),
          ptsOffset: integer(name='PtsOffset'),
          wordsCount: integer(name='WordsCount'),
          color: string(name='Color'),
          fontName: string(name='FontName'),
          sizeNormalized: float(name='SizeNormalized'),
          borderWidthNormalized: float(name='BorderWidthNormalized'),
          borderColor: string(name='BorderColor'),
          wordCountPerLine: integer(name='WordCountPerLine'),
          wordSpaceNormalized: float(name='WordSpaceNormalized'),
          lineSpaceNormalized: float(name='LineSpaceNormalized'),
        }(name='CaptionLayerContent'),
      }
    ](name='Component'),
  }(name='Components'),
}

async function describeCasterComponentsWithOptions(request: DescribeCasterComponentsRequest, runtime: Util.RuntimeOptions): DescribeCasterComponentsResponse {
  Util.validateModel(request);
  return doRequest('DescribeCasterComponents', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeCasterComponents(request: DescribeCasterComponentsRequest): DescribeCasterComponentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterComponentsWithOptions(request, runtime);
}

model DeleteCasterComponentRequest = {
  casterId: string(name='CasterId'),
  componentId: string(name='ComponentId'),
}

model DeleteCasterComponentResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
  componentId: string(name='ComponentId'),
}

async function deleteCasterComponentWithOptions(request: DeleteCasterComponentRequest, runtime: Util.RuntimeOptions): DeleteCasterComponentResponse {
  Util.validateModel(request);
  return doRequest('DeleteCasterComponent', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteCasterComponent(request: DeleteCasterComponentRequest): DeleteCasterComponentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterComponentWithOptions(request, runtime);
}

model AddCasterComponentRequest = {
  casterId: string(name='CasterId'),
  componentName?: string(name='ComponentName'),
  locationId: string(name='LocationId'),
  componentType: string(name='ComponentType'),
  effect?: string(name='Effect'),
  componentLayer: string(name='ComponentLayer'),
  layerOrder?: string(name='LayerOrder'),
  textLayerContent?: string(name='TextLayerContent'),
  imageLayerContent?: string(name='ImageLayerContent'),
  captionLayerContent?: string(name='CaptionLayerContent'),
  htmlLayerContent?: string(name='HtmlLayerContent'),
}

model AddCasterComponentResponse = {
  requestId: string(name='RequestId'),
  componentId: string(name='ComponentId'),
}

async function addCasterComponentWithOptions(request: AddCasterComponentRequest, runtime: Util.RuntimeOptions): AddCasterComponentResponse {
  Util.validateModel(request);
  return doRequest('AddCasterComponent', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addCasterComponent(request: AddCasterComponentRequest): AddCasterComponentResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCasterComponentWithOptions(request, runtime);
}

model StopCasterRequest = {
  casterId: string(name='CasterId'),
}

model StopCasterResponse = {
  requestId: string(name='RequestId'),
}

async function stopCasterWithOptions(request: StopCasterRequest, runtime: Util.RuntimeOptions): StopCasterResponse {
  Util.validateModel(request);
  return doRequest('StopCaster', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function stopCaster(request: StopCasterRequest): StopCasterResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopCasterWithOptions(request, runtime);
}

model StartCasterRequest = {
  casterId: string(name='CasterId'),
}

model StartCasterResponse = {
  requestId: string(name='RequestId'),
  pvwSceneInfos: {
    sceneInfo: [
      {
        sceneId: string(name='SceneId'),
        streamUrl: string(name='StreamUrl'),
      }
    ](name='SceneInfo'),
  }(name='PvwSceneInfos'),
  pgmSceneInfos: {
    sceneInfo: [
      {
        sceneId: string(name='SceneId'),
        streamUrl: string(name='StreamUrl'),
        streamInfos: {
          streamInfo: [
            {
              transcodeConfig: string(name='TranscodeConfig'),
              videoFormat: string(name='VideoFormat'),
              outputStreamUrl: string(name='OutputStreamUrl'),
            }
          ](name='StreamInfo'),
        }(name='StreamInfos'),
      }
    ](name='SceneInfo'),
  }(name='PgmSceneInfos'),
}

async function startCasterWithOptions(request: StartCasterRequest, runtime: Util.RuntimeOptions): StartCasterResponse {
  Util.validateModel(request);
  return doRequest('StartCaster', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function startCaster(request: StartCasterRequest): StartCasterResponse {
  var runtime = new Util.RuntimeOptions{};
  return startCasterWithOptions(request, runtime);
}

model DescribeLiveStreamHistoryUserNumRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model DescribeLiveStreamHistoryUserNumResponse = {
  requestId: string(name='RequestId'),
  liveStreamUserNumInfos: {
    liveStreamUserNumInfo: [
      {
        streamTime: string(name='StreamTime'),
        userNum: string(name='UserNum'),
      }
    ](name='LiveStreamUserNumInfo'),
  }(name='LiveStreamUserNumInfos'),
}

async function describeLiveStreamHistoryUserNumWithOptions(request: DescribeLiveStreamHistoryUserNumRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamHistoryUserNumResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamHistoryUserNum', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamHistoryUserNum(request: DescribeLiveStreamHistoryUserNumRequest): DescribeLiveStreamHistoryUserNumResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamHistoryUserNumWithOptions(request, runtime);
}

model UpdateCasterSceneConfigRequest = {
  casterId: string(name='CasterId'),
  sceneId: string(name='SceneId'),
  layoutId: string(name='LayoutId'),
  componentId?: [ string ](name='ComponentId'),
}

model UpdateCasterSceneConfigResponse = {
  requestId: string(name='RequestId'),
}

async function updateCasterSceneConfigWithOptions(request: UpdateCasterSceneConfigRequest, runtime: Util.RuntimeOptions): UpdateCasterSceneConfigResponse {
  Util.validateModel(request);
  return doRequest('UpdateCasterSceneConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function updateCasterSceneConfig(request: UpdateCasterSceneConfigRequest): UpdateCasterSceneConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCasterSceneConfigWithOptions(request, runtime);
}

model StopCasterSceneRequest = {
  casterId: string(name='CasterId'),
  sceneId: string(name='SceneId'),
}

model StopCasterSceneResponse = {
  requestId: string(name='RequestId'),
}

async function stopCasterSceneWithOptions(request: StopCasterSceneRequest, runtime: Util.RuntimeOptions): StopCasterSceneResponse {
  Util.validateModel(request);
  return doRequest('StopCasterScene', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function stopCasterScene(request: StopCasterSceneRequest): StopCasterSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopCasterSceneWithOptions(request, runtime);
}

model StartCasterSceneRequest = {
  casterId: string(name='CasterId'),
  sceneId: string(name='SceneId'),
}

model StartCasterSceneResponse = {
  requestId: string(name='RequestId'),
  streamUrl: string(name='StreamUrl'),
}

async function startCasterSceneWithOptions(request: StartCasterSceneRequest, runtime: Util.RuntimeOptions): StartCasterSceneResponse {
  Util.validateModel(request);
  return doRequest('StartCasterScene', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function startCasterScene(request: StartCasterSceneRequest): StartCasterSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return startCasterSceneWithOptions(request, runtime);
}

model SetCasterSceneConfigRequest = {
  casterId: string(name='CasterId'),
  sceneId: string(name='SceneId'),
  layoutId?: string(name='LayoutId'),
  componentId?: [ string ](name='ComponentId'),
}

model SetCasterSceneConfigResponse = {
  requestId: string(name='RequestId'),
}

async function setCasterSceneConfigWithOptions(request: SetCasterSceneConfigRequest, runtime: Util.RuntimeOptions): SetCasterSceneConfigResponse {
  Util.validateModel(request);
  return doRequest('SetCasterSceneConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function setCasterSceneConfig(request: SetCasterSceneConfigRequest): SetCasterSceneConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCasterSceneConfigWithOptions(request, runtime);
}

model SetCasterConfigRequest = {
  casterId: string(name='CasterId'),
  casterName?: string(name='CasterName'),
  domainName?: string(name='DomainName'),
  transcodeConfig?: string(name='TranscodeConfig'),
  recordConfig?: string(name='RecordConfig'),
  delay?: float(name='Delay'),
  urgentMaterialId?: string(name='UrgentMaterialId'),
  sideOutputUrl?: string(name='SideOutputUrl'),
  callbackUrl?: string(name='CallbackUrl'),
  programEffect?: integer(name='ProgramEffect'),
  programName?: string(name='ProgramName'),
  channelEnable?: integer(name='ChannelEnable'),
}

model SetCasterConfigResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
}

async function setCasterConfigWithOptions(request: SetCasterConfigRequest, runtime: Util.RuntimeOptions): SetCasterConfigResponse {
  Util.validateModel(request);
  return doRequest('SetCasterConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function setCasterConfig(request: SetCasterConfigRequest): SetCasterConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCasterConfigWithOptions(request, runtime);
}

model ModifyCasterVideoResourceRequest = {
  casterId: string(name='CasterId'),
  resourceId: string(name='ResourceId'),
  resourceName?: string(name='ResourceName'),
  liveStreamUrl?: string(name='LiveStreamUrl'),
  materialId?: string(name='MaterialId'),
  vodUrl?: string(name='VodUrl'),
  beginOffset?: integer(name='BeginOffset'),
  endOffset?: integer(name='EndOffset'),
  repeatNum?: integer(name='RepeatNum'),
  ptsCallbackInterval?: integer(name='PtsCallbackInterval'),
}

model ModifyCasterVideoResourceResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
  resourceId: string(name='ResourceId'),
}

async function modifyCasterVideoResourceWithOptions(request: ModifyCasterVideoResourceRequest, runtime: Util.RuntimeOptions): ModifyCasterVideoResourceResponse {
  Util.validateModel(request);
  return doRequest('ModifyCasterVideoResource', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function modifyCasterVideoResource(request: ModifyCasterVideoResourceRequest): ModifyCasterVideoResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCasterVideoResourceWithOptions(request, runtime);
}

model ModifyCasterLayoutRequest = {
  casterId: string(name='CasterId'),
  layoutId: string(name='LayoutId'),
  videoLayer: [
    {
      fillMode?: string(name='FillMode'),
      heightNormalized?: float(name='HeightNormalized'),
      widthNormalized?: float(name='WidthNormalized'),
      positionRefer?: string(name='PositionRefer'),
      positionNormalized?: [ float ](name='PositionNormalized'),
      fixedDelayDuration?: integer(name='FixedDelayDuration'),
    }
  ](name='VideoLayer'),
  audioLayer: [
    {
      volumeRate?: float(name='VolumeRate'),
      validChannel?: string(name='ValidChannel'),
      fixedDelayDuration?: integer(name='FixedDelayDuration'),
    }
  ](name='AudioLayer'),
  blendList: [ string ](name='BlendList'),
  mixList: [ string ](name='MixList'),
}

model ModifyCasterLayoutResponse = {
  requestId: string(name='RequestId'),
  layoutId: string(name='LayoutId'),
}

async function modifyCasterLayoutWithOptions(request: ModifyCasterLayoutRequest, runtime: Util.RuntimeOptions): ModifyCasterLayoutResponse {
  Util.validateModel(request);
  return doRequest('ModifyCasterLayout', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function modifyCasterLayout(request: ModifyCasterLayoutRequest): ModifyCasterLayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCasterLayoutWithOptions(request, runtime);
}

model EffectCasterVideoResourceRequest = {
  casterId: string(name='CasterId'),
  sceneId: string(name='SceneId'),
  resourceId: string(name='ResourceId'),
}

model EffectCasterVideoResourceResponse = {
  requestId: string(name='RequestId'),
}

async function effectCasterVideoResourceWithOptions(request: EffectCasterVideoResourceRequest, runtime: Util.RuntimeOptions): EffectCasterVideoResourceResponse {
  Util.validateModel(request);
  return doRequest('EffectCasterVideoResource', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function effectCasterVideoResource(request: EffectCasterVideoResourceRequest): EffectCasterVideoResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return effectCasterVideoResourceWithOptions(request, runtime);
}

model EffectCasterUrgentRequest = {
  casterId: string(name='CasterId'),
  sceneId: string(name='SceneId'),
}

model EffectCasterUrgentResponse = {
  requestId: string(name='RequestId'),
}

async function effectCasterUrgentWithOptions(request: EffectCasterUrgentRequest, runtime: Util.RuntimeOptions): EffectCasterUrgentResponse {
  Util.validateModel(request);
  return doRequest('EffectCasterUrgent', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function effectCasterUrgent(request: EffectCasterUrgentRequest): EffectCasterUrgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return effectCasterUrgentWithOptions(request, runtime);
}

model DescribeCasterVideoResourcesRequest = {
  casterId: string(name='CasterId'),
}

model DescribeCasterVideoResourcesResponse = {
  requestId: string(name='RequestId'),
  total: integer(name='Total'),
  videoResources: {
    videoResource: [
      {
        materialId: string(name='MaterialId'),
        resourceId: string(name='ResourceId'),
        resourceName: string(name='ResourceName'),
        locationId: string(name='LocationId'),
        liveStreamUrl: string(name='LiveStreamUrl'),
        repeatNum: integer(name='RepeatNum'),
        vodUrl: string(name='VodUrl'),
        beginOffset: integer(name='BeginOffset'),
        endOffset: integer(name='EndOffset'),
        ptsCallbackInterval: integer(name='PtsCallbackInterval'),
      }
    ](name='VideoResource'),
  }(name='VideoResources'),
}

async function describeCasterVideoResourcesWithOptions(request: DescribeCasterVideoResourcesRequest, runtime: Util.RuntimeOptions): DescribeCasterVideoResourcesResponse {
  Util.validateModel(request);
  return doRequest('DescribeCasterVideoResources', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeCasterVideoResources(request: DescribeCasterVideoResourcesRequest): DescribeCasterVideoResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterVideoResourcesWithOptions(request, runtime);
}

model DescribeCasterStreamUrlRequest = {
  casterId: string(name='CasterId'),
}

model DescribeCasterStreamUrlResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
  total: integer(name='Total'),
  casterStreams: {
    casterStream: [
      {
        sceneId: string(name='SceneId'),
        streamUrl: string(name='StreamUrl'),
        rtmpUrl: string(name='RtmpUrl'),
        outputType: integer(name='OutputType'),
        streamInfos: {
          streamInfo: [
            {
              transcodeConfig: string(name='TranscodeConfig'),
              videoFormat: string(name='VideoFormat'),
              outputStreamUrl: string(name='OutputStreamUrl'),
            }
          ](name='StreamInfo'),
        }(name='StreamInfos'),
      }
    ](name='CasterStream'),
  }(name='CasterStreams'),
}

async function describeCasterStreamUrlWithOptions(request: DescribeCasterStreamUrlRequest, runtime: Util.RuntimeOptions): DescribeCasterStreamUrlResponse {
  Util.validateModel(request);
  return doRequest('DescribeCasterStreamUrl', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeCasterStreamUrl(request: DescribeCasterStreamUrlRequest): DescribeCasterStreamUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterStreamUrlWithOptions(request, runtime);
}

model DescribeCasterScenesRequest = {
  casterId: string(name='CasterId'),
  sceneId?: string(name='SceneId'),
}

model DescribeCasterScenesResponse = {
  requestId: string(name='RequestId'),
  total: integer(name='Total'),
  sceneList: {
    scene: [
      {
        sceneId: string(name='SceneId'),
        sceneName: string(name='SceneName'),
        outputType: string(name='OutputType'),
        layoutId: string(name='LayoutId'),
        streamUrl: string(name='StreamUrl'),
        status: integer(name='Status'),
        streamInfos: {
          streamInfo: [
            {
              transcodeConfig: string(name='TranscodeConfig'),
              videoFormat: string(name='VideoFormat'),
              outputStreamUrl: string(name='OutputStreamUrl'),
            }
          ](name='StreamInfo'),
        }(name='StreamInfos'),
        componentIds: {
          componentId: [ string ](name='componentId', description='componentId'),
        }(name='ComponentIds'),
      }
    ](name='Scene'),
  }(name='SceneList'),
}

async function describeCasterScenesWithOptions(request: DescribeCasterScenesRequest, runtime: Util.RuntimeOptions): DescribeCasterScenesResponse {
  Util.validateModel(request);
  return doRequest('DescribeCasterScenes', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeCasterScenes(request: DescribeCasterScenesRequest): DescribeCasterScenesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterScenesWithOptions(request, runtime);
}

model DescribeCastersRequest = {
  casterId?: string(name='CasterId'),
  casterName?: string(name='CasterName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNum?: integer(name='PageNum'),
  pageSize?: integer(name='PageSize'),
  status?: integer(name='Status'),
}

model DescribeCastersResponse = {
  requestId: string(name='RequestId'),
  total: integer(name='Total'),
  casterList: {
    caster: [
      {
        status: integer(name='Status'),
        normType: integer(name='NormType'),
        casterId: string(name='CasterId'),
        casterName: string(name='CasterName'),
        createTime: string(name='CreateTime'),
        startTime: string(name='StartTime'),
        purchaseTime: string(name='PurchaseTime'),
        expireTime: string(name='ExpireTime'),
        chargeType: string(name='ChargeType'),
        casterTemplate: string(name='CasterTemplate'),
        channelEnable: integer(name='ChannelEnable'),
      }
    ](name='Caster'),
  }(name='CasterList'),
}

async function describeCastersWithOptions(request: DescribeCastersRequest, runtime: Util.RuntimeOptions): DescribeCastersResponse {
  Util.validateModel(request);
  return doRequest('DescribeCasters', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeCasters(request: DescribeCastersRequest): DescribeCastersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCastersWithOptions(request, runtime);
}

model DescribeCasterLayoutsRequest = {
  casterId: string(name='CasterId'),
  layoutId?: string(name='LayoutId'),
}

model DescribeCasterLayoutsResponse = {
  requestId: string(name='RequestId'),
  total: integer(name='Total'),
  layouts: {
    layout: [
      {
        layoutId: string(name='LayoutId'),
        videoLayers: {
          videoLayer: [
            {
              fillMode: string(name='FillMode'),
              heightNormalized: float(name='HeightNormalized'),
              widthNormalized: float(name='WidthNormalized'),
              positionRefer: string(name='PositionRefer'),
              fixedDelayDuration: integer(name='FixedDelayDuration'),
              positionNormalizeds: {
                position: [ float ](name='Position', description='Position'),
              }(name='PositionNormalizeds'),
            }
          ](name='VideoLayer'),
        }(name='VideoLayers'),
        audioLayers: {
          audioLayer: [
            {
              volumeRate: float(name='VolumeRate'),
              validChannel: string(name='ValidChannel'),
              fixedDelayDuration: integer(name='FixedDelayDuration'),
            }
          ](name='AudioLayer'),
        }(name='AudioLayers'),
        blendList: {
          locationId: [ string ](name='LocationId', description='LocationId'),
        }(name='BlendList'),
        mixList: {
          locationId: [ string ](name='LocationId', description='LocationId'),
        }(name='MixList'),
      }
    ](name='Layout'),
  }(name='Layouts'),
}

async function describeCasterLayoutsWithOptions(request: DescribeCasterLayoutsRequest, runtime: Util.RuntimeOptions): DescribeCasterLayoutsResponse {
  Util.validateModel(request);
  return doRequest('DescribeCasterLayouts', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeCasterLayouts(request: DescribeCasterLayoutsRequest): DescribeCasterLayoutsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterLayoutsWithOptions(request, runtime);
}

model DescribeCasterConfigRequest = {
  casterId: string(name='CasterId'),
}

model DescribeCasterConfigResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
  casterName: string(name='CasterName'),
  domainName: string(name='DomainName'),
  delay: float(name='Delay'),
  urgentMaterialId: string(name='UrgentMaterialId'),
  sideOutputUrl: string(name='SideOutputUrl'),
  callbackUrl: string(name='CallbackUrl'),
  programName: string(name='ProgramName'),
  programEffect: integer(name='ProgramEffect'),
  channelEnable: integer(name='ChannelEnable'),
  transcodeConfig: {
    casterTemplate: string(name='CasterTemplate'),
    liveTemplateIds: {
      locationId: [ string ](name='LocationId', description='LocationId'),
    }(name='LiveTemplateIds'),
  }(name='TranscodeConfig'),
  recordConfig: {
    ossEndpoint: string(name='OssEndpoint'),
    ossBucket: string(name='OssBucket'),
    recordFormat: {
      recordFormat: [
        {
          format: string(name='Format'),
          ossObjectPrefix: string(name='OssObjectPrefix'),
          sliceOssObjectPrefix: string(name='SliceOssObjectPrefix'),
          cycleDuration: integer(name='CycleDuration'),
        }
      ](name='RecordFormat'),
    }(name='RecordFormat'),
  }(name='RecordConfig'),
}

async function describeCasterConfigWithOptions(request: DescribeCasterConfigRequest, runtime: Util.RuntimeOptions): DescribeCasterConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeCasterConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeCasterConfig(request: DescribeCasterConfigRequest): DescribeCasterConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCasterConfigWithOptions(request, runtime);
}

model DeleteCasterVideoResourceRequest = {
  casterId: string(name='CasterId'),
  resourceId: string(name='ResourceId'),
}

model DeleteCasterVideoResourceResponse = {
  requestId: string(name='RequestId'),
}

async function deleteCasterVideoResourceWithOptions(request: DeleteCasterVideoResourceRequest, runtime: Util.RuntimeOptions): DeleteCasterVideoResourceResponse {
  Util.validateModel(request);
  return doRequest('DeleteCasterVideoResource', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteCasterVideoResource(request: DeleteCasterVideoResourceRequest): DeleteCasterVideoResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterVideoResourceWithOptions(request, runtime);
}

model DeleteCasterLayoutRequest = {
  casterId: string(name='CasterId'),
  layoutId: string(name='LayoutId'),
}

model DeleteCasterLayoutResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
  layoutId: string(name='LayoutId'),
}

async function deleteCasterLayoutWithOptions(request: DeleteCasterLayoutRequest, runtime: Util.RuntimeOptions): DeleteCasterLayoutResponse {
  Util.validateModel(request);
  return doRequest('DeleteCasterLayout', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteCasterLayout(request: DeleteCasterLayoutRequest): DeleteCasterLayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterLayoutWithOptions(request, runtime);
}

model DeleteCasterRequest = {
  securityToken?: string(name='SecurityToken'),
  casterId: string(name='CasterId'),
}

model DeleteCasterResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
}

async function deleteCasterWithOptions(request: DeleteCasterRequest, runtime: Util.RuntimeOptions): DeleteCasterResponse {
  Util.validateModel(request);
  return doRequest('DeleteCaster', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteCaster(request: DeleteCasterRequest): DeleteCasterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCasterWithOptions(request, runtime);
}

model CreateCasterRequest = {
  casterName?: string(name='CasterName'),
  clientToken: string(name='ClientToken'),
  normType: integer(name='NormType'),
  chargeType: string(name='ChargeType'),
  purchaseTime?: string(name='PurchaseTime'),
  expireTime?: string(name='ExpireTime'),
  casterTemplate?: string(name='CasterTemplate'),
}

model CreateCasterResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
}

async function createCasterWithOptions(request: CreateCasterRequest, runtime: Util.RuntimeOptions): CreateCasterResponse {
  Util.validateModel(request);
  return doRequest('CreateCaster', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function createCaster(request: CreateCasterRequest): CreateCasterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCasterWithOptions(request, runtime);
}

model CopyCasterSceneConfigRequest = {
  casterId: string(name='CasterId'),
  fromSceneId: string(name='FromSceneId'),
  toSceneId: string(name='ToSceneId'),
}

model CopyCasterSceneConfigResponse = {
  requestId: string(name='RequestId'),
}

async function copyCasterSceneConfigWithOptions(request: CopyCasterSceneConfigRequest, runtime: Util.RuntimeOptions): CopyCasterSceneConfigResponse {
  Util.validateModel(request);
  return doRequest('CopyCasterSceneConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function copyCasterSceneConfig(request: CopyCasterSceneConfigRequest): CopyCasterSceneConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyCasterSceneConfigWithOptions(request, runtime);
}

model CopyCasterRequest = {
  casterName: string(name='CasterName'),
  srcCasterId: string(name='SrcCasterId'),
  clientToken: string(name='ClientToken'),
}

model CopyCasterResponse = {
  requestId: string(name='RequestId'),
  casterId: string(name='CasterId'),
}

async function copyCasterWithOptions(request: CopyCasterRequest, runtime: Util.RuntimeOptions): CopyCasterResponse {
  Util.validateModel(request);
  return doRequest('CopyCaster', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function copyCaster(request: CopyCasterRequest): CopyCasterResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyCasterWithOptions(request, runtime);
}

model AddCasterVideoResourceRequest = {
  casterId: string(name='CasterId'),
  resourceName: string(name='ResourceName'),
  locationId?: string(name='LocationId'),
  liveStreamUrl?: string(name='LiveStreamUrl'),
  streamId?: string(name='StreamId'),
  materialId?: string(name='MaterialId'),
  vodUrl?: string(name='VodUrl'),
  beginOffset?: integer(name='BeginOffset'),
  endOffset?: integer(name='EndOffset'),
  repeatNum?: integer(name='RepeatNum'),
  ptsCallbackInterval?: integer(name='PtsCallbackInterval'),
}

model AddCasterVideoResourceResponse = {
  requestId: string(name='RequestId'),
  resourceId: string(name='ResourceId'),
}

async function addCasterVideoResourceWithOptions(request: AddCasterVideoResourceRequest, runtime: Util.RuntimeOptions): AddCasterVideoResourceResponse {
  Util.validateModel(request);
  return doRequest('AddCasterVideoResource', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addCasterVideoResource(request: AddCasterVideoResourceRequest): AddCasterVideoResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCasterVideoResourceWithOptions(request, runtime);
}

model AddCasterLayoutRequest = {
  casterId: string(name='CasterId'),
  videoLayer: [
    {
      fillMode?: string(name='FillMode'),
      heightNormalized?: float(name='HeightNormalized'),
      widthNormalized?: float(name='WidthNormalized'),
      positionRefer?: string(name='PositionRefer'),
      positionNormalized?: [ float ](name='PositionNormalized'),
      fixedDelayDuration?: integer(name='FixedDelayDuration'),
    }
  ](name='VideoLayer'),
  audioLayer: [
    {
      volumeRate?: float(name='VolumeRate'),
      validChannel?: string(name='ValidChannel'),
      fixedDelayDuration?: integer(name='FixedDelayDuration'),
    }
  ](name='AudioLayer'),
  blendList: [ string ](name='BlendList'),
  mixList: [ string ](name='MixList'),
}

model AddCasterLayoutResponse = {
  requestId: string(name='RequestId'),
  layoutId: string(name='LayoutId'),
}

async function addCasterLayoutWithOptions(request: AddCasterLayoutRequest, runtime: Util.RuntimeOptions): AddCasterLayoutResponse {
  Util.validateModel(request);
  return doRequest('AddCasterLayout', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addCasterLayout(request: AddCasterLayoutRequest): AddCasterLayoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCasterLayoutWithOptions(request, runtime);
}

model DescribeLivePullStreamConfigRequest = {
  domainName: string(name='DomainName'),
}

model DescribeLivePullStreamConfigResponse = {
  requestId: string(name='RequestId'),
  liveAppRecordList: {
    liveAppRecord: [
      {
        domainName: string(name='DomainName'),
        appName: string(name='AppName'),
        streamName: string(name='StreamName'),
        sourceUrl: string(name='SourceUrl'),
        startTime: string(name='StartTime'),
        endTime: string(name='EndTime'),
      }
    ](name='LiveAppRecord'),
  }(name='LiveAppRecordList'),
}

async function describeLivePullStreamConfigWithOptions(request: DescribeLivePullStreamConfigRequest, runtime: Util.RuntimeOptions): DescribeLivePullStreamConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLivePullStreamConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLivePullStreamConfig(request: DescribeLivePullStreamConfigRequest): DescribeLivePullStreamConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLivePullStreamConfigWithOptions(request, runtime);
}

model DeleteLivePullStreamInfoConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
}

model DeleteLivePullStreamInfoConfigResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLivePullStreamInfoConfigWithOptions(request: DeleteLivePullStreamInfoConfigRequest, runtime: Util.RuntimeOptions): DeleteLivePullStreamInfoConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteLivePullStreamInfoConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteLivePullStreamInfoConfig(request: DeleteLivePullStreamInfoConfigRequest): DeleteLivePullStreamInfoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLivePullStreamInfoConfigWithOptions(request, runtime);
}

model AddLivePullStreamInfoConfigRequest = {
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  sourceUrl: string(name='SourceUrl'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model AddLivePullStreamInfoConfigResponse = {
  requestId: string(name='RequestId'),
}

async function addLivePullStreamInfoConfigWithOptions(request: AddLivePullStreamInfoConfigRequest, runtime: Util.RuntimeOptions): AddLivePullStreamInfoConfigResponse {
  Util.validateModel(request);
  return doRequest('AddLivePullStreamInfoConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addLivePullStreamInfoConfig(request: AddLivePullStreamInfoConfigRequest): AddLivePullStreamInfoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLivePullStreamInfoConfigWithOptions(request, runtime);
}

model DescribeLiveStreamBitRateDataRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeLiveStreamBitRateDataResponse = {
  requestId: string(name='RequestId'),
  frameRateAndBitRateInfos: {
    frameRateAndBitRateInfo: [
      {
        streamUrl: string(name='StreamUrl'),
        videoFrameRate: float(name='VideoFrameRate'),
        audioFrameRate: float(name='AudioFrameRate'),
        bitRate: float(name='BitRate'),
        time: string(name='Time'),
      }
    ](name='FrameRateAndBitRateInfo'),
  }(name='FrameRateAndBitRateInfos'),
}

async function describeLiveStreamBitRateDataWithOptions(request: DescribeLiveStreamBitRateDataRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamBitRateDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamBitRateData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamBitRateData(request: DescribeLiveStreamBitRateDataRequest): DescribeLiveStreamBitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamBitRateDataWithOptions(request, runtime);
}

model AddLiveDetectNotifyConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  notifyUrl: string(name='NotifyUrl'),
}

model AddLiveDetectNotifyConfigResponse = {
  requestId: string(name='RequestId'),
}

async function addLiveDetectNotifyConfigWithOptions(request: AddLiveDetectNotifyConfigRequest, runtime: Util.RuntimeOptions): AddLiveDetectNotifyConfigResponse {
  Util.validateModel(request);
  return doRequest('AddLiveDetectNotifyConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addLiveDetectNotifyConfig(request: AddLiveDetectNotifyConfigRequest): AddLiveDetectNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveDetectNotifyConfigWithOptions(request, runtime);
}

model AddLiveSnapshotDetectPornConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  ossEndpoint: string(name='OssEndpoint'),
  ossBucket: string(name='OssBucket'),
  ossObject?: string(name='OssObject'),
  scene?: [ string ](name='Scene'),
  interval?: integer(name='Interval'),
}

model AddLiveSnapshotDetectPornConfigResponse = {
  requestId: string(name='RequestId'),
}

async function addLiveSnapshotDetectPornConfigWithOptions(request: AddLiveSnapshotDetectPornConfigRequest, runtime: Util.RuntimeOptions): AddLiveSnapshotDetectPornConfigResponse {
  Util.validateModel(request);
  return doRequest('AddLiveSnapshotDetectPornConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addLiveSnapshotDetectPornConfig(request: AddLiveSnapshotDetectPornConfigRequest): AddLiveSnapshotDetectPornConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveSnapshotDetectPornConfigWithOptions(request, runtime);
}

model DeleteLiveDetectNotifyConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
}

model DeleteLiveDetectNotifyConfigResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveDetectNotifyConfigWithOptions(request: DeleteLiveDetectNotifyConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveDetectNotifyConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveDetectNotifyConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteLiveDetectNotifyConfig(request: DeleteLiveDetectNotifyConfigRequest): DeleteLiveDetectNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveDetectNotifyConfigWithOptions(request, runtime);
}

model DescribeLiveDetectNotifyConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
}

model DescribeLiveDetectNotifyConfigResponse = {
  requestId: string(name='RequestId'),
  liveDetectNotifyConfig: {
    domainName: string(name='DomainName'),
    notifyUrl: string(name='NotifyUrl'),
  }(name='LiveDetectNotifyConfig'),
}

async function describeLiveDetectNotifyConfigWithOptions(request: DescribeLiveDetectNotifyConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveDetectNotifyConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveDetectNotifyConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveDetectNotifyConfig(request: DescribeLiveDetectNotifyConfigRequest): DescribeLiveDetectNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveDetectNotifyConfigWithOptions(request, runtime);
}

model DeleteLiveSnapshotDetectPornConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
}

model DeleteLiveSnapshotDetectPornConfigResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveSnapshotDetectPornConfigWithOptions(request: DeleteLiveSnapshotDetectPornConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveSnapshotDetectPornConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveSnapshotDetectPornConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteLiveSnapshotDetectPornConfig(request: DeleteLiveSnapshotDetectPornConfigRequest): DeleteLiveSnapshotDetectPornConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveSnapshotDetectPornConfigWithOptions(request, runtime);
}

model DescribeLiveSnapshotDetectPornConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName?: string(name='AppName'),
  pageNum?: integer(name='PageNum'),
  pageSize?: integer(name='PageSize'),
  order?: string(name='Order'),
}

model DescribeLiveSnapshotDetectPornConfigResponse = {
  requestId: string(name='RequestId'),
  pageNum: integer(name='PageNum'),
  pageSize: integer(name='PageSize'),
  order: string(name='Order'),
  totalNum: integer(name='TotalNum'),
  totalPage: integer(name='TotalPage'),
  liveSnapshotDetectPornConfigList: {
    liveSnapshotDetectPornConfig: [
      {
        domainName: string(name='DomainName'),
        appName: string(name='AppName'),
        ossEndpoint: string(name='OssEndpoint'),
        ossBucket: string(name='OssBucket'),
        ossObject: string(name='OssObject'),
        interval: integer(name='Interval'),
        scenes: {
          scene: [ string ](name='scene', description='scene'),
        }(name='Scenes'),
      }
    ](name='LiveSnapshotDetectPornConfig'),
  }(name='LiveSnapshotDetectPornConfigList'),
}

async function describeLiveSnapshotDetectPornConfigWithOptions(request: DescribeLiveSnapshotDetectPornConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveSnapshotDetectPornConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveSnapshotDetectPornConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveSnapshotDetectPornConfig(request: DescribeLiveSnapshotDetectPornConfigRequest): DescribeLiveSnapshotDetectPornConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveSnapshotDetectPornConfigWithOptions(request, runtime);
}

model UpdateLiveDetectNotifyConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  notifyUrl: string(name='NotifyUrl'),
}

model UpdateLiveDetectNotifyConfigResponse = {
  requestId: string(name='RequestId'),
}

async function updateLiveDetectNotifyConfigWithOptions(request: UpdateLiveDetectNotifyConfigRequest, runtime: Util.RuntimeOptions): UpdateLiveDetectNotifyConfigResponse {
  Util.validateModel(request);
  return doRequest('UpdateLiveDetectNotifyConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function updateLiveDetectNotifyConfig(request: UpdateLiveDetectNotifyConfigRequest): UpdateLiveDetectNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveDetectNotifyConfigWithOptions(request, runtime);
}

model UpdateLiveSnapshotDetectPornConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossBucket?: string(name='OssBucket'),
  ossObject?: string(name='OssObject'),
  interval?: integer(name='Interval'),
  scene?: [ string ](name='Scene'),
}

model UpdateLiveSnapshotDetectPornConfigResponse = {
  requestId: string(name='RequestId'),
}

async function updateLiveSnapshotDetectPornConfigWithOptions(request: UpdateLiveSnapshotDetectPornConfigRequest, runtime: Util.RuntimeOptions): UpdateLiveSnapshotDetectPornConfigResponse {
  Util.validateModel(request);
  return doRequest('UpdateLiveSnapshotDetectPornConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function updateLiveSnapshotDetectPornConfig(request: UpdateLiveSnapshotDetectPornConfigRequest): UpdateLiveSnapshotDetectPornConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveSnapshotDetectPornConfigWithOptions(request, runtime);
}

model AddLiveRecordNotifyConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  notifyUrl: string(name='NotifyUrl'),
  needStatusNotify?: boolean(name='NeedStatusNotify'),
  onDemandUrl?: string(name='OnDemandUrl'),
}

model AddLiveRecordNotifyConfigResponse = {
  requestId: string(name='RequestId'),
}

async function addLiveRecordNotifyConfigWithOptions(request: AddLiveRecordNotifyConfigRequest, runtime: Util.RuntimeOptions): AddLiveRecordNotifyConfigResponse {
  Util.validateModel(request);
  return doRequest('AddLiveRecordNotifyConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addLiveRecordNotifyConfig(request: AddLiveRecordNotifyConfigRequest): AddLiveRecordNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveRecordNotifyConfigWithOptions(request, runtime);
}

model DeleteLiveStreamsNotifyUrlConfigRequest = {
  domainName: string(name='DomainName'),
}

model DeleteLiveStreamsNotifyUrlConfigResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveStreamsNotifyUrlConfigWithOptions(request: DeleteLiveStreamsNotifyUrlConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveStreamsNotifyUrlConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveStreamsNotifyUrlConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteLiveStreamsNotifyUrlConfig(request: DeleteLiveStreamsNotifyUrlConfigRequest): DeleteLiveStreamsNotifyUrlConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveStreamsNotifyUrlConfigWithOptions(request, runtime);
}

model DeleteLiveRecordNotifyConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
}

model DeleteLiveRecordNotifyConfigResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveRecordNotifyConfigWithOptions(request: DeleteLiveRecordNotifyConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveRecordNotifyConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveRecordNotifyConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteLiveRecordNotifyConfig(request: DeleteLiveRecordNotifyConfigRequest): DeleteLiveRecordNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveRecordNotifyConfigWithOptions(request, runtime);
}

model DescribeLiveRecordNotifyConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
}

model DescribeLiveRecordNotifyConfigResponse = {
  requestId: string(name='RequestId'),
  liveRecordNotifyConfig: {
    domainName: string(name='DomainName'),
    notifyUrl: string(name='NotifyUrl'),
    onDemandUrl: string(name='OnDemandUrl'),
    needStatusNotify: boolean(name='NeedStatusNotify'),
  }(name='LiveRecordNotifyConfig'),
}

async function describeLiveRecordNotifyConfigWithOptions(request: DescribeLiveRecordNotifyConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveRecordNotifyConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveRecordNotifyConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveRecordNotifyConfig(request: DescribeLiveRecordNotifyConfigRequest): DescribeLiveRecordNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveRecordNotifyConfigWithOptions(request, runtime);
}

model DescribeLiveStreamsNotifyUrlConfigRequest = {
  domainName: string(name='DomainName'),
}

model DescribeLiveStreamsNotifyUrlConfigResponse = {
  requestId: string(name='RequestId'),
  liveStreamsNotifyConfig: {
    domainName: string(name='DomainName'),
    notifyUrl: string(name='NotifyUrl'),
    authType: string(name='AuthType'),
    authKey: string(name='AuthKey'),
  }(name='LiveStreamsNotifyConfig'),
}

async function describeLiveStreamsNotifyUrlConfigWithOptions(request: DescribeLiveStreamsNotifyUrlConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamsNotifyUrlConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamsNotifyUrlConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamsNotifyUrlConfig(request: DescribeLiveStreamsNotifyUrlConfigRequest): DescribeLiveStreamsNotifyUrlConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamsNotifyUrlConfigWithOptions(request, runtime);
}

model UpdateLiveRecordNotifyConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  notifyUrl?: string(name='NotifyUrl'),
  onDemandUrl?: string(name='OnDemandUrl'),
  needStatusNotify?: boolean(name='NeedStatusNotify'),
}

model UpdateLiveRecordNotifyConfigResponse = {
  requestId: string(name='RequestId'),
}

async function updateLiveRecordNotifyConfigWithOptions(request: UpdateLiveRecordNotifyConfigRequest, runtime: Util.RuntimeOptions): UpdateLiveRecordNotifyConfigResponse {
  Util.validateModel(request);
  return doRequest('UpdateLiveRecordNotifyConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function updateLiveRecordNotifyConfig(request: UpdateLiveRecordNotifyConfigRequest): UpdateLiveRecordNotifyConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveRecordNotifyConfigWithOptions(request, runtime);
}

model DescribeLiveStreamsBlockListRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  pageNum?: integer(name='PageNum'),
  pageSize?: integer(name='PageSize'),
}

model DescribeLiveStreamsBlockListResponse = {
  requestId: string(name='RequestId'),
  domainName: string(name='DomainName'),
  pageNum: integer(name='PageNum'),
  pageSize: integer(name='PageSize'),
  totalNum: integer(name='TotalNum'),
  totalPage: integer(name='TotalPage'),
  streamUrls: {
    streamUrl: [ string ](name='StreamUrl'),
  }(name='StreamUrls'),
}

async function describeLiveStreamsBlockListWithOptions(request: DescribeLiveStreamsBlockListRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamsBlockListResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamsBlockList', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamsBlockList(request: DescribeLiveStreamsBlockListRequest): DescribeLiveStreamsBlockListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamsBlockListWithOptions(request, runtime);
}

model DescribeLiveStreamOnlineUserNumRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeLiveStreamOnlineUserNumResponse = {
  requestId: string(name='RequestId'),
  totalUserNumber: long(name='TotalUserNumber'),
  onlineUserInfo: {
    liveStreamOnlineUserNumInfo: [
      {
        streamUrl: string(name='StreamUrl'),
        userNumber: long(name='UserNumber'),
        time: string(name='Time'),
      }
    ](name='LiveStreamOnlineUserNumInfo'),
  }(name='OnlineUserInfo'),
}

async function describeLiveStreamOnlineUserNumWithOptions(request: DescribeLiveStreamOnlineUserNumRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamOnlineUserNumResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamOnlineUserNum', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamOnlineUserNum(request: DescribeLiveStreamOnlineUserNumRequest): DescribeLiveStreamOnlineUserNumResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamOnlineUserNumWithOptions(request, runtime);
}

model DescribeLiveStreamsPublishListRequest = {
  domainName: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageSize?: integer(name='PageSize'),
  pageNumber?: integer(name='PageNumber'),
  streamType?: string(name='StreamType'),
  queryType?: string(name='QueryType'),
  orderBy?: string(name='OrderBy'),
}

model DescribeLiveStreamsPublishListResponse = {
  requestId: string(name='RequestId'),
  pageNum: integer(name='PageNum'),
  pageSize: integer(name='PageSize'),
  totalNum: integer(name='TotalNum'),
  totalPage: integer(name='TotalPage'),
  publishInfo: {
    liveStreamPublishInfo: [
      {
        domainName: string(name='DomainName'),
        appName: string(name='AppName'),
        streamName: string(name='StreamName'),
        streamUrl: string(name='StreamUrl'),
        publishTime: string(name='PublishTime'),
        stopTime: string(name='StopTime'),
        publishUrl: string(name='PublishUrl'),
        clientAddr: string(name='ClientAddr'),
        edgeNodeAddr: string(name='EdgeNodeAddr'),
        publishDomain: string(name='PublishDomain'),
        publishType: string(name='PublishType'),
        transcoded: string(name='Transcoded'),
        transcodeId: string(name='TranscodeId'),
      }
    ](name='LiveStreamPublishInfo'),
  }(name='PublishInfo'),
}

async function describeLiveStreamsPublishListWithOptions(request: DescribeLiveStreamsPublishListRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamsPublishListResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamsPublishList', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamsPublishList(request: DescribeLiveStreamsPublishListRequest): DescribeLiveStreamsPublishListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamsPublishListWithOptions(request, runtime);
}

model DescribeLiveStreamsOnlineListRequest = {
  domainName: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  pageSize?: integer(name='PageSize'),
  pageNum?: integer(name='PageNum'),
  streamType?: string(name='StreamType'),
  queryType?: string(name='QueryType'),
}

model DescribeLiveStreamsOnlineListResponse = {
  requestId: string(name='RequestId'),
  pageNum: integer(name='PageNum'),
  pageSize: integer(name='PageSize'),
  totalNum: integer(name='TotalNum'),
  totalPage: integer(name='TotalPage'),
  onlineInfo: {
    liveStreamOnlineInfo: [
      {
        domainName: string(name='DomainName'),
        appName: string(name='AppName'),
        streamName: string(name='StreamName'),
        publishTime: string(name='PublishTime'),
        publishUrl: string(name='PublishUrl'),
        publishDomain: string(name='PublishDomain'),
        publishType: string(name='PublishType'),
        transcoded: string(name='Transcoded'),
        transcodeId: string(name='TranscodeId'),
        serverIp: string(name='ServerIp'),
        clientIp: string(name='ClientIp'),
        videoCodecId: integer(name='VideoCodecId'),
        videoDataRate: integer(name='VideoDataRate'),
        frameRate: integer(name='FrameRate'),
        width: integer(name='Width'),
        height: integer(name='Height'),
        audioCodecId: integer(name='AudioCodecId'),
        audioDataRate: integer(name='AudioDataRate'),
      }
    ](name='LiveStreamOnlineInfo'),
  }(name='OnlineInfo'),
}

async function describeLiveStreamsOnlineListWithOptions(request: DescribeLiveStreamsOnlineListRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamsOnlineListResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamsOnlineList', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamsOnlineList(request: DescribeLiveStreamsOnlineListRequest): DescribeLiveStreamsOnlineListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamsOnlineListWithOptions(request, runtime);
}

model DescribeLiveStreamsControlHistoryRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName?: string(name='AppName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model DescribeLiveStreamsControlHistoryResponse = {
  requestId: string(name='RequestId'),
  controlInfo: {
    liveStreamControlInfo: [
      {
        streamName: string(name='StreamName'),
        clientIP: string(name='ClientIP'),
        action: string(name='Action'),
        timeStamp: string(name='TimeStamp'),
      }
    ](name='LiveStreamControlInfo'),
  }(name='ControlInfo'),
}

async function describeLiveStreamsControlHistoryWithOptions(request: DescribeLiveStreamsControlHistoryRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamsControlHistoryResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamsControlHistory', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamsControlHistory(request: DescribeLiveStreamsControlHistoryRequest): DescribeLiveStreamsControlHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamsControlHistoryWithOptions(request, runtime);
}

model AddLiveStreamTranscodeRequest = {
  domain: string(name='Domain'),
  app: string(name='App'),
  template: string(name='Template'),
  lazy?: string(name='Lazy'),
  watermark?: string(name='Watermark'),
  mix?: string(name='Mix'),
  onlyAudio?: string(name='OnlyAudio'),
  waterPattern?: string(name='WaterPattern'),
}

model AddLiveStreamTranscodeResponse = {
  requestId: string(name='RequestId'),
}

async function addLiveStreamTranscodeWithOptions(request: AddLiveStreamTranscodeRequest, runtime: Util.RuntimeOptions): AddLiveStreamTranscodeResponse {
  Util.validateModel(request);
  return doRequest('AddLiveStreamTranscode', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addLiveStreamTranscode(request: AddLiveStreamTranscodeRequest): AddLiveStreamTranscodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveStreamTranscodeWithOptions(request, runtime);
}

model DeleteLiveStreamTranscodeRequest = {
  securityToken?: string(name='SecurityToken'),
  domain: string(name='Domain'),
  app: string(name='App'),
  template: string(name='Template'),
}

model DeleteLiveStreamTranscodeResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveStreamTranscodeWithOptions(request: DeleteLiveStreamTranscodeRequest, runtime: Util.RuntimeOptions): DeleteLiveStreamTranscodeResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveStreamTranscode', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteLiveStreamTranscode(request: DeleteLiveStreamTranscodeRequest): DeleteLiveStreamTranscodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveStreamTranscodeWithOptions(request, runtime);
}

model DescribeLiveStreamsFrameRateAndBitRateDataRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName?: string(name='StreamName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeLiveStreamsFrameRateAndBitRateDataResponse = {
  requestId: string(name='RequestId'),
  frameRateAndBitRateInfos: {
    frameRateAndBitRateInfo: [
      {
        streamUrl: string(name='StreamUrl'),
        videoFrameRate: float(name='VideoFrameRate'),
        audioFrameRate: float(name='AudioFrameRate'),
        bitRate: float(name='BitRate'),
        time: string(name='Time'),
      }
    ](name='FrameRateAndBitRateInfo'),
  }(name='FrameRateAndBitRateInfos'),
}

async function describeLiveStreamsFrameRateAndBitRateDataWithOptions(request: DescribeLiveStreamsFrameRateAndBitRateDataRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamsFrameRateAndBitRateDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamsFrameRateAndBitRateData', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamsFrameRateAndBitRateData(request: DescribeLiveStreamsFrameRateAndBitRateDataRequest): DescribeLiveStreamsFrameRateAndBitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamsFrameRateAndBitRateDataWithOptions(request, runtime);
}

model ForbidLiveStreamRequest = {
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  liveStreamType: string(name='LiveStreamType'),
  oneshot?: string(name='Oneshot'),
  resumeTime?: string(name='ResumeTime'),
}

model ForbidLiveStreamResponse = {
  requestId: string(name='RequestId'),
}

async function forbidLiveStreamWithOptions(request: ForbidLiveStreamRequest, runtime: Util.RuntimeOptions): ForbidLiveStreamResponse {
  Util.validateModel(request);
  return doRequest('ForbidLiveStream', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function forbidLiveStream(request: ForbidLiveStreamRequest): ForbidLiveStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return forbidLiveStreamWithOptions(request, runtime);
}

model DescribeLiveStreamTranscodeInfoRequest = {
  domainTranscodeName: string(name='DomainTranscodeName'),
}

model DescribeLiveStreamTranscodeInfoResponse = {
  requestId: string(name='RequestId'),
  domainTranscodeList: {
    domainTranscodeInfo: [
      {
        transcodeApp: string(name='TranscodeApp'),
        transcodeName: string(name='TranscodeName'),
        transcodeTemplate: string(name='TranscodeTemplate'),
        customTranscodeParameters: {
          rtsFlag: string(name='RtsFlag'),
          bframes: string(name='Bframes'),
          videoBitrate: integer(name='VideoBitrate'),
          FPS: integer(name='FPS'),
          height: integer(name='Height'),
          width: integer(name='Width'),
          templateType: string(name='TemplateType'),
          videoProfile: string(name='VideoProfile'),
          gop: string(name='Gop'),
          audioBitrate: integer(name='AudioBitrate'),
          audioProfile: string(name='AudioProfile'),
          audioCodec: string(name='AudioCodec'),
          audioRate: integer(name='AudioRate'),
          audioChannelNum: integer(name='AudioChannelNum'),
        }(name='CustomTranscodeParameters'),
      }
    ](name='DomainTranscodeInfo'),
  }(name='DomainTranscodeList'),
}

async function describeLiveStreamTranscodeInfoWithOptions(request: DescribeLiveStreamTranscodeInfoRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamTranscodeInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamTranscodeInfo', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamTranscodeInfo(request: DescribeLiveStreamTranscodeInfoRequest): DescribeLiveStreamTranscodeInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamTranscodeInfoWithOptions(request, runtime);
}

model SetLiveStreamsNotifyUrlConfigRequest = {
  domainName: string(name='DomainName'),
  notifyUrl: string(name='NotifyUrl'),
}

model SetLiveStreamsNotifyUrlConfigResponse = {
  requestId: string(name='RequestId'),
}

async function setLiveStreamsNotifyUrlConfigWithOptions(request: SetLiveStreamsNotifyUrlConfigRequest, runtime: Util.RuntimeOptions): SetLiveStreamsNotifyUrlConfigResponse {
  Util.validateModel(request);
  return doRequest('SetLiveStreamsNotifyUrlConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function setLiveStreamsNotifyUrlConfig(request: SetLiveStreamsNotifyUrlConfigRequest): SetLiveStreamsNotifyUrlConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setLiveStreamsNotifyUrlConfigWithOptions(request, runtime);
}

model ResumeLiveStreamRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  liveStreamType: string(name='LiveStreamType'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
}

model ResumeLiveStreamResponse = {
  requestId: string(name='RequestId'),
}

async function resumeLiveStreamWithOptions(request: ResumeLiveStreamRequest, runtime: Util.RuntimeOptions): ResumeLiveStreamResponse {
  Util.validateModel(request);
  return doRequest('ResumeLiveStream', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function resumeLiveStream(request: ResumeLiveStreamRequest): ResumeLiveStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeLiveStreamWithOptions(request, runtime);
}

model AddLiveAppSnapshotConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  timeInterval: integer(name='TimeInterval'),
  ossEndpoint: string(name='OssEndpoint'),
  ossBucket: string(name='OssBucket'),
  overwriteOssObject?: string(name='OverwriteOssObject'),
  sequenceOssObject?: string(name='SequenceOssObject'),
  callback?: string(name='Callback'),
}

model AddLiveAppSnapshotConfigResponse = {
  requestId: string(name='RequestId'),
}

async function addLiveAppSnapshotConfigWithOptions(request: AddLiveAppSnapshotConfigRequest, runtime: Util.RuntimeOptions): AddLiveAppSnapshotConfigResponse {
  Util.validateModel(request);
  return doRequest('AddLiveAppSnapshotConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addLiveAppSnapshotConfig(request: AddLiveAppSnapshotConfigRequest): AddLiveAppSnapshotConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveAppSnapshotConfigWithOptions(request, runtime);
}

model AddLiveAppRecordConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  ossEndpoint: string(name='OssEndpoint'),
  ossBucket: string(name='OssBucket'),
  recordFormat: [
    {
      format?: string(name='Format'),
      ossObjectPrefix?: string(name='OssObjectPrefix'),
      sliceOssObjectPrefix?: string(name='SliceOssObjectPrefix'),
      cycleDuration?: integer(name='CycleDuration'),
    }
  ](name='RecordFormat'),
  streamName?: string(name='StreamName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  onDemand?: integer(name='OnDemand'),
}

model AddLiveAppRecordConfigResponse = {
  requestId: string(name='RequestId'),
}

async function addLiveAppRecordConfigWithOptions(request: AddLiveAppRecordConfigRequest, runtime: Util.RuntimeOptions): AddLiveAppRecordConfigResponse {
  Util.validateModel(request);
  return doRequest('AddLiveAppRecordConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function addLiveAppRecordConfig(request: AddLiveAppRecordConfigRequest): AddLiveAppRecordConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLiveAppRecordConfigWithOptions(request, runtime);
}

model DescribeLiveRecordConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName?: string(name='AppName'),
  streamName?: string(name='StreamName'),
  pageNum?: integer(name='PageNum'),
  pageSize?: integer(name='PageSize'),
  order?: string(name='Order'),
}

model DescribeLiveRecordConfigResponse = {
  requestId: string(name='RequestId'),
  pageNum: integer(name='PageNum'),
  pageSize: integer(name='PageSize'),
  order: string(name='Order'),
  totalNum: integer(name='TotalNum'),
  totalPage: integer(name='TotalPage'),
  liveAppRecordList: {
    liveAppRecord: [
      {
        domainName: string(name='DomainName'),
        appName: string(name='AppName'),
        streamName: string(name='StreamName'),
        ossEndpoint: string(name='OssEndpoint'),
        ossBucket: string(name='OssBucket'),
        createTime: string(name='CreateTime'),
        startTime: string(name='StartTime'),
        endTime: string(name='EndTime'),
        onDemond: integer(name='OnDemond'),
        recordFormatList: {
          recordFormat: [
            {
              format: string(name='Format'),
              ossObjectPrefix: string(name='OssObjectPrefix'),
              sliceOssObjectPrefix: string(name='SliceOssObjectPrefix'),
              cycleDuration: integer(name='CycleDuration'),
            }
          ](name='RecordFormat'),
        }(name='RecordFormatList'),
      }
    ](name='LiveAppRecord'),
  }(name='LiveAppRecordList'),
}

async function describeLiveRecordConfigWithOptions(request: DescribeLiveRecordConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveRecordConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveRecordConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveRecordConfig(request: DescribeLiveRecordConfigRequest): DescribeLiveRecordConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveRecordConfigWithOptions(request, runtime);
}

model DeleteLiveAppSnapshotConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
}

model DeleteLiveAppSnapshotConfigResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveAppSnapshotConfigWithOptions(request: DeleteLiveAppSnapshotConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveAppSnapshotConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveAppSnapshotConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteLiveAppSnapshotConfig(request: DeleteLiveAppSnapshotConfigRequest): DeleteLiveAppSnapshotConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveAppSnapshotConfigWithOptions(request, runtime);
}

model DeleteLiveAppRecordConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName?: string(name='StreamName'),
}

model DeleteLiveAppRecordConfigResponse = {
  requestId: string(name='RequestId'),
}

async function deleteLiveAppRecordConfigWithOptions(request: DeleteLiveAppRecordConfigRequest, runtime: Util.RuntimeOptions): DeleteLiveAppRecordConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteLiveAppRecordConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function deleteLiveAppRecordConfig(request: DeleteLiveAppRecordConfigRequest): DeleteLiveAppRecordConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLiveAppRecordConfigWithOptions(request, runtime);
}

model CreateLiveStreamRecordIndexFilesRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  ossEndpoint: string(name='OssEndpoint'),
  ossBucket: string(name='OssBucket'),
  ossObject: string(name='OssObject'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model CreateLiveStreamRecordIndexFilesResponse = {
  requestId: string(name='RequestId'),
  recordInfo: {
    recordId: string(name='RecordId'),
    recordUrl: string(name='RecordUrl'),
    domainName: string(name='DomainName'),
    appName: string(name='AppName'),
    streamName: string(name='StreamName'),
    ossBucket: string(name='OssBucket'),
    ossEndpoint: string(name='OssEndpoint'),
    ossObject: string(name='OssObject'),
    startTime: string(name='StartTime'),
    endTime: string(name='EndTime'),
    duration: float(name='Duration'),
    height: integer(name='Height'),
    width: integer(name='Width'),
    createTime: string(name='CreateTime'),
  }(name='RecordInfo'),
}

async function createLiveStreamRecordIndexFilesWithOptions(request: CreateLiveStreamRecordIndexFilesRequest, runtime: Util.RuntimeOptions): CreateLiveStreamRecordIndexFilesResponse {
  Util.validateModel(request);
  return doRequest('CreateLiveStreamRecordIndexFiles', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function createLiveStreamRecordIndexFiles(request: CreateLiveStreamRecordIndexFilesRequest): CreateLiveStreamRecordIndexFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLiveStreamRecordIndexFilesWithOptions(request, runtime);
}

model DescribeLiveStreamSnapshotInfoRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  limit?: integer(name='Limit'),
  order?: string(name='Order'),
}

model DescribeLiveStreamSnapshotInfoResponse = {
  requestId: string(name='RequestId'),
  nextStartTime: string(name='NextStartTime'),
  liveStreamSnapshotInfoList: {
    liveStreamSnapshotInfo: [
      {
        ossEndpoint: string(name='OssEndpoint'),
        ossBucket: string(name='OssBucket'),
        ossObject: string(name='OssObject'),
        createTime: string(name='CreateTime'),
      }
    ](name='LiveStreamSnapshotInfo'),
  }(name='LiveStreamSnapshotInfoList'),
}

async function describeLiveStreamSnapshotInfoWithOptions(request: DescribeLiveStreamSnapshotInfoRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamSnapshotInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamSnapshotInfo', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamSnapshotInfo(request: DescribeLiveStreamSnapshotInfoRequest): DescribeLiveStreamSnapshotInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamSnapshotInfoWithOptions(request, runtime);
}

model DescribeLiveStreamRecordIndexFilesRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  pageNum?: integer(name='PageNum'),
  pageSize?: integer(name='PageSize'),
  order?: string(name='Order'),
}

model DescribeLiveStreamRecordIndexFilesResponse = {
  requestId: string(name='RequestId'),
  pageNum: integer(name='PageNum'),
  pageSize: integer(name='PageSize'),
  order: string(name='Order'),
  totalNum: integer(name='TotalNum'),
  totalPage: integer(name='TotalPage'),
  recordIndexInfoList: {
    recordIndexInfo: [
      {
        recordId: string(name='RecordId'),
        recordUrl: string(name='RecordUrl'),
        domainName: string(name='DomainName'),
        appName: string(name='AppName'),
        streamName: string(name='StreamName'),
        ossBucket: string(name='OssBucket'),
        ossEndpoint: string(name='OssEndpoint'),
        ossObject: string(name='OssObject'),
        startTime: string(name='StartTime'),
        endTime: string(name='EndTime'),
        duration: float(name='Duration'),
        height: integer(name='Height'),
        width: integer(name='Width'),
        createTime: string(name='CreateTime'),
      }
    ](name='RecordIndexInfo'),
  }(name='RecordIndexInfoList'),
}

async function describeLiveStreamRecordIndexFilesWithOptions(request: DescribeLiveStreamRecordIndexFilesRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamRecordIndexFilesResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamRecordIndexFiles', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamRecordIndexFiles(request: DescribeLiveStreamRecordIndexFilesRequest): DescribeLiveStreamRecordIndexFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamRecordIndexFilesWithOptions(request, runtime);
}

model DescribeLiveStreamRecordIndexFileRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  recordId: string(name='RecordId'),
}

model DescribeLiveStreamRecordIndexFileResponse = {
  requestId: string(name='RequestId'),
  recordIndexInfo: {
    recordId: string(name='RecordId'),
    recordUrl: string(name='RecordUrl'),
    domainName: string(name='DomainName'),
    appName: string(name='AppName'),
    streamName: string(name='StreamName'),
    ossBucket: string(name='OssBucket'),
    ossEndpoint: string(name='OssEndpoint'),
    ossObject: string(name='OssObject'),
    startTime: string(name='StartTime'),
    endTime: string(name='EndTime'),
    duration: float(name='Duration'),
    height: integer(name='Height'),
    width: integer(name='Width'),
    createTime: string(name='CreateTime'),
  }(name='RecordIndexInfo'),
}

async function describeLiveStreamRecordIndexFileWithOptions(request: DescribeLiveStreamRecordIndexFileRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamRecordIndexFileResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamRecordIndexFile', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamRecordIndexFile(request: DescribeLiveStreamRecordIndexFileRequest): DescribeLiveStreamRecordIndexFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamRecordIndexFileWithOptions(request, runtime);
}

model DescribeLiveStreamRecordContentRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  streamName: string(name='StreamName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model DescribeLiveStreamRecordContentResponse = {
  requestId: string(name='RequestId'),
  recordContentInfoList: {
    recordContentInfo: [
      {
        ossEndpoint: string(name='OssEndpoint'),
        ossBucket: string(name='OssBucket'),
        ossObjectPrefix: string(name='OssObjectPrefix'),
        startTime: string(name='StartTime'),
        endTime: string(name='EndTime'),
        duration: float(name='Duration'),
      }
    ](name='RecordContentInfo'),
  }(name='RecordContentInfoList'),
}

async function describeLiveStreamRecordContentWithOptions(request: DescribeLiveStreamRecordContentRequest, runtime: Util.RuntimeOptions): DescribeLiveStreamRecordContentResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveStreamRecordContent', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveStreamRecordContent(request: DescribeLiveStreamRecordContentRequest): DescribeLiveStreamRecordContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveStreamRecordContentWithOptions(request, runtime);
}

model DescribeLiveSnapshotConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName?: string(name='AppName'),
  pageNum?: integer(name='PageNum'),
  pageSize?: integer(name='PageSize'),
  order?: string(name='Order'),
}

model DescribeLiveSnapshotConfigResponse = {
  requestId: string(name='RequestId'),
  pageNum: integer(name='PageNum'),
  pageSize: integer(name='PageSize'),
  order: string(name='Order'),
  totalNum: integer(name='TotalNum'),
  totalPage: integer(name='TotalPage'),
  liveStreamSnapshotConfigList: {
    liveStreamSnapshotConfig: [
      {
        domainName: string(name='DomainName'),
        appName: string(name='AppName'),
        timeInterval: integer(name='TimeInterval'),
        ossEndpoint: string(name='OssEndpoint'),
        ossBucket: string(name='OssBucket'),
        overwriteOssObject: string(name='OverwriteOssObject'),
        sequenceOssObject: string(name='SequenceOssObject'),
        createTime: string(name='CreateTime'),
        callback: string(name='Callback'),
      }
    ](name='LiveStreamSnapshotConfig'),
  }(name='LiveStreamSnapshotConfigList'),
}

async function describeLiveSnapshotConfigWithOptions(request: DescribeLiveSnapshotConfigRequest, runtime: Util.RuntimeOptions): DescribeLiveSnapshotConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLiveSnapshotConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function describeLiveSnapshotConfig(request: DescribeLiveSnapshotConfigRequest): DescribeLiveSnapshotConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLiveSnapshotConfigWithOptions(request, runtime);
}

model UpdateLiveAppSnapshotConfigRequest = {
  securityToken?: string(name='SecurityToken'),
  domainName: string(name='DomainName'),
  appName: string(name='AppName'),
  timeInterval?: integer(name='TimeInterval'),
  ossEndpoint?: string(name='OssEndpoint'),
  ossBucket?: string(name='OssBucket'),
  overwriteOssObject?: string(name='OverwriteOssObject'),
  sequenceOssObject?: string(name='SequenceOssObject'),
  callback?: string(name='Callback'),
}

model UpdateLiveAppSnapshotConfigResponse = {
  requestId: string(name='RequestId'),
}

async function updateLiveAppSnapshotConfigWithOptions(request: UpdateLiveAppSnapshotConfigRequest, runtime: Util.RuntimeOptions): UpdateLiveAppSnapshotConfigResponse {
  Util.validateModel(request);
  return doRequest('UpdateLiveAppSnapshotConfig', 'HTTPS', 'POST', '2016-11-01', 'AK', null, request, runtime);
}

async function updateLiveAppSnapshotConfig(request: UpdateLiveAppSnapshotConfigRequest): UpdateLiveAppSnapshotConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveAppSnapshotConfigWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
