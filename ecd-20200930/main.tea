import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('ecd', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model ModifyPolicyGroupRequest = {
  regionId: string(name='RegionId'),
  policyGroupId?: string(name='PolicyGroupId'),
  name?: string(name='Name'),
  clipboard?: string(name='Clipboard'),
  localDrive?: string(name='LocalDrive'),
  usbRedirect?: string(name='UsbRedirect'),
  watermark?: string(name='Watermark'),
}

model ModifyPolicyGroupResponse = {
  requestId: string(name='RequestId'),
}

async function modifyPolicyGroupWithOptions(request: ModifyPolicyGroupRequest, runtime: Util.RuntimeOptions): ModifyPolicyGroupResponse {
  Util.validateModel(request);
  return doRequest('ModifyPolicyGroup', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function modifyPolicyGroup(request: ModifyPolicyGroupRequest): ModifyPolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPolicyGroupWithOptions(request, runtime);
}

model PayOrderCallbackRequest = {
  data: string(name='data'),
}

model PayOrderCallbackResponse = {
  requestId: string(name='RequestId'),
}

async function payOrderCallbackWithOptions(request: PayOrderCallbackRequest, runtime: Util.RuntimeOptions): PayOrderCallbackResponse {
  Util.validateModel(request);
  return doRequest('PayOrderCallback', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function payOrderCallback(request: PayOrderCallbackRequest): PayOrderCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return payOrderCallbackWithOptions(request, runtime);
}

model DescribeDesktopTypesRequest = {
  regionId: string(name='RegionId'),
  desktopTypeId?: string(name='DesktopTypeId'),
  instanceTypeFamily?: string(name='InstanceTypeFamily'),
}

model DescribeDesktopTypesResponse = {
  requestId: string(name='RequestId'),
  desktopTypes: [
    {
      desktopTypeId: string(name='DesktopTypeId'),
      instanceTypeFamily: string(name='InstanceTypeFamily'),
      cpuCount: string(name='CpuCount'),
      GPUCount: string(name='GPUCount'),
      memorySize: string(name='MemorySize'),
      systemDiskSize: string(name='SystemDiskSize'),
      dataDiskSize: string(name='DataDiskSize'),
    }
  ](name='DesktopTypes'),
}

async function describeDesktopTypesWithOptions(request: DescribeDesktopTypesRequest, runtime: Util.RuntimeOptions): DescribeDesktopTypesResponse {
  Util.validateModel(request);
  return doRequest('DescribeDesktopTypes', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function describeDesktopTypes(request: DescribeDesktopTypesRequest): DescribeDesktopTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopTypesWithOptions(request, runtime);
}

model DescribeDirectoriesRequest = {
  regionId: string(name='RegionId'),
  directoryType?: string(name='DirectoryType'),
  directoryId?: [ string ](name='DirectoryId'),
  maxResults?: integer(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model DescribeDirectoriesResponse = {
  nextToken: string(name='NextToken'),
  requestId: string(name='RequestId'),
  directories: [
    {
      directoryId: string(name='DirectoryId'),
      status: string(name='Status'),
      directoryType: string(name='DirectoryType'),
      creationTime: string(name='CreationTime'),
      name: string(name='Name'),
      vpcId: string(name='VpcId'),
      customSecurityGroupId: string(name='CustomSecurityGroupId'),
      dnsUserName: string(name='DnsUserName'),
      enableInternetAccess: boolean(name='EnableInternetAccess'),
      trustPassword: string(name='TrustPassword'),
      domainName: string(name='DomainName'),
      domainUserName: string(name='DomainUserName'),
      domainPassword: string(name='DomainPassword'),
      ADConnectors: [
        {
          ADConnectorAddress: string(name='ADConnectorAddress'),
          vSwitchId: string(name='VSwitchId'),
          connectorStatus: string(name='ConnectorStatus'),
          networkInterfaceId: string(name='NetworkInterfaceId'),
        }
      ](name='ADConnectors'),
      dnsAddress: [ string ](name='DnsAddress'),
      vSwitchIds: [ string ](name='VSwitchIds'),
    }
  ](name='Directories'),
}

async function describeDirectoriesWithOptions(request: DescribeDirectoriesRequest, runtime: Util.RuntimeOptions): DescribeDirectoriesResponse {
  Util.validateModel(request);
  return doRequest('DescribeDirectories', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function describeDirectories(request: DescribeDirectoriesRequest): DescribeDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDirectoriesWithOptions(request, runtime);
}

model DeleteDirectoriesRequest = {
  regionId: string(name='RegionId'),
  directoryId: [ string ](name='DirectoryId'),
}

model DeleteDirectoriesResponse = {
  nextToken: string(name='NextToken'),
  requestId: string(name='RequestId'),
}

async function deleteDirectoriesWithOptions(request: DeleteDirectoriesRequest, runtime: Util.RuntimeOptions): DeleteDirectoriesResponse {
  Util.validateModel(request);
  return doRequest('DeleteDirectories', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function deleteDirectories(request: DeleteDirectoriesRequest): DeleteDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDirectoriesWithOptions(request, runtime);
}

model ListDirectoryUsersRequest = {
  regionId: string(name='RegionId'),
  directoryId: string(name='DirectoryId'),
  nextToken?: string(name='NextToken'),
  maxResults?: integer(name='MaxResults'),
}

model ListDirectoryUsersResponse = {
  requestId: string(name='RequestId'),
  nextToken: string(name='NextToken'),
  users: [
    {
      endUser: string(name='EndUser'),
    }
  ](name='Users'),
}

async function listDirectoryUsersWithOptions(request: ListDirectoryUsersRequest, runtime: Util.RuntimeOptions): ListDirectoryUsersResponse {
  Util.validateModel(request);
  return doRequest('ListDirectoryUsers', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function listDirectoryUsers(request: ListDirectoryUsersRequest): ListDirectoryUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDirectoryUsersWithOptions(request, runtime);
}

model CreateImageRequest = {
  regionId: string(name='RegionId'),
  desktopId?: string(name='DesktopId'),
  imageName?: string(name='ImageName'),
  description?: string(name='Description'),
}

model CreateImageResponse = {
  requestId: string(name='RequestId'),
  imageId: string(name='ImageId'),
}

async function createImageWithOptions(request: CreateImageRequest, runtime: Util.RuntimeOptions): CreateImageResponse {
  Util.validateModel(request);
  return doRequest('CreateImage', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function createImage(request: CreateImageRequest): CreateImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageWithOptions(request, runtime);
}

model CreateRAMDirectoryRequest = {
  regionId: string(name='RegionId'),
  directoryName?: string(name='DirectoryName'),
  enableInternetAccess?: boolean(name='EnableInternetAccess'),
  vSwitchId?: [ string ](name='VSwitchId'),
}

model CreateRAMDirectoryResponse = {
  requestId: string(name='RequestId'),
  directoryId: string(name='DirectoryId'),
}

async function createRAMDirectoryWithOptions(request: CreateRAMDirectoryRequest, runtime: Util.RuntimeOptions): CreateRAMDirectoryResponse {
  Util.validateModel(request);
  return doRequest('CreateRAMDirectory', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function createRAMDirectory(request: CreateRAMDirectoryRequest): CreateRAMDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRAMDirectoryWithOptions(request, runtime);
}

model DeletePolicyGroupsRequest = {
  regionId: string(name='RegionId'),
  policyGroupId: [ string ](name='PolicyGroupId'),
}

model DeletePolicyGroupsResponse = {
  requestId: string(name='RequestId'),
}

async function deletePolicyGroupsWithOptions(request: DeletePolicyGroupsRequest, runtime: Util.RuntimeOptions): DeletePolicyGroupsResponse {
  Util.validateModel(request);
  return doRequest('DeletePolicyGroups', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function deletePolicyGroups(request: DeletePolicyGroupsRequest): DeletePolicyGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePolicyGroupsWithOptions(request, runtime);
}

model DescribePolicyGroupsRequest = {
  regionId: string(name='RegionId'),
  maxResults?: integer(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  policyGroupId?: [ string ](name='PolicyGroupId'),
}

model DescribePolicyGroupsResponse = {
  nextToken: string(name='NextToken'),
  requestId: string(name='RequestId'),
  describePolicyGroups: [
    {
      policyGroupId: string(name='PolicyGroupId'),
      policyGroupType: string(name='PolicyGroupType'),
      clipboard: string(name='Clipboard'),
      localDrive: string(name='LocalDrive'),
      usbRedirect: string(name='UsbRedirect'),
      watermark: string(name='Watermark'),
      name: string(name='Name'),
    }
  ](name='DescribePolicyGroups'),
}

async function describePolicyGroupsWithOptions(request: DescribePolicyGroupsRequest, runtime: Util.RuntimeOptions): DescribePolicyGroupsResponse {
  Util.validateModel(request);
  return doRequest('DescribePolicyGroups', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function describePolicyGroups(request: DescribePolicyGroupsRequest): DescribePolicyGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolicyGroupsWithOptions(request, runtime);
}

model DeleteDesktopsRequest = {
  regionId: string(name='RegionId'),
  desktopId: [ string ](name='DesktopId'),
}

model DeleteDesktopsResponse = {
  requestId: string(name='RequestId'),
}

async function deleteDesktopsWithOptions(request: DeleteDesktopsRequest, runtime: Util.RuntimeOptions): DeleteDesktopsResponse {
  Util.validateModel(request);
  return doRequest('DeleteDesktops', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function deleteDesktops(request: DeleteDesktopsRequest): DeleteDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDesktopsWithOptions(request, runtime);
}

model ModifyImageAttributeRequest = {
  regionId: string(name='RegionId'),
  imageId: string(name='ImageId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
}

model ModifyImageAttributeResponse = {
  requestId: string(name='RequestId'),
}

async function modifyImageAttributeWithOptions(request: ModifyImageAttributeRequest, runtime: Util.RuntimeOptions): ModifyImageAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyImageAttribute', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function modifyImageAttribute(request: ModifyImageAttributeRequest): ModifyImageAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageAttributeWithOptions(request, runtime);
}

model DoLogicalDeleteResourceRequest = {
  invoker?: string(name='Invoker'),
  pk?: string(name='Pk'),
  bid?: string(name='Bid'),
  hid?: long(name='Hid'),
  country?: string(name='Country'),
  taskIdentifier?: string(name='TaskIdentifier'),
  taskExtraData?: string(name='TaskExtraData'),
  gmtWakeup?: string(name='GmtWakeup'),
  regionId: string(name='RegionId'),
}

model DoLogicalDeleteResourceResponse = {
  bid: string(name='Bid'),
  country: string(name='Country'),
  hid: long(name='Hid'),
  interrupt: boolean(name='Interrupt'),
  invoker: string(name='Invoker'),
  message: string(name='Message'),
  pk: string(name='Pk'),
  success: boolean(name='Success'),
  taskExtraData: string(name='TaskExtraData'),
  taskIdentifier: string(name='TaskIdentifier'),
  gmtWakeup: string(name='GmtWakeup'),
  requestId: string(name='RequestId'),
}

async function doLogicalDeleteResourceWithOptions(request: DoLogicalDeleteResourceRequest, runtime: Util.RuntimeOptions): DoLogicalDeleteResourceResponse {
  Util.validateModel(request);
  return doRequest('DoLogicalDeleteResource', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function doLogicalDeleteResource(request: DoLogicalDeleteResourceRequest): DoLogicalDeleteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return doLogicalDeleteResourceWithOptions(request, runtime);
}

model ModifyEntitlementRequest = {
  regionId: string(name='RegionId'),
  desktopId?: string(name='DesktopId'),
  endUserId?: [ string ](name='EndUserId'),
}

model ModifyEntitlementResponse = {
  requestId: string(name='RequestId'),
}

async function modifyEntitlementWithOptions(request: ModifyEntitlementRequest, runtime: Util.RuntimeOptions): ModifyEntitlementResponse {
  Util.validateModel(request);
  return doRequest('ModifyEntitlement', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function modifyEntitlement(request: ModifyEntitlementRequest): ModifyEntitlementResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEntitlementWithOptions(request, runtime);
}

model DeleteBundlesRequest = {
  regionId: string(name='RegionId'),
  bundleId: [ string ](name='BundleId'),
}

model DeleteBundlesResponse = {
  requestId: string(name='RequestId'),
}

async function deleteBundlesWithOptions(request: DeleteBundlesRequest, runtime: Util.RuntimeOptions): DeleteBundlesResponse {
  Util.validateModel(request);
  return doRequest('DeleteBundles', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function deleteBundles(request: DeleteBundlesRequest): DeleteBundlesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBundlesWithOptions(request, runtime);
}

model DescribeDesktopsRequest = {
  regionId: string(name='RegionId'),
  groupId?: string(name='GroupId'),
  desktopStatus?: string(name='DesktopStatus'),
  maxResults?: integer(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  userName?: string(name='UserName'),
  desktopName?: string(name='DesktopName'),
  directoryId?: string(name='DirectoryId'),
  policyGroupId?: string(name='PolicyGroupId'),
  desktopId?: [ string ](name='DesktopId'),
  endUserId?: [ string ](name='EndUserId'),
}

model DescribeDesktopsResponse = {
  requestId: string(name='RequestId'),
  nextToken: string(name='NextToken'),
  desktops: [
    {
      directoryId: string(name='DirectoryId'),
      creationTime: string(name='CreationTime'),
      desktopId: string(name='DesktopId'),
      desktopStatus: string(name='DesktopStatus'),
      desktopName: string(name='DesktopName'),
      imageId: string(name='ImageId'),
      desktopType: string(name='DesktopType'),
      systemDiskCategory: string(name='SystemDiskCategory'),
      systemDiskSize: integer(name='SystemDiskSize'),
      dataDiskCategory: string(name='DataDiskCategory'),
      dataDiskSize: string(name='DataDiskSize'),
      connectionStatus: string(name='ConnectionStatus'),
      policyGroupId: string(name='PolicyGroupId'),
      cpu: integer(name='Cpu'),
      memory: long(name='Memory'),
      networkInterfaceId: long(name='NetworkInterfaceId'),
      expiredTime: string(name='ExpiredTime'),
      chargeType: string(name='ChargeType'),
      disks: [
        {
          diskId: string(name='DiskId'),
          diskSize: integer(name='DiskSize'),
          diskType: string(name='DiskType'),
        }
      ](name='Disks'),
      endUserIds: [ string ](name='EndUserIds'),
    }
  ](name='Desktops'),
}

async function describeDesktopsWithOptions(request: DescribeDesktopsRequest, runtime: Util.RuntimeOptions): DescribeDesktopsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDesktops', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function describeDesktops(request: DescribeDesktopsRequest): DescribeDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopsWithOptions(request, runtime);
}

model RebootDesktopsRequest = {
  regionId: string(name='RegionId'),
  desktopId: [ string ](name='DesktopId'),
}

model RebootDesktopsResponse = {
  requestId: string(name='RequestId'),
}

async function rebootDesktopsWithOptions(request: RebootDesktopsRequest, runtime: Util.RuntimeOptions): RebootDesktopsResponse {
  Util.validateModel(request);
  return doRequest('RebootDesktops', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function rebootDesktops(request: RebootDesktopsRequest): RebootDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootDesktopsWithOptions(request, runtime);
}

model CreateBundleRequest = {
  regionId: string(name='RegionId'),
  imageId: string(name='ImageId'),
  desktopType: string(name='DesktopType'),
  rootDiskSizeGib: integer(name='RootDiskSizeGib'),
  bundleName?: string(name='BundleName'),
  description?: string(name='Description'),
  userDiskSizeGib: [ integer ](name='UserDiskSizeGib'),
}

model CreateBundleResponse = {
  requestId: string(name='RequestId'),
  bundleId: string(name='BundleId'),
}

async function createBundleWithOptions(request: CreateBundleRequest, runtime: Util.RuntimeOptions): CreateBundleResponse {
  Util.validateModel(request);
  return doRequest('CreateBundle', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function createBundle(request: CreateBundleRequest): CreateBundleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBundleWithOptions(request, runtime);
}

model ModifyDesktopsPolicyGroupRequest = {
  regionId: string(name='RegionId'),
  policyGroupId?: string(name='PolicyGroupId'),
  desktopId: [ string ](name='DesktopId'),
}

model ModifyDesktopsPolicyGroupResponse = {
  requestId: string(name='RequestId'),
  modifyResults: [
    {
      desktopId: string(name='DesktopId'),
      code: string(name='Code'),
      message: integer(name='Message'),
    }
  ](name='ModifyResults'),
}

async function modifyDesktopsPolicyGroupWithOptions(request: ModifyDesktopsPolicyGroupRequest, runtime: Util.RuntimeOptions): ModifyDesktopsPolicyGroupResponse {
  Util.validateModel(request);
  return doRequest('ModifyDesktopsPolicyGroup', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function modifyDesktopsPolicyGroup(request: ModifyDesktopsPolicyGroupRequest): ModifyDesktopsPolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopsPolicyGroupWithOptions(request, runtime);
}

model CreatePolicyGroupRequest = {
  regionId: string(name='RegionId'),
  clipboard?: string(name='Clipboard'),
  localDrive?: string(name='LocalDrive'),
  usbRedirect?: string(name='UsbRedirect'),
  watermark?: string(name='Watermark'),
  name?: string(name='Name'),
}

model CreatePolicyGroupResponse = {
  requestId: string(name='RequestId'),
  policyGroupId: string(name='PolicyGroupId'),
}

async function createPolicyGroupWithOptions(request: CreatePolicyGroupRequest, runtime: Util.RuntimeOptions): CreatePolicyGroupResponse {
  Util.validateModel(request);
  return doRequest('CreatePolicyGroup', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function createPolicyGroup(request: CreatePolicyGroupRequest): CreatePolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPolicyGroupWithOptions(request, runtime);
}

model DoPhysicalDeleteResourceRequest = {
  invoker?: string(name='Invoker'),
  pk?: string(name='Pk'),
  bid?: string(name='Bid'),
  hid?: long(name='Hid'),
  country?: string(name='Country'),
  taskIdentifier?: string(name='TaskIdentifier'),
  taskExtraData?: string(name='TaskExtraData'),
  gmtWakeup?: string(name='GmtWakeup'),
  regionId: string(name='RegionId'),
}

model DoPhysicalDeleteResourceResponse = {
  bid: string(name='Bid'),
  country: string(name='Country'),
  hid: long(name='Hid'),
  interrupt: boolean(name='Interrupt'),
  invoker: string(name='Invoker'),
  message: string(name='Message'),
  requestId: string(name='RequestId'),
  pk: string(name='Pk'),
  success: boolean(name='Success'),
  taskExtraData: string(name='TaskExtraData'),
  taskIdentifier: string(name='TaskIdentifier'),
  gmtWakeup: string(name='GmtWakeup'),
}

async function doPhysicalDeleteResourceWithOptions(request: DoPhysicalDeleteResourceRequest, runtime: Util.RuntimeOptions): DoPhysicalDeleteResourceResponse {
  Util.validateModel(request);
  return doRequest('DoPhysicalDeleteResource', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function doPhysicalDeleteResource(request: DoPhysicalDeleteResourceRequest): DoPhysicalDeleteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return doPhysicalDeleteResourceWithOptions(request, runtime);
}

model CreateADConnectorDirectoryRequest = {
  regionId: string(name='RegionId'),
  domainName: string(name='DomainName'),
  domainUserName: string(name='DomainUserName'),
  domainPassword: string(name='DomainPassword'),
  dnsAddress?: [ string ](name='DnsAddress'),
  vSwitchId?: [ string ](name='VSwitchId'),
  directoryName?: string(name='DirectoryName'),
}

model CreateADConnectorDirectoryResponse = {
  directoryId: string(name='DirectoryId'),
  requestId: string(name='RequestId'),
  trustPassword: string(name='TrustPassword'),
  adConnectors: [
    {
      address: string(name='Address'),
    }
  ](name='AdConnectors'),
}

async function createADConnectorDirectoryWithOptions(request: CreateADConnectorDirectoryRequest, runtime: Util.RuntimeOptions): CreateADConnectorDirectoryResponse {
  Util.validateModel(request);
  return doRequest('CreateADConnectorDirectory', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function createADConnectorDirectory(request: CreateADConnectorDirectoryRequest): CreateADConnectorDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createADConnectorDirectoryWithOptions(request, runtime);
}

model GetConnectionTicketRequest = {
  regionId: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  userName?: string(name='UserName'),
  password?: string(name='Password'),
  taskId?: string(name='TaskId'),
  desktopId?: string(name='DesktopId'),
}

model GetConnectionTicketResponse = {
  requestId: string(name='RequestId'),
  ticket: string(name='Ticket'),
  taskId: string(name='TaskId'),
  taskStatus: string(name='TaskStatus'),
}

async function getConnectionTicketWithOptions(request: GetConnectionTicketRequest, runtime: Util.RuntimeOptions): GetConnectionTicketResponse {
  Util.validateModel(request);
  return doRequest('GetConnectionTicket', 'HTTP', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function getConnectionTicket(request: GetConnectionTicketRequest): GetConnectionTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConnectionTicketWithOptions(request, runtime);
}

model ModifyDesktopPolicysRequest = {
  regionId: string(name='RegionId'),
  desktopId: [ string ](name='DesktopId'),
  clipboard?: string(name='Clipboard'),
  localDrive?: string(name='LocalDrive'),
  usbRedirect?: string(name='UsbRedirect'),
  watermark?: string(name='Watermark'),
}

model ModifyDesktopPolicysResponse = {
  requestId: string(name='RequestId'),
  results: [
    {
      desktopId: string(name='DesktopId'),
      success: string(name='Success'),
      code: string(name='Code'),
      message: string(name='Message'),
    }
  ](name='Results'),
}

async function modifyDesktopPolicysWithOptions(request: ModifyDesktopPolicysRequest, runtime: Util.RuntimeOptions): ModifyDesktopPolicysResponse {
  Util.validateModel(request);
  return doRequest('ModifyDesktopPolicys', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function modifyDesktopPolicys(request: ModifyDesktopPolicysRequest): ModifyDesktopPolicysResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopPolicysWithOptions(request, runtime);
}

model DescribeBundlesRequest = {
  regionId: string(name='RegionId'),
  maxResults?: integer(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  userName?: string(name='UserName'),
  category?: string(name='Category'),
  bundleId?: [ string ](name='BundleId'),
  bundleType?: string(name='BundleType'),
}

model DescribeBundlesResponse = {
  nextToken: string(name='NextToken'),
  requestId: string(name='RequestId'),
  bundles: [
    {
      imageId: string(name='ImageId'),
      bundleId: string(name='BundleId'),
      bundleType: string(name='BundleType'),
      bundleName: string(name='BundleName'),
      description: string(name='Description'),
      desktopType: string(name='DesktopType'),
      disks: [
        {
          diskSize: integer(name='DiskSize'),
          diskType: string(name='DiskType'),
        }
      ](name='Disks'),
    }
  ](name='Bundles'),
}

async function describeBundlesWithOptions(request: DescribeBundlesRequest, runtime: Util.RuntimeOptions): DescribeBundlesResponse {
  Util.validateModel(request);
  return doRequest('DescribeBundles', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function describeBundles(request: DescribeBundlesRequest): DescribeBundlesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBundlesWithOptions(request, runtime);
}

model DeleteImagesRequest = {
  regionId: string(name='RegionId'),
  imageId: [ string ](name='ImageId'),
}

model DeleteImagesResponse = {
  requestId: string(name='RequestId'),
}

async function deleteImagesWithOptions(request: DeleteImagesRequest, runtime: Util.RuntimeOptions): DeleteImagesResponse {
  Util.validateModel(request);
  return doRequest('DeleteImages', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function deleteImages(request: DeleteImagesRequest): DeleteImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImagesWithOptions(request, runtime);
}

model DoCheckResourceRequest = {
  invoker?: string(name='Invoker'),
  pk?: string(name='Pk'),
  bid?: string(name='Bid'),
  hid?: long(name='Hid'),
  country?: string(name='Country'),
  taskIdentifier?: string(name='TaskIdentifier'),
  taskExtraData?: string(name='TaskExtraData'),
  gmtWakeup?: string(name='GmtWakeup'),
  regionId: string(name='RegionId'),
}

model DoCheckResourceResponse = {
  requestId: string(name='RequestId'),
  interrupt: boolean(name='Interrupt'),
  invoker: string(name='Invoker'),
  pk: string(name='Pk'),
  bid: string(name='Bid'),
  hid: long(name='Hid'),
  country: string(name='Country'),
  taskIdentifier: string(name='TaskIdentifier'),
  taskExtraData: string(name='TaskExtraData'),
  gmtWakeup: string(name='GmtWakeup'),
  success: boolean(name='Success'),
  message: string(name='Message'),
  level: long(name='Level'),
  url: string(name='Url'),
  prompt: string(name='Prompt'),
}

async function doCheckResourceWithOptions(request: DoCheckResourceRequest, runtime: Util.RuntimeOptions): DoCheckResourceResponse {
  Util.validateModel(request);
  return doRequest('DoCheckResource', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function doCheckResource(request: DoCheckResourceRequest): DoCheckResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return doCheckResourceWithOptions(request, runtime);
}

model DescribeDesktopPolicysRequest = {
  regionId: string(name='RegionId'),
  desktopId?: [ string ](name='DesktopId'),
  nextToken?: string(name='NextToken'),
  maxResults?: integer(name='MaxResults'),
}

model DescribeDesktopPolicysResponse = {
  nextToken: string(name='NextToken'),
  requestId: string(name='RequestId'),
  describeDesktopPolicys: [
    {
      clipboard: string(name='Clipboard'),
      localDrive: string(name='LocalDrive'),
      usbRedirect: string(name='UsbRedirect'),
      watermark: string(name='Watermark'),
      desktopId: string(name='DesktopId'),
    }
  ](name='DescribeDesktopPolicys'),
}

async function describeDesktopPolicysWithOptions(request: DescribeDesktopPolicysRequest, runtime: Util.RuntimeOptions): DescribeDesktopPolicysResponse {
  Util.validateModel(request);
  return doRequest('DescribeDesktopPolicys', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function describeDesktopPolicys(request: DescribeDesktopPolicysRequest): DescribeDesktopPolicysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopPolicysWithOptions(request, runtime);
}

model CreateDesktopsRequest = {
  regionId: string(name='RegionId'),
  groupId?: string(name='GroupId'),
  bundleId: string(name='BundleId'),
  systemDiskSize?: integer(name='SystemDiskSize'),
  dataDiskSize?: integer(name='DataDiskSize'),
  desktopName?: string(name='DesktopName'),
  userName?: string(name='UserName'),
  vpcId?: string(name='VpcId'),
  amount?: integer(name='Amount'),
  directoryId?: string(name='DirectoryId'),
  endUserId: [ string ](name='EndUserId'),
  policyGroupId: string(name='PolicyGroupId'),
  chargeType?: string(name='ChargeType'),
  period?: integer(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  autoPay?: boolean(name='AutoPay'),
}

model CreateDesktopsResponse = {
  requestId: string(name='RequestId'),
  orderId: string(name='OrderId'),
  desktopId: [ string ] (name='DesktopId'),
}

async function createDesktopsWithOptions(request: CreateDesktopsRequest, runtime: Util.RuntimeOptions): CreateDesktopsResponse {
  Util.validateModel(request);
  return doRequest('CreateDesktops', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function createDesktops(request: CreateDesktopsRequest): CreateDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDesktopsWithOptions(request, runtime);
}

model DescribeImagesRequest = {
  regionId: string(name='RegionId'),
  maxResults?: integer(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  imageType?: string(name='ImageType'),
  imageStatus?: string(name='ImageStatus'),
  imageId?: [ string ](name='ImageId'),
}

model DescribeImagesResponse = {
  nextToken: string(name='NextToken'),
  requestId: string(name='RequestId'),
  images: [
    {
      creationTime: string(name='CreationTime'),
      imageId: string(name='ImageId'),
      imageType: string(name='ImageType'),
      name: string(name='Name'),
      progress: integer(name='Progress'),
      size: integer(name='Size'),
      status: string(name='Status'),
      description: string(name='Description'),
      osType: string(name='OsType'),
    }
  ](name='Images'),
}

async function describeImagesWithOptions(request: DescribeImagesRequest, runtime: Util.RuntimeOptions): DescribeImagesResponse {
  Util.validateModel(request);
  return doRequest('DescribeImages', 'HTTPS', 'POST', '2020-09-30', 'AK', null, request, runtime);
}

async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagesWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
