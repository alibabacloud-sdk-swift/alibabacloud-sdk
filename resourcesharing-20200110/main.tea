import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('resourcesharing', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DescribeRegionsRequest = {
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponse = {
  requestId: string(name='RequestId'),
  regions: [
    {
      regionId: string(name='RegionId'),
      localName: string(name='LocalName'),
      regionEndpoint: string(name='RegionEndpoint'),
    }
  ](name='Regions'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRegions', 'HTTPS', 'POST', '2020-01-10', 'AK', null, request, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model ListResourceSharesRequest = {
  resourceShareIds?: [ string ](name='ResourceShareIds'),
  resourceOwner: string(name='ResourceOwner'),
  resourceShareName?: string(name='ResourceShareName'),
  resourceShareStatus?: string(name='ResourceShareStatus'),
  maxResults?: integer(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model ListResourceSharesResponse = {
  requestId: string(name='RequestId'),
  nextToken: string(name='NextToken'),
  resourceShares: [
    {
      resourceShareId: string(name='ResourceShareId'),
      resourceShareName: string(name='ResourceShareName'),
      resourceShareOwner: string(name='ResourceShareOwner'),
      resourceShareStatus: string(name='ResourceShareStatus'),
      createTime: string(name='CreateTime'),
      updateTime: string(name='UpdateTime'),
    }
  ](name='ResourceShares'),
}

async function listResourceSharesWithOptions(request: ListResourceSharesRequest, runtime: Util.RuntimeOptions): ListResourceSharesResponse {
  Util.validateModel(request);
  return doRequest('ListResourceShares', 'HTTPS', 'POST', '2020-01-10', 'AK', null, request, runtime);
}

async function listResourceShares(request: ListResourceSharesRequest): ListResourceSharesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceSharesWithOptions(request, runtime);
}

model ListSharedResourcesRequest = {
  resourceOwner: string(name='ResourceOwner'),
  resourceShareIds?: [ string ](name='ResourceShareIds'),
  resourceType?: string(name='ResourceType'),
  resourceIds?: [ string ](name='ResourceIds'),
  target?: string(name='Target'),
  maxResults?: integer(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model ListSharedResourcesResponse = {
  requestId: string(name='RequestId'),
  nextToken: string(name='NextToken'),
  sharedResources: [
    {
      resourceShareId: string(name='ResourceShareId'),
      resourceId: string(name='ResourceId'),
      resourceType: string(name='ResourceType'),
      resourceStatus: string(name='ResourceStatus'),
      resourceStatusMessage: string(name='ResourceStatusMessage'),
      createTime: string(name='CreateTime'),
      updateTime: string(name='UpdateTime'),
    }
  ](name='SharedResources'),
}

async function listSharedResourcesWithOptions(request: ListSharedResourcesRequest, runtime: Util.RuntimeOptions): ListSharedResourcesResponse {
  Util.validateModel(request);
  return doRequest('ListSharedResources', 'HTTPS', 'POST', '2020-01-10', 'AK', null, request, runtime);
}

async function listSharedResources(request: ListSharedResourcesRequest): ListSharedResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSharedResourcesWithOptions(request, runtime);
}

model ListSharedTargetsRequest = {
  resourceOwner: string(name='ResourceOwner'),
  resourceShareIds?: [ string ](name='ResourceShareIds'),
  targets?: [ string ](name='Targets'),
  resourceType?: string(name='ResourceType'),
  resourceId?: string(name='ResourceId'),
  maxResults?: integer(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model ListSharedTargetsResponse = {
  requestId: string(name='RequestId'),
  nextToken: string(name='NextToken'),
  sharedTargets: [
    {
      resourceShareId: string(name='ResourceShareId'),
      targetId: string(name='TargetId'),
      createTime: string(name='CreateTime'),
      updateTime: string(name='UpdateTime'),
    }
  ](name='SharedTargets'),
}

async function listSharedTargetsWithOptions(request: ListSharedTargetsRequest, runtime: Util.RuntimeOptions): ListSharedTargetsResponse {
  Util.validateModel(request);
  return doRequest('ListSharedTargets', 'HTTPS', 'POST', '2020-01-10', 'AK', null, request, runtime);
}

async function listSharedTargets(request: ListSharedTargetsRequest): ListSharedTargetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSharedTargetsWithOptions(request, runtime);
}

model AssociateResourceShareRequest = {
  resourceShareId: string(name='ResourceShareId'),
  resources?: [
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='Resources'),
  targets?: [ string ](name='Targets'),
}

model AssociateResourceShareResponse = {
  requestId: string(name='RequestId'),
  resourceShareAssociations: [
    {
      resourceShareId: string(name='ResourceShareId'),
      resourceShareName: string(name='ResourceShareName'),
      associationType: string(name='AssociationType'),
      entityId: string(name='EntityId'),
      entityType: string(name='EntityType'),
      associationStatus: string(name='AssociationStatus'),
      associationStatusMessage: string(name='AssociationStatusMessage'),
      createTime: string(name='CreateTime'),
      updateTime: string(name='UpdateTime'),
    }
  ](name='ResourceShareAssociations'),
}

async function associateResourceShareWithOptions(request: AssociateResourceShareRequest, runtime: Util.RuntimeOptions): AssociateResourceShareResponse {
  Util.validateModel(request);
  return doRequest('AssociateResourceShare', 'HTTPS', 'POST', '2020-01-10', 'AK', null, request, runtime);
}

async function associateResourceShare(request: AssociateResourceShareRequest): AssociateResourceShareResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateResourceShareWithOptions(request, runtime);
}

model UpdateResourceShareRequest = {
  resourceShareId: string(name='ResourceShareId'),
  resourceShareName: string(name='ResourceShareName'),
}

model UpdateResourceShareResponse = {
  requestId: string(name='RequestId'),
  resourceShare: {
    resourceShareId: string(name='ResourceShareId'),
    resourceShareName: string(name='ResourceShareName'),
    resourceShareOwner: string(name='ResourceShareOwner'),
    resourceShareStatus: string(name='ResourceShareStatus'),
    createTime: string(name='CreateTime'),
    updateTime: string(name='UpdateTime'),
  }(name='ResourceShare'),
}

async function updateResourceShareWithOptions(request: UpdateResourceShareRequest, runtime: Util.RuntimeOptions): UpdateResourceShareResponse {
  Util.validateModel(request);
  return doRequest('UpdateResourceShare', 'HTTPS', 'POST', '2020-01-10', 'AK', null, request, runtime);
}

async function updateResourceShare(request: UpdateResourceShareRequest): UpdateResourceShareResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateResourceShareWithOptions(request, runtime);
}

model DeleteResourceShareRequest = {
  resourceShareId: string(name='ResourceShareId'),
}

model DeleteResourceShareResponse = {
  requestId: string(name='RequestId'),
}

async function deleteResourceShareWithOptions(request: DeleteResourceShareRequest, runtime: Util.RuntimeOptions): DeleteResourceShareResponse {
  Util.validateModel(request);
  return doRequest('DeleteResourceShare', 'HTTPS', 'POST', '2020-01-10', 'AK', null, request, runtime);
}

async function deleteResourceShare(request: DeleteResourceShareRequest): DeleteResourceShareResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteResourceShareWithOptions(request, runtime);
}

model DisassociateResourceShareRequest = {
  resourceShareId: string(name='ResourceShareId'),
  resources?: [
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='Resources'),
  targets?: [ string ](name='Targets'),
}

model DisassociateResourceShareResponse = {
  requestId: string(name='RequestId'),
  resourceShareAssociations: [
    {
      resourceShareId: string(name='ResourceShareId'),
      resourceShareName: string(name='ResourceShareName'),
      associationType: string(name='AssociationType'),
      entityId: string(name='EntityId'),
      entityType: string(name='EntityType'),
      associationStatus: string(name='AssociationStatus'),
      associationStatusMessage: string(name='AssociationStatusMessage'),
      createTime: string(name='CreateTime'),
      updateTime: string(name='UpdateTime'),
    }
  ](name='ResourceShareAssociations'),
}

async function disassociateResourceShareWithOptions(request: DisassociateResourceShareRequest, runtime: Util.RuntimeOptions): DisassociateResourceShareResponse {
  Util.validateModel(request);
  return doRequest('DisassociateResourceShare', 'HTTPS', 'POST', '2020-01-10', 'AK', null, request, runtime);
}

async function disassociateResourceShare(request: DisassociateResourceShareRequest): DisassociateResourceShareResponse {
  var runtime = new Util.RuntimeOptions{};
  return disassociateResourceShareWithOptions(request, runtime);
}

model ListResourceShareAssociationsRequest = {
  resourceShareIds?: [ string ](name='ResourceShareIds'),
  resourceId?: string(name='ResourceId'),
  target?: string(name='Target'),
  associationType: string(name='AssociationType'),
  associationStatus?: string(name='AssociationStatus'),
  maxResults?: integer(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model ListResourceShareAssociationsResponse = {
  requestId: string(name='RequestId'),
  nextToken: string(name='NextToken'),
  resourceShareAssociations: [
    {
      resourceShareId: string(name='ResourceShareId'),
      resourceShareName: string(name='ResourceShareName'),
      associationType: string(name='AssociationType'),
      entityId: string(name='EntityId'),
      entityType: string(name='EntityType'),
      associationStatus: string(name='AssociationStatus'),
      associationStatusMessage: string(name='AssociationStatusMessage'),
      createTime: string(name='CreateTime'),
      updateTime: string(name='UpdateTime'),
    }
  ](name='ResourceShareAssociations'),
}

async function listResourceShareAssociationsWithOptions(request: ListResourceShareAssociationsRequest, runtime: Util.RuntimeOptions): ListResourceShareAssociationsResponse {
  Util.validateModel(request);
  return doRequest('ListResourceShareAssociations', 'HTTPS', 'POST', '2020-01-10', 'AK', null, request, runtime);
}

async function listResourceShareAssociations(request: ListResourceShareAssociationsRequest): ListResourceShareAssociationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceShareAssociationsWithOptions(request, runtime);
}

model CreateResourceShareRequest = {
  resourceShareName: string(name='ResourceShareName'),
  resources?: [
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='Resources'),
  targets?: [ string ](name='Targets'),
}

model CreateResourceShareResponse = {
  requestId: string(name='RequestId'),
  resourceShare: {
    resourceShareId: string(name='ResourceShareId'),
    resourceShareName: string(name='ResourceShareName'),
    resourceShareOwner: string(name='ResourceShareOwner'),
    resourceShareStatus: string(name='ResourceShareStatus'),
    createTime: string(name='CreateTime'),
    updateTime: string(name='UpdateTime'),
  }(name='ResourceShare'),
}

async function createResourceShareWithOptions(request: CreateResourceShareRequest, runtime: Util.RuntimeOptions): CreateResourceShareResponse {
  Util.validateModel(request);
  return doRequest('CreateResourceShare', 'HTTPS', 'POST', '2020-01-10', 'AK', null, request, runtime);
}

async function createResourceShare(request: CreateResourceShareRequest): CreateResourceShareResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourceShareWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
