/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
@endpointMap = {
    ap-northeast-2-pop = 'cs.aliyuncs.com',
    cn-beijing-finance-1 = 'cs.aliyuncs.com',
    cn-beijing-finance-pop = 'cs.aliyuncs.com',
    cn-beijing-gov-1 = 'cs.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cs.aliyuncs.com',
    cn-edge-1 = 'cs.aliyuncs.com',
    cn-fujian = 'cs.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cs.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cs.aliyuncs.com',
    cn-hangzhou-finance = 'cs.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cs.aliyuncs.com',
    cn-hangzhou-test-306 = 'cs.aliyuncs.com',
    cn-hongkong-finance-pop = 'cs.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'cs.aliyuncs.com',
    cn-qingdao-nebula = 'cs.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cs.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cs.aliyuncs.com',
    cn-shanghai-finance-1 = 'cs.aliyuncs.com',
    cn-shanghai-inner = 'cs.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cs.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cs.aliyuncs.com',
    cn-shenzhen-inner = 'cs.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cs.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cs.aliyuncs.com',
    cn-wuhan = 'cs.aliyuncs.com',
    cn-wulanchabu = 'cs.aliyuncs.com',
    cn-yushanfang = 'cs.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cs.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cs.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cs.aliyuncs.com',
    eu-west-1-oxs = 'cs.aliyuncs.com',
    rus-west-1-pop = 'cs.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AttachInstancesRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  instances?: [ string ](name='instances', description='待添加的实例列表。'),
  runtime?: {
    name?: string(name='name', description='容器运行时名称。'),
    version?: string(name='version', description='容器运行时版本。'),
  }(name='runtime', description='容器运行时。'),
  imageId?: string(name='image_id', description='自定义镜像ID。'),
  formatDisk?: boolean(name='format_disk', description='是否格式化数据盘。'),
  keepInstanceName?: boolean(name='keep_instance_name', description='是否保留实例名称。'),
  cpuPolicy?: string(name='cpu_policy', description='CPU策略。'),
  keyPair?: string(name='key_pair', description='key_pair名称，与login_password二选一'),
  password?: string(name='password', description='password，与key_pair二选一。'),
  isEdgeWorker?: boolean(name='is_edge_worker', description='是否为边缘节点。'),
  userData?: string(name='user_data', description='用户自定义数据。'),
  nodepoolId?: string(name='nodepool_id', description='节点池ID，欲将节点添加到哪个节点池中。。'),
  rdsInstances?: [ string ](name='rds_instances', description='RDS实例列表。'),
  tags?: [ 
    {
      key?: string(name='key', description='标签名。'),
      value?: string(name='value', description='标签值。'),
    }
  ](name='tags', description='节点标签。'),
}

model AttachInstancesResponseBody = {
  list?: [ 
    {
      code?: string(name='code', description='状态码。'),
      instanceId?: string(name='instanceId', description='实例ID。'),
      message?: string(name='message', description='添加结果描述。'),
    }
  ](name='list', description='节点信息列表。'),
  taskId?: string(name='task_id', description='任务ID。'),
}

model AttachInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: AttachInstancesResponseBody(name='body'),
}

async function attachInstances(ClusterId: string, request: AttachInstancesRequest): AttachInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return attachInstancesWithOptions(ClusterId, request, headers, runtime);
}

async function attachInstancesWithOptions(ClusterId: string, request: AttachInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AttachInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  body.instances = request.instances;
  body.runtime = request.runtime;
  body.image_id = request.imageId;
  body.format_disk = request.formatDisk;
  body.keep_instance_name = request.keepInstanceName;
  body.cpu_policy = request.cpuPolicy;
  body.key_pair = request.keyPair;
  body.password = request.password;
  body.is_edge_worker = request.isEdgeWorker;
  body.user_data = request.userData;
  body.nodepool_id = request.nodepoolId;
  body.rds_instances = request.rdsInstances;
  body.tags = request.tags;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = body,
  };
  return doROARequestWithForm('AttachInstances', '2015-12-15', 'HTTPS', 'POST', 'AK', `/clusters/${ClusterId}/attach`, 'json', req, runtime);
}

model CancelClusterUpgradeRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
}

model CancelClusterUpgradeResponse = {
  headers: map[string]string(name='headers'),
}

async function cancelClusterUpgrade(ClusterId: string, request: CancelClusterUpgradeRequest): CancelClusterUpgradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelClusterUpgradeWithOptions(ClusterId, request, headers, runtime);
}

async function cancelClusterUpgradeWithOptions(ClusterId: string, request: CancelClusterUpgradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelClusterUpgradeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('CancelClusterUpgrade', '2015-12-15', 'HTTPS', 'POST', 'AK', `/api/v2/clusters/${ClusterId}/upgrade/cancel`, 'none', req, runtime);
}

model CancelComponentUpgradeRequest {
  clusterid?: string(name='clusterid', description='集群ID。'),
  componentid?: string(name='componentid', description='组件ID。'),
}

model CancelComponentUpgradeResponse = {
  headers: map[string]string(name='headers'),
}

async function cancelComponentUpgrade(clusterid: string, componentid: string, request: CancelComponentUpgradeRequest): CancelComponentUpgradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelComponentUpgradeWithOptions(clusterid, componentid, request, headers, runtime);
}

async function cancelComponentUpgradeWithOptions(clusterid: string, componentid: string, request: CancelComponentUpgradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelComponentUpgradeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('CancelComponentUpgrade', '2015-12-15', 'HTTPS', 'POST', 'AK', `/clusters/${clusterid}/components/{componentid}/cancel`, 'none', req, runtime);
}

model CreateClusterRequest {
  name?: string(name='name', description='集群名称。'),
  clusterType?: string(name='cluster_type', description='集群类型'),
  regionId?: string(name='region_id', description='集群所属地域ID。'),
  zoneId?: string(name='zone_id', description='集群所属地域内的可用区ID。'),
  kubernetesVersion?: string(name='kubernetes_version', description='集群版本好。'),
  deletionProtection?: string(name='deletion_protection', description='集群是否开启删除保护。'),
  runtime?: {
    name?: string(name='name', description='容器运行时名称。'),
    version?: string(name='version', description='容器运行时版本。'),
  }(name='runtime', description='容器运行时。'),
  vpcid?: string(name='vpcid', description='集群使用的VPC。'),
  workerVswitchIds?: [ string ](name='worker_vswitch_ids', description='集群使用的虚拟交换机。'),
  containerCidr?: string(name='container_cidr', description='POD网络地址段。'),
  serviceCidr?: string(name='service_cidr', description='Service网络地址段。'),
  nodeCidrMask?: string(name='node_cidr_mask', description='节点IP数量，这里通过CIDR来指定。'),
  snatEntry?: boolean(name='snat_entry', description='集群是否配置SNAT。'),
  endpointPublicAccess?: boolean(name='endpoint_public_access', description='集群是否运行公网访问。'),
  sshFlags?: boolean(name='ssh_flags', description='集群是否开启公网SSH登录。'),
  rdsInstances?: [ string ](name='rds_instances', description='RDS列表，将该ECS加入到选择的RDS实例的白名单中。。'),
  securityGroupId?: string(name='security_group_id', description='自定义安全组ID。'),
  isEnterpriseSecurityGroup?: boolean(name='is_enterprise_security_group', description='是否自动创建企业安全组，与security_group_id二选一。'),
  proxyMode?: string(name='proxy_mode', description='kube-proxy代理模式。'),
  tags?: [ 
    {
      key?: string(name='key', description='标签key。'),
      value?: string(name='value', description='标签值。'),
    }
  ](name='tags', description='集群标签。'),
  imagesId?: string(name='images_id', description='自定义镜像ID。'),
  masterInstanceChargeType?: string(name='master_instance_charge_type', description='Master节点付费类型。'),
  masterPeriod?: int64(name='master_period', description='Master节点包年包月时长，当master_instance_charge_type取值为PrePaid时才生效且为必选值。'),
  masterPeriodUnit?: string(name='master_period_unit', description='Master节点包年包月周期。'),
  masterAutoRenew?: boolean(name='master_auto_renew', description='Master节点是否自动续费。'),
  masterAutoRenewPeriod?: int64(name='master_auto_renew_period', description='Master节点自动续费周期。'),
  masterCount?: int64(name='master_count', description='Master节点数量。'),
  masterVswitchIds?: [ string ](name='master_vswitch_ids', description='Master节点交换机ID列表。'),
  masterInstanceTypes?: [ string ](name='master_instance_types', description='Master节点ECS规格类型。'),
  masterSystemDiskCategory?: string(name='master_system_disk_category', description='Master节点系统盘类型。'),
  masterSystemDiskSize?: int64(name='master_system_disk_size', description='Master节点系统盘大小。'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type', description='Worker节点付费类型。'),
  workerPeriod?: int64(name='worker_period', description='Worker节点包年包月时长。'),
  workerPeriodUnit?: string(name='worker_period_unit', description='Worker节点包年包月周期。'),
  workerAutoRenew?: boolean(name='worker_auto_renew', description='Worker节点是否自动续费。'),
  workerAutoRenewPeriod?: int64(name='worker_auto_renew_period', description='Worker节点自动续费周期。'),
  numOfNodes?: int64(name='num_of_nodes', description='Worker节点数量。'),
  workerInstanceTypes?: [ string ](name='worker_instance_types', description='Worker节点ECS实例类型。'),
  workerSystemDiskCategory?: string(name='worker_system_disk_category', description='Worker节点系统盘类型。'),
  workerSystemDiskSize?: int64(name='worker_system_disk_size', description='Worker节点系统盘大小。'),
  workerDataDisks?: [ 
    {
      autoSnapshotPolicyId?: string(name='auto_snapshot_policy_id', description='数据盘是否开启云盘备份。'),
      category?: string(name='category', description='数据盘类型。'),
      encrypted?: string(name='encrypted', description='数据盘是否加密。'),
      size?: string(name='size', description='数据盘大小。'),
    }
  ](name='worker_data_disks', description='Worker节点数据盘配置。'),
  osType?: string(name='os_type', description='操作系统。'),
  keyPair?: string(name='key_pair', description='key_pair名称，和login_password二选一。'),
  loginPassword?: string(name='login_password', description='SSH登录密码，与key_pair二选一。'),
  userData?: string(name='user_data', description='节点用户自定义数据。'),
  nodePortRange?: string(name='node_port_range', description='节点服务端口范围。'),
  cpuPolicy?: string(name='cpu_policy', description='CPU管理策略。'),
  taints?: [ 
    {
      effect?: string(name='effect', description='调度策略。'),
      key?: string(name='key', description='污点key。'),
      value?: string(name='value', description='污点值。'),
    }
  ](name='taints', description='污点信息。'),
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags', description='是否安装云监控插件。'),
  addons?: [ 
    {
      config?: string(name='config', description='组件需要的配置。'),
      name?: string(name='name', description='组件名称。'),
    }
  ](name='addons', description='组件信息。'),
  platform?: string(name='platform', description='操作系统发行版。'),
  vswitchIds?: [ string ](name='vswitch_ids', description='虚拟交换机列表。List长度范围为[1，3]。当集群类型为托管版或标准serverless集群时，该参数必填。'),
  privateZone?: boolean(name='private_zone', description='是否开启PrivateZone用于服务发现。'),
  profile?: string(name='profile', description='边缘集群标识。'),
  podVswitchIds?: [ string ](name='pod_vswitch_ids', description='Pod的虚拟交换机列表，在ENI多网卡模式下，需要传额外的VSwitch ID给addon。'),
  disableRollback?: boolean(name='disable_rollback', description='集群创建失败后是否回滚。'),
  timeoutMins?: int64(name='timeout_mins', description='集群创建超时时间。'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='集群ID。'),
  requestId?: string(name='request_id', description='请求ID。'),
  taskId?: string(name='task_id', description='任务ID。'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterResponseBody(name='body'),
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createClusterWithOptions(request, headers, runtime);
}

async function createClusterWithOptions(request: CreateClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateClusterResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  body.name = request.name;
  body.cluster_type = request.clusterType;
  body.region_id = request.regionId;
  body.zone_id = request.zoneId;
  body.kubernetes_version = request.kubernetesVersion;
  body.deletion_protection = request.deletionProtection;
  body.runtime = request.runtime;
  body.vpcid = request.vpcid;
  body.worker_vswitch_ids = request.workerVswitchIds;
  body.container_cidr = request.containerCidr;
  body.service_cidr = request.serviceCidr;
  body.node_cidr_mask = request.nodeCidrMask;
  body.snat_entry = request.snatEntry;
  body.endpoint_public_access = request.endpointPublicAccess;
  body.ssh_flags = request.sshFlags;
  body.rds_instances = request.rdsInstances;
  body.security_group_id = request.securityGroupId;
  body.is_enterprise_security_group = request.isEnterpriseSecurityGroup;
  body.proxy_mode = request.proxyMode;
  body.tags = request.tags;
  body.images_id = request.imagesId;
  body.master_instance_charge_type = request.masterInstanceChargeType;
  body.master_period = request.masterPeriod;
  body.master_period_unit = request.masterPeriodUnit;
  body.master_auto_renew = request.masterAutoRenew;
  body.master_auto_renew_period = request.masterAutoRenewPeriod;
  body.master_count = request.masterCount;
  body.master_vswitch_ids = request.masterVswitchIds;
  body.master_instance_types = request.masterInstanceTypes;
  body.master_system_disk_category = request.masterSystemDiskCategory;
  body.master_system_disk_size = request.masterSystemDiskSize;
  body.worker_instance_charge_type = request.workerInstanceChargeType;
  body.worker_period = request.workerPeriod;
  body.worker_period_unit = request.workerPeriodUnit;
  body.worker_auto_renew = request.workerAutoRenew;
  body.worker_auto_renew_period = request.workerAutoRenewPeriod;
  body.num_of_nodes = request.numOfNodes;
  body.worker_instance_types = request.workerInstanceTypes;
  body.worker_system_disk_category = request.workerSystemDiskCategory;
  body.worker_system_disk_size = request.workerSystemDiskSize;
  body.worker_data_disks = request.workerDataDisks;
  body.os_type = request.osType;
  body.key_pair = request.keyPair;
  body.login_password = request.loginPassword;
  body.user_data = request.userData;
  body.node_port_range = request.nodePortRange;
  body.cpu_policy = request.cpuPolicy;
  body.taints = request.taints;
  body.cloud_monitor_flags = request.cloudMonitorFlags;
  body.addons = request.addons;
  body.platform = request.platform;
  body.vswitch_ids = request.vswitchIds;
  body.private_zone = request.privateZone;
  body.profile = request.profile;
  body.pod_vswitch_ids = request.podVswitchIds;
  body.disable_rollback = request.disableRollback;
  body.timeout_mins = request.timeoutMins;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = body,
  };
  return doROARequestWithForm('CreateCluster', '2015-12-15', 'HTTPS', 'POST', 'AK', `/clusters`, 'json', req, runtime);
}

model CreateKubernetesTriggerRequest {
  regionId?: string(name='RegionId', description='地域ID。'),
  clusterId?: string(name='ClusterId', description='集群ID。'),
  projectId?: string(name='ProjectId', description='项目名称。'),
  type?: string(name='Type', description='触发器类型。'),
}

model CreateKubernetesTriggerResponseBody = {
  action?: string(name='action', description='触发器行为。'),
  clusterId?: string(name='cluster_id', description='集群ID。'),
  id?: string(name='id', description='触发器ID。'),
  projectId?: string(name='project_id', description='项目名称。'),
}

model CreateKubernetesTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateKubernetesTriggerResponseBody(name='body'),
}

async function createKubernetesTrigger(request: CreateKubernetesTriggerRequest): CreateKubernetesTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createKubernetesTriggerWithOptions(request, headers, runtime);
}

async function createKubernetesTriggerWithOptions(request: CreateKubernetesTriggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateKubernetesTriggerResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  body.RegionId = request.regionId;
  body.ClusterId = request.clusterId;
  body.ProjectId = request.projectId;
  body.Type = request.type;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = body,
  };
  return doROARequestWithForm('CreateKubernetesTrigger', '2015-12-15', 'HTTPS', 'POST', 'AK', `/triggers`, 'json', req, runtime);
}

model DeleteClusterRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  retainResources?: [ string ](name='retain_resources', description='要保留的资源列表。'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteCluster(ClusterId: string, request: DeleteClusterRequest): DeleteClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteClusterWithOptions(ClusterId, request, headers, runtime);
}

async function deleteClusterWithOptions(ClusterId: string, request: DeleteClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteClusterResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  query.retain_resources = request.retainResources;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DeleteCluster', '2015-12-15', 'HTTPS', 'DELETE', 'AK', `/clusters/${ClusterId}`, 'none', req, runtime);
}

model DeleteKubernetesTriggerRequest {
  id?: string(name='Id', description='触发器ID。'),
}

model DeleteKubernetesTriggerResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteKubernetesTrigger(Id: string, request: DeleteKubernetesTriggerRequest): DeleteKubernetesTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteKubernetesTriggerWithOptions(Id, request, headers, runtime);
}

async function deleteKubernetesTriggerWithOptions(Id: string, request: DeleteKubernetesTriggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteKubernetesTriggerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteKubernetesTrigger', '2015-12-15', 'HTTPS', 'DELETE', 'AK', `/triggers/revoke/${Id}`, 'none', req, runtime);
}

model DescribeAddonsRequest {
  region?: string(name='region', description='Region ID。'),
  clusterType?: string(name='cluster_type', description='集群类型，默认为kubernetes。'),
}

model DescribeAddonsResponseBody = {
  componentGroups?: [ 
    {
      default?: [ string ](name='default', description='默认组件组。'),
      groupName?: string(name='group_name', description='组件组名称。'),
      items?: [ 
        {
          description?: string(name='description', description='组件描述信息。'),
          disabled?: boolean(name='disabled', description='是否禁止默认安装。'),
          name?: string(name='name', description='组件名称。'),
          required?: string(name='required', description='是否为必需组件。'),
          version?: string(name='version', description='组件版本。'),
        }
      ](name='items', description='组件清单。'),
    }
  ](name='ComponentGroups', description='组件分组信息，例如：存储类组件，网络组件等。'),
  standardComponents?: {
    componentName?: map[string]object(name='ComponentName', description='组件名称。'),
  }(name='StandardComponents', description='标准组件信息，包含各个组件的描述信息。'),
}

model DescribeAddonsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAddonsResponseBody(name='body'),
}

async function describeAddons(request: DescribeAddonsRequest): DescribeAddonsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAddonsWithOptions(request, headers, runtime);
}

async function describeAddonsWithOptions(request: DescribeAddonsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAddonsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  query.region = request.region;
  query.cluster_type = request.clusterType;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeAddons', '2015-12-15', 'HTTPS', 'GET', 'AK', `/clusters/components/metadata`, 'json', req, runtime);
}

model DescribeClusterAddonUpgradeStatusRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  componentId?: string(name='ComponentId', description='组件ID。'),
}

model DescribeClusterAddonUpgradeStatusResponseBody = {
  addonInfo?: {
    category?: string(name='category', description='Addon类别。'),
    componentName?: string(name='component_name', description='组件名称。'),
    message?: string(name='message', description='升级说明信息。'),
    version?: string(name='version', description='组件版本。'),
    yaml?: string(name='yaml', description='组件配置文件。'),
  }(name='addon_info', description='组件信息。'),
  canUpgrade?: boolean(name='can_upgrade', description='是否能够升级。'),
  template?: string(name='template', description='模板信息，采用base64加密。'),
}

model DescribeClusterAddonUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterAddonUpgradeStatusResponseBody(name='body'),
}

async function describeClusterAddonUpgradeStatus(ClusterId: string, ComponentId: string, request: DescribeClusterAddonUpgradeStatusRequest): DescribeClusterAddonUpgradeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterAddonUpgradeStatusWithOptions(ClusterId, ComponentId, request, headers, runtime);
}

async function describeClusterAddonUpgradeStatusWithOptions(ClusterId: string, ComponentId: string, request: DescribeClusterAddonUpgradeStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterAddonUpgradeStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeClusterAddonUpgradeStatus', '2015-12-15', 'HTTPS', 'GET', 'AK', `/clusters/${ClusterId}/components/{ComponentId}/upgradestatus`, 'json', req, runtime);
}

model DescribeClusterAddonsUpgradeStatusRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  componentIds?: [ string ](name='componentIds', description='组件列表。'),
}

model DescribeClusterAddonsUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
}

/**
 * 批量查询集群Addon升级状态

 */
async function describeClusterAddonsUpgradeStatus(ClusterId: string, request: DescribeClusterAddonsUpgradeStatusRequest): DescribeClusterAddonsUpgradeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterAddonsUpgradeStatusWithOptions(ClusterId, request, headers, runtime);
}

async function describeClusterAddonsUpgradeStatusWithOptions(ClusterId: string, request: DescribeClusterAddonsUpgradeStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterAddonsUpgradeStatusResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  query.componentIds = request.componentIds;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeClusterAddonsUpgradeStatus', '2015-12-15', 'HTTPS', 'GET', 'AK', `/clusters/[ClusterId]/components/upgradestatus`, 'none', req, runtime);
}

model DescribeClusterAddonsVersionRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
}

model DescribeClusterAddonsVersionResponseBody = {
  addonsName?: map[string]object(name='AddonsName', description='组件名称。'),
}

model DescribeClusterAddonsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterAddonsVersionResponseBody(name='body'),
}

async function describeClusterAddonsVersion(ClusterId: string, request: DescribeClusterAddonsVersionRequest): DescribeClusterAddonsVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterAddonsVersionWithOptions(ClusterId, request, headers, runtime);
}

async function describeClusterAddonsVersionWithOptions(ClusterId: string, request: DescribeClusterAddonsVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterAddonsVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeClusterAddonsVersion', '2015-12-15', 'HTTPS', 'GET', 'AK', `/clusters/${ClusterId}/components/version`, 'json', req, runtime);
}

model DescribeClusterAttachScriptsRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  arch?: string(name='arch', description='节点CPU架构,支持amd64、arm、arm64。'),
  options?: {
    allowedClusterAddons?: [ string ](name='allowedClusterAddons', description='需要安装的组件列表，默认为空，不安装。'),
    enableIptables?: boolean(name='enableIptables', description='是否开启iptables，默认值true。'),
    flannelIface?: string(name='flannelIface', description='flannel使用的网卡名。默认使用节点默认路由的网卡名。'),
    gpuVersion?: string(name='gpuVersion', description='表示要接入的节点是否为GPU节点，默认为空。当前支持的GPU版本是Nvidia_Tesla_T4、Nvidia_Tesla_P4、Nvidia_Tesla_P100。'),
    manageRuntime?: boolean(name='manageRuntime', description='是否由edgeadm安装并检测Runtime，默认false。'),
    nodeNameOverride?: string(name='nodeNameOverride', description='设置节点名。  - ""（默认值，表示使用主机名。） - "*"（表示随机生成6位的字符串。） - "*.XXX"（表示随机生成6位字符串+XXX后缀。）'),
    quiet?: string(name='quiet', description='是否使用静默模式安装。'),
  }(name='options', description='边缘托管版集群节点的接入配置。'),
}

model DescribeClusterAttachScriptsResponse = {
  headers: map[string]string(name='headers'),
  body: string(name='body'),
}

async function describeClusterAttachScripts(ClusterId: string, request: DescribeClusterAttachScriptsRequest): DescribeClusterAttachScriptsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterAttachScriptsWithOptions(ClusterId, request, headers, runtime);
}

async function describeClusterAttachScriptsWithOptions(ClusterId: string, request: DescribeClusterAttachScriptsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterAttachScriptsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  body.arch = request.arch;
  body.options = request.options;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = body,
  };
  return doROARequestWithForm('DescribeClusterAttachScripts', '2015-12-15', 'HTTPS', 'POST', 'AK', `/clusters/${ClusterId}/attachscript`, 'string', req, runtime);
}

model DescribeClusterDetailRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
}

model DescribeClusterDetailResponseBody = {
  clusterId?: string(name='cluster_id', description='集群ID。'),
  clusterType?: string(name='cluster_type', description='集群类型。'),
  created?: string(name='created', description='集群创建时间。'),
  currentVersion?: string(name='current_version', description='集群当前K8S版本。'),
  deletionProtection?: boolean(name='deletion_protection', description='集群是否开启删除保护。'),
  dockerVersion?: string(name='docker_version', description='集群内Docker版本。'),
  externalLoadbalancerId?: string(name='external_loadbalancer_id', description='集群Ingress SLB ID。'),
  instanceType?: string(name='instance_type', description='集群实例类型。'),
  metaData?: string(name='meta_data', description='集群元数据。'),
  name?: string(name='name', description='集群名称。'),
  networkMode?: string(name='network_mode', description='集群采用的网络类型，例如：VPC网络。'),
  regionId?: string(name='region_id', description='集群所在地域ID。'),
  resourceGroupId?: string(name='resource_group_id', description='集群资源组ID。'),
  securityGroupId?: string(name='security_group_id', description='集群安全组ID。'),
  size?: int32(name='size', description='集群节点数量。'),
  state?: string(name='state', description='集群运行状态。'),
  tags?: [ 
    {
      key?: string(name='key', description='标签名。'),
      value?: string(name='value', description='标签值。'),
    }
  ](name='tags', description='集群标签。'),
  updated?: string(name='updated', description='集群更新时间。'),
  vpcId?: string(name='vpc_id', description='集群使用的VPC ID。'),
  vswitchCidr?: string(name='vswitch_cidr', description='集群使用的虚拟交换机ID。'),
  vswitchId?: string(name='vswitch_id', description='集群节点使用的虚拟交换机列表。'),
  zoneId?: string(name='zone_id', description='集群所在地域内的可用区ID。'),
}

model DescribeClusterDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterDetailResponseBody(name='body'),
}

async function describeClusterDetail(ClusterId: string, request: DescribeClusterDetailRequest): DescribeClusterDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterDetailWithOptions(ClusterId, request, headers, runtime);
}

async function describeClusterDetailWithOptions(ClusterId: string, request: DescribeClusterDetailRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeClusterDetail', '2015-12-15', 'HTTPS', 'GET', 'AK', `/clusters/${ClusterId}`, 'json', req, runtime);
}

model DescribeClusterLogsRequest {
  clusterId?: string(name='ClusterId', description='集群ID'),
}

model DescribeClusterLogsResponseBody = {
  ID?: string(name='ID', description='日志ID。'),
  clusterId?: string(name='cluster_id', description='集群ID。'),
  clusterLog?: string(name='cluster_log', description='日志详情。'),
  created?: string(name='created', description='日志创建时间。'),
  logLevel?: string(name='log_level', description='日志级别。'),
  updated?: string(name='updated', description='日志更新时间。'),
}

model DescribeClusterLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterLogsResponseBody(name='body'),
}

async function describeClusterLogs(ClusterId: string, request: DescribeClusterLogsRequest): DescribeClusterLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterLogsWithOptions(ClusterId, request, headers, runtime);
}

async function describeClusterLogsWithOptions(ClusterId: string, request: DescribeClusterLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterLogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeClusterLogs', '2015-12-15', 'HTTPS', 'GET', 'AK', `/clusters/${ClusterId}/logs`, 'json', req, runtime);
}

model DescribeClusterNodesRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  pageSize?: string(name='pageSize', description='每页展示结果数。'),
  pageNumber?: string(name='pageNumber', description='结果只展示几页。'),
  nodepoolId?: string(name='nodepool_id', description='节点池ID。'),
  state?: string(name='state', description='节点状态信息。'),
}

model DescribeClusterNodesResponseBody = {
  nodes?: [ 
    {
      creationTime?: string(name='creation_time', description='节点创建时间。'),
      errorMessage?: string(name='error_message', description='错误信息说明。'),
      expiredTime?: string(name='expired_time', description='节点过期时间。'),
      hostName?: string(name='host_name', description='节点主机名。'),
      imageId?: string(name='image_id', description='节点使用的镜像ID。'),
      instanceChargeType?: string(name='instance_charge_type', description='节点付费类型。'),
      instanceId?: string(name='instance_id', description='节点实例ID。'),
      instanceName?: string(name='instance_name', description='节点实例名称。'),
      instanceRole?: string(name='instance_role', description='节点实例角色类型，Master或Worker。'),
      instanceStatus?: string(name='instance_status', description='节点实例状态，'),
      instanceType?: string(name='instance_type', description='节点实例类型。'),
      instanceTypeFamily?: string(name='instance_type_family', description='节点实例所属ECS实例簇名称。'),
      ipAddress?: [ string ](name='ip_address', description='节点IP地址。'),
      isAliyunNode?: boolean(name='is_aliyun_node', description='节点是否为aliyun实例。'),
      nodeName?: string(name='node_name', description='节点名称，该名称是k8s专用名称。'),
      nodeStatus?: string(name='node_status', description='节点状态，是否Ready。'),
      nodepoolId?: string(name='nodepool_id', description='节点所属的节点池ID。'),
      source?: string(name='source', description='节点通过什么方式创建出来的，例如：ROS。'),
      state?: string(name='state', description='ECS运行状态，例如：running。'),
    }
  ](name='nodes', description='节点信息列表。'),
  page?: {
    pageNumber?: int32(name='page_number', description='总页数。'),
    pageSize?: int32(name='page_size', description='单页展示结果数量。'),
    totalCount?: int32(name='total_count', description='结果总条数。'),
  }(name='page', description='分页信息。'),
}

model DescribeClusterNodesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterNodesResponseBody(name='body'),
}

async function describeClusterNodes(ClusterId: string, request: DescribeClusterNodesRequest): DescribeClusterNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterNodesWithOptions(ClusterId, request, headers, runtime);
}

async function describeClusterNodesWithOptions(ClusterId: string, request: DescribeClusterNodesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterNodesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  query.pageSize = request.pageSize;
  query.pageNumber = request.pageNumber;
  query.nodepool_id = request.nodepoolId;
  query.state = request.state;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeClusterNodes', '2015-12-15', 'HTTPS', 'GET', 'AK', `/clusters/${ClusterId}/nodes`, 'json', req, runtime);
}

model DescribeClusterResourcesRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
}

model DescribeClusterResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      clusterId?: string(name='cluster_id', description='集群ID。'),
      created?: string(name='created', description='资源创建时间。'),
      instanceId?: string(name='instance_id', description='资源实例ID。'),
      resourceInfo?: string(name='resource_info', description='资源元信息。'),
      resourceType?: string(name='resource_type', description='资源类型。'),
      state?: string(name='state', description='资源状态。'),
    }
  ](name='body'),
}

async function describeClusterResources(ClusterId: string, request: DescribeClusterResourcesRequest): DescribeClusterResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterResourcesWithOptions(ClusterId, request, headers, runtime);
}

async function describeClusterResourcesWithOptions(ClusterId: string, request: DescribeClusterResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeClusterResources', '2015-12-15', 'HTTPS', 'GET', 'AK', `/clusters/${ClusterId}/resources`, 'array', req, runtime);
}

model DescribeClusterUserKubeconfigRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  privateIpAddress?: boolean(name='PrivateIpAddress', description='ApiServer是否为内网地址。'),
}

model DescribeClusterUserKubeconfigResponseBody = {
  config?: string(name='config', description='kubeconfig内容。'),
}

model DescribeClusterUserKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterUserKubeconfigResponseBody(name='body'),
}

async function describeClusterUserKubeconfig(ClusterId: string, request: DescribeClusterUserKubeconfigRequest): DescribeClusterUserKubeconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterUserKubeconfigWithOptions(ClusterId, request, headers, runtime);
}

async function describeClusterUserKubeconfigWithOptions(ClusterId: string, request: DescribeClusterUserKubeconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterUserKubeconfigResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  query.PrivateIpAddress = request.privateIpAddress;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeClusterUserKubeconfig', '2015-12-15', 'HTTPS', 'GET', 'AK', `/k8s/${ClusterId}/user_config`, 'json', req, runtime);
}

model DescribeClusterV2UserKubeconfigRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  privateIpAddress?: boolean(name='PrivateIpAddress', description='是否为内网访问。'),
}

model DescribeClusterV2UserKubeconfigResponseBody = {
  config?: string(name='config', description='kubeconfig内容。'),
}

model DescribeClusterV2UserKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterV2UserKubeconfigResponseBody(name='body'),
}

async function describeClusterV2UserKubeconfig(ClusterId: string, request: DescribeClusterV2UserKubeconfigRequest): DescribeClusterV2UserKubeconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterV2UserKubeconfigWithOptions(ClusterId, request, headers, runtime);
}

async function describeClusterV2UserKubeconfigWithOptions(ClusterId: string, request: DescribeClusterV2UserKubeconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterV2UserKubeconfigResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  query.PrivateIpAddress = request.privateIpAddress;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeClusterV2UserKubeconfig', '2015-12-15', 'HTTPS', 'GET', 'AK', `/api/v2/k8s/${ClusterId}/user_config`, 'json', req, runtime);
}

model DescribeClustersRequest {
  name?: string(name='name', description='集群名称。'),
  clusterType?: string(name='clusterType', description='集群类型。'),
}

model DescribeClustersResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      clusterId?: string(name='cluster_id', description='集群ID。'),
      clusterType?: string(name='cluster_type', description='集群类型。'),
      created?: string(name='created', description='集群创建时间。'),
      currentVersion?: string(name='current_version', description='集群当前版本。'),
      dataDiskCategory?: string(name='data_disk_category', description='节点系统盘类型。'),
      dataDiskSize?: int64(name='data_disk_size', description='节点系统盘大小。'),
      deletionProtection?: boolean(name='deletion_protection', description='集群是否开启删除保护。'),
      dockerVersion?: string(name='docker_version', description='容器运行时版本。'),
      externalLoadbalancerId?: string(name='external_loadbalancer_id', description='集群Ingerss SLB实例的ID。'),
      initVersion?: string(name='init_version', description='集群创建时版本。'),
      masterUrl?: string(name='master_url', description='集群的endpoint地址。'),
      metaData?: string(name='meta_data', description='集群元数据。'),
      name?: string(name='name', description='集群名称。'),
      networkMode?: string(name='network_mode', description='集群使用的网络类型。'),
      privateZone?: boolean(name='private_zone', description='集群是否开启Private Zone，默认false。'),
      profile?: string(name='profile', description='集群标识，区分是否为边缘托管版。'),
      regionId?: string(name='region_id', description='集群所在地域ID。'),
      resourceGroupId?: string(name='resource_group_id', description='集群资源组ID。'),
      securityGroupId?: string(name='security_group_id', description='集群安全组ID。'),
      size?: int64(name='size', description='集群内实例数量。'),
      state?: string(name='state', description='集群运行状态。'),
      subnetCidr?: string(name='subnet_cidr', description='POD网络。'),
      tags?: [ 
        {
          key?: string(name='key', description='标签名。'),
          value?: string(name='value', description='标签值。'),
        }
      ](name='tags', description='集群标签。'),
      updated?: string(name='updated', description='集群更新时间。'),
      vpcId?: string(name='vpc_id', description='集群使用的VPC ID。'),
      vswitchCidr?: string(name='vswitch_cidr', description='虚拟交换机网络ID。'),
      vswitchId?: string(name='vswitch_id', description='节点使用的Vswitch ID。'),
      workerRamRoleName?: string(name='worker_ram_role_name', description='集群Worker节点RAM角色名称。'),
      zoneId?: string(name='zone_id', description='集群所在Region内的区域ID。'),
    }
  ](name='body'),
}

async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClustersWithOptions(request, headers, runtime);
}

async function describeClustersWithOptions(request: DescribeClustersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClustersResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  query.name = request.name;
  query.clusterType = request.clusterType;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeClusters', '2015-12-15', 'HTTPS', 'GET', 'AK', `/clusters`, 'array', req, runtime);
}

model DescribeClustersV1Request {
  name?: string(name='Name', description='集群名称。'),
  clusterType?: string(name='ClusterType', description='集群类型。'),
  pageSize?: int64(name='page_size', description='单页大小。'),
  pageNumber?: int64(name='page_number', description='分页数。'),
}

model DescribeClustersV1ResponseBody = {
  clusters?: [ 
    {
      clusterHealthy?: string(name='cluster_healthy', description='集群健康状态。'),
      clusterId?: string(name='cluster_id', description='集群ID。'),
      clusterType?: string(name='cluster_type', description='集群类型。'),
      created?: string(name='created', description='集群创建时间。'),
      currentVersion?: string(name='current_version', description='集群当前版本。'),
      dataDiskCategory?: string(name='data_disk_category', description='数据盘类型。'),
      dataDiskSize?: int64(name='data_disk_size', description='数据盘大小。'),
      deletionProtection?: boolean(name='deletion_protection', description='集群是否开启删除保护。'),
      dockerVersion?: string(name='docker_version', description='集群使用的Docker版本。'),
      externalLoadbalancerId?: string(name='external_loadbalancer_id', description='集群Ingress对应的SLB的地址。'),
      initVersion?: string(name='init_version', description='集群初始化版本。'),
      masterUrl?: string(name='master_url', description='集群访问的端点信息。'),
      metaData?: string(name='meta_data', description='集群元数据信息。'),
      name?: string(name='name', description='集群名称。'),
      networkMode?: string(name='network_mode', description='集群使用的网络类型，例如：VPC网络。'),
      nodeStatus?: string(name='node_status', description='节点状态。'),
      privateZone?: boolean(name='private_zone', description='集群是否开启Private Zone。'),
      profile?: string(name='profile', description='边缘集群表示，用于区分边缘托管版集群。'),
      regionId?: string(name='region_id', description='地域ID。'),
      resourceGroupId?: string(name='resource_group_id', description='集群资源组ID。'),
      securityGroupId?: string(name='security_group_id', description='集群安全组ID。'),
      size?: int64(name='size', description='集群节点数。'),
      state?: string(name='state', description='集群运行状态。'),
      subnetCidr?: string(name='subnet_cidr', description='POD网段地址。'),
      tags?: [ 
        {
          key?: string(name='key', description='标签键。'),
          value?: string(name='value', description='标签值。'),
        }
      ](name='tags', description='集群标签。'),
      updated?: string(name='updated', description='集群更新时间。'),
      vpcId?: string(name='vpc_id', description='集群所在的VPC ID。'),
      vswitchCidr?: string(name='vswitch_cidr', description='虚拟交换机CIDR。'),
      vswitchId?: string(name='vswitch_id', description='集群使用的虚拟交换ID。'),
      workerRamRoleName?: string(name='worker_ram_role_name', description='集群Worker RAM角色。'),
      zoneId?: string(name='zone_id', description='可用区ID。'),
    }
  ](name='clusters', description='集群详情列表。'),
  pageInfo?: {
    pageNumber?: int32(name='page_number', description='分页总数。'),
    pageSize?: int32(name='page_size', description='单页大小。'),
    totalCount?: int32(name='total_count', description='结果总条目数。'),
  }(name='page_info', description='分页信息。'),
}

model DescribeClustersV1Response = {
  headers: map[string]string(name='headers'),
  body: DescribeClustersV1ResponseBody(name='body'),
}

async function describeClustersV1(request: DescribeClustersV1Request): DescribeClustersV1Response {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClustersV1WithOptions(request, headers, runtime);
}

async function describeClustersV1WithOptions(request: DescribeClustersV1Request, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClustersV1Response {
  Util.validateModel(request);
  var query : map[string]any= {};
  query.Name = request.name;
  query.ClusterType = request.clusterType;
  query.page_size = request.pageSize;
  query.page_number = request.pageNumber;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeClustersV1', '2015-12-15', 'HTTPS', 'GET', 'AK', `/api/v1/clusters`, 'json', req, runtime);
}

model DescribeExternalAgentRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
}

model DescribeExternalAgentResponseBody = {
  config?: string(name='config', description='代理配置。'),
}

model DescribeExternalAgentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExternalAgentResponseBody(name='body'),
}

async function describeExternalAgent(ClusterId: string, request: DescribeExternalAgentRequest): DescribeExternalAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeExternalAgentWithOptions(ClusterId, request, headers, runtime);
}

async function describeExternalAgentWithOptions(ClusterId: string, request: DescribeExternalAgentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeExternalAgentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeExternalAgent', '2015-12-15', 'HTTPS', 'GET', 'AK', `/k8s/${ClusterId}/external/agent/deployment`, 'json', req, runtime);
}

model DescribeTemplatesRequest {
  templateType?: string(name='template_type', description='模板类型，部署模板类型，目前一共有2种类型，取值为：kubernetes或compose。'),
}

model DescribeTemplatesResponseBody = {
  pageInfo?: {
    pageNumber?: int64(name='page_number', description='分页数。'),
    pageSize?: int64(name='page_size', description='单页大小。'),
    totalCount?: int64(name='total_count', description='结果总数。'),
  }(name='page_info', description='分页信息。'),
  templates?: [ 
    {
      acl?: string(name='acl', description='模板访问权限，取值为：private、pubilc或shared。。'),
      created?: string(name='created', description='模板创建时间。'),
      description?: string(name='description', description='模板描述信息。'),
      id?: string(name='id', description='模板ID。'),
      name?: string(name='name', description='模板名称。'),
      tags?: string(name='tags', description='模板标签，如果不显式指定了，默认为模板名称。'),
      template?: string(name='template', description='模板详情。'),
      templateType?: string(name='template_type', description='部署模板类型，目前只有kubernetes一种生效。'),
      updated?: string(name='updated', description='模板修改时间。'),
    }
  ](name='templates', description='模板列表。'),
}

model DescribeTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTemplatesResponseBody(name='body'),
}

async function describeTemplates(request: DescribeTemplatesRequest): DescribeTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeTemplatesWithOptions(request, headers, runtime);
}

async function describeTemplatesWithOptions(request: DescribeTemplatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeTemplatesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  query.template_type = request.templateType;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeTemplates', '2015-12-15', 'HTTPS', 'GET', 'AK', `/templates`, 'json', req, runtime);
}

model DescribeUserQuotaResponseBody = {
  amkClusterQuota?: int64(name='amk_cluster_quota', description='托管版集群配额。'),
  askClusterQuota?: int64(name='ask_cluster_quota', description='Serverless集群配额。'),
  clusterNodepoolQuota?: int64(name='cluster_nodepool_quota', description='集群节点池配额。'),
  clusterQuota?: int64(name='cluster_quota', description='专有版集群托管版集群的总配额。'),
  nodeQuota?: int64(name='node_quota', description='单集群的节点配额。'),
}

model DescribeUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserQuotaResponseBody(name='body'),
}

async function describeUserQuota(): DescribeUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeUserQuotaWithOptions(headers, runtime);
}

async function describeUserQuotaWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DescribeUserQuotaResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DescribeUserQuota', '2015-12-15', 'HTTPS', 'GET', 'AK', `/quota`, 'json', req, runtime);
}

model GetKubernetesTriggerRequest {
  clusterId?: string(name='ClusterId', description='集群ID'),
  namespace?: string(name='Namespace', description='应用所属命名空间。'),
  type?: string(name='Type', description='应用类型。'),
  name?: string(name='Name', description='应用名称。'),
}

model GetKubernetesTriggerResponseBody = {
  triggers?: [ 
    {
      action?: string(name='action', description='触发器行为。'),
      clusterId?: string(name='cluster_id', description='集群ID。'),
      id?: string(name='id', description='触发器ID。'),
      projectId?: string(name='project_id', description='项目ID，格式为：${namepsce}/${应用名}，'),
      token?: string(name='token', description='触发器Token。'),
    }
  ](name='triggers', description='触发器详情。'),
}

model GetKubernetesTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: GetKubernetesTriggerResponseBody(name='body'),
}

async function getKubernetesTrigger(ClusterId: string, request: GetKubernetesTriggerRequest): GetKubernetesTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getKubernetesTriggerWithOptions(ClusterId, request, headers, runtime);
}

async function getKubernetesTriggerWithOptions(ClusterId: string, request: GetKubernetesTriggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetKubernetesTriggerResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  query.Namespace = request.namespace;
  query.Type = request.type;
  query.Name = request.name;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetKubernetesTrigger', '2015-12-15', 'HTTPS', 'GET', 'AK', `/triggers/${ClusterId}`, 'json', req, runtime);
}

model GetUpgradeStatusRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
}

model GetUpgradeStatusResponseBody = {
  errorMessage?: string(name='error_message', description='错误信息描述。'),
  precheckReportId?: string(name='precheck_report_id', description='预检查返回ID。'),
  status?: string(name='status', description='升级状态。'),
  upgradeStep?: string(name='upgrade_step', description='升级任务执行到哪一步了。'),
}

model GetUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetUpgradeStatusResponseBody(name='body'),
}

async function getUpgradeStatus(ClusterId: string, request: GetUpgradeStatusRequest): GetUpgradeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getUpgradeStatusWithOptions(ClusterId, request, headers, runtime);
}

async function getUpgradeStatusWithOptions(ClusterId: string, request: GetUpgradeStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetUpgradeStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetUpgradeStatus', '2015-12-15', 'HTTPS', 'GET', 'AK', `/api/v2/clusters/${ClusterId}/upgrade/status`, 'json', req, runtime);
}

model InstallClusterAddonsRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  body?: [ 
    {
      config?: string(name='config', description='Addon配置信息。'),
      disabled?: boolean(name='disabled', description='是否禁止默认安装。'),
      name?: string(name='name', description='Addon名称。'),
      required?: string(name='required', description='是否默认安装。'),
      version?: string(name='version', description='Addon版本号。'),
    }
  ](name='body', description='Addon列表。'),
}

model InstallClusterAddonsResponse = {
  headers: map[string]string(name='headers'),
}

async function installClusterAddons(ClusterId: string, request: InstallClusterAddonsRequest): InstallClusterAddonsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return installClusterAddonsWithOptions(ClusterId, request, headers, runtime);
}

async function installClusterAddonsWithOptions(ClusterId: string, request: InstallClusterAddonsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InstallClusterAddonsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  return doROARequest('InstallClusterAddons', '2015-12-15', 'HTTPS', 'POST', 'AK', `/clusters/${ClusterId}/components/install`, 'none', req, runtime);
}

model ModifyClusterRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  deletionProtection?: boolean(name='deletion_protection', description='集群是否开启删除保护。'),
  ingressLoadbalancerId?: string(name='ingress_loadbalancer_id', description='集群的Ingress SLB的ID。'),
  apiServerEip?: boolean(name='api_server_eip', description='集群是否开启EIP。'),
  apiServerEipId?: string(name='api_server_eip_id', description='集群的API Server的EIP ID。'),
  resourceGroupId?: string(name='resource_group_id', description='集群资源组ID。'),
  ingressDomainRebinding?: string(name='ingress_domain_rebinding', description='域名是否重新绑定到Ingress的SLB地址。'),
}

model ModifyClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='集群ID。'),
  requestId?: string(name='request_id', description='请求ID。'),
  taskId?: string(name='task_id', description='任务ID。'),
}

model ModifyClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterResponseBody(name='body'),
}

async function modifyCluster(ClusterId: string, request: ModifyClusterRequest): ModifyClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterWithOptions(ClusterId, request, headers, runtime);
}

async function modifyClusterWithOptions(ClusterId: string, request: ModifyClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  body.deletion_protection = request.deletionProtection;
  body.ingress_loadbalancer_id = request.ingressLoadbalancerId;
  body.api_server_eip = request.apiServerEip;
  body.api_server_eip_id = request.apiServerEipId;
  body.resource_group_id = request.resourceGroupId;
  body.ingress_domain_rebinding = request.ingressDomainRebinding;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = body,
  };
  return doROARequestWithForm('ModifyCluster', '2015-12-15', 'HTTPS', 'PUT', 'AK', `/api/v2/clusters/${ClusterId}`, 'json', req, runtime);
}

model ModifyClusterConfigurationRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  customizeConfig?: {
    configs?: {
      key?: string(name='key', description='key。'),
      value?: string(name='value', description='value。'),
    }(name='configs', description='配置集合。'),
    name?: string(name='name', description='配置名称。'),
  }(name='customize_config', description='自定配置。'),
}

model ModifyClusterConfigurationResponse = {
  headers: map[string]string(name='headers'),
}

async function modifyClusterConfiguration(ClusterId: string, request: ModifyClusterConfigurationRequest): ModifyClusterConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterConfigurationWithOptions(ClusterId, request, headers, runtime);
}

async function modifyClusterConfigurationWithOptions(ClusterId: string, request: ModifyClusterConfigurationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterConfigurationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  body.customize_config = request.customizeConfig;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = body,
  };
  return doROARequestWithForm('ModifyClusterConfiguration', '2015-12-15', 'HTTPS', 'PUT', 'AK', `/clusters/${ClusterId}/configuration`, 'none', req, runtime);
}

model ModifyClusterTagsRequest {
  clusterId?: string(name='ClusterId', description='汲取ID'),
  body?: [ 
    {
      key?: string(name='key', description='标签名。'),
      value?: string(name='value', description='标签值'),
    }
  ](name='body', description='标签列表。'),
}

model ModifyClusterTagsResponse = {
  headers: map[string]string(name='headers'),
}

async function modifyClusterTags(ClusterId: string, request: ModifyClusterTagsRequest): ModifyClusterTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterTagsWithOptions(ClusterId, request, headers, runtime);
}

async function modifyClusterTagsWithOptions(ClusterId: string, request: ModifyClusterTagsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  return doROARequest('ModifyClusterTags', '2015-12-15', 'HTTPS', 'POST', 'AK', `/clusters/${ClusterId}/tags`, 'none', req, runtime);
}

model PauseComponentUpgradeRequest {
  clusterid?: string(name='clusterid', description='集群ID。'),
  componentid?: string(name='componentid', description='组件ID。'),
}

model PauseComponentUpgradeResponse = {
  headers: map[string]string(name='headers'),
}

async function pauseComponentUpgrade(clusterid: string, componentid: string, request: PauseComponentUpgradeRequest): PauseComponentUpgradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pauseComponentUpgradeWithOptions(clusterid, componentid, request, headers, runtime);
}

async function pauseComponentUpgradeWithOptions(clusterid: string, componentid: string, request: PauseComponentUpgradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PauseComponentUpgradeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('PauseComponentUpgrade', '2015-12-15', 'HTTPS', 'POST', 'AK', `/clusters/${clusterid}/components/{componentid}/pause`, 'none', req, runtime);
}

model RemoveClusterNodesRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  releaseNode?: boolean(name='release_node', description='是否同时释放ECS。'),
  drainNode?: boolean(name='drain_node', description='是否排空节点上的Pod。'),
  nodes?: [ string ](name='nodes', description='要移除的Node列表。'),
}

model RemoveClusterNodesResponse = {
  headers: map[string]string(name='headers'),
}

async function removeClusterNodes(ClusterId: string, request: RemoveClusterNodesRequest): RemoveClusterNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeClusterNodesWithOptions(ClusterId, request, headers, runtime);
}

async function removeClusterNodesWithOptions(ClusterId: string, request: RemoveClusterNodesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveClusterNodesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  body.release_node = request.releaseNode;
  body.drain_node = request.drainNode;
  body.nodes = request.nodes;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = body,
  };
  return doROARequestWithForm('RemoveClusterNodes', '2015-12-15', 'HTTPS', 'POST', 'AK', `/api/v2/clusters/${ClusterId}/nodes/remove`, 'none', req, runtime);
}

model ResumeComponentUpgradeRequest {
  clusterid?: string(name='clusterid', description='集群ID。'),
  componentid?: string(name='componentid', description='组件ID。'),
}

model ResumeComponentUpgradeResponse = {
  headers: map[string]string(name='headers'),
}

async function resumeComponentUpgrade(clusterid: string, componentid: string, request: ResumeComponentUpgradeRequest): ResumeComponentUpgradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resumeComponentUpgradeWithOptions(clusterid, componentid, request, headers, runtime);
}

async function resumeComponentUpgradeWithOptions(clusterid: string, componentid: string, request: ResumeComponentUpgradeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeComponentUpgradeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('ResumeComponentUpgrade', '2015-12-15', 'HTTPS', 'POST', 'AK', `/clusters/${clusterid}/components/{componentid}/resume`, 'none', req, runtime);
}

model ScaleClusterRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  count?: int64(name='count', description='扩容节点数。'),
  keyPair?: string(name='key_pair', description='keypair名称，和login_password二选一。'),
  loginPassword?: string(name='login_password', description='SSH登录密码。和keypair二选一。'),
  workerDataDisk?: boolean(name='worker_data_disk', description='是否挂载数据盘。'),
  workerInstanceTypes?: [ string ](name='worker_instance_types', description='Worker节点ECS规格类型。'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type', description='节点付费类型。'),
  workerPeriod?: int64(name='worker_period', description='节点包年包月时长。'),
  workerPeriodUnit?: string(name='worker_period_unit', description='当指定为PrePaid的时候需要指定周期。'),
  workerAutoRenew?: boolean(name='worker_auto_renew', description='节点是否开启Worker节点自动续费。'),
  workerAutoRenewPeriod?: int64(name='worker_auto_renew_period', description='自动续费周期。'),
  workerSystemDiskCategory?: string(name='worker_system_disk_category', description='节点系统盘类型。'),
  workerSystemDiskSize?: int64(name='worker_system_disk_size', description='节点系统盘大小'),
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags', description='节点是否安装云监控插件。'),
  cpuPolicy?: string(name='cpu_policy', description='节点CPU策略。'),
  disableRollback?: boolean(name='disable_rollback', description='失败是否回滚。'),
  vswitchIds?: [ string ](name='vswitch_ids', description='节点交换机ID列表。'),
  workerDataDisks?: [ 
    {
      category?: string(name='category', description='数据盘类型。'),
      encrypted?: string(name='encrypted', description='是否对数据盘加密。'),
      size?: string(name='size', description='数据盘大小。'),
    }
  ](name='worker_data_disks', description='Worker数据盘类型、大小等配置的组合。'),
  tags?: [ 
    {
      key?: string(name='key', description='标签值。'),
    }
  ](name='tags', description='集群标签。'),
  taints?: [ 
    {
      effect?: string(name='effect', description='污点生效策略。'),
      key?: string(name='key', description='污点键。'),
      value?: string(name='value', description='污点值。'),
    }
  ](name='taints', description='节点污点标记。'),
}

model ScaleClusterShrinkRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  count?: int64(name='count', description='扩容节点数。'),
  keyPair?: string(name='key_pair', description='keypair名称，和login_password二选一。'),
  loginPassword?: string(name='login_password', description='SSH登录密码。和keypair二选一。'),
  workerDataDisk?: boolean(name='worker_data_disk', description='是否挂载数据盘。'),
  workerInstanceTypes?: [ string ](name='worker_instance_types', description='Worker节点ECS规格类型。'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type', description='节点付费类型。'),
  workerPeriod?: int64(name='worker_period', description='节点包年包月时长。'),
  workerPeriodUnit?: string(name='worker_period_unit', description='当指定为PrePaid的时候需要指定周期。'),
  workerAutoRenew?: boolean(name='worker_auto_renew', description='节点是否开启Worker节点自动续费。'),
  workerAutoRenewPeriod?: int64(name='worker_auto_renew_period', description='自动续费周期。'),
  workerSystemDiskCategory?: string(name='worker_system_disk_category', description='节点系统盘类型。'),
  workerSystemDiskSize?: int64(name='worker_system_disk_size', description='节点系统盘大小'),
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags', description='节点是否安装云监控插件。'),
  cpuPolicy?: string(name='cpu_policy', description='节点CPU策略。'),
  disableRollback?: boolean(name='disable_rollback', description='失败是否回滚。'),
  vswitchIds?: [ string ](name='vswitch_ids', description='节点交换机ID列表。'),
  workerDataDisks?: [ 
    {
      category?: string(name='category', description='数据盘类型。'),
      encrypted?: string(name='encrypted', description='是否对数据盘加密。'),
      size?: string(name='size', description='数据盘大小。'),
    }
  ](name='worker_data_disks', description='Worker数据盘类型、大小等配置的组合。'),
  tags?: [ 
    {
      key?: string(name='key', description='标签值。'),
    }
  ](name='tags', description='集群标签。'),
  taintsShrink?: string(name='taints', description='节点污点标记。'),
}

model ScaleClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='集群ID。'),
  requestId?: string(name='request_id', description='请求ID。'),
  taskId?: string(name='task_id', description='任务ID。'),
}

model ScaleClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ScaleClusterResponseBody(name='body'),
}

async function scaleCluster(ClusterId: string, request: ScaleClusterRequest): ScaleClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return scaleClusterWithOptions(ClusterId, request, headers, runtime);
}

async function scaleClusterWithOptions(ClusterId: string, tmpReq: ScaleClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ScaleClusterResponse {
  Util.validateModel(tmpReq);
  var request = new ScaleClusterShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.taints)) {
    request.taintsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taints, 'taints', 'json');
  }
  var body : map[string]any= {};
  body.count = request.count;
  body.key_pair = request.keyPair;
  body.login_password = request.loginPassword;
  body.worker_data_disk = request.workerDataDisk;
  body.worker_instance_types = request.workerInstanceTypes;
  body.worker_instance_charge_type = request.workerInstanceChargeType;
  body.worker_period = request.workerPeriod;
  body.worker_period_unit = request.workerPeriodUnit;
  body.worker_auto_renew = request.workerAutoRenew;
  body.worker_auto_renew_period = request.workerAutoRenewPeriod;
  body.worker_system_disk_category = request.workerSystemDiskCategory;
  body.worker_system_disk_size = request.workerSystemDiskSize;
  body.cloud_monitor_flags = request.cloudMonitorFlags;
  body.cpu_policy = request.cpuPolicy;
  body.disable_rollback = request.disableRollback;
  body.vswitch_ids = request.vswitchIds;
  body.worker_data_disks = request.workerDataDisks;
  body.tags = request.tags;
  body.taints = request.taintsShrink;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = body,
  };
  return doROARequestWithForm('ScaleCluster', '2015-12-15', 'HTTPS', 'PUT', 'AK', `/clusters/${ClusterId}`, 'json', req, runtime);
}

model ScaleOutClusterRequest {
  clusterId?: string(name='ClusterId', description='扩容目标集群的集群ID。'),
  count?: int32(name='count', description='扩容实例数量。'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type', description='Worker节点付费类型。'),
  workerPeriod?: int32(name='worker_period', description='Worker节点包年包月时长。'),
  workerPeriodUnit?: string(name='worker_period_unit', description='Worker节点预付费周期。'),
  workerAutoRenew?: boolean(name='worker_auto_renew', description='Worker节点是否开启自动续费。'),
  workerAutoRenewPeriod?: int32(name='worker_auto_renew_period', description='Worker节点自动续费周期。'),
  workerSystemDiskCategory?: string(name='worker_system_disk_category', description='Worker节点系统盘类型。'),
  workerSystemDiskSize?: int32(name='worker_system_disk_size', description='Worker节点系统盘大小。'),
  workerDataDisk?: boolean(name='worker_data_disk', description='Worker节点是否挂载数据盘。'),
  keyPair?: string(name='key_pair', description='keypair名称，和login_password二选一。'),
  loginPassword?: string(name='login_password', description='SSH登录密码，和key_pair二选一。'),
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags', description='是否安装云监控插件。'),
  cpuPolicy?: string(name='cpu_policy', description='CPU策略，取值static或者none。'),
  disableRollback?: boolean(name='disable_rollback', description='失败是否回滚。'),
  imageId?: string(name='image_id', description='自定义镜像ID。'),
  userData?: string(name='user_data', description='用户自定义数据。'),
  runtime?: {
    name?: string(name='name', description='容器引擎名称。'),
    version?: string(name='version', description='容器引擎版本。'),
  }(name='runtime', description='容器引擎。'),
  vswitchIds?: [ string ](name='vswitch_ids', description='节点交换机ID列表，交换机个数取值范围为1~3。'),
  workerInstanceTypes?: [ string ](name='worker_instance_types', description='Worker节点ECS规格类型代码。'),
  rdsInstances?: [ string ](name='rds_instances', description='RDS白名单实例列表。'),
  workerDataDisks?: [ 
    {
      category?: string(name='category', description='数据盘类型。'),
      encrypted?: string(name='encrypted', description='是否对数据盘加密。'),
      size?: string(name='size', description='数据盘大小。'),
    }
  ](name='worker_data_disks', description='Worker数据盘类型、大小等配置的组合。'),
  tags?: [ 
    {
      key?: string(name='key', description='标签名。'),
      value?: string(name='value', description='标签值。'),
    }
  ](name='tags', description='节点标签。'),
  taints?: [ 
    {
      effect?: string(name='effect', description='污点生效策略。'),
      key?: string(name='key', description='污点名。'),
      value?: string(name='value', description='污点值。'),
    }
  ](name='taints', description='节点污点信息。'),
}

model ScaleOutClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='集群ID。'),
  requestId?: string(name='request_id', description='请求ID。'),
  taskId?: string(name='task_id', description='任务ID。'),
}

model ScaleOutClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ScaleOutClusterResponseBody(name='body'),
}

async function scaleOutCluster(ClusterId: string, request: ScaleOutClusterRequest): ScaleOutClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return scaleOutClusterWithOptions(ClusterId, request, headers, runtime);
}

async function scaleOutClusterWithOptions(ClusterId: string, request: ScaleOutClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ScaleOutClusterResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  body.count = request.count;
  body.worker_instance_charge_type = request.workerInstanceChargeType;
  body.worker_period = request.workerPeriod;
  body.worker_period_unit = request.workerPeriodUnit;
  body.worker_auto_renew = request.workerAutoRenew;
  body.worker_auto_renew_period = request.workerAutoRenewPeriod;
  body.worker_system_disk_category = request.workerSystemDiskCategory;
  body.worker_system_disk_size = request.workerSystemDiskSize;
  body.worker_data_disk = request.workerDataDisk;
  body.key_pair = request.keyPair;
  body.login_password = request.loginPassword;
  body.cloud_monitor_flags = request.cloudMonitorFlags;
  body.cpu_policy = request.cpuPolicy;
  body.disable_rollback = request.disableRollback;
  body.image_id = request.imageId;
  body.user_data = request.userData;
  body.runtime = request.runtime;
  body.vswitch_ids = request.vswitchIds;
  body.worker_instance_types = request.workerInstanceTypes;
  body.rds_instances = request.rdsInstances;
  body.worker_data_disks = request.workerDataDisks;
  body.tags = request.tags;
  body.taints = request.taints;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = body,
  };
  return doROARequestWithForm('ScaleOutCluster', '2015-12-15', 'HTTPS', 'POST', 'AK', `/api/v2/clusters/${ClusterId}`, 'json', req, runtime);
}

model UnInstallClusterAddonsRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  addons?: [ 
    {
      name?: string(name='name', description='组件名称。'),
    }
  ](name='addons', description='卸载组件列表。'),
}

model UnInstallClusterAddonsResponse = {
  headers: map[string]string(name='headers'),
}

async function unInstallClusterAddons(ClusterId: string, request: UnInstallClusterAddonsRequest): UnInstallClusterAddonsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return unInstallClusterAddonsWithOptions(ClusterId, request, headers, runtime);
}

async function unInstallClusterAddonsWithOptions(ClusterId: string, request: UnInstallClusterAddonsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnInstallClusterAddonsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  body.addons = request.addons;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = body,
  };
  return doROARequestWithForm('UnInstallClusterAddons', '2015-12-15', 'HTTPS', 'POST', 'AK', `/clusters/${ClusterId}/components/uninstall`, 'none', req, runtime);
}

model UpdateTemplateRequest {
  templateId?: string(name='TemplateId', description='部署模板ID。'),
  name?: string(name='name', description='部署模板名称。'),
  template?: string(name='template', description='部署模板yaml。'),
  tags?: string(name='tags', description='部署模板标签'),
  description?: string(name='description', description='部署模板描述信息。'),
  templateType?: string(name='template_type', description='部署模板类型。'),
}

model UpdateTemplateResponse = {
  headers: map[string]string(name='headers'),
}

async function updateTemplate(TemplateId: string, request: UpdateTemplateRequest): UpdateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateTemplateWithOptions(TemplateId, request, headers, runtime);
}

async function updateTemplateWithOptions(TemplateId: string, request: UpdateTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  body.name = request.name;
  body.template = request.template;
  body.tags = request.tags;
  body.description = request.description;
  body.template_type = request.templateType;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = body,
  };
  return doROARequestWithForm('UpdateTemplate', '2015-12-15', 'HTTPS', 'PUT', 'AK', `/templates/${TemplateId}`, 'none', req, runtime);
}

model UpgradeClusterRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  componentName?: string(name='component_name', description='组件名称，集群升级时取值"k8s"。'),
  version?: string(name='version', description='当前版本。'),
  nextVersion?: string(name='next_version', description='目标版本。'),
}

model UpgradeClusterResponse = {
  headers: map[string]string(name='headers'),
}

async function upgradeCluster(ClusterId: string, request: UpgradeClusterRequest): UpgradeClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return upgradeClusterWithOptions(ClusterId, request, headers, runtime);
}

async function upgradeClusterWithOptions(ClusterId: string, request: UpgradeClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpgradeClusterResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  body.component_name = request.componentName;
  body.version = request.version;
  body.next_version = request.nextVersion;

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = body,
  };
  return doROARequestWithForm('UpgradeCluster', '2015-12-15', 'HTTPS', 'POST', 'AK', `/api/v2/clusters/${ClusterId}/upgrade`, 'none', req, runtime);
}

model UpgradeClusterAddonsRequest {
  clusterId?: string(name='ClusterId', description='集群ID。'),
  body?: [ 
    {
      componentName?: string(name='component_name', description='组件名称。'),
      nextVersion?: string(name='next_version', description='可升级版本。'),
      version?: string(name='version', description='当前版本。'),
    }
  ](name='body', description='Request body，类型是对象数组。'),
}

model UpgradeClusterAddonsResponse = {
  headers: map[string]string(name='headers'),
}

async function upgradeClusterAddons(ClusterId: string, request: UpgradeClusterAddonsRequest): UpgradeClusterAddonsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return upgradeClusterAddonsWithOptions(ClusterId, request, headers, runtime);
}

async function upgradeClusterAddonsWithOptions(ClusterId: string, request: UpgradeClusterAddonsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpgradeClusterAddonsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  return doROARequest('UpgradeClusterAddons', '2015-12-15', 'HTTPS', 'POST', 'AK', `/clusters/${ClusterId}/components/upgrade`, 'none', req, runtime);
}

