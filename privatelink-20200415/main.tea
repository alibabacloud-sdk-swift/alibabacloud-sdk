import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('privatelink', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model OpenPrivateLinkServiceRequest = {
  ownerId?: long(name='OwnerId'),
}

model OpenPrivateLinkServiceResponse = {
  requestId: string(name='RequestId'),
  orderId: string(name='OrderId'),
}

async function openPrivateLinkServiceWithOptions(request: OpenPrivateLinkServiceRequest, runtime: Util.RuntimeOptions): OpenPrivateLinkServiceResponse {
  Util.validateModel(request);
  return doRequest('OpenPrivateLinkService', 'HTTPS', 'POST', '2020-04-15', 'AK,APP,PrivateKey,BearerToken', null, request, runtime);
}

async function openPrivateLinkService(request: OpenPrivateLinkServiceRequest): OpenPrivateLinkServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openPrivateLinkServiceWithOptions(request, runtime);
}

model UpdateVpcEndpointConnectionAttributeRequest = {
  regionId: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  serviceId: string(name='ServiceId'),
  endpointId: string(name='EndpointId'),
  bandwidth?: integer(name='Bandwidth'),
}

model UpdateVpcEndpointConnectionAttributeResponse = {
  requestId: string(name='RequestId'),
}

async function updateVpcEndpointConnectionAttributeWithOptions(request: UpdateVpcEndpointConnectionAttributeRequest, runtime: Util.RuntimeOptions): UpdateVpcEndpointConnectionAttributeResponse {
  Util.validateModel(request);
  return doRequest('UpdateVpcEndpointConnectionAttribute', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function updateVpcEndpointConnectionAttribute(request: UpdateVpcEndpointConnectionAttributeRequest): UpdateVpcEndpointConnectionAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVpcEndpointConnectionAttributeWithOptions(request, runtime);
}

model ListVpcEndpointSecurityGroupsRequest = {
  regionId: string(name='RegionId'),
  nextToken?: string(name='NextToken'),
  maxResults?: integer(name='MaxResults'),
  endpointId: string(name='EndpointId'),
}

model ListVpcEndpointSecurityGroupsResponse = {
  maxResults: string(name='MaxResults'),
  nextToken: string(name='NextToken'),
  requestId: string(name='RequestId'),
  securityGroups: [
    {
      securityGroupId: string(name='SecurityGroupId'),
    }
  ](name='SecurityGroups'),
}

async function listVpcEndpointSecurityGroupsWithOptions(request: ListVpcEndpointSecurityGroupsRequest, runtime: Util.RuntimeOptions): ListVpcEndpointSecurityGroupsResponse {
  Util.validateModel(request);
  return doRequest('ListVpcEndpointSecurityGroups', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function listVpcEndpointSecurityGroups(request: ListVpcEndpointSecurityGroupsRequest): ListVpcEndpointSecurityGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointSecurityGroupsWithOptions(request, runtime);
}

model ListVpcEndpointConnectionsRequest = {
  regionId: string(name='RegionId'),
  nextToken?: string(name='NextToken'),
  maxResults?: integer(name='MaxResults'),
  serviceId: string(name='ServiceId'),
  endpointId?: string(name='EndpointId'),
  connectionStatus?: string(name='ConnectionStatus'),
  endpointOwnerId?: long(name='EndpointOwnerId'),
}

model ListVpcEndpointConnectionsResponse = {
  maxResults: string(name='MaxResults'),
  nextToken: string(name='NextToken'),
  requestId: string(name='RequestId'),
  connections: [
    {
      serviceId: string(name='ServiceId'),
      endpointId: string(name='EndpointId'),
      endpointOwnerId: long(name='EndpointOwnerId'),
      connectionStatus: string(name='ConnectionStatus'),
      endpointVpcId: string(name='EndpointVpcId'),
      bandwidth: integer(name='Bandwidth'),
      modifiedTime: string(name='ModifiedTime'),
      resourceOwner: boolean(name='ResourceOwner'),
      zones: [
        {
          zoneId: string(name='ZoneId'),
          eniId: string(name='EniId'),
          zoneDomain: string(name='ZoneDomain'),
          vSwitchId: string(name='VSwitchId'),
          resourceId: string(name='ResourceId'),
        }
      ](name='Zones'),
    }
  ](name='Connections'),
}

async function listVpcEndpointConnectionsWithOptions(request: ListVpcEndpointConnectionsRequest, runtime: Util.RuntimeOptions): ListVpcEndpointConnectionsResponse {
  Util.validateModel(request);
  return doRequest('ListVpcEndpointConnections', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function listVpcEndpointConnections(request: ListVpcEndpointConnectionsRequest): ListVpcEndpointConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointConnectionsWithOptions(request, runtime);
}

model DeleteVpcEndpointServiceRequest = {
  regionId: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  serviceId: string(name='ServiceId'),
}

model DeleteVpcEndpointServiceResponse = {
  requestId: string(name='RequestId'),
}

async function deleteVpcEndpointServiceWithOptions(request: DeleteVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): DeleteVpcEndpointServiceResponse {
  Util.validateModel(request);
  return doRequest('DeleteVpcEndpointService', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function deleteVpcEndpointService(request: DeleteVpcEndpointServiceRequest): DeleteVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcEndpointServiceWithOptions(request, runtime);
}

model RemoveUserFromVpcEndpointServiceRequest = {
  regionId: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  userId: long(name='UserId'),
  serviceId: string(name='ServiceId'),
}

model RemoveUserFromVpcEndpointServiceResponse = {
  requestId: string(name='RequestId'),
}

async function removeUserFromVpcEndpointServiceWithOptions(request: RemoveUserFromVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): RemoveUserFromVpcEndpointServiceResponse {
  Util.validateModel(request);
  return doRequest('RemoveUserFromVpcEndpointService', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function removeUserFromVpcEndpointService(request: RemoveUserFromVpcEndpointServiceRequest): RemoveUserFromVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUserFromVpcEndpointServiceWithOptions(request, runtime);
}

model AddUserToVpcEndpointServiceRequest = {
  regionId: string(name='RegionId'),
  userId: string(name='UserId'),
  serviceId: string(name='ServiceId'),
  dryRun?: boolean(name='DryRun'),
  clientToken?: string(name='ClientToken'),
}

model AddUserToVpcEndpointServiceResponse = {
  requestId: string(name='RequestId'),
}

async function addUserToVpcEndpointServiceWithOptions(request: AddUserToVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): AddUserToVpcEndpointServiceResponse {
  Util.validateModel(request);
  return doRequest('AddUserToVpcEndpointService', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function addUserToVpcEndpointService(request: AddUserToVpcEndpointServiceRequest): AddUserToVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserToVpcEndpointServiceWithOptions(request, runtime);
}

model ListVpcEndpointServiceUsersRequest = {
  regionId: string(name='RegionId'),
  nextToken?: string(name='NextToken'),
  maxResults?: integer(name='MaxResults'),
  serviceId: string(name='ServiceId'),
  userId?: long(name='UserId'),
}

model ListVpcEndpointServiceUsersResponse = {
  maxResults: string(name='MaxResults'),
  nextToken: string(name='NextToken'),
  requestId: string(name='RequestId'),
  users: [
    {
      userId: long(name='UserId'),
    }
  ](name='Users'),
}

async function listVpcEndpointServiceUsersWithOptions(request: ListVpcEndpointServiceUsersRequest, runtime: Util.RuntimeOptions): ListVpcEndpointServiceUsersResponse {
  Util.validateModel(request);
  return doRequest('ListVpcEndpointServiceUsers', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function listVpcEndpointServiceUsers(request: ListVpcEndpointServiceUsersRequest): ListVpcEndpointServiceUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointServiceUsersWithOptions(request, runtime);
}

model ListVpcEndpointServicesRequest = {
  regionId: string(name='RegionId'),
  nextToken?: string(name='NextToken'),
  maxResults?: integer(name='MaxResults'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled'),
  serviceStatus?: string(name='ServiceStatus'),
  serviceBusinessStatus?: string(name='ServiceBusinessStatus'),
}

model ListVpcEndpointServicesResponse = {
  maxResults: string(name='MaxResults'),
  nextToken: string(name='NextToken'),
  requestId: string(name='RequestId'),
  services: [
    {
      autoAcceptEnabled: boolean(name='AutoAcceptEnabled'),
      connectBandwidth: integer(name='ConnectBandwidth'),
      createTime: string(name='CreateTime'),
      maxBandwidth: integer(name='MaxBandwidth'),
      minBandwidth: integer(name='MinBandwidth'),
      regionId: string(name='RegionId'),
      serviceBusinessStatus: string(name='ServiceBusinessStatus'),
      serviceDescription: string(name='ServiceDescription'),
      serviceDomain: string(name='ServiceDomain'),
      serviceId: string(name='ServiceId'),
      serviceName: string(name='ServiceName'),
      serviceStatus: string(name='ServiceStatus'),
      payer: string(name='Payer'),
    }
  ](name='Services'),
}

async function listVpcEndpointServicesWithOptions(request: ListVpcEndpointServicesRequest, runtime: Util.RuntimeOptions): ListVpcEndpointServicesResponse {
  Util.validateModel(request);
  return doRequest('ListVpcEndpointServices', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function listVpcEndpointServices(request: ListVpcEndpointServicesRequest): ListVpcEndpointServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointServicesWithOptions(request, runtime);
}

model ListVpcEndpointsRequest = {
  regionId: string(name='RegionId'),
  nextToken?: string(name='NextToken'),
  maxResults?: integer(name='MaxResults'),
  endpointId?: string(name='EndpointId'),
  serviceName?: string(name='ServiceName'),
  vpcId?: string(name='VpcId'),
  endpointName?: string(name='EndpointName'),
  endpointStatus?: string(name='EndpointStatus'),
  connectionStatus?: string(name='ConnectionStatus'),
}

model ListVpcEndpointsResponse = {
  maxResults: string(name='MaxResults'),
  nextToken: string(name='NextToken'),
  requestId: string(name='RequestId'),
  endpoints: [
    {
      endpointId: string(name='EndpointId'),
      endpointName: string(name='EndpointName'),
      endpointDescription: string(name='EndpointDescription'),
      endpointStatus: string(name='EndpointStatus'),
      endpointBusinessStatus: string(name='EndpointBusinessStatus'),
      endpointDomain: string(name='EndpointDomain'),
      bandwidth: long(name='Bandwidth'),
      connectionStatus: string(name='ConnectionStatus'),
      serviceId: string(name='ServiceId'),
      serviceName: string(name='ServiceName'),
      vpcId: string(name='VpcId'),
      createTime: string(name='CreateTime'),
      regionId: string(name='RegionId'),
      resourceOwner: boolean(name='ResourceOwner'),
    }
  ](name='Endpoints'),
}

async function listVpcEndpointsWithOptions(request: ListVpcEndpointsRequest, runtime: Util.RuntimeOptions): ListVpcEndpointsResponse {
  Util.validateModel(request);
  return doRequest('ListVpcEndpoints', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function listVpcEndpoints(request: ListVpcEndpointsRequest): ListVpcEndpointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointsWithOptions(request, runtime);
}

model GetVpcEndpointServiceAttributeRequest = {
  regionId: string(name='RegionId'),
  serviceId: string(name='ServiceId'),
}

model GetVpcEndpointServiceAttributeResponse = {
  requestId: string(name='RequestId'),
  serviceId: string(name='ServiceId'),
  serviceName: string(name='ServiceName'),
  serviceDomain: string(name='ServiceDomain'),
  serviceDescription: string(name='ServiceDescription'),
  serviceBusinessStatus: string(name='ServiceBusinessStatus'),
  serviceStatus: string(name='ServiceStatus'),
  autoAcceptEnabled: boolean(name='AutoAcceptEnabled'),
  createTime: string(name='CreateTime'),
  maxBandwidth: integer(name='MaxBandwidth'),
  minBandwidth: integer(name='MinBandwidth'),
  connectBandwidth: integer(name='ConnectBandwidth'),
  regionId: string(name='RegionId'),
  payer: string(name='Payer'),
  zones: [ string ] (name='Zones'),
}

async function getVpcEndpointServiceAttributeWithOptions(request: GetVpcEndpointServiceAttributeRequest, runtime: Util.RuntimeOptions): GetVpcEndpointServiceAttributeResponse {
  Util.validateModel(request);
  return doRequest('GetVpcEndpointServiceAttribute', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function getVpcEndpointServiceAttribute(request: GetVpcEndpointServiceAttributeRequest): GetVpcEndpointServiceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVpcEndpointServiceAttributeWithOptions(request, runtime);
}

model DescribeZonesRequest = {
  regionId: string(name='RegionId'),
}

model DescribeZonesResponse = {
  requestId: string(name='RequestId'),
  zones: {
    zone: [
      {
        zoneId: string(name='ZoneId'),
        localName: string(name='LocalName'),
      }
    ](name='Zone'),
  }(name='Zones'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  return doRequest('DescribeZones', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model ListVpcEndpointServicesByEndUserRequest = {
  regionId: string(name='RegionId'),
  nextToken?: string(name='NextToken'),
  maxResults?: integer(name='MaxResults'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
}

model ListVpcEndpointServicesByEndUserResponse = {
  maxResults: string(name='MaxResults'),
  nextToken: string(name='NextToken'),
  requestId: string(name='RequestId'),
  services: [
    {
      serviceDomain: string(name='ServiceDomain'),
      serviceId: string(name='ServiceId'),
      serviceName: string(name='ServiceName'),
      payer: string(name='Payer'),
      zones: [ string ](name='Zones'),
    }
  ](name='Services'),
}

async function listVpcEndpointServicesByEndUserWithOptions(request: ListVpcEndpointServicesByEndUserRequest, runtime: Util.RuntimeOptions): ListVpcEndpointServicesByEndUserResponse {
  Util.validateModel(request);
  return doRequest('ListVpcEndpointServicesByEndUser', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function listVpcEndpointServicesByEndUser(request: ListVpcEndpointServicesByEndUserRequest): ListVpcEndpointServicesByEndUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointServicesByEndUserWithOptions(request, runtime);
}

model DetachResourceFromVpcEndpointServiceRequest = {
  regionId: string(name='RegionId'),
  resourceType: string(name='ResourceType'),
  resourceId: string(name='ResourceId'),
  serviceId: string(name='ServiceId'),
  dryRun?: boolean(name='DryRun'),
  clientToken?: string(name='ClientToken'),
}

model DetachResourceFromVpcEndpointServiceResponse = {
  requestId: string(name='RequestId'),
}

async function detachResourceFromVpcEndpointServiceWithOptions(request: DetachResourceFromVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): DetachResourceFromVpcEndpointServiceResponse {
  Util.validateModel(request);
  return doRequest('DetachResourceFromVpcEndpointService', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function detachResourceFromVpcEndpointService(request: DetachResourceFromVpcEndpointServiceRequest): DetachResourceFromVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachResourceFromVpcEndpointServiceWithOptions(request, runtime);
}

model UpdateVpcEndpointAttributeRequest = {
  regionId: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  endpointId: string(name='EndpointId'),
  endpointName?: string(name='EndpointName'),
  endpointDescription?: string(name='EndpointDescription'),
}

model UpdateVpcEndpointAttributeResponse = {
  requestId: string(name='RequestId'),
}

async function updateVpcEndpointAttributeWithOptions(request: UpdateVpcEndpointAttributeRequest, runtime: Util.RuntimeOptions): UpdateVpcEndpointAttributeResponse {
  Util.validateModel(request);
  return doRequest('UpdateVpcEndpointAttribute', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function updateVpcEndpointAttribute(request: UpdateVpcEndpointAttributeRequest): UpdateVpcEndpointAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVpcEndpointAttributeWithOptions(request, runtime);
}

model CreateVpcEndpointRequest = {
  regionId: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  endpointName?: string(name='EndpointName'),
  endpointDescription?: string(name='EndpointDescription'),
  vpcId: string(name='VpcId'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  zone?: [
    {
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Zone'),
  securityGroupId: [ string ](name='SecurityGroupId'),
}

model CreateVpcEndpointResponse = {
  endpointId: string(name='EndpointId'),
  createTime: string(name='CreateTime'),
  requestId: string(name='RequestId'),
  endpointName: string(name='EndpointName'),
  vpcId: string(name='VpcId'),
  endpointDescription: string(name='EndpointDescription'),
  serviceId: string(name='ServiceId'),
  serviceName: string(name='ServiceName'),
  endpointBusinessStatus: string(name='EndpointBusinessStatus'),
  endpointStatus: string(name='EndpointStatus'),
  connectionStatus: string(name='ConnectionStatus'),
  endpointDomain: string(name='EndpointDomain'),
  bandwidth: long(name='Bandwidth'),
}

async function createVpcEndpointWithOptions(request: CreateVpcEndpointRequest, runtime: Util.RuntimeOptions): CreateVpcEndpointResponse {
  Util.validateModel(request);
  return doRequest('CreateVpcEndpoint', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function createVpcEndpoint(request: CreateVpcEndpointRequest): CreateVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcEndpointWithOptions(request, runtime);
}

model DescribeRegionsRequest = {
  regionId?: string(name='RegionId'),
}

model DescribeRegionsResponse = {
  requestId: string(name='RequestId'),
  regions: {
    region: [
      {
        regionId: string(name='RegionId'),
        localName: string(name='LocalName'),
        regionEndpoint: string(name='RegionEndpoint'),
      }
    ](name='Region'),
  }(name='Regions'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRegions', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model GetVpcEndpointAttributeRequest = {
  regionId: string(name='RegionId'),
  endpointId?: string(name='EndpointId'),
}

model GetVpcEndpointAttributeResponse = {
  bandwidth: integer(name='Bandwidth'),
  connectionStatus: string(name='ConnectionStatus'),
  createTime: string(name='CreateTime'),
  endpointBusinessStatus: string(name='EndpointBusinessStatus'),
  endpointDescription: string(name='EndpointDescription'),
  endpointDomain: string(name='EndpointDomain'),
  endpointId: string(name='EndpointId'),
  endpointName: string(name='EndpointName'),
  endpointStatus: string(name='EndpointStatus'),
  requestId: string(name='RequestId'),
  serviceId: string(name='ServiceId'),
  serviceName: string(name='ServiceName'),
  vpcId: string(name='VpcId'),
  regionId: string(name='RegionId'),
  payer: string(name='Payer'),
  resourceOwner: boolean(name='ResourceOwner'),
}

async function getVpcEndpointAttributeWithOptions(request: GetVpcEndpointAttributeRequest, runtime: Util.RuntimeOptions): GetVpcEndpointAttributeResponse {
  Util.validateModel(request);
  return doRequest('GetVpcEndpointAttribute', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function getVpcEndpointAttribute(request: GetVpcEndpointAttributeRequest): GetVpcEndpointAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVpcEndpointAttributeWithOptions(request, runtime);
}

model DisableVpcEndpointConnectionRequest = {
  regionId: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  serviceId: string(name='ServiceId'),
  endpointId: string(name='EndpointId'),
}

model DisableVpcEndpointConnectionResponse = {
  requestId: string(name='RequestId'),
}

async function disableVpcEndpointConnectionWithOptions(request: DisableVpcEndpointConnectionRequest, runtime: Util.RuntimeOptions): DisableVpcEndpointConnectionResponse {
  Util.validateModel(request);
  return doRequest('DisableVpcEndpointConnection', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function disableVpcEndpointConnection(request: DisableVpcEndpointConnectionRequest): DisableVpcEndpointConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableVpcEndpointConnectionWithOptions(request, runtime);
}

model CreateVpcEndpointServiceRequest = {
  regionId: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  resource?: [
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='Resource'),
  serviceDescription?: string(name='ServiceDescription'),
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled'),
  payer?: string(name='Payer'),
}

model CreateVpcEndpointServiceResponse = {
  autoAcceptEnabled: boolean(name='AutoAcceptEnabled'),
  createTime: string(name='CreateTime'),
  requestId: string(name='RequestId'),
  serviceBusinessStatus: string(name='ServiceBusinessStatus'),
  serviceDescription: string(name='ServiceDescription'),
  serviceDomain: string(name='ServiceDomain'),
  serviceId: string(name='ServiceId'),
  serviceName: string(name='ServiceName'),
  serviceStatus: string(name='ServiceStatus'),
}

async function createVpcEndpointServiceWithOptions(request: CreateVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): CreateVpcEndpointServiceResponse {
  Util.validateModel(request);
  return doRequest('CreateVpcEndpointService', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function createVpcEndpointService(request: CreateVpcEndpointServiceRequest): CreateVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcEndpointServiceWithOptions(request, runtime);
}

model RemoveZoneFromVpcEndpointRequest = {
  regionId: string(name='RegionId'),
  zoneId: string(name='ZoneId'),
  endpointId: string(name='EndpointId'),
  dryRun?: boolean(name='DryRun'),
  clientToken?: string(name='ClientToken'),
}

model RemoveZoneFromVpcEndpointResponse = {
  requestId: string(name='RequestId'),
}

async function removeZoneFromVpcEndpointWithOptions(request: RemoveZoneFromVpcEndpointRequest, runtime: Util.RuntimeOptions): RemoveZoneFromVpcEndpointResponse {
  Util.validateModel(request);
  return doRequest('RemoveZoneFromVpcEndpoint', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function removeZoneFromVpcEndpoint(request: RemoveZoneFromVpcEndpointRequest): RemoveZoneFromVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeZoneFromVpcEndpointWithOptions(request, runtime);
}

model DetachSecurityGroupFromVpcEndpointRequest = {
  regionId: string(name='RegionId'),
  securityGroupId: string(name='SecurityGroupId'),
  endpointId: string(name='EndpointId'),
  dryRun?: boolean(name='DryRun'),
  clientToken?: string(name='ClientToken'),
}

model DetachSecurityGroupFromVpcEndpointResponse = {
  requestId: string(name='RequestId'),
}

async function detachSecurityGroupFromVpcEndpointWithOptions(request: DetachSecurityGroupFromVpcEndpointRequest, runtime: Util.RuntimeOptions): DetachSecurityGroupFromVpcEndpointResponse {
  Util.validateModel(request);
  return doRequest('DetachSecurityGroupFromVpcEndpoint', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function detachSecurityGroupFromVpcEndpoint(request: DetachSecurityGroupFromVpcEndpointRequest): DetachSecurityGroupFromVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachSecurityGroupFromVpcEndpointWithOptions(request, runtime);
}

model AttachSecurityGroupToVpcEndpointRequest = {
  regionId: string(name='RegionId'),
  securityGroupId: string(name='SecurityGroupId'),
  endpointId: string(name='EndpointId'),
  dryRun?: boolean(name='DryRun'),
  clientToken?: string(name='ClientToken'),
}

model AttachSecurityGroupToVpcEndpointResponse = {
  requestId: string(name='RequestId'),
}

async function attachSecurityGroupToVpcEndpointWithOptions(request: AttachSecurityGroupToVpcEndpointRequest, runtime: Util.RuntimeOptions): AttachSecurityGroupToVpcEndpointResponse {
  Util.validateModel(request);
  return doRequest('AttachSecurityGroupToVpcEndpoint', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function attachSecurityGroupToVpcEndpoint(request: AttachSecurityGroupToVpcEndpointRequest): AttachSecurityGroupToVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachSecurityGroupToVpcEndpointWithOptions(request, runtime);
}

model ListVpcEndpointServiceResourcesRequest = {
  regionId: string(name='RegionId'),
  nextToken?: string(name='NextToken'),
  maxResults?: integer(name='MaxResults'),
  serviceId: string(name='ServiceId'),
}

model ListVpcEndpointServiceResourcesResponse = {
  maxResults: string(name='MaxResults'),
  nextToken: string(name='NextToken'),
  requestId: string(name='RequestId'),
  resources: [
    {
      zoneId: string(name='ZoneId'),
      resourceId: string(name='ResourceId'),
      resourceType: string(name='ResourceType'),
      ip: string(name='Ip'),
      vpcId: string(name='VpcId'),
      vSwitchId: string(name='VSwitchId'),
      regionId: string(name='RegionId'),
    }
  ](name='Resources'),
}

async function listVpcEndpointServiceResourcesWithOptions(request: ListVpcEndpointServiceResourcesRequest, runtime: Util.RuntimeOptions): ListVpcEndpointServiceResourcesResponse {
  Util.validateModel(request);
  return doRequest('ListVpcEndpointServiceResources', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function listVpcEndpointServiceResources(request: ListVpcEndpointServiceResourcesRequest): ListVpcEndpointServiceResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointServiceResourcesWithOptions(request, runtime);
}

model ListVpcEndpointZonesRequest = {
  regionId: string(name='RegionId'),
  nextToken?: string(name='NextToken'),
  maxResults?: integer(name='MaxResults'),
  endpointId: string(name='EndpointId'),
}

model ListVpcEndpointZonesResponse = {
  maxResults: string(name='MaxResults'),
  nextToken: string(name='NextToken'),
  requestId: string(name='RequestId'),
  zones: [
    {
      zoneDomain: string(name='ZoneDomain'),
      zoneStatus: string(name='ZoneStatus'),
      eniId: string(name='EniId'),
      eniIp: string(name='EniIp'),
      vSwitchId: string(name='VSwitchId'),
      zoneId: string(name='ZoneId'),
      regionId: string(name='RegionId'),
    }
  ](name='Zones'),
}

async function listVpcEndpointZonesWithOptions(request: ListVpcEndpointZonesRequest, runtime: Util.RuntimeOptions): ListVpcEndpointZonesResponse {
  Util.validateModel(request);
  return doRequest('ListVpcEndpointZones', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function listVpcEndpointZones(request: ListVpcEndpointZonesRequest): ListVpcEndpointZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcEndpointZonesWithOptions(request, runtime);
}

model AttachResourceToVpcEndpointServiceRequest = {
  regionId: string(name='RegionId'),
  resourceType: string(name='ResourceType'),
  resourceId: string(name='ResourceId'),
  serviceId: string(name='ServiceId'),
  dryRun?: boolean(name='DryRun'),
  clientToken?: string(name='ClientToken'),
}

model AttachResourceToVpcEndpointServiceResponse = {
  requestId: string(name='RequestId'),
}

async function attachResourceToVpcEndpointServiceWithOptions(request: AttachResourceToVpcEndpointServiceRequest, runtime: Util.RuntimeOptions): AttachResourceToVpcEndpointServiceResponse {
  Util.validateModel(request);
  return doRequest('AttachResourceToVpcEndpointService', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function attachResourceToVpcEndpointService(request: AttachResourceToVpcEndpointServiceRequest): AttachResourceToVpcEndpointServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachResourceToVpcEndpointServiceWithOptions(request, runtime);
}

model DeleteVpcEndpointRequest = {
  regionId: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  endpointId: string(name='EndpointId'),
}

model DeleteVpcEndpointResponse = {
  requestId: string(name='RequestId'),
}

async function deleteVpcEndpointWithOptions(request: DeleteVpcEndpointRequest, runtime: Util.RuntimeOptions): DeleteVpcEndpointResponse {
  Util.validateModel(request);
  return doRequest('DeleteVpcEndpoint', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function deleteVpcEndpoint(request: DeleteVpcEndpointRequest): DeleteVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcEndpointWithOptions(request, runtime);
}

model AddZoneToVpcEndpointRequest = {
  regionId: string(name='RegionId'),
  zoneId: string(name='ZoneId'),
  vSwitchId: string(name='VSwitchId'),
  endpointId: string(name='EndpointId'),
  dryRun?: boolean(name='DryRun'),
  clientToken?: string(name='ClientToken'),
}

model AddZoneToVpcEndpointResponse = {
  requestId: string(name='RequestId'),
}

async function addZoneToVpcEndpointWithOptions(request: AddZoneToVpcEndpointRequest, runtime: Util.RuntimeOptions): AddZoneToVpcEndpointResponse {
  Util.validateModel(request);
  return doRequest('AddZoneToVpcEndpoint', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function addZoneToVpcEndpoint(request: AddZoneToVpcEndpointRequest): AddZoneToVpcEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return addZoneToVpcEndpointWithOptions(request, runtime);
}

model EnableVpcEndpointConnectionRequest = {
  regionId: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  serviceId: string(name='ServiceId'),
  endpointId: string(name='EndpointId'),
  bandwidth?: integer(name='Bandwidth'),
}

model EnableVpcEndpointConnectionResponse = {
  requestId: string(name='RequestId'),
}

async function enableVpcEndpointConnectionWithOptions(request: EnableVpcEndpointConnectionRequest, runtime: Util.RuntimeOptions): EnableVpcEndpointConnectionResponse {
  Util.validateModel(request);
  return doRequest('EnableVpcEndpointConnection', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function enableVpcEndpointConnection(request: EnableVpcEndpointConnectionRequest): EnableVpcEndpointConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableVpcEndpointConnectionWithOptions(request, runtime);
}

model UpdateVpcEndpointServiceAttributeRequest = {
  regionId: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  serviceId: string(name='ServiceId'),
  serviceDescription?: string(name='ServiceDescription'),
  autoAcceptEnabled?: boolean(name='AutoAcceptEnabled'),
  connectBandwidth?: integer(name='ConnectBandwidth'),
}

model UpdateVpcEndpointServiceAttributeResponse = {
  requestId: string(name='RequestId'),
}

async function updateVpcEndpointServiceAttributeWithOptions(request: UpdateVpcEndpointServiceAttributeRequest, runtime: Util.RuntimeOptions): UpdateVpcEndpointServiceAttributeResponse {
  Util.validateModel(request);
  return doRequest('UpdateVpcEndpointServiceAttribute', 'HTTPS', 'POST', '2020-04-15', 'AK', null, request, runtime);
}

async function updateVpcEndpointServiceAttribute(request: UpdateVpcEndpointServiceAttributeRequest): UpdateVpcEndpointServiceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVpcEndpointServiceAttributeWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
