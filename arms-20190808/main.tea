import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'arms.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'arms.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'arms.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'arms.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'arms.ap-southeast-1.aliyuncs.com',
    cn-chengdu = 'arms.aliyuncs.com',
    cn-huhehaote = 'arms.aliyuncs.com',
    eu-central-1 = 'arms.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'arms.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'arms.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'arms.ap-southeast-1.aliyuncs.com',
    cn-hangzhou-finance = 'arms.aliyuncs.com',
    cn-shenzhen-finance-1 = 'arms.aliyuncs.com',
    cn-shanghai-finance-1 = 'arms.aliyuncs.com',
    cn-north-2-gov-1 = 'arms.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('arms', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model GetMultipleTraceRequest = {
  regionId: string(name='RegionId'),
  traceIDs?: [ string ](name='TraceIDs'),
}

model GetMultipleTraceResponse = {
  requestId: string(name='RequestId'),
  multiCallChainInfos: [
    {
      traceID: string(name='TraceID'),
      spans: [
        {
          traceID: string(name='TraceID'),
          operationName: string(name='OperationName'),
          duration: long(name='Duration'),
          serviceName: string(name='ServiceName'),
          serviceIp: string(name='ServiceIp'),
          timestamp: long(name='Timestamp'),
          rpcId: string(name='RpcId'),
          resultCode: string(name='ResultCode'),
          haveStack: boolean(name='HaveStack'),
          rpcType: integer(name='RpcType'),
          tagEntryList: [
            {
              key: string(name='Key'),
              value: string(name='Value'),
            }
          ](name='TagEntryList'),
          logEventList: [
            {
              timestamp: long(name='Timestamp'),
              tagEntryList: [
                {
                  key: string(name='Key'),
                  value: string(name='Value'),
                }
              ](name='TagEntryList'),
            }
          ](name='LogEventList'),
        }
      ](name='Spans'),
    }
  ](name='MultiCallChainInfos'),
}

async function getMultipleTraceWithOptions(request: GetMultipleTraceRequest, runtime: Util.RuntimeOptions): GetMultipleTraceResponse {
  Util.validateModel(request);
  return doRequest('GetMultipleTrace', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function getMultipleTrace(request: GetMultipleTraceRequest): GetMultipleTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMultipleTraceWithOptions(request, runtime);
}

model SearchTracesByPageRequest = {
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  regionId: string(name='RegionId'),
  serviceName?: string(name='ServiceName'),
  operationName?: string(name='OperationName'),
  minDuration?: long(name='MinDuration'),
  reverse?: boolean(name='Reverse'),
  serviceIp?: string(name='ServiceIp'),
  exclusionFilters?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='ExclusionFilters'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model SearchTracesByPageResponse = {
  requestId: string(name='RequestId'),
  pageBean: {
    total: integer(name='Total'),
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    traceInfos: [
      {
        traceID: string(name='TraceID'),
        operationName: string(name='OperationName'),
        serviceName: string(name='ServiceName'),
        serviceIp: string(name='ServiceIp'),
        duration: long(name='Duration'),
        timestamp: long(name='Timestamp'),
      }
    ](name='TraceInfos'),
  }(name='PageBean'),
}

async function searchTracesByPageWithOptions(request: SearchTracesByPageRequest, runtime: Util.RuntimeOptions): SearchTracesByPageResponse {
  Util.validateModel(request);
  return doRequest('SearchTracesByPage', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function searchTracesByPage(request: SearchTracesByPageRequest): SearchTracesByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTracesByPageWithOptions(request, runtime);
}

model GetStackRequest = {
  traceID: string(name='TraceID'),
  regionId: string(name='RegionId'),
  rpcID: string(name='RpcID'),
  pid?: string(name='Pid'),
}

model GetStackResponse = {
  requestId: string(name='RequestId'),
  stackInfo: [
    {
      startTime: long(name='StartTime'),
      duration: long(name='Duration'),
      rpcId: string(name='RpcId'),
      serviceName: string(name='ServiceName'),
      api: string(name='Api'),
      exception: string(name='Exception'),
      line: string(name='Line'),
      extInfo: {
        type: string(name='Type'),
        info: string(name='Info'),
      }(name='ExtInfo'),
    }
  ](name='StackInfo'),
}

async function getStackWithOptions(request: GetStackRequest, runtime: Util.RuntimeOptions): GetStackResponse {
  Util.validateModel(request);
  return doRequest('GetStack', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function getStack(request: GetStackRequest): GetStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackWithOptions(request, runtime);
}

model DescribeTraceLocationRequest = {
  regionId?: string(name='RegionId'),
}

model DescribeTraceLocationResponse = {
  requestId: string(name='RequestId'),
  regionConfigs: [
    {
      regionNo: string(name='RegionNo'),
      url: string(name='Url'),
    }
  ](name='RegionConfigs'),
}

async function describeTraceLocationWithOptions(request: DescribeTraceLocationRequest, runtime: Util.RuntimeOptions): DescribeTraceLocationResponse {
  Util.validateModel(request);
  return doRequest('DescribeTraceLocation', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function describeTraceLocation(request: DescribeTraceLocationRequest): DescribeTraceLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTraceLocationWithOptions(request, runtime);
}

model DeleteTraceAppRequest = {
  appId?: string(name='AppId'),
  regionId: string(name='RegionId'),
  type: string(name='Type'),
  pid: string(name='Pid'),
}

model DeleteTraceAppResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function deleteTraceAppWithOptions(request: DeleteTraceAppRequest, runtime: Util.RuntimeOptions): DeleteTraceAppResponse {
  Util.validateModel(request);
  return doRequest('DeleteTraceApp', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function deleteTraceApp(request: DeleteTraceAppRequest): DeleteTraceAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTraceAppWithOptions(request, runtime);
}

model DescribeTraceLicenseKeyRequest = {
  regionId?: string(name='RegionId'),
}

model DescribeTraceLicenseKeyResponse = {
  requestId: string(name='RequestId'),
  licenseKey: string(name='LicenseKey'),
}

async function describeTraceLicenseKeyWithOptions(request: DescribeTraceLicenseKeyRequest, runtime: Util.RuntimeOptions): DescribeTraceLicenseKeyResponse {
  Util.validateModel(request);
  return doRequest('DescribeTraceLicenseKey', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function describeTraceLicenseKey(request: DescribeTraceLicenseKeyRequest): DescribeTraceLicenseKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTraceLicenseKeyWithOptions(request, runtime);
}

model ConfigAppRequest = {
  appIds: string(name='AppIds'),
  enable?: string(name='Enable'),
  regionId: string(name='RegionId'),
}

model ConfigAppResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function configAppWithOptions(request: ConfigAppRequest, runtime: Util.RuntimeOptions): ConfigAppResponse {
  Util.validateModel(request);
  return doRequest('ConfigApp', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function configApp(request: ConfigAppRequest): ConfigAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return configAppWithOptions(request, runtime);
}

model CheckServiceLinkedRoleForDeletingRequest = {
  roleArn: string(name='RoleArn'),
  serviceName: string(name='ServiceName'),
  SPIRegionId: string(name='SPIRegionId'),
  deletionTaskId: string(name='DeletionTaskId'),
  regionId?: string(name='RegionId'),
}

model CheckServiceLinkedRoleForDeletingResponse = {
  requestId: string(name='RequestId'),
  deletable: boolean(name='Deletable'),
  roleUsages: [
    {
      region: string(name='Region'),
      resources: [ string ](name='Resources'),
    }
  ](name='RoleUsages'),
}

async function checkServiceLinkedRoleForDeletingWithOptions(request: CheckServiceLinkedRoleForDeletingRequest, runtime: Util.RuntimeOptions): CheckServiceLinkedRoleForDeletingResponse {
  Util.validateModel(request);
  return doRequest('CheckServiceLinkedRoleForDeleting', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function checkServiceLinkedRoleForDeleting(request: CheckServiceLinkedRoleForDeletingRequest): CheckServiceLinkedRoleForDeletingResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkServiceLinkedRoleForDeletingWithOptions(request, runtime);
}

model ListDashboardsRequest = {
  regionId: string(name='RegionId'),
  clusterId: string(name='ClusterId'),
}

model ListDashboardsResponse = {
  requestId: string(name='RequestId'),
  dashboardVos: [
    {
      id: string(name='Id'),
      uid: string(name='Uid'),
      title: string(name='Title'),
      time: string(name='Time'),
      url: string(name='Url'),
      type: string(name='Type'),
      exporter: string(name='Exporter'),
      isArmsExporter: boolean(name='IsArmsExporter'),
      tags: [ string ](name='Tags'),
    }
  ](name='DashboardVos'),
}

async function listDashboardsWithOptions(request: ListDashboardsRequest, runtime: Util.RuntimeOptions): ListDashboardsResponse {
  Util.validateModel(request);
  return doRequest('ListDashboards', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function listDashboards(request: ListDashboardsRequest): ListDashboardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDashboardsWithOptions(request, runtime);
}

model GetConsistencySnapshotRequest = {
  currentTimestamp?: long(name='CurrentTimestamp'),
  regionId: string(name='RegionId'),
  proxyUserId?: string(name='ProxyUserId'),
  pid: string(name='Pid'),
  appType: string(name='AppType'),
}

model GetConsistencySnapshotResponse = {
  requestId: string(name='RequestId'),
  consistencyResultJsonStr: string(name='ConsistencyResultJsonStr'),
}

async function getConsistencySnapshotWithOptions(request: GetConsistencySnapshotRequest, runtime: Util.RuntimeOptions): GetConsistencySnapshotResponse {
  Util.validateModel(request);
  return doRequest('GetConsistencySnapshot', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function getConsistencySnapshot(request: GetConsistencySnapshotRequest): GetConsistencySnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConsistencySnapshotWithOptions(request, runtime);
}

model CheckDataConsistencyRequest = {
  currentTimestamp?: long(name='CurrentTimestamp'),
  regionId: string(name='RegionId'),
  proxyUserId?: string(name='ProxyUserId'),
  pid: string(name='Pid'),
  appType: string(name='AppType'),
}

model CheckDataConsistencyResponse = {
  requestId: string(name='RequestId'),
  isDataConsistency: boolean(name='IsDataConsistency'),
}

async function checkDataConsistencyWithOptions(request: CheckDataConsistencyRequest, runtime: Util.RuntimeOptions): CheckDataConsistencyResponse {
  Util.validateModel(request);
  return doRequest('CheckDataConsistency', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function checkDataConsistency(request: CheckDataConsistencyRequest): CheckDataConsistencyResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDataConsistencyWithOptions(request, runtime);
}

model AddGrafanaRequest = {
  regionId: string(name='RegionId'),
  clusterId: string(name='ClusterId'),
  integration: string(name='Integration'),
}

model AddGrafanaResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function addGrafanaWithOptions(request: AddGrafanaRequest, runtime: Util.RuntimeOptions): AddGrafanaResponse {
  Util.validateModel(request);
  return doRequest('AddGrafana', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function addGrafana(request: AddGrafanaRequest): AddGrafanaResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGrafanaWithOptions(request, runtime);
}

model AddIntegrationRequest = {
  regionId: string(name='RegionId'),
  clusterId: string(name='ClusterId'),
  integration: string(name='Integration'),
}

model AddIntegrationResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function addIntegrationWithOptions(request: AddIntegrationRequest, runtime: Util.RuntimeOptions): AddIntegrationResponse {
  Util.validateModel(request);
  return doRequest('AddIntegration', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function addIntegration(request: AddIntegrationRequest): AddIntegrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return addIntegrationWithOptions(request, runtime);
}

model GetTraceRequest = {
  traceID: string(name='TraceID'),
  regionId: string(name='RegionId'),
}

model GetTraceResponse = {
  requestId: string(name='RequestId'),
  spans: [
    {
      traceID: string(name='TraceID'),
      operationName: string(name='OperationName'),
      duration: long(name='Duration'),
      serviceName: string(name='ServiceName'),
      serviceIp: string(name='ServiceIp'),
      timestamp: long(name='Timestamp'),
      rpcId: string(name='RpcId'),
      resultCode: string(name='ResultCode'),
      haveStack: boolean(name='HaveStack'),
      rpcType: integer(name='RpcType'),
      tagEntryList: [
        {
          key: string(name='Key'),
          value: string(name='Value'),
        }
      ](name='TagEntryList'),
      logEventList: [
        {
          timestamp: long(name='Timestamp'),
          tagEntryList: [
            {
              key: string(name='Key'),
              value: string(name='Value'),
            }
          ](name='TagEntryList'),
        }
      ](name='LogEventList'),
    }
  ](name='Spans'),
}

async function getTraceWithOptions(request: GetTraceRequest, runtime: Util.RuntimeOptions): GetTraceResponse {
  Util.validateModel(request);
  return doRequest('GetTrace', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function getTrace(request: GetTraceRequest): GetTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTraceWithOptions(request, runtime);
}

model ListClusterFromGrafanaRequest = {
  regionId: string(name='RegionId'),
}

model ListClusterFromGrafanaResponse = {
  requestId: string(name='RequestId'),
  promClusterList: [
    {
      id: long(name='Id'),
      clusterId: string(name='ClusterId'),
      clusterName: string(name='ClusterName'),
      agentStatus: string(name='AgentStatus'),
      clusterType: string(name='ClusterType'),
      controllerId: string(name='ControllerId'),
      isControllerInstalled: boolean(name='IsControllerInstalled'),
      userId: string(name='UserId'),
      regionId: string(name='RegionId'),
      pluginsJsonArray: string(name='PluginsJsonArray'),
      stateJson: string(name='StateJson'),
      nodeNum: integer(name='NodeNum'),
      createTime: long(name='CreateTime'),
      updateTime: long(name='UpdateTime'),
      lastHeartBeatTime: long(name='LastHeartBeatTime'),
      installTime: long(name='InstallTime'),
      extra: string(name='Extra'),
      options: string(name='Options'),
    }
  ](name='PromClusterList'),
}

async function listClusterFromGrafanaWithOptions(request: ListClusterFromGrafanaRequest, runtime: Util.RuntimeOptions): ListClusterFromGrafanaResponse {
  Util.validateModel(request);
  return doRequest('ListClusterFromGrafana', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function listClusterFromGrafana(request: ListClusterFromGrafanaRequest): ListClusterFromGrafanaResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterFromGrafanaWithOptions(request, runtime);
}

model SearchTracesRequest = {
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  regionId: string(name='RegionId'),
  serviceName?: string(name='ServiceName'),
  operationName?: string(name='OperationName'),
  minDuration?: long(name='MinDuration'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  reverse?: boolean(name='Reverse'),
  serviceIp?: string(name='ServiceIp'),
  exclusionFilters?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='ExclusionFilters'),
}

model SearchTracesResponse = {
  requestId: string(name='RequestId'),
  traceInfos: [
    {
      traceID: string(name='TraceID'),
      operationName: string(name='OperationName'),
      serviceName: string(name='ServiceName'),
      serviceIp: string(name='ServiceIp'),
      duration: long(name='Duration'),
      timestamp: long(name='Timestamp'),
    }
  ](name='TraceInfos'),
}

async function searchTracesWithOptions(request: SearchTracesRequest, runtime: Util.RuntimeOptions): SearchTracesResponse {
  Util.validateModel(request);
  return doRequest('SearchTraces', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function searchTraces(request: SearchTracesRequest): SearchTracesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTracesWithOptions(request, runtime);
}

model GetPrometheusApiTokenRequest = {
  regionId: string(name='RegionId'),
}

model GetPrometheusApiTokenResponse = {
  requestId: string(name='RequestId'),
  token: string(name='Token'),
}

async function getPrometheusApiTokenWithOptions(request: GetPrometheusApiTokenRequest, runtime: Util.RuntimeOptions): GetPrometheusApiTokenResponse {
  Util.validateModel(request);
  return doRequest('GetPrometheusApiToken', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function getPrometheusApiToken(request: GetPrometheusApiTokenRequest): GetPrometheusApiTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPrometheusApiTokenWithOptions(request, runtime);
}

model SetRetcodeShareStatusRequest = {
  pid: string(name='Pid'),
  status: boolean(name='Status'),
}

model SetRetcodeShareStatusResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
}

async function setRetcodeShareStatusWithOptions(request: SetRetcodeShareStatusRequest, runtime: Util.RuntimeOptions): SetRetcodeShareStatusResponse {
  Util.validateModel(request);
  return doRequest('SetRetcodeShareStatus', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function setRetcodeShareStatus(request: SetRetcodeShareStatusRequest): SetRetcodeShareStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setRetcodeShareStatusWithOptions(request, runtime);
}

model GetRetcodeShareUrlRequest = {
  pid: string(name='Pid'),
}

model GetRetcodeShareUrlResponse = {
  requestId: string(name='RequestId'),
  url: string(name='Url'),
}

async function getRetcodeShareUrlWithOptions(request: GetRetcodeShareUrlRequest, runtime: Util.RuntimeOptions): GetRetcodeShareUrlResponse {
  Util.validateModel(request);
  return doRequest('GetRetcodeShareUrl', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function getRetcodeShareUrl(request: GetRetcodeShareUrlRequest): GetRetcodeShareUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRetcodeShareUrlWithOptions(request, runtime);
}

model ListPromClustersRequest = {
  regionId: string(name='RegionId'),
}

model ListPromClustersResponse = {
  requestId: string(name='RequestId'),
  promClusterList: [
    {
      id: long(name='Id'),
      clusterId: string(name='ClusterId'),
      clusterName: string(name='ClusterName'),
      agentStatus: string(name='AgentStatus'),
      clusterType: string(name='ClusterType'),
      controllerId: string(name='ControllerId'),
      isControllerInstalled: boolean(name='IsControllerInstalled'),
      userId: string(name='UserId'),
      regionId: string(name='RegionId'),
      pluginsJsonArray: string(name='PluginsJsonArray'),
      stateJson: string(name='StateJson'),
      nodeNum: integer(name='NodeNum'),
      createTime: long(name='CreateTime'),
      updateTime: long(name='UpdateTime'),
      lastHeartBeatTime: long(name='LastHeartBeatTime'),
      installTime: long(name='InstallTime'),
      extra: string(name='Extra'),
      options: string(name='Options'),
    }
  ](name='PromClusterList'),
}

async function listPromClustersWithOptions(request: ListPromClustersRequest, runtime: Util.RuntimeOptions): ListPromClustersResponse {
  Util.validateModel(request);
  return doRequest('ListPromClusters', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function listPromClusters(request: ListPromClustersRequest): ListPromClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPromClustersWithOptions(request, runtime);
}

model UpdateAlertRuleRequest = {
  regionId: string(name='RegionId'),
  contactGroupIds?: string(name='ContactGroupIds'),
  isAutoStart?: boolean(name='IsAutoStart'),
  templageAlertConfig: string(name='TemplageAlertConfig'),
  alertId: long(name='AlertId'),
}

model UpdateAlertRuleResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
  alertId: long(name='AlertId'),
}

async function updateAlertRuleWithOptions(request: UpdateAlertRuleRequest, runtime: Util.RuntimeOptions): UpdateAlertRuleResponse {
  Util.validateModel(request);
  return doRequest('UpdateAlertRule', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function updateAlertRule(request: UpdateAlertRuleRequest): UpdateAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAlertRuleWithOptions(request, runtime);
}

model StartAlertRequest = {
  alertId: string(name='AlertId'),
  regionId: string(name='RegionId'),
}

model StartAlertResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
}

async function startAlertWithOptions(request: StartAlertRequest, runtime: Util.RuntimeOptions): StartAlertResponse {
  Util.validateModel(request);
  return doRequest('StartAlert', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function startAlert(request: StartAlertRequest): StartAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return startAlertWithOptions(request, runtime);
}

model StopAlertRequest = {
  alertId: string(name='AlertId'),
  regionId: string(name='RegionId'),
}

model StopAlertResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
}

async function stopAlertWithOptions(request: StopAlertRequest, runtime: Util.RuntimeOptions): StopAlertResponse {
  Util.validateModel(request);
  return doRequest('StopAlert', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function stopAlert(request: StopAlertRequest): StopAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopAlertWithOptions(request, runtime);
}

model SearchEventsRequest = {
  alertId?: long(name='AlertId'),
  pid?: string(name='Pid'),
  currentPage?: integer(name='CurrentPage'),
  pageSize?: integer(name='PageSize'),
  regionId: string(name='RegionId'),
  appType?: string(name='AppType'),
  alertType?: integer(name='AlertType'),
  isTrigger?: integer(name='IsTrigger'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model SearchEventsResponse = {
  requestId: string(name='RequestId'),
  isTrigger: integer(name='IsTrigger'),
  pageBean: {
    totalCount: integer(name='TotalCount'),
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    event: [
      {
        id: long(name='Id'),
        eventTime: long(name='EventTime'),
        alertType: integer(name='AlertType'),
        eventLevel: integer(name='EventLevel'),
        message: string(name='Message'),
        alertId: long(name='AlertId'),
        alertName: string(name='AlertName'),
        alertRule: string(name='AlertRule'),
        links: [ string ](name='Links'),
      }
    ](name='Event'),
  }(name='PageBean'),
}

async function searchEventsWithOptions(request: SearchEventsRequest, runtime: Util.RuntimeOptions): SearchEventsResponse {
  Util.validateModel(request);
  return doRequest('SearchEvents', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function searchEvents(request: SearchEventsRequest): SearchEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchEventsWithOptions(request, runtime);
}

model SearchAlertHistoriesRequest = {
  alertId?: long(name='AlertId'),
  alertType?: integer(name='AlertType'),
  currentPage?: integer(name='CurrentPage'),
  pageSize?: integer(name='PageSize'),
  regionId: string(name='RegionId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model SearchAlertHistoriesResponse = {
  requestId: string(name='RequestId'),
  pageBean: {
    totalCount: integer(name='TotalCount'),
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    alarmHistories: [
      {
        id: long(name='Id'),
        strategyId: string(name='StrategyId'),
        userId: string(name='UserId'),
        target: string(name='Target'),
        phones: string(name='Phones'),
        emails: string(name='Emails'),
        alarmTime: long(name='AlarmTime'),
        alarmType: integer(name='AlarmType'),
        alarmResponseCode: integer(name='AlarmResponseCode'),
        alarmContent: string(name='AlarmContent'),
        alarmSources: string(name='AlarmSources'),
      }
    ](name='AlarmHistories'),
  }(name='PageBean'),
}

async function searchAlertHistoriesWithOptions(request: SearchAlertHistoriesRequest, runtime: Util.RuntimeOptions): SearchAlertHistoriesResponse {
  Util.validateModel(request);
  return doRequest('SearchAlertHistories', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function searchAlertHistories(request: SearchAlertHistoriesRequest): SearchAlertHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchAlertHistoriesWithOptions(request, runtime);
}

model UpdateAlertContactRequest = {
  contactName?: string(name='ContactName'),
  phoneNum?: string(name='PhoneNum'),
  email?: string(name='Email'),
  dingRobotWebhookUrl?: string(name='DingRobotWebhookUrl'),
  systemNoc?: boolean(name='SystemNoc'),
  regionId: string(name='RegionId'),
  contactId: long(name='ContactId'),
}

model UpdateAlertContactResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
}

async function updateAlertContactWithOptions(request: UpdateAlertContactRequest, runtime: Util.RuntimeOptions): UpdateAlertContactResponse {
  Util.validateModel(request);
  return doRequest('UpdateAlertContact', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function updateAlertContact(request: UpdateAlertContactRequest): UpdateAlertContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAlertContactWithOptions(request, runtime);
}

model DeleteAlertContactGroupRequest = {
  regionId: string(name='RegionId'),
  contactGroupId: long(name='ContactGroupId'),
}

model DeleteAlertContactGroupResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
}

async function deleteAlertContactGroupWithOptions(request: DeleteAlertContactGroupRequest, runtime: Util.RuntimeOptions): DeleteAlertContactGroupResponse {
  Util.validateModel(request);
  return doRequest('DeleteAlertContactGroup', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function deleteAlertContactGroup(request: DeleteAlertContactGroupRequest): DeleteAlertContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlertContactGroupWithOptions(request, runtime);
}

model DeleteAlertContactRequest = {
  regionId: string(name='RegionId'),
  contactId: long(name='ContactId'),
}

model DeleteAlertContactResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
}

async function deleteAlertContactWithOptions(request: DeleteAlertContactRequest, runtime: Util.RuntimeOptions): DeleteAlertContactResponse {
  Util.validateModel(request);
  return doRequest('DeleteAlertContact', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function deleteAlertContact(request: DeleteAlertContactRequest): DeleteAlertContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlertContactWithOptions(request, runtime);
}

model UpdateAlertContactGroupRequest = {
  contactGroupName: string(name='ContactGroupName'),
  contactIds?: string(name='ContactIds'),
  regionId: string(name='RegionId'),
  contactGroupId: long(name='ContactGroupId'),
}

model UpdateAlertContactGroupResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
}

async function updateAlertContactGroupWithOptions(request: UpdateAlertContactGroupRequest, runtime: Util.RuntimeOptions): UpdateAlertContactGroupResponse {
  Util.validateModel(request);
  return doRequest('UpdateAlertContactGroup', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function updateAlertContactGroup(request: UpdateAlertContactGroupRequest): UpdateAlertContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAlertContactGroupWithOptions(request, runtime);
}

model ImportCustomAlertRulesRequest = {
  regionId: string(name='RegionId'),
  contactGroupIds?: string(name='ContactGroupIds'),
  isAutoStart?: boolean(name='IsAutoStart'),
  templateAlertConfig: string(name='TemplateAlertConfig'),
}

model ImportCustomAlertRulesResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function importCustomAlertRulesWithOptions(request: ImportCustomAlertRulesRequest, runtime: Util.RuntimeOptions): ImportCustomAlertRulesResponse {
  Util.validateModel(request);
  return doRequest('ImportCustomAlertRules', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function importCustomAlertRules(request: ImportCustomAlertRulesRequest): ImportCustomAlertRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return importCustomAlertRulesWithOptions(request, runtime);
}

model SearchAlertRulesRequest = {
  title?: string(name='Title'),
  type?: string(name='Type'),
  currentPage?: integer(name='CurrentPage'),
  pageSize?: integer(name='PageSize'),
  regionId: string(name='RegionId'),
  pid?: string(name='Pid'),
  appType?: string(name='AppType'),
}

model SearchAlertRulesResponse = {
  requestId: string(name='RequestId'),
  pageBean: {
    totalCount: integer(name='TotalCount'),
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    alertRules: [
      {
        alertTitle: string(name='AlertTitle'),
        alertLevel: string(name='AlertLevel'),
        alertType: integer(name='AlertType'),
        alertVersion: integer(name='AlertVersion'),
        config: string(name='Config'),
        contactGroupIdList: string(name='ContactGroupIdList'),
        createTime: long(name='CreateTime'),
        id: long(name='Id'),
        regionId: string(name='RegionId'),
        status: string(name='Status'),
        taskId: long(name='TaskId'),
        taskStatus: string(name='TaskStatus'),
        updateTime: long(name='UpdateTime'),
        userId: string(name='UserId'),
        title: string(name='Title'),
        contactGroupIds: string(name='ContactGroupIds'),
        alarmContext: {
          alarmContentTemplate: string(name='AlarmContentTemplate'),
          alarmContentSubTitle: string(name='AlarmContentSubTitle'),
          content: string(name='Content'),
          subTitle: string(name='SubTitle'),
        }(name='AlarmContext'),
        alertRule: {
          operator: string(name='Operator'),
          rules: [
            {
              aggregates: string(name='Aggregates'),
              alias: string(name='Alias'),
              measure: string(name='Measure'),
              NValue: integer(name='NValue'),
              operator: string(name='Operator'),
              value: float(name='Value'),
            }
          ](name='Rules'),
        }(name='AlertRule'),
        metricParam: {
          appGroupId: string(name='AppGroupId'),
          appId: string(name='AppId'),
          pid: string(name='Pid'),
          type: string(name='Type'),
          dimensions: [
            {
              key: string(name='Key'),
              type: string(name='Type'),
              value: string(name='Value'),
            }
          ](name='Dimensions'),
        }(name='MetricParam'),
        notice: {
          endTime: long(name='EndTime'),
          noticeEndTime: long(name='NoticeEndTime'),
          noticeStartTime: long(name='NoticeStartTime'),
          startTime: long(name='StartTime'),
        }(name='Notice'),
        alertWays: [ string ](name='AlertWays'),
        alertWay: [ string ](name='AlertWay'),
      }
    ](name='AlertRules'),
  }(name='PageBean'),
}

async function searchAlertRulesWithOptions(request: SearchAlertRulesRequest, runtime: Util.RuntimeOptions): SearchAlertRulesResponse {
  Util.validateModel(request);
  return doRequest('SearchAlertRules', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function searchAlertRules(request: SearchAlertRulesRequest): SearchAlertRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchAlertRulesWithOptions(request, runtime);
}

model DeleteAlertRulesRequest = {
  alertIds: string(name='AlertIds'),
  regionId: string(name='RegionId'),
}

model DeleteAlertRulesResponse = {
  requestId: string(name='RequestId'),
  isSuccess: boolean(name='IsSuccess'),
}

async function deleteAlertRulesWithOptions(request: DeleteAlertRulesRequest, runtime: Util.RuntimeOptions): DeleteAlertRulesResponse {
  Util.validateModel(request);
  return doRequest('DeleteAlertRules', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function deleteAlertRules(request: DeleteAlertRulesRequest): DeleteAlertRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlertRulesWithOptions(request, runtime);
}

model CreateRetcodeAppRequest = {
  retcodeAppName: string(name='RetcodeAppName'),
  retcodeAppType: string(name='RetcodeAppType'),
  regionId: string(name='RegionId'),
}

model CreateRetcodeAppResponse = {
  requestId: string(name='RequestId'),
  retcodeAppDataBean: {
    appId: long(name='AppId'),
    pid: string(name='Pid'),
  }(name='RetcodeAppDataBean'),
}

async function createRetcodeAppWithOptions(request: CreateRetcodeAppRequest, runtime: Util.RuntimeOptions): CreateRetcodeAppResponse {
  Util.validateModel(request);
  return doRequest('CreateRetcodeApp', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function createRetcodeApp(request: CreateRetcodeAppRequest): CreateRetcodeAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRetcodeAppWithOptions(request, runtime);
}

model DeleteRetcodeAppRequest = {
  appId: string(name='AppId'),
  regionId: string(name='RegionId'),
}

model DeleteRetcodeAppResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function deleteRetcodeAppWithOptions(request: DeleteRetcodeAppRequest, runtime: Util.RuntimeOptions): DeleteRetcodeAppResponse {
  Util.validateModel(request);
  return doRequest('DeleteRetcodeApp', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function deleteRetcodeApp(request: DeleteRetcodeAppRequest): DeleteRetcodeAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRetcodeAppWithOptions(request, runtime);
}

model QueryDatasetRequest = {
  datasetId: long(name='DatasetId'),
  intervalInSec: integer(name='IntervalInSec'),
  dateStr?: string(name='DateStr'),
  minTime: long(name='MinTime'),
  maxTime: long(name='MaxTime'),
  isDrillDown?: boolean(name='IsDrillDown'),
  orderByKey?: string(name='OrderByKey'),
  limit?: integer(name='Limit'),
  reduceTail?: boolean(name='ReduceTail'),
  hungryMode?: boolean(name='HungryMode'),
  measures?: [ string ](name='Measures'),
  dimensions?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
      type?: string(name='Type'),
    }
  ](name='Dimensions'),
  requiredDims?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
      type?: string(name='Type'),
    }
  ](name='RequiredDims'),
  optionalDims?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
      type?: string(name='Type'),
    }
  ](name='OptionalDims'),
  proxyUserId?: string(name='ProxyUserId'),
}

model QueryDatasetResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function queryDatasetWithOptions(request: QueryDatasetRequest, runtime: Util.RuntimeOptions): QueryDatasetResponse {
  Util.validateModel(request);
  return doRequest('QueryDataset', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function queryDataset(request: QueryDatasetRequest): QueryDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDatasetWithOptions(request, runtime);
}

model QueryMetricRequest = {
  intervalInSec?: integer(name='IntervalInSec'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  orderBy?: string(name='OrderBy'),
  limit?: integer(name='Limit'),
  filters?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filters'),
  dimensions?: [ string ](name='Dimensions'),
  metric: string(name='Metric'),
  measures: [ string ](name='Measures'),
  order?: string(name='Order'),
  proxyUserId?: string(name='ProxyUserId'),
  consistencyDataKey?: string(name='ConsistencyDataKey'),
  consistencyQueryStrategy?: string(name='ConsistencyQueryStrategy'),
}

model QueryMetricResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function queryMetricWithOptions(request: QueryMetricRequest, runtime: Util.RuntimeOptions): QueryMetricResponse {
  Util.validateModel(request);
  return doRequest('QueryMetric', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function queryMetric(request: QueryMetricRequest): QueryMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMetricWithOptions(request, runtime);
}

model CreateAlertContactRequest = {
  contactName?: string(name='ContactName'),
  phoneNum?: string(name='PhoneNum'),
  email?: string(name='Email'),
  dingRobotWebhookUrl?: string(name='DingRobotWebhookUrl'),
  systemNoc?: boolean(name='SystemNoc'),
  regionId: string(name='RegionId'),
}

model CreateAlertContactResponse = {
  requestId: string(name='RequestId'),
  contactId: string(name='ContactId'),
}

async function createAlertContactWithOptions(request: CreateAlertContactRequest, runtime: Util.RuntimeOptions): CreateAlertContactResponse {
  Util.validateModel(request);
  return doRequest('CreateAlertContact', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function createAlertContact(request: CreateAlertContactRequest): CreateAlertContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAlertContactWithOptions(request, runtime);
}

model CreateAlertContactGroupRequest = {
  contactGroupName: string(name='ContactGroupName'),
  contactIds?: string(name='ContactIds'),
  regionId: string(name='RegionId'),
}

model CreateAlertContactGroupResponse = {
  requestId: string(name='RequestId'),
  contactGroupId: string(name='ContactGroupId'),
}

async function createAlertContactGroupWithOptions(request: CreateAlertContactGroupRequest, runtime: Util.RuntimeOptions): CreateAlertContactGroupResponse {
  Util.validateModel(request);
  return doRequest('CreateAlertContactGroup', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function createAlertContactGroup(request: CreateAlertContactGroupRequest): CreateAlertContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAlertContactGroupWithOptions(request, runtime);
}

model SearchAlertContactRequest = {
  contactName?: string(name='ContactName'),
  phone?: string(name='Phone'),
  email?: string(name='Email'),
  currentPage?: string(name='CurrentPage'),
  pageSize?: string(name='PageSize'),
  regionId: string(name='RegionId'),
}

model SearchAlertContactResponse = {
  requestId: string(name='RequestId'),
  pageBean: {
    totalCount: integer(name='TotalCount'),
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    contacts: [
      {
        contactId: long(name='ContactId'),
        contactName: string(name='ContactName'),
        phone: string(name='Phone'),
        email: string(name='Email'),
        userId: string(name='UserId'),
        dingRobot: string(name='DingRobot'),
        createTime: long(name='CreateTime'),
        updateTime: long(name='UpdateTime'),
        systemNoc: boolean(name='SystemNoc'),
      }
    ](name='Contacts'),
  }(name='PageBean'),
}

async function searchAlertContactWithOptions(request: SearchAlertContactRequest, runtime: Util.RuntimeOptions): SearchAlertContactResponse {
  Util.validateModel(request);
  return doRequest('SearchAlertContact', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function searchAlertContact(request: SearchAlertContactRequest): SearchAlertContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchAlertContactWithOptions(request, runtime);
}

model SearchAlertContactGroupRequest = {
  contactGroupName?: string(name='ContactGroupName'),
  regionId: string(name='RegionId'),
  contactName?: string(name='ContactName'),
  contactId?: long(name='ContactId'),
}

model SearchAlertContactGroupResponse = {
  requestId: string(name='RequestId'),
  contactGroups: [
    {
      contactGroupId: long(name='ContactGroupId'),
      contactGroupName: string(name='ContactGroupName'),
      userId: string(name='UserId'),
      createTime: long(name='CreateTime'),
      updateTime: long(name='UpdateTime'),
      contacts: [
        {
          contactId: long(name='ContactId'),
          contactName: string(name='ContactName'),
          phone: string(name='Phone'),
          email: string(name='Email'),
          userId: string(name='UserId'),
          dingRobot: string(name='DingRobot'),
          createTime: long(name='CreateTime'),
          updateTime: long(name='UpdateTime'),
          systemNoc: boolean(name='SystemNoc'),
        }
      ](name='Contacts'),
    }
  ](name='ContactGroups'),
}

async function searchAlertContactGroupWithOptions(request: SearchAlertContactGroupRequest, runtime: Util.RuntimeOptions): SearchAlertContactGroupResponse {
  Util.validateModel(request);
  return doRequest('SearchAlertContactGroup', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function searchAlertContactGroup(request: SearchAlertContactGroupRequest): SearchAlertContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchAlertContactGroupWithOptions(request, runtime);
}

model ImportAppAlertRulesRequest = {
  templateAlertId?: string(name='TemplateAlertId'),
  pids: string(name='Pids'),
  regionId: string(name='RegionId'),
  contactGroupIds?: string(name='ContactGroupIds'),
  isAutoStart?: boolean(name='IsAutoStart'),
  templageAlertConfig?: string(name='TemplageAlertConfig'),
}

model ImportAppAlertRulesResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function importAppAlertRulesWithOptions(request: ImportAppAlertRulesRequest, runtime: Util.RuntimeOptions): ImportAppAlertRulesResponse {
  Util.validateModel(request);
  return doRequest('ImportAppAlertRules', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function importAppAlertRules(request: ImportAppAlertRulesRequest): ImportAppAlertRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return importAppAlertRulesWithOptions(request, runtime);
}

model SearchRetcodeAppByPageRequest = {
  retcodeAppName?: string(name='RetcodeAppName'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
  regionId: string(name='RegionId'),
}

model SearchRetcodeAppByPageResponse = {
  requestId: string(name='RequestId'),
  pageBean: {
    totalCount: integer(name='TotalCount'),
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    retcodeApps: [
      {
        appId: long(name='AppId'),
        pid: string(name='Pid'),
        appName: string(name='AppName'),
        type: string(name='Type'),
        userId: string(name='UserId'),
        regionId: string(name='RegionId'),
        createTime: long(name='CreateTime'),
        updateTime: long(name='UpdateTime'),
      }
    ](name='RetcodeApps'),
  }(name='PageBean'),
}

async function searchRetcodeAppByPageWithOptions(request: SearchRetcodeAppByPageRequest, runtime: Util.RuntimeOptions): SearchRetcodeAppByPageResponse {
  Util.validateModel(request);
  return doRequest('SearchRetcodeAppByPage', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function searchRetcodeAppByPage(request: SearchRetcodeAppByPageRequest): SearchRetcodeAppByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchRetcodeAppByPageWithOptions(request, runtime);
}

model SearchTraceAppByNameRequest = {
  traceAppName?: string(name='TraceAppName'),
  regionId: string(name='RegionId'),
}

model SearchTraceAppByNameResponse = {
  requestId: string(name='RequestId'),
  traceApps: [
    {
      appId: long(name='AppId'),
      pid: string(name='Pid'),
      appName: string(name='AppName'),
      type: string(name='Type'),
      userId: string(name='UserId'),
      regionId: string(name='RegionId'),
      createTime: long(name='CreateTime'),
      updateTime: long(name='UpdateTime'),
      show: boolean(name='Show'),
      labels: [ string ](name='Labels'),
    }
  ](name='TraceApps'),
}

async function searchTraceAppByNameWithOptions(request: SearchTraceAppByNameRequest, runtime: Util.RuntimeOptions): SearchTraceAppByNameResponse {
  Util.validateModel(request);
  return doRequest('SearchTraceAppByName', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function searchTraceAppByName(request: SearchTraceAppByNameRequest): SearchTraceAppByNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTraceAppByNameWithOptions(request, runtime);
}

model SearchTraceAppByPageRequest = {
  traceAppName?: string(name='TraceAppName'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
  regionId: string(name='RegionId'),
}

model SearchTraceAppByPageResponse = {
  requestId: string(name='RequestId'),
  pageBean: {
    totalCount: integer(name='TotalCount'),
    pageNumber: integer(name='PageNumber'),
    pageSize: integer(name='PageSize'),
    traceApps: [
      {
        appId: long(name='AppId'),
        pid: string(name='Pid'),
        appName: string(name='AppName'),
        type: string(name='Type'),
        userId: string(name='UserId'),
        regionId: string(name='RegionId'),
        createTime: long(name='CreateTime'),
        updateTime: long(name='UpdateTime'),
        show: boolean(name='Show'),
        labels: [ string ](name='Labels'),
      }
    ](name='TraceApps'),
  }(name='PageBean'),
}

async function searchTraceAppByPageWithOptions(request: SearchTraceAppByPageRequest, runtime: Util.RuntimeOptions): SearchTraceAppByPageResponse {
  Util.validateModel(request);
  return doRequest('SearchTraceAppByPage', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function searchTraceAppByPage(request: SearchTraceAppByPageRequest): SearchTraceAppByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTraceAppByPageWithOptions(request, runtime);
}

model ListRetcodeAppsRequest = {
  securityToken?: string(name='SecurityToken'),
  regionId: string(name='RegionId'),
}

model ListRetcodeAppsResponse = {
  requestId: string(name='RequestId'),
  retcodeApps: [
    {
      appId: long(name='AppId'),
      pid: string(name='Pid'),
      appName: string(name='AppName'),
    }
  ](name='RetcodeApps'),
}

async function listRetcodeAppsWithOptions(request: ListRetcodeAppsRequest, runtime: Util.RuntimeOptions): ListRetcodeAppsResponse {
  Util.validateModel(request);
  return doRequest('ListRetcodeApps', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function listRetcodeApps(request: ListRetcodeAppsRequest): ListRetcodeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRetcodeAppsWithOptions(request, runtime);
}

model ListTraceAppsRequest = {
  regionId: string(name='RegionId'),
}

model ListTraceAppsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  code: integer(name='Code'),
  message: string(name='Message'),
  traceApps: [
    {
      appId: long(name='AppId'),
      pid: string(name='Pid'),
      appName: string(name='AppName'),
      type: string(name='Type'),
      userId: string(name='UserId'),
      createTime: long(name='CreateTime'),
      updateTime: long(name='UpdateTime'),
      regionId: string(name='RegionId'),
      show: boolean(name='Show'),
      labels: [ string ](name='Labels'),
    }
  ](name='TraceApps'),
}

async function listTraceAppsWithOptions(request: ListTraceAppsRequest, runtime: Util.RuntimeOptions): ListTraceAppsResponse {
  Util.validateModel(request);
  return doRequest('ListTraceApps', 'HTTPS', 'POST', '2019-08-08', 'AK', null, request, runtime);
}

async function listTraceApps(request: ListTraceAppsRequest): ListTraceAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTraceAppsWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
