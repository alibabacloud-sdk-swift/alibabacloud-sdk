import Util;
import RPCUtil;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-northeast-2-pop = 'drds.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'drds.ap-southeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'drds.aliyuncs.com',
    cn-beijing-finance-pop = 'drds.aliyuncs.com',
    cn-beijing-gov-1 = 'drds.aliyuncs.com',
    cn-beijing-nu16-b01 = 'drds.aliyuncs.com',
    cn-chengdu = 'drds.aliyuncs.com',
    cn-edge-1 = 'drds.aliyuncs.com',
    cn-fujian = 'drds.aliyuncs.com',
    cn-haidian-cm12-c01 = 'drds.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'drds.aliyuncs.com',
    cn-hangzhou-finance = 'drds.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'drds.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'drds.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'drds.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'drds.aliyuncs.com',
    cn-hangzhou-test-306 = 'drds.aliyuncs.com',
    cn-hongkong-finance-pop = 'drds.aliyuncs.com',
    cn-qingdao-nebula = 'drds.aliyuncs.com',
    cn-shanghai-et15-b01 = 'drds.aliyuncs.com',
    cn-shanghai-et2-b01 = 'drds.aliyuncs.com',
    cn-shanghai-inner = 'drds.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'drds.aliyuncs.com',
    cn-shenzhen-inner = 'drds.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'drds.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'drds.aliyuncs.com',
    cn-wuhan = 'drds.aliyuncs.com',
    cn-yushanfang = 'drds.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'drds.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'drds.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'drds.aliyuncs.com',
    eu-central-1 = 'drds.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'drds.ap-southeast-1.aliyuncs.com',
    eu-west-1-oxs = 'drds.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'drds.ap-southeast-1.aliyuncs.com',
    rus-west-1-pop = 'drds.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'drds.ap-southeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('drds', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model UpdateResourceGroupAttributeRequest = {
  regionId: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  newResourceGroupId: string(name='NewResourceGroupId'),
}

model UpdateResourceGroupAttributeResponse = {
  requestId: string(name='RequestId'),
}

async function updateResourceGroupAttributeWithOptions(request: UpdateResourceGroupAttributeRequest, runtime: Util.RuntimeOptions): UpdateResourceGroupAttributeResponse {
  Util.validateModel(request);
  return doRequest('UpdateResourceGroupAttribute', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function updateResourceGroupAttribute(request: UpdateResourceGroupAttributeRequest): UpdateResourceGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateResourceGroupAttributeWithOptions(request, runtime);
}

model DescribeCustomDataExportSrcDstTablesRequest = {
  exportParam?: map[string]any(name='ExportParam'),
}

model DescribeCustomDataExportSrcDstTablesShrinkRequest = {
  exportParamShrink?: string(name='ExportParam'),
}

model DescribeCustomDataExportSrcDstTablesResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  dataExportSrcDstTables: {
    srcTables: {
      srcTables: [ string ](name='SrcTables', description='SrcTables'),
    }(name='SrcTables'),
    dstTables: {
      dstTables: [ string ](name='DstTables', description='DstTables'),
    }(name='DstTables'),
  }(name='DataExportSrcDstTables'),
}

async function describeCustomDataExportSrcDstTablesWithOptions(tmp: DescribeCustomDataExportSrcDstTablesRequest, runtime: Util.RuntimeOptions): DescribeCustomDataExportSrcDstTablesResponse {
  Util.validateModel(tmp);
  var request = new DescribeCustomDataExportSrcDstTablesShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.exportParam)) {
    request.exportParamShrink = Util.toJSONString(tmp.exportParam);
  }

  return doRequest('DescribeCustomDataExportSrcDstTables', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeCustomDataExportSrcDstTables(request: DescribeCustomDataExportSrcDstTablesRequest): DescribeCustomDataExportSrcDstTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomDataExportSrcDstTablesWithOptions(request, runtime);
}

model DescribeDataExportPreCheckResultRequest = {
  taskId: long(name='TaskId'),
}

model DescribeDataExportPreCheckResultResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  preCheckResult: {
    preCheckName: string(name='PreCheckName'),
    state: string(name='State'),
    subCheckItems: {
      subCheckItems: [
        {
          preCheckItemName: string(name='PreCheckItemName'),
          state: string(name='State'),
          errorMsgCode: string(name='ErrorMsgCode'),
          errorMsgParams: {
            errorMsgParams: [ string ](name='ErrorMsgParams', description='ErrorMsgParams'),
          }(name='ErrorMsgParams'),
        }
      ](name='SubCheckItems'),
    }(name='SubCheckItems'),
  }(name='PreCheckResult'),
}

async function describeDataExportPreCheckResultWithOptions(request: DescribeDataExportPreCheckResultRequest, runtime: Util.RuntimeOptions): DescribeDataExportPreCheckResultResponse {
  Util.validateModel(request);
  return doRequest('DescribeDataExportPreCheckResult', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDataExportPreCheckResult(request: DescribeDataExportPreCheckResultRequest): DescribeDataExportPreCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataExportPreCheckResultWithOptions(request, runtime);
}

model DescribeDataExportTasksRequest = {
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeDataExportTasksResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  total: integer(name='Total'),
  data: {
    dataExportTask: [
      {
        id: integer(name='Id'),
        taskName: string(name='TaskName'),
        gmtCreate: string(name='GmtCreate'),
        gmtModified: string(name='GmtModified'),
        type: integer(name='Type'),
        status: string(name='Status'),
        stage: string(name='Stage'),
        srcInstId: string(name='SrcInstId'),
        srcDbName: string(name='SrcDbName'),
        dstInstId: string(name='DstInstId'),
        dstDbName: string(name='DstDbName'),
        evaluateTaskId: integer(name='EvaluateTaskId'),
        batchEvaluateTaskId: integer(name='BatchEvaluateTaskId'),
        createDbProgress: integer(name='CreateDbProgress'),
        createTablesProgress: integer(name='CreateTablesProgress'),
        progress: integer(name='Progress'),
        jingweiProgress: {
          fullRunning: boolean(name='FullRunning'),
          incrementRunning: boolean(name='IncrementRunning'),
          full: {
            progress: integer(name='Progress'),
            tps: integer(name='Tps'),
            needTime: integer(name='NeedTime'),
            transferCount: integer(name='TransferCount'),
          }(name='Full'),
          increment: {
            delay: integer(name='Delay'),
            tps: integer(name='Tps'),
            transferCount: integer(name='TransferCount'),
          }(name='Increment'),
        }(name='JingweiProgress'),
      }
    ](name='DataExportTask'),
  }(name='Data'),
}

async function describeDataExportTasksWithOptions(request: DescribeDataExportTasksRequest, runtime: Util.RuntimeOptions): DescribeDataExportTasksResponse {
  Util.validateModel(request);
  return doRequest('DescribeDataExportTasks', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDataExportTasks(request: DescribeDataExportTasksRequest): DescribeDataExportTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataExportTasksWithOptions(request, runtime);
}

model DescribeDataExportTaskReportRequest = {
  taskId: long(name='TaskId'),
}

model DescribeDataExportTaskReportResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: string(name='Data'),
}

async function describeDataExportTaskReportWithOptions(request: DescribeDataExportTaskReportRequest, runtime: Util.RuntimeOptions): DescribeDataExportTaskReportResponse {
  Util.validateModel(request);
  return doRequest('DescribeDataExportTaskReport', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDataExportTaskReport(request: DescribeDataExportTaskReportRequest): DescribeDataExportTaskReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataExportTaskReportWithOptions(request, runtime);
}

model StopDataExportTaskRequest = {
  taskId: integer(name='TaskId'),
}

model StopDataExportTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskManageResult: {
    success: boolean(name='Success'),
    message: string(name='Message'),
  }(name='TaskManageResult'),
}

async function stopDataExportTaskWithOptions(request: StopDataExportTaskRequest, runtime: Util.RuntimeOptions): StopDataExportTaskResponse {
  Util.validateModel(request);
  return doRequest('StopDataExportTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function stopDataExportTask(request: StopDataExportTaskRequest): StopDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDataExportTaskWithOptions(request, runtime);
}

model CreateCustomDataExportTaskRequest = {
  exportParam?: map[string]any(name='ExportParam'),
}

model CreateCustomDataExportTaskShrinkRequest = {
  exportParamShrink?: string(name='ExportParam'),
}

model CreateCustomDataExportTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskId: long(name='TaskId'),
}

async function createCustomDataExportTaskWithOptions(tmp: CreateCustomDataExportTaskRequest, runtime: Util.RuntimeOptions): CreateCustomDataExportTaskResponse {
  Util.validateModel(tmp);
  var request = new CreateCustomDataExportTaskShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.exportParam)) {
    request.exportParamShrink = Util.toJSONString(tmp.exportParam);
  }

  return doRequest('CreateCustomDataExportTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createCustomDataExportTask(request: CreateCustomDataExportTaskRequest): CreateCustomDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomDataExportTaskWithOptions(request, runtime);
}

model RemoveDataExportTaskRequest = {
  taskId: integer(name='TaskId'),
}

model RemoveDataExportTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskManageResult: {
    success: boolean(name='Success'),
    message: string(name='Message'),
  }(name='TaskManageResult'),
}

async function removeDataExportTaskWithOptions(request: RemoveDataExportTaskRequest, runtime: Util.RuntimeOptions): RemoveDataExportTaskResponse {
  Util.validateModel(request);
  return doRequest('RemoveDataExportTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function removeDataExportTask(request: RemoveDataExportTaskRequest): RemoveDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDataExportTaskWithOptions(request, runtime);
}

model CreateCustomDataExportPreCheckTaskRequest = {
  exportParam?: map[string]any(name='ExportParam'),
}

model CreateCustomDataExportPreCheckTaskShrinkRequest = {
  exportParamShrink?: string(name='ExportParam'),
}

model CreateCustomDataExportPreCheckTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskId: long(name='TaskId'),
}

async function createCustomDataExportPreCheckTaskWithOptions(tmp: CreateCustomDataExportPreCheckTaskRequest, runtime: Util.RuntimeOptions): CreateCustomDataExportPreCheckTaskResponse {
  Util.validateModel(tmp);
  var request = new CreateCustomDataExportPreCheckTaskShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.exportParam)) {
    request.exportParamShrink = Util.toJSONString(tmp.exportParam);
  }

  return doRequest('CreateCustomDataExportPreCheckTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createCustomDataExportPreCheckTask(request: CreateCustomDataExportPreCheckTaskRequest): CreateCustomDataExportPreCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomDataExportPreCheckTaskWithOptions(request, runtime);
}

model ManagePrivateRdsRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  DBInstanceId: string(name='DBInstanceId'),
  rdsAction: string(name='RdsAction'),
  params?: string(name='Params'),
}

model ManagePrivateRdsResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function managePrivateRdsWithOptions(request: ManagePrivateRdsRequest, runtime: Util.RuntimeOptions): ManagePrivateRdsResponse {
  Util.validateModel(request);
  return doRequest('ManagePrivateRds', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function managePrivateRds(request: ManagePrivateRdsRequest): ManagePrivateRdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return managePrivateRdsWithOptions(request, runtime);
}

model DescribeDrdsRdsInstancesRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbInstType?: string(name='DbInstType'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeDrdsRdsInstancesResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
  total: string(name='Total'),
  dbInstances: {
    dbInstance: [
      {
        DBInstanceId: string(name='DBInstanceId'),
        dmInstanceId: string(name='DmInstanceId'),
        connectUrl: string(name='ConnectUrl'),
        port: integer(name='Port'),
        DBInstanceStatus: string(name='DBInstanceStatus'),
        dbInstType: string(name='DbInstType'),
        readWeight: integer(name='ReadWeight'),
        networkType: string(name='NetworkType'),
        engine: string(name='Engine'),
        engineVersion: string(name='EngineVersion'),
        rdsInstType: string(name='RdsInstType'),
        payType: string(name='PayType'),
        expireTime: string(name='ExpireTime'),
        remainDays: integer(name='RemainDays'),
        DBInstanceClassType: string(name='DBInstanceClassType'),
        DBInstanceCPU: string(name='DBInstanceCPU'),
        DBInstanceMemory: long(name='DBInstanceMemory'),
        DBInstanceStorage: long(name='DBInstanceStorage'),
      }
    ](name='DbInstance'),
  }(name='DbInstances'),
}

async function describeDrdsRdsInstancesWithOptions(request: DescribeDrdsRdsInstancesRequest, runtime: Util.RuntimeOptions): DescribeDrdsRdsInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsRdsInstances', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsRdsInstances(request: DescribeDrdsRdsInstancesRequest): DescribeDrdsRdsInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsRdsInstancesWithOptions(request, runtime);
}

model DescribeRdsReadOnlyRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbInstType?: string(name='DbInstType'),
  rdsInstanceId: string(name='RdsInstanceId'),
}

model DescribeRdsReadOnlyResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  dbInstances: {
    dbInstance: [
      {
        DBInstanceId: string(name='DBInstanceId'),
        dmInstanceId: string(name='DmInstanceId'),
        connectUrl: string(name='ConnectUrl'),
        port: integer(name='Port'),
        DBInstanceStatus: string(name='DBInstanceStatus'),
        dbInstType: string(name='DbInstType'),
        readWeight: integer(name='ReadWeight'),
        networkType: string(name='NetworkType'),
        engine: string(name='Engine'),
        engineVersion: string(name='EngineVersion'),
        rdsInstType: string(name='RdsInstType'),
        payType: string(name='PayType'),
        expireTime: string(name='ExpireTime'),
        remainDays: integer(name='RemainDays'),
        DBInstanceClassType: string(name='DBInstanceClassType'),
        DBInstanceCPU: string(name='DBInstanceCPU'),
        DBInstanceMemory: long(name='DBInstanceMemory'),
        DBInstanceStorage: long(name='DBInstanceStorage'),
      }
    ](name='DbInstance'),
  }(name='DbInstances'),
}

async function describeRdsReadOnlyWithOptions(request: DescribeRdsReadOnlyRequest, runtime: Util.RuntimeOptions): DescribeRdsReadOnlyResponse {
  Util.validateModel(request);
  return doRequest('DescribeRdsReadOnly', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeRdsReadOnly(request: DescribeRdsReadOnlyRequest): DescribeRdsReadOnlyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsReadOnlyWithOptions(request, runtime);
}

model DescribeRdsDrdsDBRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  rdsInstanceId: [ string ](name='RdsInstanceId'),
}

model DescribeRdsDrdsDBResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  rdsDrdsDbs: {
    rdsDrdsDb: [
      {
        rdsId: string(name='RdsId'),
        DBList: {
          DB: [ string ](name='DB', description='DB'),
        }(name='DBList'),
      }
    ](name='RdsDrdsDb'),
  }(name='RdsDrdsDbs'),
}

async function describeRdsDrdsDBWithOptions(request: DescribeRdsDrdsDBRequest, runtime: Util.RuntimeOptions): DescribeRdsDrdsDBResponse {
  Util.validateModel(request);
  return doRequest('DescribeRdsDrdsDB', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeRdsDrdsDB(request: DescribeRdsDrdsDBRequest): DescribeRdsDrdsDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsDrdsDBWithOptions(request, runtime);
}

model DescribeMyCatReportInfoRequest = {
  regionId?: string(name='RegionId'),
  taskId: long(name='TaskId'),
}

model DescribeMyCatReportInfoResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  evaluateReportInfo: {
    errorSqlCount: integer(name='ErrorSqlCount'),
    drdsSpecs: string(name='DrdsSpecs'),
    drdsNodeCount: integer(name='DrdsNodeCount'),
    rdsSpecs: string(name='RdsSpecs'),
    rdsCount: integer(name='RdsCount'),
    rdsDiskCapacity: string(name='RdsDiskCapacity'),
    dbInfo: {
      dbName: string(name='DbName'),
      tableInfoList: [
        {
          tableName: string(name='TableName'),
          mycatShardAlgorithm: string(name='MycatShardAlgorithm'),
          dbShardColumn: string(name='DbShardColumn'),
          dbShardAlgorithm: string(name='DbShardAlgorithm'),
          tbShardColumn: string(name='TbShardColumn'),
          tbShardAlgorithm: string(name='TbShardAlgorithm'),
          tbShardNum: integer(name='TbShardNum'),
          shard: boolean(name='Shard'),
          broadcast: boolean(name='Broadcast'),
          createTableSql: string(name='CreateTableSql'),
        }
      ](name='TableInfoList'),
    }(name='DbInfo'),
  }(name='EvaluateReportInfo'),
}

async function describeMyCatReportInfoWithOptions(request: DescribeMyCatReportInfoRequest, runtime: Util.RuntimeOptions): DescribeMyCatReportInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeMyCatReportInfo', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeMyCatReportInfo(request: DescribeMyCatReportInfoRequest): DescribeMyCatReportInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMyCatReportInfoWithOptions(request, runtime);
}

model DescribeUnCompatibilitySqlRequest = {
  regionId?: string(name='RegionId'),
  taskId: long(name='TaskId'),
  dbName: long(name='DbName'),
}

model DescribeUnCompatibilitySqlResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  errorSqls: [ string ] (name='ErrorSqls'),
}

async function describeUnCompatibilitySqlWithOptions(request: DescribeUnCompatibilitySqlRequest, runtime: Util.RuntimeOptions): DescribeUnCompatibilitySqlResponse {
  Util.validateModel(request);
  return doRequest('DescribeUnCompatibilitySql', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeUnCompatibilitySql(request: DescribeUnCompatibilitySqlRequest): DescribeUnCompatibilitySqlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUnCompatibilitySqlWithOptions(request, runtime);
}

model MyCatCustomImportPreCheckRequest = {
  regionId?: string(name='RegionId'),
  taskName: string(name='TaskName'),
  schemaUrl: string(name='SchemaUrl'),
  ruleUrl: string(name='RuleUrl'),
  importDb: string(name='ImportDb'),
  dstDrdsInstanceId: string(name='DstDrdsInstanceId'),
  dstDbNme: string(name='DstDbNme'),
  dstPort: integer(name='DstPort'),
  dstUser: string(name='DstUser'),
  dstPwd: string(name='DstPwd'),
  tableMap?: map[string]any(name='TableMap'),
}

model MyCatCustomImportPreCheckShrinkRequest = {
  regionId?: string(name='RegionId'),
  taskName: string(name='TaskName'),
  schemaUrl: string(name='SchemaUrl'),
  ruleUrl: string(name='RuleUrl'),
  importDb: string(name='ImportDb'),
  dstDrdsInstanceId: string(name='DstDrdsInstanceId'),
  dstDbNme: string(name='DstDbNme'),
  dstPort: integer(name='DstPort'),
  dstUser: string(name='DstUser'),
  dstPwd: string(name='DstPwd'),
  tableMapShrink?: string(name='TableMap'),
}

model MyCatCustomImportPreCheckResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: long(name='Data'),
}

async function myCatCustomImportPreCheckWithOptions(tmp: MyCatCustomImportPreCheckRequest, runtime: Util.RuntimeOptions): MyCatCustomImportPreCheckResponse {
  Util.validateModel(tmp);
  var request = new MyCatCustomImportPreCheckShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.tableMap)) {
    request.tableMapShrink = Util.toJSONString(tmp.tableMap);
  }

  return doRequest('MyCatCustomImportPreCheck', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function myCatCustomImportPreCheck(request: MyCatCustomImportPreCheckRequest): MyCatCustomImportPreCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return myCatCustomImportPreCheckWithOptions(request, runtime);
}

model CreateMyCatEvaluateRequest = {
  regionId?: string(name='RegionId'),
  taskName: string(name='TaskName'),
  schemaUrl: string(name='SchemaUrl'),
  ruleUrl: string(name='RuleUrl'),
  importDbList: [ string ](name='ImportDbList'),
  busPeakQps: long(name='BusPeakQps'),
  capacityIncPercent: integer(name='CapacityIncPercent'),
  qpsIncPercent: integer(name='QpsIncPercent'),
  sequenceType: integer(name='SequenceType'),
  serverUrl: string(name='ServerUrl'),
}

model CreateMyCatEvaluateResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskIdList: [ string ] (name='TaskIdList'),
}

async function createMyCatEvaluateWithOptions(request: CreateMyCatEvaluateRequest, runtime: Util.RuntimeOptions): CreateMyCatEvaluateResponse {
  Util.validateModel(request);
  return doRequest('CreateMyCatEvaluate', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createMyCatEvaluate(request: CreateMyCatEvaluateRequest): CreateMyCatEvaluateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMyCatEvaluateWithOptions(request, runtime);
}

model MyCatConnectTestRequest = {
  regionId?: string(name='RegionId'),
  schemaUrl: string(name='SchemaUrl'),
  ruleUrl: string(name='RuleUrl'),
  dbName: string(name='DbName'),
}

model MyCatConnectTestResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: boolean(name='Data'),
}

async function myCatConnectTestWithOptions(request: MyCatConnectTestRequest, runtime: Util.RuntimeOptions): MyCatConnectTestResponse {
  Util.validateModel(request);
  return doRequest('MyCatConnectTest', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function myCatConnectTest(request: MyCatConnectTestRequest): MyCatConnectTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return myCatConnectTestWithOptions(request, runtime);
}

model PrecheckMyCatEvaluateRequest = {
  regionId?: string(name='RegionId'),
  taskName: string(name='TaskName'),
  schemaUrl: string(name='SchemaUrl'),
  ruleUrl: string(name='RuleUrl'),
  importDbList: [ string ](name='ImportDbList'),
  busPeakQps: long(name='BusPeakQps'),
  capacityIncPercent: integer(name='CapacityIncPercent'),
  qpsIncPercent: integer(name='QpsIncPercent'),
  sequenceType: integer(name='SequenceType'),
  serverUrl: string(name='ServerUrl'),
}

model PrecheckMyCatEvaluateResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: long(name='Data'),
}

async function precheckMyCatEvaluateWithOptions(request: PrecheckMyCatEvaluateRequest, runtime: Util.RuntimeOptions): PrecheckMyCatEvaluateResponse {
  Util.validateModel(request);
  return doRequest('PrecheckMyCatEvaluate', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function precheckMyCatEvaluate(request: PrecheckMyCatEvaluateRequest): PrecheckMyCatEvaluateResponse {
  var runtime = new Util.RuntimeOptions{};
  return precheckMyCatEvaluateWithOptions(request, runtime);
}

model DescribeMyCatDbListRequest = {
  regionId?: string(name='RegionId'),
  schemaUrl: string(name='SchemaUrl'),
  ruleUrl: string(name='RuleUrl'),
}

model DescribeMyCatDbListResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  dbNames: [ string ] (name='DbNames'),
}

async function describeMyCatDbListWithOptions(request: DescribeMyCatDbListRequest, runtime: Util.RuntimeOptions): DescribeMyCatDbListResponse {
  Util.validateModel(request);
  return doRequest('DescribeMyCatDbList', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeMyCatDbList(request: DescribeMyCatDbListRequest): DescribeMyCatDbListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMyCatDbListWithOptions(request, runtime);
}

model CreateMyCatCustomImportRequest = {
  regionId?: string(name='RegionId'),
  taskName: string(name='TaskName'),
  schemaUrl: string(name='SchemaUrl'),
  ruleUrl: string(name='RuleUrl'),
  importDb: string(name='ImportDb'),
  dstDrdsInstanceId: string(name='DstDrdsInstanceId'),
  dstDbNme: string(name='DstDbNme'),
  dstPort: integer(name='DstPort'),
  dstUser: string(name='DstUser'),
  dstPwd: string(name='DstPwd'),
  tableMap?: map[string]any(name='TableMap'),
}

model CreateMyCatCustomImportShrinkRequest = {
  regionId?: string(name='RegionId'),
  taskName: string(name='TaskName'),
  schemaUrl: string(name='SchemaUrl'),
  ruleUrl: string(name='RuleUrl'),
  importDb: string(name='ImportDb'),
  dstDrdsInstanceId: string(name='DstDrdsInstanceId'),
  dstDbNme: string(name='DstDbNme'),
  dstPort: integer(name='DstPort'),
  dstUser: string(name='DstUser'),
  dstPwd: string(name='DstPwd'),
  tableMapShrink?: string(name='TableMap'),
}

model CreateMyCatCustomImportResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: long(name='Data'),
}

async function createMyCatCustomImportWithOptions(tmp: CreateMyCatCustomImportRequest, runtime: Util.RuntimeOptions): CreateMyCatCustomImportResponse {
  Util.validateModel(tmp);
  var request = new CreateMyCatCustomImportShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.tableMap)) {
    request.tableMapShrink = Util.toJSONString(tmp.tableMap);
  }

  return doRequest('CreateMyCatCustomImport', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createMyCatCustomImport(request: CreateMyCatCustomImportRequest): CreateMyCatCustomImportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMyCatCustomImportWithOptions(request, runtime);
}

model RemoveDrdsMysqlRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  dbInstanceId: string(name='DbInstanceId'),
  roDbInstanceId?: string(name='RoDbInstanceId'),
  force?: boolean(name='Force'),
}

model RemoveDrdsMysqlResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    result: boolean(name='Result'),
    message: string(name='Message'),
  }(name='Data'),
}

async function removeDrdsMysqlWithOptions(request: RemoveDrdsMysqlRequest, runtime: Util.RuntimeOptions): RemoveDrdsMysqlResponse {
  Util.validateModel(request);
  return doRequest('RemoveDrdsMysql', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function removeDrdsMysql(request: RemoveDrdsMysqlRequest): RemoveDrdsMysqlResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDrdsMysqlWithOptions(request, runtime);
}

model StopEvaluateTaskRequest = {
  taskId: integer(name='TaskId'),
}

model StopEvaluateTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskManageResult: {
    success: boolean(name='Success'),
    message: string(name='Message'),
  }(name='TaskManageResult'),
}

async function stopEvaluateTaskWithOptions(request: StopEvaluateTaskRequest, runtime: Util.RuntimeOptions): StopEvaluateTaskResponse {
  Util.validateModel(request);
  return doRequest('StopEvaluateTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function stopEvaluateTask(request: StopEvaluateTaskRequest): StopEvaluateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopEvaluateTaskWithOptions(request, runtime);
}

model StopDataImportTaskRequest = {
  taskId: integer(name='TaskId'),
}

model StopDataImportTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskManageResult: {
    success: boolean(name='Success'),
    message: string(name='Message'),
  }(name='TaskManageResult'),
}

async function stopDataImportTaskWithOptions(request: StopDataImportTaskRequest, runtime: Util.RuntimeOptions): StopDataImportTaskResponse {
  Util.validateModel(request);
  return doRequest('StopDataImportTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function stopDataImportTask(request: StopDataImportTaskRequest): StopDataImportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDataImportTaskWithOptions(request, runtime);
}

model StartEvaluateTaskRequest = {
  taskId: integer(name='TaskId'),
}

model StartEvaluateTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskManageResult: {
    success: boolean(name='Success'),
    message: string(name='Message'),
  }(name='TaskManageResult'),
}

async function startEvaluateTaskWithOptions(request: StartEvaluateTaskRequest, runtime: Util.RuntimeOptions): StartEvaluateTaskResponse {
  Util.validateModel(request);
  return doRequest('StartEvaluateTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function startEvaluateTask(request: StartEvaluateTaskRequest): StartEvaluateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startEvaluateTaskWithOptions(request, runtime);
}

model StartDataImportTaskRequest = {
  taskId: integer(name='TaskId'),
}

model StartDataImportTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskManageResult: {
    success: boolean(name='Success'),
    message: string(name='Message'),
  }(name='TaskManageResult'),
}

async function startDataImportTaskWithOptions(request: StartDataImportTaskRequest, runtime: Util.RuntimeOptions): StartDataImportTaskResponse {
  Util.validateModel(request);
  return doRequest('StartDataImportTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function startDataImportTask(request: StartDataImportTaskRequest): StartDataImportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDataImportTaskWithOptions(request, runtime);
}

model DescribeRdsInstInfosRequest = {
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
  search?: string(name='Search'),
}

model DescribeRdsInstInfosResponse = {
  requestId: string(name='RequestId'),
  items: {
    DBInstance: [
      {
        DBInstanceId: string(name='DBInstanceId'),
        DBInstanceStatus: integer(name='DBInstanceStatus'),
        DBInstanceType: string(name='DBInstanceType'),
        engine: string(name='Engine'),
        engineVersion: string(name='EngineVersion'),
        regionId: string(name='RegionId'),
        zoneId: string(name='ZoneId'),
        DBInstanceDescription: string(name='DBInstanceDescription'),
        instanceNetworkType: string(name='InstanceNetworkType'),
        readOnlyDBInstanceId: {
          readOnlyDBInstanceId: [ string ](name='ReadOnlyDBInstanceId', description='ReadOnlyDBInstanceId'),
        }(name='ReadOnlyDBInstanceId'),
      }
    ](name='DBInstance'),
  }(name='Items'),
}

async function describeRdsInstInfosWithOptions(request: DescribeRdsInstInfosRequest, runtime: Util.RuntimeOptions): DescribeRdsInstInfosResponse {
  Util.validateModel(request);
  return doRequest('describeRdsInstInfos', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeRdsInstInfos(request: DescribeRdsInstInfosRequest): DescribeRdsInstInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsInstInfosWithOptions(request, runtime);
}

model DescribeRdsDbInfosRequest = {
  rdsInstId?: string(name='RdsInstId'),
  search?: string(name='Search'),
}

model DescribeRdsDbInfosResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  total: string(name='Total'),
  databases: {
    database: [
      {
        dbName: string(name='DbName'),
        status: integer(name='Status'),
        description: string(name='Description'),
      }
    ](name='Database'),
  }(name='Databases'),
}

async function describeRdsDbInfosWithOptions(request: DescribeRdsDbInfosRequest, runtime: Util.RuntimeOptions): DescribeRdsDbInfosResponse {
  Util.validateModel(request);
  return doRequest('DescribeRdsDbInfos', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeRdsDbInfos(request: DescribeRdsDbInfosRequest): DescribeRdsDbInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsDbInfosWithOptions(request, runtime);
}

model DescribeFirstDrdsInstanceByOrderIdRequest = {
  orderId: string(name='OrderId'),
}

model DescribeFirstDrdsInstanceByOrderIdResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    drdsInstanceId: string(name='DrdsInstanceId'),
    type: string(name='Type'),
    regionId: string(name='RegionId'),
    zoneId: string(name='ZoneId'),
    description: string(name='Description'),
    networkType: string(name='NetworkType'),
    status: string(name='Status'),
    createTime: long(name='CreateTime'),
    version: long(name='Version'),
    instanceSeries: string(name='InstanceSeries'),
    instanceSpec: string(name='InstanceSpec'),
    vpcCloudInstanceId: string(name='VpcCloudInstanceId'),
    instRole: string(name='InstRole'),
    commodityCode: string(name='CommodityCode'),
    expireDate: long(name='ExpireDate'),
    versionAction: string(name='VersionAction'),
    label: string(name='Label'),
    masterInstanceId: string(name='MasterInstanceId'),
    machineType: string(name='MachineType'),
    orderInstanceId: string(name='OrderInstanceId'),
    mysqlVersion: integer(name='MysqlVersion'),
    vips: {
      vip: [
        {
          dns: string(name='Dns'),
          expireDays: long(name='ExpireDays'),
          port: string(name='Port'),
          type: string(name='Type'),
          vpcId: string(name='VpcId'),
          vswitchId: string(name='VswitchId'),
        }
      ](name='Vip'),
    }(name='Vips'),
    readOnlyDBInstanceIds: {
      readOnlyDBInstanceId: [ string ](name='ReadOnlyDBInstanceId', description='ReadOnlyDBInstanceId'),
    }(name='ReadOnlyDBInstanceIds'),
  }(name='Data'),
}

async function describeFirstDrdsInstanceByOrderIdWithOptions(request: DescribeFirstDrdsInstanceByOrderIdRequest, runtime: Util.RuntimeOptions): DescribeFirstDrdsInstanceByOrderIdResponse {
  Util.validateModel(request);
  return doRequest('DescribeFirstDrdsInstanceByOrderId', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeFirstDrdsInstanceByOrderId(request: DescribeFirstDrdsInstanceByOrderIdRequest): DescribeFirstDrdsInstanceByOrderIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFirstDrdsInstanceByOrderIdWithOptions(request, runtime);
}

model DescribeEvaluateTasksRequest = {
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeEvaluateTasksResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  total: integer(name='Total'),
  data: {
    evaluateTask: [
      {
        id: integer(name='Id'),
        batchEvaluateTaskId: integer(name='BatchEvaluateTaskId'),
        taskName: string(name='TaskName'),
        gmtCreate: string(name='GmtCreate'),
        gmtModified: string(name='GmtModified'),
        status: string(name='Status'),
        instId: string(name='InstId'),
        dbName: string(name='DbName'),
        progress: integer(name='Progress'),
        evalauteHours: integer(name='EvalauteHours'),
        allSqlCount: integer(name='AllSqlCount'),
        dbType: integer(name='DbType'),
      }
    ](name='EvaluateTask'),
  }(name='Data'),
}

async function describeEvaluateTasksWithOptions(request: DescribeEvaluateTasksRequest, runtime: Util.RuntimeOptions): DescribeEvaluateTasksResponse {
  Util.validateModel(request);
  return doRequest('DescribeEvaluateTasks', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeEvaluateTasks(request: DescribeEvaluateTasksRequest): DescribeEvaluateTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEvaluateTasksWithOptions(request, runtime);
}

model DescribeEvaluateTaskReportRequest = {
  taskId: long(name='TaskId'),
}

model DescribeEvaluateTaskReportResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  evaluateResult: {
    taskId: integer(name='TaskId'),
    taskName: string(name='TaskName'),
    instId: integer(name='InstId'),
    dbName: string(name='DbName'),
    taskStatus: string(name='TaskStatus'),
    gmtCreate: string(name='GmtCreate'),
    gmtModified: string(name='GmtModified'),
    rdsType: string(name='RdsType'),
    rdsCount: integer(name='RdsCount'),
    rdsTotalSpace: string(name='RdsTotalSpace'),
    drdsType: string(name='DrdsType'),
    drdsCount: integer(name='DrdsCount'),
    allSqlCount: integer(name='AllSqlCount'),
    slowSqlCount: integer(name='SlowSqlCount'),
    tableShardResults: {
      tableShardResults: [
        {
          table: string(name='Table'),
          shardType: string(name='ShardType'),
          dbShardKey: string(name='DbShardKey'),
          tbShardKey: string(name='TbShardKey'),
          tbpartitions: integer(name='Tbpartitions'),
          dbpartitions: integer(name='Dbpartitions'),
          createTableSql: string(name='CreateTableSql'),
          rowCount: integer(name='RowCount'),
          sqlCount: integer(name='SqlCount'),
          shardKeyType: string(name='ShardKeyType'),
          dbShardMethod: string(name='DbShardMethod'),
          tbShardMethod: string(name='TbShardMethod'),
          originDbShardMethod: string(name='OriginDbShardMethod'),
          originTbShardMethod: string(name='OriginTbShardMethod'),
        }
      ](name='TableShardResults'),
    }(name='TableShardResults'),
    rdsInstInfos: {
      rdsInstInfos: [
        {
          instId: string(name='InstId'),
          rdsUsedSpace: integer(name='RdsUsedSpace'),
          rdsPeakIopsWeekly: integer(name='RdsPeakIopsWeekly'),
          rdsPeakQpsWeekly: integer(name='RdsPeakQpsWeekly'),
          rdsPeakSessionsWeekly: integer(name='RdsPeakSessionsWeekly'),
          dataGrowthScale: integer(name='DataGrowthScale'),
          avgQpsGrowthScale: integer(name='AvgQpsGrowthScale'),
        }
      ](name='RdsInstInfos'),
    }(name='RdsInstInfos'),
  }(name='EvaluateResult'),
}

async function describeEvaluateTaskReportWithOptions(request: DescribeEvaluateTaskReportRequest, runtime: Util.RuntimeOptions): DescribeEvaluateTaskReportResponse {
  Util.validateModel(request);
  return doRequest('DescribeEvaluateTaskReport', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeEvaluateTaskReport(request: DescribeEvaluateTaskReportRequest): DescribeEvaluateTaskReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEvaluateTaskReportWithOptions(request, runtime);
}

model DescribeEvaluatePreCheckResultRequest = {
  taskId: long(name='TaskId'),
}

model DescribeEvaluatePreCheckResultResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  preCheckResult: {
    preCheckName: string(name='PreCheckName'),
    state: string(name='State'),
    subCheckItems: {
      subCheckItems: [
        {
          preCheckItemName: string(name='PreCheckItemName'),
          state: string(name='State'),
          errorMsgCode: string(name='ErrorMsgCode'),
          errorMsgParams: {
            errorMsgParams: [ string ](name='ErrorMsgParams', description='ErrorMsgParams'),
          }(name='ErrorMsgParams'),
        }
      ](name='SubCheckItems'),
    }(name='SubCheckItems'),
  }(name='PreCheckResult'),
}

async function describeEvaluatePreCheckResultWithOptions(request: DescribeEvaluatePreCheckResultRequest, runtime: Util.RuntimeOptions): DescribeEvaluatePreCheckResultResponse {
  Util.validateModel(request);
  return doRequest('DescribeEvaluatePreCheckResult', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeEvaluatePreCheckResult(request: DescribeEvaluatePreCheckResultRequest): DescribeEvaluatePreCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEvaluatePreCheckResultWithOptions(request, runtime);
}

model DescribeEvaluateDataImportDbTopologysRequest = {
  importParam?: map[string]any(name='ImportParam'),
}

model DescribeEvaluateDataImportDbTopologysShrinkRequest = {
  importParamShrink?: string(name='ImportParam'),
}

model DescribeEvaluateDataImportDbTopologysResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: string(name='Data'),
}

async function describeEvaluateDataImportDbTopologysWithOptions(tmp: DescribeEvaluateDataImportDbTopologysRequest, runtime: Util.RuntimeOptions): DescribeEvaluateDataImportDbTopologysResponse {
  Util.validateModel(tmp);
  var request = new DescribeEvaluateDataImportDbTopologysShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.importParam)) {
    request.importParamShrink = Util.toJSONString(tmp.importParam);
  }

  return doRequest('DescribeEvaluateDataImportDbTopologys', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeEvaluateDataImportDbTopologys(request: DescribeEvaluateDataImportDbTopologysRequest): DescribeEvaluateDataImportDbTopologysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEvaluateDataImportDbTopologysWithOptions(request, runtime);
}

model DescribeDataImportTasksRequest = {
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeDataImportTasksResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  total: integer(name='Total'),
  data: {
    dataImportTask: [
      {
        id: integer(name='Id'),
        taskName: string(name='TaskName'),
        gmtCreate: string(name='GmtCreate'),
        gmtModified: string(name='GmtModified'),
        type: integer(name='Type'),
        status: string(name='Status'),
        stage: string(name='Stage'),
        srcInstId: string(name='SrcInstId'),
        srcDbName: string(name='SrcDbName'),
        dstInstId: string(name='DstInstId'),
        dstDbName: string(name='DstDbName'),
        evaluateTaskId: integer(name='EvaluateTaskId'),
        batchEvaluateTaskId: integer(name='BatchEvaluateTaskId'),
        createDbProgress: integer(name='CreateDbProgress'),
        createTablesProgress: integer(name='CreateTablesProgress'),
        progress: integer(name='Progress'),
        jingweiProgress: {
          fullRunning: boolean(name='FullRunning'),
          incrementRunning: boolean(name='IncrementRunning'),
          full: {
            progress: integer(name='Progress'),
            tps: integer(name='Tps'),
            needTime: integer(name='NeedTime'),
            transferCount: integer(name='TransferCount'),
          }(name='Full'),
          increment: {
            delay: integer(name='Delay'),
            tps: integer(name='Tps'),
            transferCount: integer(name='TransferCount'),
          }(name='Increment'),
        }(name='JingweiProgress'),
      }
    ](name='DataImportTask'),
  }(name='Data'),
}

async function describeDataImportTasksWithOptions(request: DescribeDataImportTasksRequest, runtime: Util.RuntimeOptions): DescribeDataImportTasksResponse {
  Util.validateModel(request);
  return doRequest('DescribeDataImportTasks', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDataImportTasks(request: DescribeDataImportTasksRequest): DescribeDataImportTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataImportTasksWithOptions(request, runtime);
}

model DescribeDataImportTaskReportRequest = {
  taskId: long(name='TaskId'),
}

model DescribeDataImportTaskReportResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: string(name='Data'),
}

async function describeDataImportTaskReportWithOptions(request: DescribeDataImportTaskReportRequest, runtime: Util.RuntimeOptions): DescribeDataImportTaskReportResponse {
  Util.validateModel(request);
  return doRequest('DescribeDataImportTaskReport', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDataImportTaskReport(request: DescribeDataImportTaskReportRequest): DescribeDataImportTaskReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataImportTaskReportWithOptions(request, runtime);
}

model DescribeCustomDataImportSrcDstTablesRequest = {
  importParam?: map[string]any(name='ImportParam'),
}

model DescribeCustomDataImportSrcDstTablesShrinkRequest = {
  importParamShrink?: string(name='ImportParam'),
}

model DescribeCustomDataImportSrcDstTablesResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  dataImportSrcDstTables: {
    srcTables: {
      srcTables: [ string ](name='SrcTables', description='SrcTables'),
    }(name='SrcTables'),
    dstTables: {
      dstTables: [ string ](name='DstTables', description='DstTables'),
    }(name='DstTables'),
  }(name='DataImportSrcDstTables'),
}

async function describeCustomDataImportSrcDstTablesWithOptions(tmp: DescribeCustomDataImportSrcDstTablesRequest, runtime: Util.RuntimeOptions): DescribeCustomDataImportSrcDstTablesResponse {
  Util.validateModel(tmp);
  var request = new DescribeCustomDataImportSrcDstTablesShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.importParam)) {
    request.importParamShrink = Util.toJSONString(tmp.importParam);
  }

  return doRequest('DescribeCustomDataImportSrcDstTables', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeCustomDataImportSrcDstTables(request: DescribeCustomDataImportSrcDstTablesRequest): DescribeCustomDataImportSrcDstTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomDataImportSrcDstTablesWithOptions(request, runtime);
}

model DescribeBatchEvaluateTaskReportRequest = {
  batchEvaluateTaskId: long(name='BatchEvaluateTaskId'),
}

model DescribeBatchEvaluateTaskReportResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    evaluateResults: [
      {
        taskId: integer(name='TaskId'),
        taskName: string(name='TaskName'),
        instId: integer(name='InstId'),
        dbName: string(name='DbName'),
        taskStatus: string(name='TaskStatus'),
        gmtCreate: string(name='GmtCreate'),
        gmtModified: string(name='GmtModified'),
        rdsType: string(name='RdsType'),
        rdsCount: integer(name='RdsCount'),
        rdsTotalSpace: string(name='RdsTotalSpace'),
        drdsType: string(name='DrdsType'),
        drdsCount: integer(name='DrdsCount'),
        allSqlCount: integer(name='AllSqlCount'),
        slowSqlCount: integer(name='SlowSqlCount'),
        tableShardResults: {
          tableShardResults: [
            {
              table: string(name='Table'),
              shardType: string(name='ShardType'),
              dbShardKey: string(name='DbShardKey'),
              tbShardKey: string(name='TbShardKey'),
              tbpartitions: integer(name='Tbpartitions'),
              dbpartitions: integer(name='Dbpartitions'),
              createTableSql: string(name='CreateTableSql'),
              rowCount: integer(name='RowCount'),
              sqlCount: integer(name='SqlCount'),
              shardKeyType: string(name='ShardKeyType'),
              dbShardMethod: string(name='DbShardMethod'),
              tbShardMethod: string(name='TbShardMethod'),
              originDbShardMethod: string(name='OriginDbShardMethod'),
              originTbShardMethod: string(name='OriginTbShardMethod'),
            }
          ](name='TableShardResults'),
        }(name='TableShardResults'),
        rdsInstInfos: {
          rdsInstInfos: [
            {
              instId: string(name='InstId'),
              rdsUsedSpace: integer(name='RdsUsedSpace'),
              rdsPeakIopsWeekly: integer(name='RdsPeakIopsWeekly'),
              rdsPeakQpsWeekly: integer(name='RdsPeakQpsWeekly'),
              rdsPeakSessionsWeekly: integer(name='RdsPeakSessionsWeekly'),
              dataGrowthScale: integer(name='DataGrowthScale'),
              avgQpsGrowthScale: integer(name='AvgQpsGrowthScale'),
            }
          ](name='RdsInstInfos'),
        }(name='RdsInstInfos'),
      }
    ](name='EvaluateResults'),
  }(name='Data'),
}

async function describeBatchEvaluateTaskReportWithOptions(request: DescribeBatchEvaluateTaskReportRequest, runtime: Util.RuntimeOptions): DescribeBatchEvaluateTaskReportResponse {
  Util.validateModel(request);
  return doRequest('DescribeBatchEvaluateTaskReport', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeBatchEvaluateTaskReport(request: DescribeBatchEvaluateTaskReportRequest): DescribeBatchEvaluateTaskReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBatchEvaluateTaskReportWithOptions(request, runtime);
}

model DescribeDataImportPreCheckResultRequest = {
  taskId: long(name='TaskId'),
}

model DescribeDataImportPreCheckResultResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  preCheckResult: {
    preCheckName: string(name='PreCheckName'),
    state: string(name='State'),
    subCheckItems: {
      subCheckItems: [
        {
          preCheckItemName: string(name='PreCheckItemName'),
          state: string(name='State'),
          errorMsgCode: string(name='ErrorMsgCode'),
          errorMsgParams: {
            errorMsgParams: [ string ](name='ErrorMsgParams', description='ErrorMsgParams'),
          }(name='ErrorMsgParams'),
        }
      ](name='SubCheckItems'),
    }(name='SubCheckItems'),
  }(name='PreCheckResult'),
}

async function describeDataImportPreCheckResultWithOptions(request: DescribeDataImportPreCheckResultRequest, runtime: Util.RuntimeOptions): DescribeDataImportPreCheckResultResponse {
  Util.validateModel(request);
  return doRequest('DescribeDataImportPreCheckResult', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDataImportPreCheckResult(request: DescribeDataImportPreCheckResultRequest): DescribeDataImportPreCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataImportPreCheckResultWithOptions(request, runtime);
}

model CreateEvaluateTaskRequest = {
  dataGrowthScale: integer(name='DataGrowthScale'),
  avgQpsGrowthScale: integer(name='AvgQpsGrowthScale'),
  evaluateHours: integer(name='EvaluateHours'),
  taskName?: string(name='TaskName'),
  dbInfo: [
    {
      instId?: string(name='InstId'),
      dbName?: string(name='DbName'),
      dbPort?: string(name='DbPort'),
      dbUser?: string(name='DbUser'),
      dbPassword?: string(name='DbPassword'),
    }
  ](name='DbInfo'),
}

model CreateEvaluateTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    taskIds: [ string ](name='TaskIds'),
  }(name='Data'),
}

async function createEvaluateTaskWithOptions(request: CreateEvaluateTaskRequest, runtime: Util.RuntimeOptions): CreateEvaluateTaskResponse {
  Util.validateModel(request);
  return doRequest('CreateEvaluateTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createEvaluateTask(request: CreateEvaluateTaskRequest): CreateEvaluateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEvaluateTaskWithOptions(request, runtime);
}

model CreateEvaluatePreCheckTaskRequest = {
  dataGrowthScale: integer(name='DataGrowthScale'),
  avgQpsGrowthScale: integer(name='AvgQpsGrowthScale'),
  evaluateHours: integer(name='EvaluateHours'),
  taskName?: string(name='TaskName'),
  dbInfo: [
    {
      instId?: string(name='InstId'),
      dbName?: string(name='DbName'),
      dbPort?: string(name='DbPort'),
      dbUser?: string(name='DbUser'),
      dbPassword?: string(name='DbPassword'),
    }
  ](name='DbInfo'),
}

model CreateEvaluatePreCheckTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskId: long(name='TaskId'),
}

async function createEvaluatePreCheckTaskWithOptions(request: CreateEvaluatePreCheckTaskRequest, runtime: Util.RuntimeOptions): CreateEvaluatePreCheckTaskResponse {
  Util.validateModel(request);
  return doRequest('CreateEvaluatePreCheckTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createEvaluatePreCheckTask(request: CreateEvaluatePreCheckTaskRequest): CreateEvaluatePreCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEvaluatePreCheckTaskWithOptions(request, runtime);
}

model CreateEvaluateDataImportTaskRequest = {
  importParam?: map[string]any(name='ImportParam'),
}

model CreateEvaluateDataImportTaskShrinkRequest = {
  importParamShrink?: string(name='ImportParam'),
}

model CreateEvaluateDataImportTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskId: long(name='TaskId'),
}

async function createEvaluateDataImportTaskWithOptions(tmp: CreateEvaluateDataImportTaskRequest, runtime: Util.RuntimeOptions): CreateEvaluateDataImportTaskResponse {
  Util.validateModel(tmp);
  var request = new CreateEvaluateDataImportTaskShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.importParam)) {
    request.importParamShrink = Util.toJSONString(tmp.importParam);
  }

  return doRequest('CreateEvaluateDataImportTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createEvaluateDataImportTask(request: CreateEvaluateDataImportTaskRequest): CreateEvaluateDataImportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEvaluateDataImportTaskWithOptions(request, runtime);
}

model CreateEvaluateDataImportPreCheckTaskRequest = {
  importParam?: map[string]any(name='ImportParam'),
}

model CreateEvaluateDataImportPreCheckTaskShrinkRequest = {
  importParamShrink?: string(name='ImportParam'),
}

model CreateEvaluateDataImportPreCheckTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskId: long(name='TaskId'),
}

async function createEvaluateDataImportPreCheckTaskWithOptions(tmp: CreateEvaluateDataImportPreCheckTaskRequest, runtime: Util.RuntimeOptions): CreateEvaluateDataImportPreCheckTaskResponse {
  Util.validateModel(tmp);
  var request = new CreateEvaluateDataImportPreCheckTaskShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.importParam)) {
    request.importParamShrink = Util.toJSONString(tmp.importParam);
  }

  return doRequest('CreateEvaluateDataImportPreCheckTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createEvaluateDataImportPreCheckTask(request: CreateEvaluateDataImportPreCheckTaskRequest): CreateEvaluateDataImportPreCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEvaluateDataImportPreCheckTaskWithOptions(request, runtime);
}

model CreateCustomDataImportTaskRequest = {
  importParam?: map[string]any(name='ImportParam'),
}

model CreateCustomDataImportTaskShrinkRequest = {
  importParamShrink?: string(name='ImportParam'),
}

model CreateCustomDataImportTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskId: long(name='TaskId'),
}

async function createCustomDataImportTaskWithOptions(tmp: CreateCustomDataImportTaskRequest, runtime: Util.RuntimeOptions): CreateCustomDataImportTaskResponse {
  Util.validateModel(tmp);
  var request = new CreateCustomDataImportTaskShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.importParam)) {
    request.importParamShrink = Util.toJSONString(tmp.importParam);
  }

  return doRequest('CreateCustomDataImportTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createCustomDataImportTask(request: CreateCustomDataImportTaskRequest): CreateCustomDataImportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomDataImportTaskWithOptions(request, runtime);
}

model CreateCustomDataImportPreCheckTaskRequest = {
  importParam?: map[string]any(name='ImportParam'),
}

model CreateCustomDataImportPreCheckTaskShrinkRequest = {
  importParamShrink?: string(name='ImportParam'),
}

model CreateCustomDataImportPreCheckTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskId: long(name='TaskId'),
}

async function createCustomDataImportPreCheckTaskWithOptions(tmp: CreateCustomDataImportPreCheckTaskRequest, runtime: Util.RuntimeOptions): CreateCustomDataImportPreCheckTaskResponse {
  Util.validateModel(tmp);
  var request = new CreateCustomDataImportPreCheckTaskShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.importParam)) {
    request.importParamShrink = Util.toJSONString(tmp.importParam);
  }

  return doRequest('CreateCustomDataImportPreCheckTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createCustomDataImportPreCheckTask(request: CreateCustomDataImportPreCheckTaskRequest): CreateCustomDataImportPreCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomDataImportPreCheckTaskWithOptions(request, runtime);
}

model CheckConnectivityRequest = {
  dbType: integer(name='DbType'),
  dbInfo?: map[string]any(name='DbInfo'),
}

model CheckConnectivityShrinkRequest = {
  dbType: integer(name='DbType'),
  dbInfoShrink?: string(name='DbInfo'),
}

model CheckConnectivityResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  checkConnectivityResult: {
    success: boolean(name='Success'),
    message: string(name='Message'),
  }(name='CheckConnectivityResult'),
}

async function checkConnectivityWithOptions(tmp: CheckConnectivityRequest, runtime: Util.RuntimeOptions): CheckConnectivityResponse {
  Util.validateModel(tmp);
  var request = new CheckConnectivityShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.dbInfo)) {
    request.dbInfoShrink = Util.toJSONString(tmp.dbInfo);
  }

  return doRequest('CheckConnectivity', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function checkConnectivity(request: CheckConnectivityRequest): CheckConnectivityResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkConnectivityWithOptions(request, runtime);
}

model CreateDrdsInstanceRequest = {
  description: string(name='Description'),
  regionId: string(name='RegionId'),
  zoneId: string(name='ZoneId'),
  type: string(name='Type'),
  quantity: integer(name='Quantity'),
  instanceSeries?: string(name='InstanceSeries'),
  specification: string(name='Specification'),
  clientToken: string(name='ClientToken'),
  payType: string(name='PayType'),
  vpcId?: string(name='VpcId'),
  vswitchId?: string(name='VswitchId'),
  isHa?: boolean(name='isHa'),
  pricingCycle?: string(name='PricingCycle'),
  duration?: integer(name='Duration'),
  isAutoRenew?: boolean(name='IsAutoRenew'),
  masterInstId?: string(name='MasterInstId'),
  mySQLVersion?: integer(name='MySQLVersion'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateDrdsInstanceResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    orderId: long(name='OrderId'),
    drdsInstanceIdList: {
      drdsInstanceIdList: [ string ](name='drdsInstanceIdList', description='drdsInstanceIdList'),
    }(name='DrdsInstanceIdList'),
  }(name='Data'),
}

async function createDrdsInstanceWithOptions(request: CreateDrdsInstanceRequest, runtime: Util.RuntimeOptions): CreateDrdsInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateDrdsInstance', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createDrdsInstance(request: CreateDrdsInstanceRequest): CreateDrdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDrdsInstanceWithOptions(request, runtime);
}

model DescribeDrdsComponentsRequest = {
  commodityCode?: string(name='CommodityCode'),
}

model DescribeDrdsComponentsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  drdsComponents: {
    drdsComponent: [
      {
        regionId: string(name='RegionId'),
        regionName: string(name='RegionName'),
        drdsAzoneInfos: {
          drdsAzoneInfo: [
            {
              zoneId: string(name='ZoneId'),
              zoneName: string(name='ZoneName'),
              supportVpc: boolean(name='SupportVpc'),
              supportClassic: boolean(name='SupportClassic'),
            }
          ](name='DrdsAzoneInfo'),
        }(name='DrdsAzoneInfos'),
        drdsSeriesList: {
          drdsSeries: [
            {
              seriesName: string(name='SeriesName'),
              series: string(name='Series'),
              specs: {
                spec: [ string ](name='Spec', description='Spec'),
              }(name='Specs'),
            }
          ](name='DrdsSeries'),
        }(name='DrdsSeriesList'),
        mysqlVersions: {
          mysqlVersion: [ string ](name='MysqlVersion', description='MysqlVersion'),
        }(name='MysqlVersions'),
      }
    ](name='DrdsComponent'),
  }(name='DrdsComponents'),
}

async function describeDrdsComponentsWithOptions(request: DescribeDrdsComponentsRequest, runtime: Util.RuntimeOptions): DescribeDrdsComponentsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsComponents', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsComponents(request: DescribeDrdsComponentsRequest): DescribeDrdsComponentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsComponentsWithOptions(request, runtime);
}

model AsyncTaskCancelRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  taskId: long(name='TaskId'),
}

model AsyncTaskCancelResponse = {
  requestId: string(name='RequestId'),
  data: boolean(name='Data'),
  success: boolean(name='Success'),
}

async function asyncTaskCancelWithOptions(request: AsyncTaskCancelRequest, runtime: Util.RuntimeOptions): AsyncTaskCancelResponse {
  Util.validateModel(request);
  return doRequest('AsyncTaskCancel', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function asyncTaskCancel(request: AsyncTaskCancelRequest): AsyncTaskCancelResponse {
  var runtime = new Util.RuntimeOptions{};
  return asyncTaskCancelWithOptions(request, runtime);
}

model DescribeDrdsDbTestLinkRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
}

model DescribeDrdsDbTestLinkResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  result: string(name='Result'),
}

async function describeDrdsDbTestLinkWithOptions(request: DescribeDrdsDbTestLinkRequest, runtime: Util.RuntimeOptions): DescribeDrdsDbTestLinkResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsDbTestLink', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsDbTestLink(request: DescribeDrdsDbTestLinkRequest): DescribeDrdsDbTestLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDbTestLinkWithOptions(request, runtime);
}

model GetBatchEvaluateTaskReportRequest = {
  batchEvaluateTaskId: long(name='BatchEvaluateTaskId'),
}

model GetBatchEvaluateTaskReportResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    evaluateResults: [
      {
        taskId: integer(name='TaskId'),
        taskName: string(name='TaskName'),
        instId: integer(name='InstId'),
        dbName: string(name='DbName'),
        taskStatus: string(name='TaskStatus'),
        gmtCreate: string(name='GmtCreate'),
        gmtModified: string(name='GmtModified'),
        rdsType: string(name='RdsType'),
        rdsCount: integer(name='RdsCount'),
        rdsTotalSpace: string(name='RdsTotalSpace'),
        drdsType: string(name='DrdsType'),
        drdsCount: integer(name='DrdsCount'),
        allSqlCount: integer(name='AllSqlCount'),
        slowSqlCount: integer(name='SlowSqlCount'),
        tableShardResults: {
          tableShardResults: [
            {
              table: string(name='Table'),
              shardType: string(name='ShardType'),
              dbShardKey: string(name='DbShardKey'),
              tbShardKey: string(name='TbShardKey'),
              tbpartitions: integer(name='Tbpartitions'),
              dbpartitions: integer(name='Dbpartitions'),
              createTableSql: string(name='CreateTableSql'),
              rowCount: integer(name='RowCount'),
              sqlCount: integer(name='SqlCount'),
              shardKeyType: string(name='ShardKeyType'),
            }
          ](name='TableShardResults'),
        }(name='TableShardResults'),
        rdsInstInfos: {
          rdsInstInfos: [
            {
              instId: string(name='InstId'),
              rdsUsedSpace: integer(name='RdsUsedSpace'),
              rdsPeakIopsWeekly: integer(name='RdsPeakIopsWeekly'),
              rdsPeakQpsWeekly: integer(name='RdsPeakQpsWeekly'),
              rdsPeakSessionsWeekly: integer(name='RdsPeakSessionsWeekly'),
              dataGrowthScale: integer(name='DataGrowthScale'),
              avgQpsGrowthScale: integer(name='AvgQpsGrowthScale'),
            }
          ](name='RdsInstInfos'),
        }(name='RdsInstInfos'),
      }
    ](name='EvaluateResults'),
  }(name='Data'),
}

async function getBatchEvaluateTaskReportWithOptions(request: GetBatchEvaluateTaskReportRequest, runtime: Util.RuntimeOptions): GetBatchEvaluateTaskReportResponse {
  Util.validateModel(request);
  return doRequest('GetBatchEvaluateTaskReport', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function getBatchEvaluateTaskReport(request: GetBatchEvaluateTaskReportRequest): GetBatchEvaluateTaskReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBatchEvaluateTaskReportWithOptions(request, runtime);
}

model RemoveDataImportTaskRequest = {
  taskId: integer(name='TaskId'),
}

model RemoveDataImportTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskManageResult: {
    success: boolean(name='Success'),
    message: string(name='Message'),
  }(name='TaskManageResult'),
}

async function removeDataImportTaskWithOptions(request: RemoveDataImportTaskRequest, runtime: Util.RuntimeOptions): RemoveDataImportTaskResponse {
  Util.validateModel(request);
  return doRequest('RemoveDataImportTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function removeDataImportTask(request: RemoveDataImportTaskRequest): RemoveDataImportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDataImportTaskWithOptions(request, runtime);
}

model RemoveEvaluateTaskRequest = {
  taskId: integer(name='TaskId'),
}

model RemoveEvaluateTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskManageResult: {
    success: boolean(name='Success'),
    message: string(name='Message'),
  }(name='TaskManageResult'),
}

async function removeEvaluateTaskWithOptions(request: RemoveEvaluateTaskRequest, runtime: Util.RuntimeOptions): RemoveEvaluateTaskResponse {
  Util.validateModel(request);
  return doRequest('RemoveEvaluateTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function removeEvaluateTask(request: RemoveEvaluateTaskRequest): RemoveEvaluateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeEvaluateTaskWithOptions(request, runtime);
}

model CheckNewTableNameValidRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  tableName: string(name='TableName'),
}

model CheckNewTableNameValidResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: boolean(name='Data'),
}

async function checkNewTableNameValidWithOptions(request: CheckNewTableNameValidRequest, runtime: Util.RuntimeOptions): CheckNewTableNameValidResponse {
  Util.validateModel(request);
  return doRequest('CheckNewTableNameValid', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function checkNewTableNameValid(request: CheckNewTableNameValidRequest): CheckNewTableNameValidResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkNewTableNameValidWithOptions(request, runtime);
}

model DescribeTableShardingInfoRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  tableName: string(name='TableName'),
}

model DescribeTableShardingInfoResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    dbShardingFunction: string(name='DbShardingFunction'),
    dbRightShiftOffset: integer(name='DbRightShiftOffset'),
    tbShardingFunction: string(name='TbShardingFunction'),
    tbRightShiftOffset: integer(name='TbRightShiftOffset'),
    tbPartitions: integer(name='TbPartitions'),
    isShard: boolean(name='IsShard'),
    tbComputeLength: integer(name='TbComputeLength'),
    dbComputeLength: integer(name='DbComputeLength'),
    columnList: [
      {
        name: string(name='Name'),
        type: string(name='Type'),
      }
    ](name='ColumnList'),
    dbShardingColumnList: [ string ](name='DbShardingColumnList'),
    tbShardingColumnList: [ string ](name='TbShardingColumnList'),
  }(name='Data'),
}

async function describeTableShardingInfoWithOptions(request: DescribeTableShardingInfoRequest, runtime: Util.RuntimeOptions): DescribeTableShardingInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeTableShardingInfo', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeTableShardingInfo(request: DescribeTableShardingInfoRequest): DescribeTableShardingInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTableShardingInfoWithOptions(request, runtime);
}

model SubmitCleanTableShardingKeyModifyRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  taskId: string(name='TaskId'),
}

model SubmitCleanTableShardingKeyModifyResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: boolean(name='Data'),
}

async function submitCleanTableShardingKeyModifyWithOptions(request: SubmitCleanTableShardingKeyModifyRequest, runtime: Util.RuntimeOptions): SubmitCleanTableShardingKeyModifyResponse {
  Util.validateModel(request);
  return doRequest('SubmitCleanTableShardingKeyModify', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function submitCleanTableShardingKeyModify(request: SubmitCleanTableShardingKeyModifyRequest): SubmitCleanTableShardingKeyModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitCleanTableShardingKeyModifyWithOptions(request, runtime);
}

model SubmitRollbackShardingKeyModifyRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  taskId: string(name='TaskId'),
}

model SubmitRollbackShardingKeyModifyResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: boolean(name='Data'),
}

async function submitRollbackShardingKeyModifyWithOptions(request: SubmitRollbackShardingKeyModifyRequest, runtime: Util.RuntimeOptions): SubmitRollbackShardingKeyModifyResponse {
  Util.validateModel(request);
  return doRequest('SubmitRollbackShardingKeyModify', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function submitRollbackShardingKeyModify(request: SubmitRollbackShardingKeyModifyRequest): SubmitRollbackShardingKeyModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitRollbackShardingKeyModifyWithOptions(request, runtime);
}

model SubmitSwitchTableShardingKeyModifyRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  taskId: string(name='TaskId'),
}

model SubmitSwitchTableShardingKeyModifyResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: boolean(name='Data'),
}

async function submitSwitchTableShardingKeyModifyWithOptions(request: SubmitSwitchTableShardingKeyModifyRequest, runtime: Util.RuntimeOptions): SubmitSwitchTableShardingKeyModifyResponse {
  Util.validateModel(request);
  return doRequest('SubmitSwitchTableShardingKeyModify', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function submitSwitchTableShardingKeyModify(request: SubmitSwitchTableShardingKeyModifyRequest): SubmitSwitchTableShardingKeyModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSwitchTableShardingKeyModifyWithOptions(request, runtime);
}

model SubmitTableShardingKeyModifyRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  srcTableName: string(name='SrcTableName'),
  targetTableName: string(name='TargetTableName'),
  dbShardingColumnList?: string(name='DbShardingColumnList'),
  dbShardingFunction?: string(name='DbShardingFunction'),
  dbRightShiftOffset?: integer(name='DbRightShiftOffset'),
  tbShardingColumnList?: string(name='TbShardingColumnList'),
  tbShardingFunction?: string(name='TbShardingFunction'),
  tbRightShiftOffset?: string(name='TbRightShiftOffset'),
  tbPartitions?: string(name='TbPartitions'),
  isShard: boolean(name='IsShard'),
  tbComputeLength?: string(name='TbComputeLength'),
  dbComputeLength?: string(name='DbComputeLength'),
}

model SubmitTableShardingKeyModifyResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: boolean(name='Data'),
}

async function submitTableShardingKeyModifyWithOptions(request: SubmitTableShardingKeyModifyRequest, runtime: Util.RuntimeOptions): SubmitTableShardingKeyModifyResponse {
  Util.validateModel(request);
  return doRequest('SubmitTableShardingKeyModify', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function submitTableShardingKeyModify(request: SubmitTableShardingKeyModifyRequest): SubmitTableShardingKeyModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitTableShardingKeyModifyWithOptions(request, runtime);
}

model PreCheckModifyTableShardingKeyParamRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  srcTableName: string(name='SrcTableName'),
  targetTableName: string(name='TargetTableName'),
  dbShardingColumnList?: string(name='DbShardingColumnList'),
  dbShardingFunction?: string(name='DbShardingFunction'),
  dbRightShiftOffset?: integer(name='DbRightShiftOffset'),
  tbShardingColumnList?: string(name='TbShardingColumnList'),
  tbShardingFunction?: string(name='TbShardingFunction'),
  tbRightShiftOffset?: string(name='TbRightShiftOffset'),
  tbPartitions?: string(name='TbPartitions'),
  isShard: boolean(name='IsShard'),
  tbComputeLength?: string(name='TbComputeLength'),
  dbComputeLength?: string(name='DbComputeLength'),
}

model PreCheckModifyTableShardingKeyParamResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: long(name='Data'),
}

async function preCheckModifyTableShardingKeyParamWithOptions(request: PreCheckModifyTableShardingKeyParamRequest, runtime: Util.RuntimeOptions): PreCheckModifyTableShardingKeyParamResponse {
  Util.validateModel(request);
  return doRequest('PreCheckModifyTableShardingKeyParam', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function preCheckModifyTableShardingKeyParam(request: PreCheckModifyTableShardingKeyParamRequest): PreCheckModifyTableShardingKeyParamResponse {
  var runtime = new Util.RuntimeOptions{};
  return preCheckModifyTableShardingKeyParamWithOptions(request, runtime);
}

model SqlCompatibilityStartRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  targetVersion: string(name='TargetVersion'),
  performanceTest?: boolean(name='PerformanceTest'),
}

model SqlCompatibilityStartResponse = {
  requestId: string(name='RequestId'),
  data: boolean(name='Data'),
  success: boolean(name='Success'),
}

async function sqlCompatibilityStartWithOptions(request: SqlCompatibilityStartRequest, runtime: Util.RuntimeOptions): SqlCompatibilityStartResponse {
  Util.validateModel(request);
  return doRequest('SqlCompatibilityStart', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function sqlCompatibilityStart(request: SqlCompatibilityStartRequest): SqlCompatibilityStartResponse {
  var runtime = new Util.RuntimeOptions{};
  return sqlCompatibilityStartWithOptions(request, runtime);
}

model SqlCompatibilityCancelRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  taskId: long(name='TaskId'),
}

model SqlCompatibilityCancelResponse = {
  requestId: string(name='RequestId'),
  data: boolean(name='Data'),
  success: boolean(name='Success'),
}

async function sqlCompatibilityCancelWithOptions(request: SqlCompatibilityCancelRequest, runtime: Util.RuntimeOptions): SqlCompatibilityCancelResponse {
  Util.validateModel(request);
  return doRequest('SqlCompatibilityCancel', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function sqlCompatibilityCancel(request: SqlCompatibilityCancelRequest): SqlCompatibilityCancelResponse {
  var runtime = new Util.RuntimeOptions{};
  return sqlCompatibilityCancelWithOptions(request, runtime);
}

model ListVersionsRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  drdsVer?: string(name='DrdsVer'),
}

model ListVersionsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  versions: {
    versions: [
      {
        drdsVersion: string(name='DrdsVersion'),
        latest: boolean(name='Latest'),
      }
    ](name='versions'),
  }(name='versions'),
}

async function listVersionsWithOptions(request: ListVersionsRequest, runtime: Util.RuntimeOptions): ListVersionsResponse {
  Util.validateModel(request);
  return doRequest('ListVersions', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function listVersions(request: ListVersionsRequest): ListVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVersionsWithOptions(request, runtime);
}

model ListUserReportsRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  reportId: long(name='ReportId'),
}

model ListUserReportsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  sqlComparisonReport: {
    sqlPassFailNum: long(name='SqlPassFailNum'),
    sqlPassRate: string(name='SqlPassRate'),
    sqlPassSuccNum: long(name='SqlPassSuccNum'),
    version: string(name='Version'),
    executeDetailList: {
      executeDetail: [
        {
          execDetailMsg: string(name='ExecDetailMsg'),
          execute: string(name='Execute'),
          sqlContent: string(name='SqlContent'),
          dbName: string(name='DbName'),
        }
      ](name='executeDetail'),
    }(name='executeDetailList'),
  }(name='sqlComparisonReport'),
}

async function listUserReportsWithOptions(request: ListUserReportsRequest, runtime: Util.RuntimeOptions): ListUserReportsResponse {
  Util.validateModel(request);
  return doRequest('ListUserReports', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function listUserReports(request: ListUserReportsRequest): ListUserReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserReportsWithOptions(request, runtime);
}

model DescribeHiStoreInstanceInfoRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  historeInstanceId: string(name='HistoreInstanceId'),
}

model DescribeHiStoreInstanceInfoResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  hiStoreInstanceInfo: {
    historeInstanceId: string(name='HistoreInstanceId'),
    gmtCreate: long(name='GmtCreate'),
    rpmVersion: string(name='RpmVersion'),
    diskSize: integer(name='DiskSize'),
    machineSpec: string(name='MachineSpec'),
  }(name='HiStoreInstanceInfo'),
}

async function describeHiStoreInstanceInfoWithOptions(request: DescribeHiStoreInstanceInfoRequest, runtime: Util.RuntimeOptions): DescribeHiStoreInstanceInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeHiStoreInstanceInfo', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeHiStoreInstanceInfo(request: DescribeHiStoreInstanceInfoRequest): DescribeHiStoreInstanceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHiStoreInstanceInfoWithOptions(request, runtime);
}

model RollbackHiStoreInstanceRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  historeInstanceId: string(name='HistoreInstanceId'),
}

model RollbackHiStoreInstanceResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function rollbackHiStoreInstanceWithOptions(request: RollbackHiStoreInstanceRequest, runtime: Util.RuntimeOptions): RollbackHiStoreInstanceResponse {
  Util.validateModel(request);
  return doRequest('RollbackHiStoreInstance', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function rollbackHiStoreInstance(request: RollbackHiStoreInstanceRequest): RollbackHiStoreInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackHiStoreInstanceWithOptions(request, runtime);
}

model ModifyPolarDbReadWeightRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  dbNodeIds: string(name='DbNodeIds'),
  dbInstanceId: string(name='DbInstanceId'),
  weights: string(name='Weights'),
}

model ModifyPolarDbReadWeightResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function modifyPolarDbReadWeightWithOptions(request: ModifyPolarDbReadWeightRequest, runtime: Util.RuntimeOptions): ModifyPolarDbReadWeightResponse {
  Util.validateModel(request);
  return doRequest('ModifyPolarDbReadWeight', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function modifyPolarDbReadWeight(request: ModifyPolarDbReadWeightRequest): ModifyPolarDbReadWeightResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPolarDbReadWeightWithOptions(request, runtime);
}

model DatalinkReplicationPrecheckRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  srcTableName: string(name='SrcTableName'),
  dstTableName: string(name='DstTableName'),
}

model DatalinkReplicationPrecheckResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: long(name='Data'),
}

async function datalinkReplicationPrecheckWithOptions(request: DatalinkReplicationPrecheckRequest, runtime: Util.RuntimeOptions): DatalinkReplicationPrecheckResponse {
  Util.validateModel(request);
  return doRequest('DatalinkReplicationPrecheck', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function datalinkReplicationPrecheck(request: DatalinkReplicationPrecheckRequest): DatalinkReplicationPrecheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return datalinkReplicationPrecheckWithOptions(request, runtime);
}

model ReleaseHiStoreInstanceRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  historeInstanceId: string(name='HistoreInstanceId'),
}

model ReleaseHiStoreInstanceResponse = {
  requestId: string(name='RequestId'),
  data: long(name='Data'),
}

async function releaseHiStoreInstanceWithOptions(request: ReleaseHiStoreInstanceRequest, runtime: Util.RuntimeOptions): ReleaseHiStoreInstanceResponse {
  Util.validateModel(request);
  return doRequest('ReleaseHiStoreInstance', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function releaseHiStoreInstance(request: ReleaseHiStoreInstanceRequest): ReleaseHiStoreInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseHiStoreInstanceWithOptions(request, runtime);
}

model SubmitSmoothExpandPreCheckRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  dbInstType: string(name='DbInstType'),
}

model SubmitSmoothExpandPreCheckResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  msg: string(name='Msg'),
  taskId: long(name='TaskId'),
}

async function submitSmoothExpandPreCheckWithOptions(request: SubmitSmoothExpandPreCheckRequest, runtime: Util.RuntimeOptions): SubmitSmoothExpandPreCheckResponse {
  Util.validateModel(request);
  return doRequest('SubmitSmoothExpandPreCheck', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function submitSmoothExpandPreCheck(request: SubmitSmoothExpandPreCheckRequest): SubmitSmoothExpandPreCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSmoothExpandPreCheckWithOptions(request, runtime);
}

model DescribeDrdsDBClusterRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  dbInstanceId: string(name='DbInstanceId'),
}

model DescribeDrdsDBClusterResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  dbInstance: {
    DBInstanceId: string(name='DBInstanceId'),
    port: integer(name='Port'),
    DBInstanceStatus: string(name='DBInstanceStatus'),
    dbInstType: string(name='DbInstType'),
    engine: string(name='Engine'),
    engineVersion: string(name='EngineVersion'),
    rdsInstType: string(name='RdsInstType'),
    payType: string(name='PayType'),
    expireTime: string(name='ExpireTime'),
    remainDays: string(name='RemainDays'),
    networkType: string(name='NetworkType'),
    readMode: string(name='ReadMode'),
    endpoints: {
      endpoint: [
        {
          nodeIds: string(name='NodeIds'),
          endpointId: string(name='EndpointId'),
          readWeight: integer(name='ReadWeight'),
        }
      ](name='Endpoint'),
    }(name='Endpoints'),
    DBNodes: {
      DBNode: [
        {
          DBNodeId: string(name='DBNodeId'),
          zoneId: string(name='ZoneId'),
          DBNodeStatus: string(name='DBNodeStatus'),
          DBNodeRole: string(name='DBNodeRole'),
        }
      ](name='DBNode'),
    }(name='DBNodes'),
  }(name='DbInstance'),
}

async function describeDrdsDBClusterWithOptions(request: DescribeDrdsDBClusterRequest, runtime: Util.RuntimeOptions): DescribeDrdsDBClusterResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsDBCluster', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsDBCluster(request: DescribeDrdsDBClusterRequest): DescribeDrdsDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDBClusterWithOptions(request, runtime);
}

model SubmitHotExpandPreCheckTaskRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  tableList?: [ string ](name='TableList'),
  dbInstType: string(name='DbInstType'),
}

model SubmitHotExpandPreCheckTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  msg: string(name='Msg'),
  taskId: long(name='TaskId'),
}

async function submitHotExpandPreCheckTaskWithOptions(request: SubmitHotExpandPreCheckTaskRequest, runtime: Util.RuntimeOptions): SubmitHotExpandPreCheckTaskResponse {
  Util.validateModel(request);
  return doRequest('SubmitHotExpandPreCheckTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function submitHotExpandPreCheckTask(request: SubmitHotExpandPreCheckTaskRequest): SubmitHotExpandPreCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitHotExpandPreCheckTaskWithOptions(request, runtime);
}

model UpgradeHiStoreInstanceRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  historeInstanceId: string(name='HistoreInstanceId'),
}

model UpgradeHiStoreInstanceResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function upgradeHiStoreInstanceWithOptions(request: UpgradeHiStoreInstanceRequest, runtime: Util.RuntimeOptions): UpgradeHiStoreInstanceResponse {
  Util.validateModel(request);
  return doRequest('UpgradeHiStoreInstance', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function upgradeHiStoreInstance(request: UpgradeHiStoreInstanceRequest): UpgradeHiStoreInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeHiStoreInstanceWithOptions(request, runtime);
}

model SubmitSmoothExpandPreCheckTaskRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model SubmitSmoothExpandPreCheckTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  msg: string(name='Msg'),
  taskId: long(name='TaskId'),
}

async function submitSmoothExpandPreCheckTaskWithOptions(request: SubmitSmoothExpandPreCheckTaskRequest, runtime: Util.RuntimeOptions): SubmitSmoothExpandPreCheckTaskResponse {
  Util.validateModel(request);
  return doRequest('SubmitSmoothExpandPreCheckTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function submitSmoothExpandPreCheckTask(request: SubmitSmoothExpandPreCheckTaskRequest): SubmitSmoothExpandPreCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSmoothExpandPreCheckTaskWithOptions(request, runtime);
}

model DescribePreCheckResultRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  taskId: string(name='TaskId'),
}

model DescribePreCheckResultResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  preCheckResult: {
    preCheckName: string(name='PreCheckName'),
    state: string(name='State'),
    subCheckItems: [
      {
        preCheckItemName: string(name='PreCheckItemName'),
        state: string(name='State'),
        errorMsgCode: string(name='ErrorMsgCode'),
        errorMsgParams: [ string ](name='ErrorMsgParams'),
      }
    ](name='SubCheckItems'),
  }(name='PreCheckResult'),
}

async function describePreCheckResultWithOptions(request: DescribePreCheckResultRequest, runtime: Util.RuntimeOptions): DescribePreCheckResultResponse {
  Util.validateModel(request);
  return doRequest('DescribePreCheckResult', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describePreCheckResult(request: DescribePreCheckResultRequest): DescribePreCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePreCheckResultWithOptions(request, runtime);
}

model DescribeRDSPerformanceRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  rdsInstanceId: string(name='RdsInstanceId'),
  keys: string(name='Keys'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  dbInstType?: string(name='DbInstType'),
}

model DescribeRDSPerformanceResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: [
    {
      key: string(name='Key'),
      unit: string(name='Unit'),
      nodeNum: integer(name='NodeNum'),
      nodeName: string(name='NodeName'),
      values: [
        {
          value: string(name='Value'),
          date: long(name='Date'),
        }
      ](name='Values'),
    }
  ](name='Data'),
}

async function describeRDSPerformanceWithOptions(request: DescribeRDSPerformanceRequest, runtime: Util.RuntimeOptions): DescribeRDSPerformanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeRDSPerformance', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeRDSPerformance(request: DescribeRDSPerformanceRequest): DescribeRDSPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRDSPerformanceWithOptions(request, runtime);
}

model UpdateInstanceNetworkRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  srcInstanceNetworkType: string(name='SrcInstanceNetworkType'),
  retainClassic?: boolean(name='RetainClassic'),
  classicExpiredDays?: integer(name='ClassicExpiredDays'),
}

model UpdateInstanceNetworkResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function updateInstanceNetworkWithOptions(request: UpdateInstanceNetworkRequest, runtime: Util.RuntimeOptions): UpdateInstanceNetworkResponse {
  Util.validateModel(request);
  return doRequest('UpdateInstanceNetwork', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function updateInstanceNetwork(request: UpdateInstanceNetworkRequest): UpdateInstanceNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceNetworkWithOptions(request, runtime);
}

model DescribeDrdsSqlAuditStatusRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
}

model DescribeDrdsSqlAuditStatusResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    data: [
      {
        dbName: string(name='DbName'),
        enabled: string(name='Enabled'),
        detailed: string(name='Detailed'),
        extraWriteEnabled: boolean(name='ExtraWriteEnabled'),
        extraAliUid: long(name='ExtraAliUid'),
        extraSlsProject: string(name='ExtraSlsProject'),
        extraSlsLogStore: string(name='ExtraSlsLogStore'),
      }
    ](name='Data'),
  }(name='Data'),
}

async function describeDrdsSqlAuditStatusWithOptions(request: DescribeDrdsSqlAuditStatusRequest, runtime: Util.RuntimeOptions): DescribeDrdsSqlAuditStatusResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsSqlAuditStatus', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsSqlAuditStatus(request: DescribeDrdsSqlAuditStatusRequest): DescribeDrdsSqlAuditStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsSqlAuditStatusWithOptions(request, runtime);
}

model DescribeDrdsDbRdsNameListRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model DescribeDrdsDbRdsNameListResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  instanceNameList: {
    instanceName: [ string ](name='InstanceName'),
  }(name='InstanceNameList'),
}

async function describeDrdsDbRdsNameListWithOptions(request: DescribeDrdsDbRdsNameListRequest, runtime: Util.RuntimeOptions): DescribeDrdsDbRdsNameListResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsDbRdsNameList', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsDbRdsNameList(request: DescribeDrdsDbRdsNameListRequest): DescribeDrdsDbRdsNameListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDbRdsNameListWithOptions(request, runtime);
}

model SwitchGlobalBroadcastTypeRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model SwitchGlobalBroadcastTypeResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: boolean(name='Data'),
}

async function switchGlobalBroadcastTypeWithOptions(request: SwitchGlobalBroadcastTypeRequest, runtime: Util.RuntimeOptions): SwitchGlobalBroadcastTypeResponse {
  Util.validateModel(request);
  return doRequest('SwitchGlobalBroadcastType', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function switchGlobalBroadcastType(request: SwitchGlobalBroadcastTypeRequest): SwitchGlobalBroadcastTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchGlobalBroadcastTypeWithOptions(request, runtime);
}

model ResetDrdsToRdsConnectionsRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model ResetDrdsToRdsConnectionsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  result: string(name='Result'),
}

async function resetDrdsToRdsConnectionsWithOptions(request: ResetDrdsToRdsConnectionsRequest, runtime: Util.RuntimeOptions): ResetDrdsToRdsConnectionsResponse {
  Util.validateModel(request);
  return doRequest('ResetDrdsToRdsConnections', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function resetDrdsToRdsConnections(request: ResetDrdsToRdsConnectionsRequest): ResetDrdsToRdsConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDrdsToRdsConnectionsWithOptions(request, runtime);
}

model DescribeInstanceSwitchAzoneRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
}

model DescribeInstanceSwitchAzoneResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  result: {
    originAzoneId: string(name='OriginAzoneId'),
    regionId: string(name='RegionId'),
    switchAble: boolean(name='SwitchAble'),
    targetAzones: {
      targetAzone: [ string ](name='TargetAzone', description='TargetAzone'),
    }(name='TargetAzones'),
  }(name='Result'),
}

async function describeInstanceSwitchAzoneWithOptions(request: DescribeInstanceSwitchAzoneRequest, runtime: Util.RuntimeOptions): DescribeInstanceSwitchAzoneResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceSwitchAzone', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeInstanceSwitchAzone(request: DescribeInstanceSwitchAzoneRequest): DescribeInstanceSwitchAzoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSwitchAzoneWithOptions(request, runtime);
}

model DescribeInstanceSwitchNetworkRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
}

model DescribeInstanceSwitchNetworkResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  vpcInfos: {
    vpcInfo: [
      {
        vpcId: string(name='VpcId'),
        regionId: string(name='RegionId'),
        vpcName: string(name='VpcName'),
        vswitchInfos: {
          vswitchInfo: [
            {
              vswitchId: string(name='VswitchId'),
              vpcId: string(name='VpcId'),
              vswitchName: string(name='VswitchName'),
              azoneId: string(name='AzoneId'),
              drdsSupported: boolean(name='DrdsSupported'),
            }
          ](name='VswitchInfo'),
        }(name='VswitchInfos'),
      }
    ](name='VpcInfo'),
  }(name='VpcInfos'),
}

async function describeInstanceSwitchNetworkWithOptions(request: DescribeInstanceSwitchNetworkRequest, runtime: Util.RuntimeOptions): DescribeInstanceSwitchNetworkResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceSwitchNetwork', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeInstanceSwitchNetwork(request: DescribeInstanceSwitchNetworkRequest): DescribeInstanceSwitchNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSwitchNetworkWithOptions(request, runtime);
}

model DescribeDbInstancesRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  search?: string(name='Search'),
  dbInstType?: string(name='DbInstType'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeDbInstancesResponse = {
  requestId: string(name='RequestId'),
  items: {
    DBInstance: [
      {
        DBInstanceId: string(name='DBInstanceId'),
        DBInstanceStatus: integer(name='DBInstanceStatus'),
        DBInstanceType: string(name='DBInstanceType'),
        engine: string(name='Engine'),
        engineVersion: string(name='EngineVersion'),
        regionId: string(name='RegionId'),
        zoneId: string(name='ZoneId'),
        DBInstanceDescription: string(name='DBInstanceDescription'),
        instanceNetworkType: string(name='InstanceNetworkType'),
        readOnlyDBInstanceId: {
          readOnlyDBInstanceId: [ string ](name='ReadOnlyDBInstanceId', description='ReadOnlyDBInstanceId'),
        }(name='ReadOnlyDBInstanceId'),
      }
    ](name='DBInstance'),
  }(name='Items'),
}

async function describeDbInstancesWithOptions(request: DescribeDbInstancesRequest, runtime: Util.RuntimeOptions): DescribeDbInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeDbInstances', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDbInstances(request: DescribeDbInstancesRequest): DescribeDbInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDbInstancesWithOptions(request, runtime);
}

model DescribeDrdsInstancesRequest = {
  type?: string(name='Type'),
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  description?: string(name='Description'),
  expired?: boolean(name='Expired'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
  mix?: boolean(name='Mix'),
}

model DescribeDrdsInstancesResponse = {
  requestId: string(name='RequestId'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  total: integer(name='Total'),
  instances: {
    instance: [
      {
        drdsInstanceId: string(name='DrdsInstanceId'),
        type: string(name='Type'),
        regionId: string(name='RegionId'),
        zoneId: string(name='ZoneId'),
        description: string(name='Description'),
        networkType: string(name='NetworkType'),
        status: string(name='Status'),
        createTime: long(name='CreateTime'),
        version: long(name='Version'),
        commodityCode: string(name='CommodityCode'),
        instRole: string(name='InstRole'),
        instanceSeries: string(name='InstanceSeries'),
        instanceSpec: string(name='InstanceSpec'),
        masterInstanceId: string(name='MasterInstanceId'),
        vpcCloudInstanceId: string(name='VpcCloudInstanceId'),
        vpcId: string(name='VpcId'),
        expireDate: long(name='ExpireDate'),
        versionAction: string(name='VersionAction'),
        label: string(name='Label'),
        machineType: string(name='MachineType'),
        orderInstanceId: string(name='OrderInstanceId'),
        resourceGroupId: string(name='ResourceGroupId'),
        vips: {
          vip: [
            {
              IP: string(name='IP'),
              port: string(name='Port'),
              type: string(name='Type'),
              vpcId: string(name='VpcId'),
              vswitchId: string(name='VswitchId'),
            }
          ](name='Vip'),
        }(name='Vips'),
        readOnlyDBInstanceIds: {
          readOnlyDBInstanceId: [ string ](name='ReadOnlyDBInstanceId', description='ReadOnlyDBInstanceId'),
        }(name='ReadOnlyDBInstanceIds'),
      }
    ](name='Instance'),
  }(name='Instances'),
}

async function describeDrdsInstancesWithOptions(request: DescribeDrdsInstancesRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsInstances', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsInstances(request: DescribeDrdsInstancesRequest): DescribeDrdsInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstancesWithOptions(request, runtime);
}

model DescribeDrdsDBsRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeDrdsDBsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
  total: string(name='Total'),
  data: {
    db: [
      {
        dbName: string(name='DbName'),
        status: string(name='Status'),
        createTime: string(name='CreateTime'),
        mode: string(name='Mode'),
        schema: string(name='Schema'),
        dbInstType: string(name='DbInstType'),
      }
    ](name='Db'),
  }(name='Data'),
}

async function describeDrdsDBsWithOptions(request: DescribeDrdsDBsRequest, runtime: Util.RuntimeOptions): DescribeDrdsDBsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsDBs', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsDBs(request: DescribeDrdsDBsRequest): DescribeDrdsDBsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDBsWithOptions(request, runtime);
}

model DescribeDrdsInstanceRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeDrdsInstanceResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    drdsInstanceId: string(name='DrdsInstanceId'),
    type: string(name='Type'),
    regionId: string(name='RegionId'),
    zoneId: string(name='ZoneId'),
    description: string(name='Description'),
    networkType: string(name='NetworkType'),
    status: string(name='Status'),
    createTime: long(name='CreateTime'),
    version: long(name='Version'),
    instanceSeries: string(name='InstanceSeries'),
    instanceSpec: string(name='InstanceSpec'),
    vpcCloudInstanceId: string(name='VpcCloudInstanceId'),
    instRole: string(name='InstRole'),
    commodityCode: string(name='CommodityCode'),
    expireDate: long(name='ExpireDate'),
    versionAction: string(name='VersionAction'),
    label: string(name='Label'),
    masterInstanceId: string(name='MasterInstanceId'),
    machineType: string(name='MachineType'),
    orderInstanceId: string(name='OrderInstanceId'),
    mysqlVersion: integer(name='MysqlVersion'),
    storageType: string(name='StorageType'),
    resourceGroupId: string(name='ResourceGroupId'),
    vips: {
      vip: [
        {
          dns: string(name='Dns'),
          expireDays: long(name='ExpireDays'),
          port: string(name='Port'),
          type: string(name='Type'),
          vpcId: string(name='VpcId'),
          vswitchId: string(name='VswitchId'),
        }
      ](name='Vip'),
    }(name='Vips'),
    readOnlyDBInstanceIds: {
      readOnlyDBInstanceId: [ string ](name='ReadOnlyDBInstanceId', description='ReadOnlyDBInstanceId'),
    }(name='ReadOnlyDBInstanceIds'),
  }(name='Data'),
}

async function describeDrdsInstanceWithOptions(request: DescribeDrdsInstanceRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsInstance', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsInstance(request: DescribeDrdsInstanceRequest): DescribeDrdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceWithOptions(request, runtime);
}

model DescribeDrdsInstanceVersionRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeDrdsInstanceVersionResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    instanceVersion: string(name='InstanceVersion'),
    newestVersion: string(name='NewestVersion'),
  }(name='Data'),
}

async function describeDrdsInstanceVersionWithOptions(request: DescribeDrdsInstanceVersionRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceVersionResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsInstanceVersion', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsInstanceVersion(request: DescribeDrdsInstanceVersionRequest): DescribeDrdsInstanceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceVersionWithOptions(request, runtime);
}

model DescribeRdsSuperAccountInstancesRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbInstType?: string(name='DbInstType'),
  rdsInstance: [ string ](name='RdsInstance'),
}

model DescribeRdsSuperAccountInstancesResponse = {
  requestId: string(name='RequestId'),
  dbInstances: {
    dbInstance: [ string ](name='DbInstance'),
  }(name='DbInstances'),
}

async function describeRdsSuperAccountInstancesWithOptions(request: DescribeRdsSuperAccountInstancesRequest, runtime: Util.RuntimeOptions): DescribeRdsSuperAccountInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeRdsSuperAccountInstances', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeRdsSuperAccountInstances(request: DescribeRdsSuperAccountInstancesRequest): DescribeRdsSuperAccountInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsSuperAccountInstancesWithOptions(request, runtime);
}

model DescribeDrdsDBRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model DescribeDrdsDBResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    dbName: string(name='DbName'),
    status: string(name='Status'),
    createTime: string(name='CreateTime'),
    mode: string(name='Mode'),
    schema: string(name='Schema'),
    dbInstType: string(name='DbInstType'),
    instRole: string(name='InstRole'),
  }(name='Data'),
}

async function describeDrdsDBWithOptions(request: DescribeDrdsDBRequest, runtime: Util.RuntimeOptions): DescribeDrdsDBResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsDB', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsDB(request: DescribeDrdsDBRequest): DescribeDrdsDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDBWithOptions(request, runtime);
}

model CreateDrdsDBRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  encode?: string(name='Encode'),
  password?: string(name='Password'),
  rdsInstance?: [ string ](name='RdsInstance'),
  type?: string(name='Type'),
  dbInstType?: string(name='DbInstType'),
  rdsSuperAccount?: [
    {
      dbInstanceId?: string(name='DbInstanceId'),
      accountName?: string(name='AccountName'),
      password?: string(name='Password'),
    }
  ](name='RdsSuperAccount'),
  instDbName?: [
    {
      dbInstanceId?: string(name='DbInstanceId'),
      shardDbName?: [ string ](name='ShardDbName'),
    }
  ](name='InstDbName'),
  dbInstanceIsCreating?: boolean(name='DbInstanceIsCreating'),
  accountName?: string(name='AccountName'),
}

model CreateDrdsDBResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function createDrdsDBWithOptions(request: CreateDrdsDBRequest, runtime: Util.RuntimeOptions): CreateDrdsDBResponse {
  Util.validateModel(request);
  return doRequest('CreateDrdsDB', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createDrdsDB(request: CreateDrdsDBRequest): CreateDrdsDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDrdsDBWithOptions(request, runtime);
}

model ModifyRdsReadWeightRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  instanceNames: string(name='InstanceNames'),
  weights: string(name='Weights'),
}

model ModifyRdsReadWeightResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function modifyRdsReadWeightWithOptions(request: ModifyRdsReadWeightRequest, runtime: Util.RuntimeOptions): ModifyRdsReadWeightResponse {
  Util.validateModel(request);
  return doRequest('ModifyRdsReadWeight', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function modifyRdsReadWeight(request: ModifyRdsReadWeightRequest): ModifyRdsReadWeightResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRdsReadWeightWithOptions(request, runtime);
}

model CheckDrdsDbNameRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model CheckDrdsDbNameResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  result: boolean(name='Result'),
}

async function checkDrdsDbNameWithOptions(request: CheckDrdsDbNameRequest, runtime: Util.RuntimeOptions): CheckDrdsDbNameResponse {
  Util.validateModel(request);
  return doRequest('CheckDrdsDbName', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function checkDrdsDbName(request: CheckDrdsDbNameRequest): CheckDrdsDbNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDrdsDbNameWithOptions(request, runtime);
}

model DescribeInstanceAccountsRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
}

model DescribeInstanceAccountsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  instanceAccounts: {
    instanceAccount: [
      {
        accountName: string(name='AccountName'),
        host: string(name='Host'),
        accountType: integer(name='AccountType'),
        description: string(name='Description'),
        dbPrivileges: {
          dbPrivilege: [
            {
              dbName: string(name='DbName'),
              privilege: string(name='Privilege'),
            }
          ](name='DbPrivilege'),
        }(name='DbPrivileges'),
      }
    ](name='InstanceAccount'),
  }(name='InstanceAccounts'),
}

async function describeInstanceAccountsWithOptions(request: DescribeInstanceAccountsRequest, runtime: Util.RuntimeOptions): DescribeInstanceAccountsResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceAccounts', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeInstanceAccounts(request: DescribeInstanceAccountsRequest): DescribeInstanceAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAccountsWithOptions(request, runtime);
}

model DescribeDrdsDbInstanceRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  dbInstanceId: string(name='DbInstanceId'),
}

model DescribeDrdsDbInstanceResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  dbInstance: {
    DBInstanceId: string(name='DBInstanceId'),
    dmInstanceId: string(name='DmInstanceId'),
    connectUrl: string(name='ConnectUrl'),
    port: integer(name='Port'),
    DBInstanceStatus: string(name='DBInstanceStatus'),
    dbInstType: string(name='DbInstType'),
    readWeight: integer(name='ReadWeight'),
    engine: string(name='Engine'),
    engineVersion: string(name='EngineVersion'),
    rdsInstType: string(name='RdsInstType'),
    payType: string(name='PayType'),
    expireTime: string(name='ExpireTime'),
    remainDays: string(name='RemainDays'),
    networkType: string(name='NetworkType'),
    readOnlyInstances: {
      readOnlyInstance: [
        {
          DBInstanceId: string(name='DBInstanceId'),
          dmInstanceId: string(name='DmInstanceId'),
          connectUrl: string(name='ConnectUrl'),
          port: integer(name='Port'),
          DBInstanceStatus: string(name='DBInstanceStatus'),
          dbInstType: string(name='DbInstType'),
          readWeight: integer(name='ReadWeight'),
          engine: string(name='Engine'),
          engineVersion: string(name='EngineVersion'),
          rdsInstType: string(name='RdsInstType'),
          payType: string(name='PayType'),
          expireTime: string(name='ExpireTime'),
          remainDays: string(name='RemainDays'),
          networkType: string(name='NetworkType'),
          versionAction: integer(name='VersionAction'),
        }
      ](name='ReadOnlyInstance'),
    }(name='ReadOnlyInstances'),
  }(name='DbInstance'),
}

async function describeDrdsDbInstanceWithOptions(request: DescribeDrdsDbInstanceRequest, runtime: Util.RuntimeOptions): DescribeDrdsDbInstanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsDbInstance', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsDbInstance(request: DescribeDrdsDbInstanceRequest): DescribeDrdsDbInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDbInstanceWithOptions(request, runtime);
}

model DescribeDrdsDbInstancesRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeDrdsDbInstancesResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  pageNumber: string(name='PageNumber'),
  pageSize: string(name='PageSize'),
  total: string(name='Total'),
  dbInstances: {
    dbInstance: [
      {
        DBInstanceId: string(name='DBInstanceId'),
        dmInstanceId: string(name='DmInstanceId'),
        connectUrl: string(name='ConnectUrl'),
        port: integer(name='Port'),
        DBInstanceStatus: string(name='DBInstanceStatus'),
        dbInstType: string(name='DbInstType'),
        readWeight: integer(name='ReadWeight'),
        networkType: string(name='NetworkType'),
        engine: string(name='Engine'),
        engineVersion: string(name='EngineVersion'),
        rdsInstType: string(name='RdsInstType'),
        payType: string(name='PayType'),
        expireTime: string(name='ExpireTime'),
        remainDays: integer(name='RemainDays'),
        readOnlyInstances: {
          readOnlyInstance: [
            {
              instanceName: string(name='InstanceName'),
              dmInstanceId: string(name='DmInstanceId'),
              connectUrl: string(name='ConnectUrl'),
              port: integer(name='Port'),
              DBInstanceStatus: string(name='DBInstanceStatus'),
              dbInstType: string(name='DbInstType'),
              readWeight: integer(name='ReadWeight'),
              networkType: string(name='NetworkType'),
              engine: string(name='Engine'),
              engineVersion: string(name='EngineVersion'),
              rdsInstType: string(name='RdsInstType'),
              payType: string(name='PayType'),
              expireTime: string(name='ExpireTime'),
              remainDays: integer(name='RemainDays'),
            }
          ](name='ReadOnlyInstance'),
        }(name='ReadOnlyInstances'),
      }
    ](name='DbInstance'),
  }(name='DbInstances'),
}

async function describeDrdsDbInstancesWithOptions(request: DescribeDrdsDbInstancesRequest, runtime: Util.RuntimeOptions): DescribeDrdsDbInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsDbInstances', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsDbInstances(request: DescribeDrdsDbInstancesRequest): DescribeDrdsDbInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDbInstancesWithOptions(request, runtime);
}

model DescribeDrdsShardingDbsRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  dbNamePattern?: string(name='DbNamePattern'),
}

model DescribeDrdsShardingDbsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  shardingDbs: {
    shardingDb: [
      {
        shardingDbName: string(name='ShardingDbName'),
        dbInstanceId: string(name='DbInstanceId'),
        groupName: string(name='GroupName'),
        dbStatus: string(name='DbStatus'),
        dbType: string(name='DbType'),
        minPoolSize: integer(name='MinPoolSize'),
        maxPoolSize: integer(name='MaxPoolSize'),
        idleTimeOut: integer(name='IdleTimeOut'),
        blockingTimeout: integer(name='BlockingTimeout'),
        connectionProperties: string(name='ConnectionProperties'),
        preparedStatementCacheSize: integer(name='PreparedStatementCacheSize'),
        userName: string(name='UserName'),
        connectUrl: string(name='ConnectUrl'),
      }
    ](name='ShardingDb'),
  }(name='ShardingDbs'),
}

async function describeDrdsShardingDbsWithOptions(request: DescribeDrdsShardingDbsRequest, runtime: Util.RuntimeOptions): DescribeDrdsShardingDbsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsShardingDbs', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsShardingDbs(request: DescribeDrdsShardingDbsRequest): DescribeDrdsShardingDbsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsShardingDbsWithOptions(request, runtime);
}

model RemoveDrdsInstanceRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
}

model RemoveDrdsInstanceResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function removeDrdsInstanceWithOptions(request: RemoveDrdsInstanceRequest, runtime: Util.RuntimeOptions): RemoveDrdsInstanceResponse {
  Util.validateModel(request);
  return doRequest('RemoveDrdsInstance', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function removeDrdsInstance(request: RemoveDrdsInstanceRequest): RemoveDrdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDrdsInstanceWithOptions(request, runtime);
}

model CreateInstanceAccountRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  accountName: string(name='AccountName'),
  password: string(name='Password'),
  dbPrivilege: [
    {
      dbName?: string(name='DbName'),
      privilege?: string(name='Privilege'),
    }
  ](name='DbPrivilege'),
}

model CreateInstanceAccountResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function createInstanceAccountWithOptions(request: CreateInstanceAccountRequest, runtime: Util.RuntimeOptions): CreateInstanceAccountResponse {
  Util.validateModel(request);
  return doRequest('CreateInstanceAccount', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createInstanceAccount(request: CreateInstanceAccountRequest): CreateInstanceAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceAccountWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  accountName: string(name='AccountName'),
  description: string(name='Description'),
}

model ModifyAccountDescriptionResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  return doRequest('ModifyAccountDescription', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ChangeAccountPasswordRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  accountName: string(name='AccountName'),
  password: string(name='Password'),
}

model ChangeAccountPasswordResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function changeAccountPasswordWithOptions(request: ChangeAccountPasswordRequest, runtime: Util.RuntimeOptions): ChangeAccountPasswordResponse {
  Util.validateModel(request);
  return doRequest('ChangeAccountPassword', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function changeAccountPassword(request: ChangeAccountPasswordRequest): ChangeAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeAccountPasswordWithOptions(request, runtime);
}

model RemoveInstanceAccountRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  accountName: string(name='AccountName'),
}

model RemoveInstanceAccountResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function removeInstanceAccountWithOptions(request: RemoveInstanceAccountRequest, runtime: Util.RuntimeOptions): RemoveInstanceAccountResponse {
  Util.validateModel(request);
  return doRequest('RemoveInstanceAccount', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function removeInstanceAccount(request: RemoveInstanceAccountRequest): RemoveInstanceAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeInstanceAccountWithOptions(request, runtime);
}

model RemoveDrdsDbRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model RemoveDrdsDbResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function removeDrdsDbWithOptions(request: RemoveDrdsDbRequest, runtime: Util.RuntimeOptions): RemoveDrdsDbResponse {
  Util.validateModel(request);
  return doRequest('RemoveDrdsDb', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function removeDrdsDb(request: RemoveDrdsDbRequest): RemoveDrdsDbResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDrdsDbWithOptions(request, runtime);
}

model ModifyAccountPrivilegeRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  accountName: string(name='AccountName'),
  dbPrivilege: [
    {
      dbName?: string(name='DbName'),
      privilege?: string(name='Privilege'),
    }
  ](name='DbPrivilege'),
}

model ModifyAccountPrivilegeResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function modifyAccountPrivilegeWithOptions(request: ModifyAccountPrivilegeRequest, runtime: Util.RuntimeOptions): ModifyAccountPrivilegeResponse {
  Util.validateModel(request);
  return doRequest('ModifyAccountPrivilege', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function modifyAccountPrivilege(request: ModifyAccountPrivilegeRequest): ModifyAccountPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountPrivilegeWithOptions(request, runtime);
}

model DescribeDrdsSlowSqlsRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  exeTime: long(name='ExeTime'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  pageNumber?: integer(name='PageNumber'),
  pageSize?: integer(name='PageSize'),
}

model DescribeDrdsSlowSqlsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  total: integer(name='Total'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  items: {
    item: [
      {
        schema: string(name='Schema'),
        sql: string(name='Sql'),
        sendTime: long(name='SendTime'),
        responseTime: long(name='ResponseTime'),
        host: string(name='Host'),
      }
    ](name='Item'),
  }(name='Items'),
}

async function describeDrdsSlowSqlsWithOptions(request: DescribeDrdsSlowSqlsRequest, runtime: Util.RuntimeOptions): DescribeDrdsSlowSqlsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsSlowSqls', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsSlowSqls(request: DescribeDrdsSlowSqlsRequest): DescribeDrdsSlowSqlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsSlowSqlsWithOptions(request, runtime);
}

model ModifyDrdsIpWhiteListRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  ipWhiteList: string(name='IpWhiteList'),
  mode?: boolean(name='Mode'),
  groupName?: string(name='GroupName'),
  groupAttribute?: string(name='GroupAttribute'),
}

model ModifyDrdsIpWhiteListResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function modifyDrdsIpWhiteListWithOptions(request: ModifyDrdsIpWhiteListRequest, runtime: Util.RuntimeOptions): ModifyDrdsIpWhiteListResponse {
  Util.validateModel(request);
  return doRequest('ModifyDrdsIpWhiteList', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function modifyDrdsIpWhiteList(request: ModifyDrdsIpWhiteListRequest): ModifyDrdsIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDrdsIpWhiteListWithOptions(request, runtime);
}

model DescribeDrdsDBIpWhiteListRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  groupName?: string(name='GroupName'),
}

model DescribeDrdsDBIpWhiteListResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  ipWhiteList: {
    ip: [ string ](name='Ip'),
  }(name='IpWhiteList'),
}

async function describeDrdsDBIpWhiteListWithOptions(request: DescribeDrdsDBIpWhiteListRequest, runtime: Util.RuntimeOptions): DescribeDrdsDBIpWhiteListResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsDBIpWhiteList', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsDBIpWhiteList(request: DescribeDrdsDBIpWhiteListRequest): DescribeDrdsDBIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDBIpWhiteListWithOptions(request, runtime);
}

model DescribeDrdsTasksRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  taskType?: string(name='TaskType'),
}

model DescribeDrdsTasksResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  tasks: {
    task: [
      {
        id: long(name='Id'),
        state: string(name='State'),
        content: string(name='Content'),
      }
    ](name='Task'),
  }(name='Tasks'),
}

async function describeDrdsTasksWithOptions(request: DescribeDrdsTasksRequest, runtime: Util.RuntimeOptions): DescribeDrdsTasksResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsTasks', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsTasks(request: DescribeDrdsTasksRequest): DescribeDrdsTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsTasksWithOptions(request, runtime);
}

model RestartDrdsInstanceRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
}

model RestartDrdsInstanceResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskId: long(name='TaskId'),
}

async function restartDrdsInstanceWithOptions(request: RestartDrdsInstanceRequest, runtime: Util.RuntimeOptions): RestartDrdsInstanceResponse {
  Util.validateModel(request);
  return doRequest('RestartDrdsInstance', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function restartDrdsInstance(request: RestartDrdsInstanceRequest): RestartDrdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDrdsInstanceWithOptions(request, runtime);
}

model SubmitSqlFlashbackTaskRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  traceId?: string(name='TraceId'),
  tableName?: string(name='TableName'),
  sqlType?: string(name='SqlType'),
  sqlPk?: string(name='SqlPk'),
  recallType?: integer(name='RecallType'),
  recallRestoreType: integer(name='RecallRestoreType'),
}

model SubmitSqlFlashbackTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  taskId: long(name='TaskId'),
}

async function submitSqlFlashbackTaskWithOptions(request: SubmitSqlFlashbackTaskRequest, runtime: Util.RuntimeOptions): SubmitSqlFlashbackTaskResponse {
  Util.validateModel(request);
  return doRequest('SubmitSqlFlashbackTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function submitSqlFlashbackTask(request: SubmitSqlFlashbackTaskRequest): SubmitSqlFlashbackTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSqlFlashbackTaskWithOptions(request, runtime);
}

model EnableSqlFlashbackMatchSwitchRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model EnableSqlFlashbackMatchSwitchResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  result: boolean(name='Result'),
}

async function enableSqlFlashbackMatchSwitchWithOptions(request: EnableSqlFlashbackMatchSwitchRequest, runtime: Util.RuntimeOptions): EnableSqlFlashbackMatchSwitchResponse {
  Util.validateModel(request);
  return doRequest('EnableSqlFlashbackMatchSwitch', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function enableSqlFlashbackMatchSwitch(request: EnableSqlFlashbackMatchSwitchRequest): EnableSqlFlashbackMatchSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSqlFlashbackMatchSwitchWithOptions(request, runtime);
}

model DisableSqlAuditRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model DisableSqlAuditResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  result: boolean(name='Result'),
}

async function disableSqlAuditWithOptions(request: DisableSqlAuditRequest, runtime: Util.RuntimeOptions): DisableSqlAuditResponse {
  Util.validateModel(request);
  return doRequest('DisableSqlAudit', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function disableSqlAudit(request: DisableSqlAuditRequest): DisableSqlAuditResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSqlAuditWithOptions(request, runtime);
}

model CheckSqlAuditEnableStatusRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model CheckSqlAuditEnableStatusResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  status: string(name='Status'),
}

async function checkSqlAuditEnableStatusWithOptions(request: CheckSqlAuditEnableStatusRequest, runtime: Util.RuntimeOptions): CheckSqlAuditEnableStatusResponse {
  Util.validateModel(request);
  return doRequest('CheckSqlAuditEnableStatus', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function checkSqlAuditEnableStatus(request: CheckSqlAuditEnableStatusRequest): CheckSqlAuditEnableStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkSqlAuditEnableStatusWithOptions(request, runtime);
}

model EnableSqlAuditRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  isRecall?: boolean(name='IsRecall'),
  recallStartTimestamp?: string(name='RecallStartTimestamp'),
  recallEndTimestamp?: string(name='RecallEndTimestamp'),
}

model EnableSqlAuditResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  result: boolean(name='Result'),
}

async function enableSqlAuditWithOptions(request: EnableSqlAuditRequest, runtime: Util.RuntimeOptions): EnableSqlAuditResponse {
  Util.validateModel(request);
  return doRequest('EnableSqlAudit', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function enableSqlAudit(request: EnableSqlAuditRequest): EnableSqlAuditResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSqlAuditWithOptions(request, runtime);
}

model RefreshDrdsAtomUrlRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model RefreshDrdsAtomUrlResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  result: boolean(name='Result'),
}

async function refreshDrdsAtomUrlWithOptions(request: RefreshDrdsAtomUrlRequest, runtime: Util.RuntimeOptions): RefreshDrdsAtomUrlResponse {
  Util.validateModel(request);
  return doRequest('RefreshDrdsAtomUrl', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function refreshDrdsAtomUrl(request: RefreshDrdsAtomUrlRequest): RefreshDrdsAtomUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshDrdsAtomUrlWithOptions(request, runtime);
}

model DescribeInstanceMenuSwitchRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
}

model DescribeInstanceMenuSwitchResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  config: map[string]any(name='Config'),
}

async function describeInstanceMenuSwitchWithOptions(request: DescribeInstanceMenuSwitchRequest, runtime: Util.RuntimeOptions): DescribeInstanceMenuSwitchResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceMenuSwitch', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeInstanceMenuSwitch(request: DescribeInstanceMenuSwitchRequest): DescribeInstanceMenuSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceMenuSwitchWithOptions(request, runtime);
}

model DescribeDrdsInstanceLevelTasksRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
}

model DescribeDrdsInstanceLevelTasksResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  tasks: {
    task: [
      {
        taskName: string(name='TaskName'),
        gmtCreate: long(name='GmtCreate'),
        taskType: integer(name='TaskType'),
        targetId: long(name='TargetId'),
        taskStatus: integer(name='TaskStatus'),
        progress: integer(name='Progress'),
        progressDescription: string(name='ProgressDescription'),
        taskPhase: string(name='TaskPhase'),
        errMsg: string(name='ErrMsg'),
        showProgress: boolean(name='ShowProgress'),
        allowCancel: boolean(name='AllowCancel'),
      }
    ](name='Task'),
  }(name='Tasks'),
}

async function describeDrdsInstanceLevelTasksWithOptions(request: DescribeDrdsInstanceLevelTasksRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceLevelTasksResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsInstanceLevelTasks', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsInstanceLevelTasks(request: DescribeDrdsInstanceLevelTasksRequest): DescribeDrdsInstanceLevelTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceLevelTasksWithOptions(request, runtime);
}

model DescribeBackMenuRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
}

model DescribeBackMenuResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  list: {
    list: [
      {
        menuName: string(name='MenuName'),
        support: boolean(name='Support'),
      }
    ](name='list'),
  }(name='List'),
}

async function describeBackMenuWithOptions(request: DescribeBackMenuRequest, runtime: Util.RuntimeOptions): DescribeBackMenuResponse {
  Util.validateModel(request);
  return doRequest('DescribeBackMenu', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeBackMenu(request: DescribeBackMenuRequest): DescribeBackMenuResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackMenuWithOptions(request, runtime);
}

model DescribeBackupDbsRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  preferredRestoreTime?: string(name='PreferredRestoreTime'),
  backupId?: string(name='BackupId'),
}

model DescribeBackupDbsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  dbNames: {
    dbName: [ string ](name='dbName'),
  }(name='DbNames'),
}

async function describeBackupDbsWithOptions(request: DescribeBackupDbsRequest, runtime: Util.RuntimeOptions): DescribeBackupDbsResponse {
  Util.validateModel(request);
  return doRequest('DescribeBackupDbs', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeBackupDbs(request: DescribeBackupDbsRequest): DescribeBackupDbsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupDbsWithOptions(request, runtime);
}

model DescribeBackupLocalRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
}

model DescribeBackupLocalResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  backupPolicyDO: {
    gmtCreate: long(name='GmtCreate'),
    gmtModified: long(name='GmtModified'),
    backupPolicyMode: string(name='BackupPolicyMode'),
    backupType: string(name='BackupType'),
    backupLevel: string(name='BackupLevel'),
    backupDbName: string(name='BackupDbName'),
    preferredBackupTime: string(name='PreferredBackupTime'),
    preferredBackupPeriod: string(name='PreferredBackupPeriod'),
    dataBackupRetentionPeriod: long(name='DataBackupRetentionPeriod'),
    logBackupRetentionPeriod: long(name='LogBackupRetentionPeriod'),
    backupRetentionPeriod: long(name='BackupRetentionPeriod'),
    backupLog: string(name='BackupLog'),
    localLogRetentionHours: long(name='LocalLogRetentionHours'),
    localLogRetentionSpace: long(name='LocalLogRetentionSpace'),
    highSpaceUsageProtection: long(name='HighSpaceUsageProtection'),
    backupAppName: string(name='BackupAppName'),
    backupMode: string(name='BackupMode'),
    nextBackupActuallyTime: string(name='NextBackupActuallyTime'),
  }(name='BackupPolicyDO'),
}

async function describeBackupLocalWithOptions(request: DescribeBackupLocalRequest, runtime: Util.RuntimeOptions): DescribeBackupLocalResponse {
  Util.validateModel(request);
  return doRequest('DescribeBackupLocal', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeBackupLocal(request: DescribeBackupLocalRequest): DescribeBackupLocalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupLocalWithOptions(request, runtime);
}

model DescribeBackupSetsRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
}

model DescribeBackupSetsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  backupSets: {
    backupSet: [
      {
        id: string(name='Id'),
        backupStartTime: long(name='BackupStartTime'),
        backupEndTime: long(name='BackupEndTime'),
        backupMode: string(name='BackupMode'),
        backupLevel: string(name='BackupLevel'),
        backupType: string(name='BackupType'),
        status: long(name='Status'),
        enableRecovery: boolean(name='EnableRecovery'),
        backupTotalSize: string(name='BackupTotalSize'),
        backupConsitentTime: string(name='BackupConsitentTime'),
        backupDbs: {
          backupDb: [ string ](name='backupDb', description='backupDb'),
        }(name='BackupDbs'),
      }
    ](name='backupSet'),
  }(name='BackupSets'),
}

async function describeBackupSetsWithOptions(request: DescribeBackupSetsRequest, runtime: Util.RuntimeOptions): DescribeBackupSetsResponse {
  Util.validateModel(request);
  return doRequest('DescribeBackupSets', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeBackupSets(request: DescribeBackupSetsRequest): DescribeBackupSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupSetsWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
}

model DescribeBackupPolicyResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  backupPolicyDO: {
    gmtCreate: long(name='GmtCreate'),
    gmtModified: long(name='GmtModified'),
    backupPolicyMode: string(name='BackupPolicyMode'),
    backupType: string(name='BackupType'),
    backupLevel: string(name='BackupLevel'),
    backupDbName: string(name='BackupDbName'),
    preferredBackupTime: string(name='PreferredBackupTime'),
    preferredBackupPeriod: string(name='PreferredBackupPeriod'),
    dataBackupRetentionPeriod: long(name='DataBackupRetentionPeriod'),
    logBackupRetentionPeriod: long(name='LogBackupRetentionPeriod'),
    backupRetentionPeriod: long(name='BackupRetentionPeriod'),
    backupLog: string(name='BackupLog'),
    localLogRetentionHours: long(name='LocalLogRetentionHours'),
    localLogRetentionSpace: long(name='LocalLogRetentionSpace'),
    highSpaceUsageProtection: long(name='HighSpaceUsageProtection'),
    backupAppName: string(name='BackupAppName'),
    backupMode: string(name='BackupMode'),
    nextBackupActuallyTime: string(name='NextBackupActuallyTime'),
  }(name='BackupPolicyDO'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  return doRequest('DescribeBackupPolicy', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeBackupTimesRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
}

model DescribeBackupTimesResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  restoreTime: {
    startTime: string(name='StartTime'),
    endTime: string(name='EndTime'),
  }(name='RestoreTime'),
}

async function describeBackupTimesWithOptions(request: DescribeBackupTimesRequest, runtime: Util.RuntimeOptions): DescribeBackupTimesResponse {
  Util.validateModel(request);
  return doRequest('DescribeBackupTimes', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeBackupTimes(request: DescribeBackupTimesRequest): DescribeBackupTimesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupTimesWithOptions(request, runtime);
}

model DescribeRestoreOrderRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  backupMode?: string(name='BackupMode'),
  backupLevel?: string(name='BackupLevel'),
  backupDbNames?: string(name='BackupDbNames'),
  backupId?: string(name='BackupId'),
}

model DescribeRestoreOrderResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  restoreOrderDO: {
    drdsOrderDOList: {
      drdsOrderDOList: [
        {
          regionId: string(name='RegionId'),
          azoneId: string(name='AzoneId'),
          network: string(name='Network'),
          vpcId: string(name='VpcId'),
          VSwtichId: string(name='VSwtichId'),
          instSpec: string(name='InstSpec'),
        }
      ](name='DrdsOrderDOList'),
    }(name='DrdsOrderDOList'),
    rdsOrderDOList: {
      rdsOrderDOList: [
        {
          regionId: string(name='RegionId'),
          azoneId: string(name='AzoneId'),
          engine: string(name='Engine'),
          version: string(name='Version'),
          instanceClass: string(name='InstanceClass'),
          dbInstanceStorage: string(name='DbInstanceStorage'),
          network: string(name='Network'),
          num: long(name='Num'),
        }
      ](name='RdsOrderDOList'),
    }(name='RdsOrderDOList'),
    polarOrderDOList: {
      polarOrderDOList: [
        {
          regionId: string(name='RegionId'),
          azoneId: string(name='AzoneId'),
          engine: string(name='Engine'),
          version: string(name='Version'),
          instanceClass: string(name='InstanceClass'),
          dbInstanceStorage: string(name='DbInstanceStorage'),
          network: string(name='Network'),
          num: long(name='Num'),
        }
      ](name='PolarOrderDOList'),
    }(name='PolarOrderDOList'),
  }(name='RestoreOrderDO'),
}

async function describeRestoreOrderWithOptions(request: DescribeRestoreOrderRequest, runtime: Util.RuntimeOptions): DescribeRestoreOrderResponse {
  Util.validateModel(request);
  return doRequest('DescribeRestoreOrder', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeRestoreOrder(request: DescribeRestoreOrderRequest): DescribeRestoreOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRestoreOrderWithOptions(request, runtime);
}

model SetBackupLocalRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  localLogRetentionHours?: string(name='LocalLogRetentionHours'),
  localLogRetentionSpace?: string(name='LocalLogRetentionSpace'),
  highSpaceUsageProtection?: string(name='HighSpaceUsageProtection'),
}

model SetBackupLocalResponse = {
  requestId: string(name='RequestId'),
  result: string(name='Result'),
  success: boolean(name='Success'),
}

async function setBackupLocalWithOptions(request: SetBackupLocalRequest, runtime: Util.RuntimeOptions): SetBackupLocalResponse {
  Util.validateModel(request);
  return doRequest('SetBackupLocal', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function setBackupLocal(request: SetBackupLocalRequest): SetBackupLocalResponse {
  var runtime = new Util.RuntimeOptions{};
  return setBackupLocalWithOptions(request, runtime);
}

model RemoveBackupsSetRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  backupId: string(name='BackupId'),
}

model RemoveBackupsSetResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  result: string(name='Result'),
}

async function removeBackupsSetWithOptions(request: RemoveBackupsSetRequest, runtime: Util.RuntimeOptions): RemoveBackupsSetResponse {
  Util.validateModel(request);
  return doRequest('RemoveBackupsSet', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function removeBackupsSet(request: RemoveBackupsSetRequest): RemoveBackupsSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeBackupsSetWithOptions(request, runtime);
}

model SetBackupPolicyRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  preferredBackupStartTime?: string(name='PreferredBackupStartTime'),
  preferredBackupEndTime?: string(name='PreferredBackupEndTime'),
  backupMode?: string(name='BackupMode'),
  backupLevel?: string(name='BackupLevel'),
  backupDbNames?: string(name='BackupDbNames'),
  backupLog?: string(name='BackupLog'),
  dataBackupRetentionPeriod?: string(name='DataBackupRetentionPeriod'),
  logBackupRetentionPeriod?: string(name='LogBackupRetentionPeriod'),
}

model SetBackupPolicyResponse = {
  requestId: string(name='RequestId'),
  result: string(name='Result'),
  success: boolean(name='Success'),
}

async function setBackupPolicyWithOptions(request: SetBackupPolicyRequest, runtime: Util.RuntimeOptions): SetBackupPolicyResponse {
  Util.validateModel(request);
  return doRequest('SetBackupPolicy', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function setBackupPolicy(request: SetBackupPolicyRequest): SetBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setBackupPolicyWithOptions(request, runtime);
}

model StartRestoreRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  backupMode?: string(name='BackupMode'),
  backupLevel?: string(name='BackupLevel'),
  backupDbNames?: string(name='BackupDbNames'),
  backupId?: string(name='BackupId'),
}

model StartRestoreResponse = {
  requestId: string(name='RequestId'),
  result: string(name='Result'),
  success: boolean(name='Success'),
}

async function startRestoreWithOptions(request: StartRestoreRequest, runtime: Util.RuntimeOptions): StartRestoreResponse {
  Util.validateModel(request);
  return doRequest('StartRestore', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function startRestore(request: StartRestoreRequest): StartRestoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRestoreWithOptions(request, runtime);
}

model PutStartBackupRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  backupMode?: string(name='BackupMode'),
  backupLevel?: string(name='BackupLevel'),
  backupDbNames?: string(name='BackupDbNames'),
}

model PutStartBackupResponse = {
  requestId: string(name='RequestId'),
  result: string(name='Result'),
  success: boolean(name='Success'),
}

async function putStartBackupWithOptions(request: PutStartBackupRequest, runtime: Util.RuntimeOptions): PutStartBackupResponse {
  Util.validateModel(request);
  return doRequest('PutStartBackup', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function putStartBackup(request: PutStartBackupRequest): PutStartBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return putStartBackupWithOptions(request, runtime);
}

model DescribeDrdsDbTasksRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  taskType?: string(name='TaskType'),
}

model DescribeDrdsDbTasksResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  tasks: {
    task: [
      {
        taskName: string(name='TaskName'),
        gmtCreate: long(name='GmtCreate'),
        taskDetail: string(name='TaskDetail'),
        taskType: integer(name='TaskType'),
        taskStatus: integer(name='TaskStatus'),
        progress: integer(name='Progress'),
        taskPhase: string(name='TaskPhase'),
        showProgress: boolean(name='ShowProgress'),
        allowCancel: boolean(name='AllowCancel'),
        parentJobId: string(name='ParentJobId'),
        expandType: string(name='ExpandType'),
        targetId: long(name='TargetId'),
        label: string(name='Label'),
        detailTaskId: string(name='DetailTaskId'),
        tbComputeLength: integer(name='TbComputeLength'),
        dbComputeLength: integer(name='DbComputeLength'),
      }
    ](name='Task'),
  }(name='Tasks'),
}

async function describeDrdsDbTasksWithOptions(request: DescribeDrdsDbTasksRequest, runtime: Util.RuntimeOptions): DescribeDrdsDbTasksResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsDbTasks', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsDbTasks(request: DescribeDrdsDbTasksRequest): DescribeDrdsDbTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDbTasksWithOptions(request, runtime);
}

model SubmitSmoothExpandTaskRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  transferTaskInfos: [
    {
      srcInstanceName?: string(name='SrcInstanceName'),
      dstInstanceName?: string(name='DstInstanceName'),
      dbName?: string(name='DbName'),
      instanceType?: string(name='InstanceType'),
    }
  ](name='TransferTaskInfos'),
  rdsSuperInstances?: [
    {
      rdsName?: string(name='RdsName'),
      accountName?: string(name='AccountName'),
      password?: string(name='Password'),
    }
  ](name='RdsSuperInstances'),
  dbInstanceIsCreating?: boolean(name='DbInstanceIsCreating'),
}

model SubmitSmoothExpandTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function submitSmoothExpandTaskWithOptions(request: SubmitSmoothExpandTaskRequest, runtime: Util.RuntimeOptions): SubmitSmoothExpandTaskResponse {
  Util.validateModel(request);
  return doRequest('SubmitSmoothExpandTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function submitSmoothExpandTask(request: SubmitSmoothExpandTaskRequest): SubmitSmoothExpandTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSmoothExpandTaskWithOptions(request, runtime);
}

model DescribeDbInstanceDbsRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbInstanceId: string(name='DbInstanceId'),
  accountName?: string(name='AccountName'),
  password?: string(name='Password'),
  dbInstType?: string(name='DbInstType'),
}

model DescribeDbInstanceDbsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  total: string(name='Total'),
  databases: {
    database: [
      {
        dbName: string(name='DbName'),
        status: integer(name='Status'),
        description: string(name='Description'),
      }
    ](name='Database'),
  }(name='Databases'),
}

async function describeDbInstanceDbsWithOptions(request: DescribeDbInstanceDbsRequest, runtime: Util.RuntimeOptions): DescribeDbInstanceDbsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDbInstanceDbs', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDbInstanceDbs(request: DescribeDbInstanceDbsRequest): DescribeDbInstanceDbsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDbInstanceDbsWithOptions(request, runtime);
}

model SubmitSwitchTaskRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  parentJobId: string(name='ParentJobId'),
  jobId: string(name='JobId'),
  expandType: string(name='ExpandType'),
}

model SubmitSwitchTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function submitSwitchTaskWithOptions(request: SubmitSwitchTaskRequest, runtime: Util.RuntimeOptions): SubmitSwitchTaskResponse {
  Util.validateModel(request);
  return doRequest('SubmitSwitchTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function submitSwitchTask(request: SubmitSwitchTaskRequest): SubmitSwitchTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSwitchTaskWithOptions(request, runtime);
}

model SubmitCleanTaskRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  parentJobId: string(name='ParentJobId'),
  jobId: string(name='JobId'),
  expandType: string(name='ExpandType'),
}

model SubmitCleanTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function submitCleanTaskWithOptions(request: SubmitCleanTaskRequest, runtime: Util.RuntimeOptions): SubmitCleanTaskResponse {
  Util.validateModel(request);
  return doRequest('SubmitCleanTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function submitCleanTask(request: SubmitCleanTaskRequest): SubmitCleanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitCleanTaskWithOptions(request, runtime);
}

model SubmitRollbackTaskRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  parentJobId: string(name='ParentJobId'),
  jobId: string(name='JobId'),
  expandType: string(name='ExpandType'),
}

model SubmitRollbackTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function submitRollbackTaskWithOptions(request: SubmitRollbackTaskRequest, runtime: Util.RuntimeOptions): SubmitRollbackTaskResponse {
  Util.validateModel(request);
  return doRequest('SubmitRollbackTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function submitRollbackTask(request: SubmitRollbackTaskRequest): SubmitRollbackTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitRollbackTaskWithOptions(request, runtime);
}

model SubmitHotExpandTaskRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  instanceDbMapping: [
    {
      instanceName?: string(name='InstanceName'),
      dbList: string(name='DbList'),
    }
  ](name='InstanceDbMapping'),
  mapping: [
    {
      hotDbName?: string(name='HotDbName'),
      logicTable?: string(name='LogicTable'),
      hotTableName?: string(name='HotTableName'),
      shardDbValue?: string(name='ShardDbValue'),
      shardTbValue?: string(name='ShardTbValue'),
      dbShardColumn?: string(name='DbShardColumn'),
      tbShardColumn?: string(name='TbShardColumn'),
    }
  ](name='Mapping'),
  taskName?: string(name='TaskName'),
  taskDesc?: string(name='TaskDesc'),
  supperAccountMapping?: [
    {
      supperAccount?: string(name='SupperAccount'),
      supperPassword?: string(name='SupperPassword'),
      instanceName?: string(name='InstanceName'),
    }
  ](name='SupperAccountMapping'),
  extendedMapping: [
    {
      srcDb?: string(name='SrcDb'),
      srcInstanceId?: string(name='SrcInstanceId'),
    }
  ](name='ExtendedMapping'),
}

model SubmitHotExpandTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function submitHotExpandTaskWithOptions(request: SubmitHotExpandTaskRequest, runtime: Util.RuntimeOptions): SubmitHotExpandTaskResponse {
  Util.validateModel(request);
  return doRequest('SubmitHotExpandTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function submitHotExpandTask(request: SubmitHotExpandTaskRequest): SubmitHotExpandTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitHotExpandTaskWithOptions(request, runtime);
}

model CheckExpandStatusRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model CheckExpandStatusResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    isActive: boolean(name='IsActive'),
    msg: string(name='Msg'),
  }(name='Data'),
}

async function checkExpandStatusWithOptions(request: CheckExpandStatusRequest, runtime: Util.RuntimeOptions): CheckExpandStatusResponse {
  Util.validateModel(request);
  return doRequest('CheckExpandStatus', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function checkExpandStatus(request: CheckExpandStatusRequest): CheckExpandStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkExpandStatusWithOptions(request, runtime);
}

model DescribeExpandLogicTableInfoListRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model DescribeExpandLogicTableInfoListResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    data: [
      {
        tableName: string(name='TableName'),
        shardDbKey: string(name='ShardDbKey'),
        shardTbKey: string(name='ShardTbKey'),
      }
    ](name='data'),
  }(name='Data'),
}

async function describeExpandLogicTableInfoListWithOptions(request: DescribeExpandLogicTableInfoListRequest, runtime: Util.RuntimeOptions): DescribeExpandLogicTableInfoListResponse {
  Util.validateModel(request);
  return doRequest('DescribeExpandLogicTableInfoList', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeExpandLogicTableInfoList(request: DescribeExpandLogicTableInfoListRequest): DescribeExpandLogicTableInfoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExpandLogicTableInfoListWithOptions(request, runtime);
}

model DescribeHotDbListRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model DescribeHotDbListResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  msg: string(name='Msg'),
  data: {
    randomCode: string(name='RandomCode'),
    list: {
      instanceDb: [
        {
          instanceName: string(name='InstanceName'),
          hotDbList: {
            data: [ string ](name='data', description='data'),
          }(name='HotDbList'),
        }
      ](name='InstanceDb'),
    }(name='List'),
  }(name='Data'),
}

async function describeHotDbListWithOptions(request: DescribeHotDbListRequest, runtime: Util.RuntimeOptions): DescribeHotDbListResponse {
  Util.validateModel(request);
  return doRequest('DescribeHotDbList', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeHotDbList(request: DescribeHotDbListRequest): DescribeHotDbListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHotDbListWithOptions(request, runtime);
}

model DescribeSqlFlashbakTaskRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
}

model DescribeSqlFlashbakTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  sqlFlashbackTasks: {
    sqlFlashbackTask: [
      {
        id: long(name='Id'),
        gmtCreate: long(name='GmtCreate'),
        gmtModified: long(name='GmtModified'),
        instId: string(name='InstId'),
        dbName: string(name='DbName'),
        searchStartTime: long(name='SearchStartTime'),
        searchEndTime: long(name='SearchEndTime'),
        tableName: string(name='TableName'),
        traceId: string(name='TraceId'),
        sqlType: string(name='SqlType'),
        sqlPk: string(name='SqlPk'),
        recallType: integer(name='RecallType'),
        recallStatus: integer(name='RecallStatus'),
        recallProgress: integer(name='RecallProgress'),
        recallRestoreType: integer(name='RecallRestoreType'),
        downloadUrl: string(name='DownloadUrl'),
        expireTime: long(name='ExpireTime'),
        sqlCounter: long(name='SqlCounter'),
      }
    ](name='SqlFlashbackTask'),
  }(name='SqlFlashbackTasks'),
}

async function describeSqlFlashbakTaskWithOptions(request: DescribeSqlFlashbakTaskRequest, runtime: Util.RuntimeOptions): DescribeSqlFlashbakTaskResponse {
  Util.validateModel(request);
  return doRequest('DescribeSqlFlashbakTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeSqlFlashbakTask(request: DescribeSqlFlashbakTaskRequest): DescribeSqlFlashbakTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSqlFlashbakTaskWithOptions(request, runtime);
}

model DescribeInstDbLogInfoRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model DescribeInstDbLogInfoResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  logTimeRange: {
    supportOldestTime: long(name='SupportOldestTime'),
    supportLatestTime: long(name='SupportLatestTime'),
  }(name='LogTimeRange'),
}

async function describeInstDbLogInfoWithOptions(request: DescribeInstDbLogInfoRequest, runtime: Util.RuntimeOptions): DescribeInstDbLogInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstDbLogInfo', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeInstDbLogInfo(request: DescribeInstDbLogInfoRequest): DescribeInstDbLogInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstDbLogInfoWithOptions(request, runtime);
}

model DescribeInstDbSlsInfoRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model DescribeInstDbSlsInfoResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  auditInfo: {
    project: string(name='Project'),
    logStore: string(name='LogStore'),
  }(name='AuditInfo'),
}

async function describeInstDbSlsInfoWithOptions(request: DescribeInstDbSlsInfoRequest, runtime: Util.RuntimeOptions): DescribeInstDbSlsInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstDbSlsInfo', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeInstDbSlsInfo(request: DescribeInstDbSlsInfoRequest): DescribeInstDbSlsInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstDbSlsInfoWithOptions(request, runtime);
}

model RemoveRecycleBinTableRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  tableName?: string(name='TableName'),
}

model RemoveRecycleBinTableResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: boolean(name='Data'),
}

async function removeRecycleBinTableWithOptions(request: RemoveRecycleBinTableRequest, runtime: Util.RuntimeOptions): RemoveRecycleBinTableResponse {
  Util.validateModel(request);
  return doRequest('RemoveRecycleBinTable', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function removeRecycleBinTable(request: RemoveRecycleBinTableRequest): RemoveRecycleBinTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeRecycleBinTableWithOptions(request, runtime);
}

model CreateShardTaskRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  sourceTableName: string(name='SourceTableName'),
  targetTableName: string(name='TargetTableName'),
  taskType: string(name='TaskType'),
}

model CreateShardTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: boolean(name='Data'),
}

async function createShardTaskWithOptions(request: CreateShardTaskRequest, runtime: Util.RuntimeOptions): CreateShardTaskResponse {
  Util.validateModel(request);
  return doRequest('CreateShardTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createShardTask(request: CreateShardTaskRequest): CreateShardTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createShardTaskWithOptions(request, runtime);
}

model EnableInstanceIpv6AddressRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model EnableInstanceIpv6AddressResponse = {
  requestId: string(name='RequestId'),
  data: boolean(name='Data'),
}

async function enableInstanceIpv6AddressWithOptions(request: EnableInstanceIpv6AddressRequest, runtime: Util.RuntimeOptions): EnableInstanceIpv6AddressResponse {
  Util.validateModel(request);
  return doRequest('EnableInstanceIpv6Address', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function enableInstanceIpv6Address(request: EnableInstanceIpv6AddressRequest): EnableInstanceIpv6AddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableInstanceIpv6AddressWithOptions(request, runtime);
}

model DescribeTableRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  tableName: string(name='TableName'),
}

model DescribeTableResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    list: [
      {
        columnName: string(name='ColumnName'),
        columnType: string(name='ColumnType'),
        extra: string(name='Extra'),
        index: string(name='Index'),
        isAllowNull: string(name='IsAllowNull'),
        isPk: string(name='IsPk'),
      }
    ](name='List'),
  }(name='Data'),
}

async function describeTableWithOptions(request: DescribeTableRequest, runtime: Util.RuntimeOptions): DescribeTableResponse {
  Util.validateModel(request);
  return doRequest('DescribeTable', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeTable(request: DescribeTableRequest): DescribeTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTableWithOptions(request, runtime);
}

model UpgradeInstanceVersionRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
  rpm?: string(name='Rpm'),
}

model UpgradeInstanceVersionResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function upgradeInstanceVersionWithOptions(request: UpgradeInstanceVersionRequest, runtime: Util.RuntimeOptions): UpgradeInstanceVersionResponse {
  Util.validateModel(request);
  return doRequest('UpgradeInstanceVersion', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function upgradeInstanceVersion(request: UpgradeInstanceVersionRequest): UpgradeInstanceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeInstanceVersionWithOptions(request, runtime);
}

model DescribeTableListByTypeRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  query?: string(name='Query'),
  pageSize?: integer(name='PageSize'),
  currentPage?: integer(name='CurrentPage'),
  tableType: string(name='TableType'),
}

model DescribeTableListByTypeResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  total: integer(name='Total'),
  list: [
    {
      tableName: string(name='TableName'),
      property: string(name='Property'),
    }
  ](name='List'),
}

async function describeTableListByTypeWithOptions(request: DescribeTableListByTypeRequest, runtime: Util.RuntimeOptions): DescribeTableListByTypeResponse {
  Util.validateModel(request);
  return doRequest('DescribeTableListByType', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeTableListByType(request: DescribeTableListByTypeRequest): DescribeTableListByTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTableListByTypeWithOptions(request, runtime);
}

model ValidateShardTaskRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  sourceTableName: string(name='SourceTableName'),
  targetTableName: string(name='TargetTableName'),
  taskType: string(name='TaskType'),
}

model ValidateShardTaskResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  list: [
    {
      item: string(name='Item'),
      result: integer(name='Result'),
    }
  ](name='List'),
}

async function validateShardTaskWithOptions(request: ValidateShardTaskRequest, runtime: Util.RuntimeOptions): ValidateShardTaskResponse {
  Util.validateModel(request);
  return doRequest('ValidateShardTask', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function validateShardTask(request: ValidateShardTaskRequest): ValidateShardTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateShardTaskWithOptions(request, runtime);
}

model DescribeTablesRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  query?: string(name='Query'),
  pageSize?: integer(name='PageSize'),
  currentPage?: integer(name='CurrentPage'),
  regionId: string(name='RegionId'),
}

model DescribeTablesResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  total: integer(name='Total'),
  list: [
    {
      table: string(name='Table'),
      shardKey: string(name='ShardKey'),
      isShard: boolean(name='IsShard'),
      isLocked: boolean(name='IsLocked'),
      dbInstType: integer(name='DbInstType'),
      broadcast: boolean(name='Broadcast'),
      allowFullTableScan: boolean(name='AllowFullTableScan'),
      status: integer(name='Status'),
    }
  ](name='List'),
}

async function describeTablesWithOptions(request: DescribeTablesRequest, runtime: Util.RuntimeOptions): DescribeTablesResponse {
  Util.validateModel(request);
  return doRequest('DescribeTables', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeTables(request: DescribeTablesRequest): DescribeTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTablesWithOptions(request, runtime);
}

model DescribeShardTaskListRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  query?: string(name='Query'),
  pageSize?: integer(name='PageSize'),
  currentPage?: integer(name='CurrentPage'),
  taskType: string(name='TaskType'),
}

model DescribeShardTaskListResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  total: integer(name='Total'),
  list: [
    {
      sourceTableName: string(name='SourceTableName'),
      targetTableName: string(name='TargetTableName'),
      expired: string(name='Expired'),
      stage: integer(name='Stage'),
      progress: integer(name='Progress'),
      delay: integer(name='Delay'),
    }
  ](name='List'),
}

async function describeShardTaskListWithOptions(request: DescribeShardTaskListRequest, runtime: Util.RuntimeOptions): DescribeShardTaskListResponse {
  Util.validateModel(request);
  return doRequest('DescribeShardTaskList', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeShardTaskList(request: DescribeShardTaskListRequest): DescribeShardTaskListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeShardTaskListWithOptions(request, runtime);
}

model CreateInstanceInternetAddressRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model CreateInstanceInternetAddressResponse = {
  requestId: string(name='RequestId'),
  data: boolean(name='Data'),
  success: boolean(name='Success'),
  code: integer(name='Code'),
}

async function createInstanceInternetAddressWithOptions(request: CreateInstanceInternetAddressRequest, runtime: Util.RuntimeOptions): CreateInstanceInternetAddressResponse {
  Util.validateModel(request);
  return doRequest('CreateInstanceInternetAddress', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createInstanceInternetAddress(request: CreateInstanceInternetAddressRequest): CreateInstanceInternetAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceInternetAddressWithOptions(request, runtime);
}

model DescribeBroadcastTablesRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  query?: string(name='Query'),
  pageSize?: integer(name='PageSize'),
  currentPage?: integer(name='CurrentPage'),
}

model DescribeBroadcastTablesResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  isShard: boolean(name='IsShard'),
  pageNumber: integer(name='PageNumber'),
  pageSize: integer(name='PageSize'),
  total: integer(name='Total'),
  list: [
    {
      table: string(name='Table'),
      broadcastType: string(name='BroadcastType'),
      isShard: boolean(name='IsShard'),
      dbInstType: integer(name='DbInstType'),
      broadcast: boolean(name='Broadcast'),
      status: integer(name='Status'),
    }
  ](name='List'),
}

async function describeBroadcastTablesWithOptions(request: DescribeBroadcastTablesRequest, runtime: Util.RuntimeOptions): DescribeBroadcastTablesResponse {
  Util.validateModel(request);
  return doRequest('DescribeBroadcastTables', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeBroadcastTables(request: DescribeBroadcastTablesRequest): DescribeBroadcastTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBroadcastTablesWithOptions(request, runtime);
}

model FlashbackRecycleBinTableRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  tableName: string(name='TableName'),
}

model FlashbackRecycleBinTableResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: boolean(name='Data'),
}

async function flashbackRecycleBinTableWithOptions(request: FlashbackRecycleBinTableRequest, runtime: Util.RuntimeOptions): FlashbackRecycleBinTableResponse {
  Util.validateModel(request);
  return doRequest('FlashbackRecycleBinTable', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function flashbackRecycleBinTable(request: FlashbackRecycleBinTableRequest): FlashbackRecycleBinTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return flashbackRecycleBinTableWithOptions(request, runtime);
}

model SetupBroadcastTablesRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  active: boolean(name='Active'),
  tableName: [ string ](name='TableName'),
}

model SetupBroadcastTablesResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: boolean(name='Data'),
}

async function setupBroadcastTablesWithOptions(request: SetupBroadcastTablesRequest, runtime: Util.RuntimeOptions): SetupBroadcastTablesResponse {
  Util.validateModel(request);
  return doRequest('SetupBroadcastTables', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function setupBroadcastTables(request: SetupBroadcastTablesRequest): SetupBroadcastTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setupBroadcastTablesWithOptions(request, runtime);
}

model RollbackInstanceVersionRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model RollbackInstanceVersionResponse = {
  requestId: string(name='RequestId'),
  data: string(name='Data'),
}

async function rollbackInstanceVersionWithOptions(request: RollbackInstanceVersionRequest, runtime: Util.RuntimeOptions): RollbackInstanceVersionResponse {
  Util.validateModel(request);
  return doRequest('RollbackInstanceVersion', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function rollbackInstanceVersion(request: RollbackInstanceVersionRequest): RollbackInstanceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackInstanceVersionWithOptions(request, runtime);
}

model DescribeGlobalBroadcastTypeRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model DescribeGlobalBroadcastTypeResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    isSyncType: boolean(name='IsSyncType'),
  }(name='Data'),
}

async function describeGlobalBroadcastTypeWithOptions(request: DescribeGlobalBroadcastTypeRequest, runtime: Util.RuntimeOptions): DescribeGlobalBroadcastTypeResponse {
  Util.validateModel(request);
  return doRequest('DescribeGlobalBroadcastType', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeGlobalBroadcastType(request: DescribeGlobalBroadcastTypeRequest): DescribeGlobalBroadcastTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGlobalBroadcastTypeWithOptions(request, runtime);
}

model ReleaseInstanceInternetAddressRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model ReleaseInstanceInternetAddressResponse = {
  requestId: string(name='RequestId'),
  data: boolean(name='Data'),
}

async function releaseInstanceInternetAddressWithOptions(request: ReleaseInstanceInternetAddressRequest, runtime: Util.RuntimeOptions): ReleaseInstanceInternetAddressResponse {
  Util.validateModel(request);
  return doRequest('ReleaseInstanceInternetAddress', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function releaseInstanceInternetAddress(request: ReleaseInstanceInternetAddressRequest): ReleaseInstanceInternetAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstanceInternetAddressWithOptions(request, runtime);
}

model DescribeRecycleBinTablesRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model DescribeRecycleBinTablesResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: [
    {
      tableName: string(name='TableName'),
      originalTableName: string(name='OriginalTableName'),
      createTime: string(name='CreateTime'),
    }
  ](name='Data'),
}

async function describeRecycleBinTablesWithOptions(request: DescribeRecycleBinTablesRequest, runtime: Util.RuntimeOptions): DescribeRecycleBinTablesResponse {
  Util.validateModel(request);
  return doRequest('DescribeRecycleBinTables', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeRecycleBinTables(request: DescribeRecycleBinTablesRequest): DescribeRecycleBinTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecycleBinTablesWithOptions(request, runtime);
}

model DescribeDrdsParamsRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  paramLevel: string(name='ParamLevel'),
  dbName?: string(name='DbName'),
}

model DescribeDrdsParamsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  list: [
    {
      paramName: string(name='ParamName'),
      paramEnglishName: string(name='ParamEnglishName'),
      paramVariableName: string(name='ParamVariableName'),
      paramDesc: string(name='ParamDesc'),
      paramValue: string(name='ParamValue'),
      dbName: string(name='DbName'),
      paramDefaultValue: string(name='ParamDefaultValue'),
      paramRanges: string(name='ParamRanges'),
      paramLevel: string(name='ParamLevel'),
      paramType: string(name='ParamType'),
      needRestart: boolean(name='NeedRestart'),
      userVisible: boolean(name='UserVisible'),
    }
  ](name='List'),
}

async function describeDrdsParamsWithOptions(request: DescribeDrdsParamsRequest, runtime: Util.RuntimeOptions): DescribeDrdsParamsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsParams', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsParams(request: DescribeDrdsParamsRequest): DescribeDrdsParamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsParamsWithOptions(request, runtime);
}

model DeleteShardTasksRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  tableName: [
    {
      sourceTableName?: string(name='SourceTableName'),
      targetTableName?: string(name='TargetTableName'),
    }
  ](name='TableName'),
}

model DeleteShardTasksResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: boolean(name='Data'),
}

async function deleteShardTasksWithOptions(request: DeleteShardTasksRequest, runtime: Util.RuntimeOptions): DeleteShardTasksResponse {
  Util.validateModel(request);
  return doRequest('DeleteShardTasks', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function deleteShardTasks(request: DeleteShardTasksRequest): DeleteShardTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteShardTasksWithOptions(request, runtime);
}

model SetupTableRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  allowFullTableScan: boolean(name='AllowFullTableScan'),
  tableName: [ string ](name='TableName'),
}

model SetupTableResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: boolean(name='Data'),
}

async function setupTableWithOptions(request: SetupTableRequest, runtime: Util.RuntimeOptions): SetupTableResponse {
  Util.validateModel(request);
  return doRequest('SetupTable', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function setupTable(request: SetupTableRequest): SetupTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return setupTableWithOptions(request, runtime);
}

model SetupDrdsParamsRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  paramLevel: string(name='ParamLevel'),
  data: [
    {
      paramVariableName?: string(name='ParamVariableName'),
      paramValue?: string(name='ParamValue'),
      dbName?: string(name='DbName'),
      paramType?: string(name='ParamType'),
      paramRanges?: string(name='ParamRanges'),
    }
  ](name='Data'),
}

model SetupDrdsParamsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: boolean(name='Data'),
}

async function setupDrdsParamsWithOptions(request: SetupDrdsParamsRequest, runtime: Util.RuntimeOptions): SetupDrdsParamsResponse {
  Util.validateModel(request);
  return doRequest('SetupDrdsParams', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function setupDrdsParams(request: SetupDrdsParamsRequest): SetupDrdsParamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setupDrdsParamsWithOptions(request, runtime);
}

model DescribeRecycleBinStatusRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model DescribeRecycleBinStatusResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  status: string(name='Status'),
}

async function describeRecycleBinStatusWithOptions(request: DescribeRecycleBinStatusRequest, runtime: Util.RuntimeOptions): DescribeRecycleBinStatusResponse {
  Util.validateModel(request);
  return doRequest('DescribeRecycleBinStatus', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeRecycleBinStatus(request: DescribeRecycleBinStatusRequest): DescribeRecycleBinStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecycleBinStatusWithOptions(request, runtime);
}

model DescribeShardTaskInfoRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  sourceTableName: string(name='SourceTableName'),
  targetTableName: string(name='TargetTableName'),
}

model DescribeShardTaskInfoResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: {
    sourceTableName: string(name='SourceTableName'),
    targetTableName: string(name='TargetTableName'),
    status: string(name='Status'),
    stage: string(name='Stage'),
    progress: string(name='Progress'),
    expired: string(name='Expired'),
    full: {
      expired: integer(name='Expired'),
      progress: integer(name='Progress'),
      total: integer(name='Total'),
      tps: integer(name='Tps'),
      startTime: string(name='StartTime'),
    }(name='Full'),
    fullCheck: {
      expired: integer(name='Expired'),
      progress: integer(name='Progress'),
      total: integer(name='Total'),
      tps: integer(name='Tps'),
      startTime: string(name='StartTime'),
    }(name='FullCheck'),
    fullRevise: {
      expired: integer(name='Expired'),
      progress: integer(name='Progress'),
      total: integer(name='Total'),
      tps: integer(name='Tps'),
      startTime: string(name='StartTime'),
    }(name='FullRevise'),
    review: {
      expired: integer(name='Expired'),
      progress: integer(name='Progress'),
      total: integer(name='Total'),
      tps: integer(name='Tps'),
      startTime: string(name='StartTime'),
    }(name='Review'),
    increment: {
      delay: integer(name='Delay'),
      tps: integer(name='Tps'),
      startTime: string(name='StartTime'),
    }(name='Increment'),
  }(name='Data'),
}

async function describeShardTaskInfoWithOptions(request: DescribeShardTaskInfoRequest, runtime: Util.RuntimeOptions): DescribeShardTaskInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeShardTaskInfo', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeShardTaskInfo(request: DescribeShardTaskInfoRequest): DescribeShardTaskInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeShardTaskInfoWithOptions(request, runtime);
}

model SetupRecycleBinStatusRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  statusAction: string(name='StatusAction'),
}

model SetupRecycleBinStatusResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: boolean(name='Data'),
}

async function setupRecycleBinStatusWithOptions(request: SetupRecycleBinStatusRequest, runtime: Util.RuntimeOptions): SetupRecycleBinStatusResponse {
  Util.validateModel(request);
  return doRequest('SetupRecycleBinStatus', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function setupRecycleBinStatus(request: SetupRecycleBinStatusRequest): SetupRecycleBinStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setupRecycleBinStatusWithOptions(request, runtime);
}

model UntagResourcesRequest = {
  regionId: string(name='RegionId'),
  resourceId: [ string ](name='ResourceId'),
  resourceType: string(name='ResourceType'),
  all?: boolean(name='All'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  return doRequest('UntagResources', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model DescribeDrdsInstanceMonitorRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  key: string(name='Key'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  periodMultiple?: integer(name='PeriodMultiple'),
  regionId?: string(name='RegionId'),
}

model DescribeDrdsInstanceMonitorResponse = {
  requestId: string(name='RequestId'),
  data: [
    {
      key: string(name='Key'),
      unit: string(name='Unit'),
      nodeNum: integer(name='NodeNum'),
      values: [
        {
          date: long(name='Date'),
          value: string(name='Value'),
        }
      ](name='Values'),
    }
  ](name='Data'),
}

async function describeDrdsInstanceMonitorWithOptions(request: DescribeDrdsInstanceMonitorRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceMonitorResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsInstanceMonitor', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsInstanceMonitor(request: DescribeDrdsInstanceMonitorRequest): DescribeDrdsInstanceMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceMonitorWithOptions(request, runtime);
}

model DescribeDrdsInstanceDbMonitorRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
  key: string(name='Key'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  regionId?: string(name='RegionId'),
}

model DescribeDrdsInstanceDbMonitorResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: [
    {
      key: string(name='Key'),
      unit: string(name='Unit'),
      values: [
        {
          date: long(name='Date'),
          value: string(name='Value'),
        }
      ](name='Values'),
    }
  ](name='Data'),
}

async function describeDrdsInstanceDbMonitorWithOptions(request: DescribeDrdsInstanceDbMonitorRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceDbMonitorResponse {
  Util.validateModel(request);
  return doRequest('DescribeDrdsInstanceDbMonitor', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeDrdsInstanceDbMonitor(request: DescribeDrdsInstanceDbMonitorRequest): DescribeDrdsInstanceDbMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceDbMonitorWithOptions(request, runtime);
}

model TagResourcesRequest = {
  tag: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  regionId: string(name='RegionId'),
  resourceId: [ string ](name='ResourceId'),
  resourceType: string(name='ResourceType'),
}

model TagResourcesResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  return doRequest('TagResources', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model RemoveDrdsDbFailedRecordRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  dbName: string(name='DbName'),
}

model RemoveDrdsDbFailedRecordResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  result: boolean(name='Result'),
}

async function removeDrdsDbFailedRecordWithOptions(request: RemoveDrdsDbFailedRecordRequest, runtime: Util.RuntimeOptions): RemoveDrdsDbFailedRecordResponse {
  Util.validateModel(request);
  return doRequest('RemoveDrdsDbFailedRecord', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function removeDrdsDbFailedRecord(request: RemoveDrdsDbFailedRecordRequest): RemoveDrdsDbFailedRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDrdsDbFailedRecordWithOptions(request, runtime);
}

model ListTagResourcesRequest = {
  tag?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  regionId: string(name='RegionId'),
  resourceType: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  nextToken?: string(name='NextToken'),
}

model ListTagResourcesResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  nextToken: string(name='NextToken'),
  tagResources: {
    tagResource: [
      {
        tagKey: string(name='TagKey'),
        tagValue: string(name='TagValue'),
        resourceId: string(name='ResourceId'),
        resourceType: string(name='ResourceType'),
      }
    ](name='TagResource'),
  }(name='TagResources'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  return doRequest('ListTagResources', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model DescribeRdsCommodityRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  commodityCode: string(name='CommodityCode'),
  orderType?: string(name='OrderType'),
}

model DescribeRdsCommodityResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: string(name='Data'),
}

async function describeRdsCommodityWithOptions(request: DescribeRdsCommodityRequest, runtime: Util.RuntimeOptions): DescribeRdsCommodityResponse {
  Util.validateModel(request);
  return doRequest('DescribeRdsCommodity', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeRdsCommodity(request: DescribeRdsCommodityRequest): DescribeRdsCommodityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsCommodityWithOptions(request, runtime);
}

model CreateOrderForRdsRequest = {
  regionId?: string(name='RegionId'),
  params: string(name='Params'),
}

model CreateOrderForRdsResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  data: string(name='Data'),
}

async function createOrderForRdsWithOptions(request: CreateOrderForRdsRequest, runtime: Util.RuntimeOptions): CreateOrderForRdsResponse {
  Util.validateModel(request);
  return doRequest('CreateOrderForRds', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function createOrderForRds(request: CreateOrderForRdsRequest): CreateOrderForRdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrderForRdsWithOptions(request, runtime);
}

model DescribeRdsPerformanceSummaryRequest = {
  regionId?: string(name='RegionId'),
  drdsInstanceId: string(name='DrdsInstanceId'),
  rdsInstanceId: [ string ](name='RdsInstanceId'),
}

model DescribeRdsPerformanceSummaryResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
  rdsPerformanceInfos: [
    {
      rdsId: string(name='RdsId'),
      cpu: float(name='Cpu'),
      iops: float(name='Iops'),
      activeSessions: integer(name='ActiveSessions'),
      totalSessions: integer(name='TotalSessions'),
      spaceUsage: long(name='SpaceUsage'),
    }
  ](name='RdsPerformanceInfos'),
}

async function describeRdsPerformanceSummaryWithOptions(request: DescribeRdsPerformanceSummaryRequest, runtime: Util.RuntimeOptions): DescribeRdsPerformanceSummaryResponse {
  Util.validateModel(request);
  return doRequest('DescribeRdsPerformanceSummary', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function describeRdsPerformanceSummary(request: DescribeRdsPerformanceSummaryRequest): DescribeRdsPerformanceSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsPerformanceSummaryWithOptions(request, runtime);
}

model ModifyDrdsInstanceDescriptionRequest = {
  drdsInstanceId: string(name='DrdsInstanceId'),
  description: string(name='Description'),
}

model ModifyDrdsInstanceDescriptionResponse = {
  requestId: string(name='RequestId'),
  success: boolean(name='Success'),
}

async function modifyDrdsInstanceDescriptionWithOptions(request: ModifyDrdsInstanceDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDrdsInstanceDescriptionResponse {
  Util.validateModel(request);
  return doRequest('ModifyDrdsInstanceDescription', 'HTTPS', 'POST', '2019-01-23', 'AK', null, request, runtime);
}

async function modifyDrdsInstanceDescription(request: ModifyDrdsInstanceDescriptionRequest): ModifyDrdsInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDrdsInstanceDescriptionWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
