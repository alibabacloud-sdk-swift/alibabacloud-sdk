import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    ap-southeast-1 = 'cloudfw.ap-southeast-1.aliyuncs.com',
    cn-hangzhou = 'cloudfw.cn-hangzhou.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cloudfw', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model ModifyPolicyAdvancedConfigRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  internetSwitch: string(name='InternetSwitch'),
}

model ModifyPolicyAdvancedConfigResponse = {
  requestId: string(name='RequestId'),
}

async function modifyPolicyAdvancedConfigWithOptions(request: ModifyPolicyAdvancedConfigRequest, runtime: Util.RuntimeOptions): ModifyPolicyAdvancedConfigResponse {
  Util.validateModel(request);
  return doRequest('ModifyPolicyAdvancedConfig', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function modifyPolicyAdvancedConfig(request: ModifyPolicyAdvancedConfigRequest): ModifyPolicyAdvancedConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPolicyAdvancedConfigWithOptions(request, runtime);
}

model DescribePolicyAdvancedConfigRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
}

model DescribePolicyAdvancedConfigResponse = {
  requestId: string(name='RequestId'),
  internetSwitch: string(name='InternetSwitch'),
}

async function describePolicyAdvancedConfigWithOptions(request: DescribePolicyAdvancedConfigRequest, runtime: Util.RuntimeOptions): DescribePolicyAdvancedConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribePolicyAdvancedConfig', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function describePolicyAdvancedConfig(request: DescribePolicyAdvancedConfigRequest): DescribePolicyAdvancedConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolicyAdvancedConfigWithOptions(request, runtime);
}

model DescribeDomainResolveRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  domain: string(name='Domain'),
}

model DescribeDomainResolveResponse = {
  requestId: string(name='RequestId'),
  resolveResult: {
    ipAddrs: string(name='IpAddrs'),
    updateTime: long(name='UpdateTime'),
  }(name='ResolveResult'),
}

async function describeDomainResolveWithOptions(request: DescribeDomainResolveRequest, runtime: Util.RuntimeOptions): DescribeDomainResolveResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainResolve', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function describeDomainResolve(request: DescribeDomainResolveRequest): DescribeDomainResolveResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainResolveWithOptions(request, runtime);
}

model DescribeVpcFirewallAclGroupListRequest = {
  lang?: string(name='Lang'),
  firewallConfigureStatus?: string(name='FirewallConfigureStatus'),
  currentPage?: string(name='CurrentPage'),
  pageSize?: string(name='PageSize'),
}

model DescribeVpcFirewallAclGroupListResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  aclGroupList: [
    {
      aclGroupId: string(name='AclGroupId'),
      aclGroupName: string(name='AclGroupName'),
    }
  ](name='AclGroupList'),
}

async function describeVpcFirewallAclGroupListWithOptions(request: DescribeVpcFirewallAclGroupListRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallAclGroupListResponse {
  Util.validateModel(request);
  return doRequest('DescribeVpcFirewallAclGroupList', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function describeVpcFirewallAclGroupList(request: DescribeVpcFirewallAclGroupListRequest): DescribeVpcFirewallAclGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallAclGroupListWithOptions(request, runtime);
}

model ResetVpcFirewallRuleHitCountRequest = {
  lang?: string(name='Lang'),
  aclUuid: string(name='AclUuid'),
}

model ResetVpcFirewallRuleHitCountResponse = {
  requestId: string(name='RequestId'),
}

async function resetVpcFirewallRuleHitCountWithOptions(request: ResetVpcFirewallRuleHitCountRequest, runtime: Util.RuntimeOptions): ResetVpcFirewallRuleHitCountResponse {
  Util.validateModel(request);
  return doRequest('ResetVpcFirewallRuleHitCount', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function resetVpcFirewallRuleHitCount(request: ResetVpcFirewallRuleHitCountRequest): ResetVpcFirewallRuleHitCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetVpcFirewallRuleHitCountWithOptions(request, runtime);
}

model ModifyVpcFirewallControlPolicyPositionRequest = {
  lang?: string(name='Lang'),
  vpcFirewallId: string(name='VpcFirewallId'),
  newOrder: string(name='NewOrder'),
  oldOrder: string(name='OldOrder'),
}

model ModifyVpcFirewallControlPolicyPositionResponse = {
  requestId: string(name='RequestId'),
}

async function modifyVpcFirewallControlPolicyPositionWithOptions(request: ModifyVpcFirewallControlPolicyPositionRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallControlPolicyPositionResponse {
  Util.validateModel(request);
  return doRequest('ModifyVpcFirewallControlPolicyPosition', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function modifyVpcFirewallControlPolicyPosition(request: ModifyVpcFirewallControlPolicyPositionRequest): ModifyVpcFirewallControlPolicyPositionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallControlPolicyPositionWithOptions(request, runtime);
}

model ModifyVpcFirewallControlPolicyRequest = {
  lang?: string(name='Lang'),
  aclAction: string(name='AclAction'),
  applicationName: string(name='ApplicationName'),
  description: string(name='Description'),
  destPort?: string(name='DestPort'),
  destination: string(name='Destination'),
  destinationType: string(name='DestinationType'),
  vpcFirewallId: string(name='VpcFirewallId'),
  proto: string(name='Proto'),
  source: string(name='Source'),
  aclUuid: string(name='AclUuid'),
  sourceType: string(name='SourceType'),
  destPortType?: string(name='DestPortType'),
  destPortGroup?: string(name='DestPortGroup'),
}

model ModifyVpcFirewallControlPolicyResponse = {
  requestId: string(name='RequestId'),
}

async function modifyVpcFirewallControlPolicyWithOptions(request: ModifyVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  return doRequest('ModifyVpcFirewallControlPolicy', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function modifyVpcFirewallControlPolicy(request: ModifyVpcFirewallControlPolicyRequest): ModifyVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallControlPolicyWithOptions(request, runtime);
}

model DescribeVpcFirewallPolicyPriorUsedRequest = {
  lang?: string(name='Lang'),
  vpcFirewallId: string(name='VpcFirewallId'),
}

model DescribeVpcFirewallPolicyPriorUsedResponse = {
  requestId: string(name='RequestId'),
  start: integer(name='Start'),
  end: integer(name='End'),
}

async function describeVpcFirewallPolicyPriorUsedWithOptions(request: DescribeVpcFirewallPolicyPriorUsedRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallPolicyPriorUsedResponse {
  Util.validateModel(request);
  return doRequest('DescribeVpcFirewallPolicyPriorUsed', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function describeVpcFirewallPolicyPriorUsed(request: DescribeVpcFirewallPolicyPriorUsedRequest): DescribeVpcFirewallPolicyPriorUsedResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallPolicyPriorUsedWithOptions(request, runtime);
}

model DescribeVpcFirewallControlPolicyRequest = {
  lang?: string(name='Lang'),
  vpcFirewallId: string(name='VpcFirewallId'),
  currentPage: string(name='CurrentPage'),
  pageSize: string(name='PageSize'),
  source?: string(name='Source'),
  destination?: string(name='Destination'),
  description?: string(name='Description'),
  proto?: string(name='Proto'),
  aclAction?: string(name='AclAction'),
}

model DescribeVpcFirewallControlPolicyResponse = {
  requestId: string(name='RequestId'),
  totalCount: string(name='TotalCount'),
  policys: [
    {
      aclUuid: string(name='AclUuid'),
      destination: string(name='Destination'),
      description: string(name='Description'),
      source: string(name='Source'),
      destPort: string(name='DestPort'),
      sourceType: string(name='SourceType'),
      proto: string(name='Proto'),
      destinationType: string(name='DestinationType'),
      aclAction: string(name='AclAction'),
      applicationId: string(name='ApplicationId'),
      applicationName: string(name='ApplicationName'),
      direction: string(name='Direction'),
      order: integer(name='Order'),
      hitTimes: integer(name='HitTimes'),
      destPortType: string(name='DestPortType'),
      destPortGroup: string(name='DestPortGroup'),
      sourceGroupCidrs: [ string ](name='SourceGroupCidrs'),
      destinationGroupCidrs: [ string ](name='DestinationGroupCidrs'),
      destPortGroupPorts: [ string ](name='DestPortGroupPorts'),
    }
  ](name='Policys'),
}

async function describeVpcFirewallControlPolicyWithOptions(request: DescribeVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  return doRequest('DescribeVpcFirewallControlPolicy', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function describeVpcFirewallControlPolicy(request: DescribeVpcFirewallControlPolicyRequest): DescribeVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallControlPolicyWithOptions(request, runtime);
}

model DeleteVpcFirewallControlPolicyRequest = {
  lang?: string(name='Lang'),
  aclUuid: string(name='AclUuid'),
  vpcFirewallId: string(name='VpcFirewallId'),
}

model DeleteVpcFirewallControlPolicyResponse = {
  requestId: string(name='RequestId'),
}

async function deleteVpcFirewallControlPolicyWithOptions(request: DeleteVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): DeleteVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  return doRequest('DeleteVpcFirewallControlPolicy', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function deleteVpcFirewallControlPolicy(request: DeleteVpcFirewallControlPolicyRequest): DeleteVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcFirewallControlPolicyWithOptions(request, runtime);
}

model CreateVpcFirewallControlPolicyRequest = {
  lang?: string(name='Lang'),
  aclAction: string(name='AclAction'),
  applicationName: string(name='ApplicationName'),
  description: string(name='Description'),
  destPort?: string(name='DestPort'),
  destination: string(name='Destination'),
  destinationType: string(name='DestinationType'),
  vpcFirewallId: string(name='VpcFirewallId'),
  proto: string(name='Proto'),
  source: string(name='Source'),
  sourceType: string(name='SourceType'),
  newOrder: string(name='NewOrder'),
  destPortType?: string(name='DestPortType'),
  destPortGroup?: string(name='DestPortGroup'),
}

model CreateVpcFirewallControlPolicyResponse = {
  requestId: string(name='RequestId'),
  aclUuid: string(name='AclUuid'),
}

async function createVpcFirewallControlPolicyWithOptions(request: CreateVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): CreateVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  return doRequest('CreateVpcFirewallControlPolicy', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function createVpcFirewallControlPolicy(request: CreateVpcFirewallControlPolicyRequest): CreateVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcFirewallControlPolicyWithOptions(request, runtime);
}

model PutEnableFwSwitchRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  ipaddrList?: [ string ](name='IpaddrList'),
  regionList?: [ string ](name='RegionList'),
  resourceTypeList?: [ string ](name='ResourceTypeList'),
}

model PutEnableFwSwitchResponse = {
  requestId: string(name='RequestId'),
}

async function putEnableFwSwitchWithOptions(request: PutEnableFwSwitchRequest, runtime: Util.RuntimeOptions): PutEnableFwSwitchResponse {
  Util.validateModel(request);
  return doRequest('PutEnableFwSwitch', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function putEnableFwSwitch(request: PutEnableFwSwitchRequest): PutEnableFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putEnableFwSwitchWithOptions(request, runtime);
}

model PutEnableAllFwSwitchRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
}

model PutEnableAllFwSwitchResponse = {
  requestId: string(name='RequestId'),
}

async function putEnableAllFwSwitchWithOptions(request: PutEnableAllFwSwitchRequest, runtime: Util.RuntimeOptions): PutEnableAllFwSwitchResponse {
  Util.validateModel(request);
  return doRequest('PutEnableAllFwSwitch', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function putEnableAllFwSwitch(request: PutEnableAllFwSwitchRequest): PutEnableAllFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putEnableAllFwSwitchWithOptions(request, runtime);
}

model PutDisableFwSwitchRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  ipaddrList?: [ string ](name='IpaddrList'),
  regionList?: [ string ](name='RegionList'),
  resourceTypeList?: [ string ](name='ResourceTypeList'),
}

model PutDisableFwSwitchResponse = {
  requestId: string(name='RequestId'),
}

async function putDisableFwSwitchWithOptions(request: PutDisableFwSwitchRequest, runtime: Util.RuntimeOptions): PutDisableFwSwitchResponse {
  Util.validateModel(request);
  return doRequest('PutDisableFwSwitch', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function putDisableFwSwitch(request: PutDisableFwSwitchRequest): PutDisableFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putDisableFwSwitchWithOptions(request, runtime);
}

model PutDisableAllFwSwitchRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
}

model PutDisableAllFwSwitchResponse = {
  requestId: string(name='RequestId'),
}

async function putDisableAllFwSwitchWithOptions(request: PutDisableAllFwSwitchRequest, runtime: Util.RuntimeOptions): PutDisableAllFwSwitchResponse {
  Util.validateModel(request);
  return doRequest('PutDisableAllFwSwitch', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function putDisableAllFwSwitch(request: PutDisableAllFwSwitchRequest): PutDisableAllFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putDisableAllFwSwitchWithOptions(request, runtime);
}

model ModifyControlPolicyPositionRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  direction: string(name='Direction'),
  newOrder: string(name='NewOrder'),
  oldOrder: string(name='OldOrder'),
}

model ModifyControlPolicyPositionResponse = {
  requestId: string(name='RequestId'),
}

async function modifyControlPolicyPositionWithOptions(request: ModifyControlPolicyPositionRequest, runtime: Util.RuntimeOptions): ModifyControlPolicyPositionResponse {
  Util.validateModel(request);
  return doRequest('ModifyControlPolicyPosition', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function modifyControlPolicyPosition(request: ModifyControlPolicyPositionRequest): ModifyControlPolicyPositionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyControlPolicyPositionWithOptions(request, runtime);
}

model ModifyControlPolicyRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  aclAction: string(name='AclAction'),
  applicationName: string(name='ApplicationName'),
  description: string(name='Description'),
  destPort?: string(name='DestPort'),
  destination: string(name='Destination'),
  destinationType: string(name='DestinationType'),
  direction: string(name='Direction'),
  proto: string(name='Proto'),
  source: string(name='Source'),
  aclUuid: string(name='AclUuid'),
  sourceType: string(name='SourceType'),
  destPortType?: string(name='DestPortType'),
  destPortGroup?: string(name='DestPortGroup'),
  release?: string(name='Release'),
}

model ModifyControlPolicyResponse = {
  requestId: string(name='RequestId'),
}

async function modifyControlPolicyWithOptions(request: ModifyControlPolicyRequest, runtime: Util.RuntimeOptions): ModifyControlPolicyResponse {
  Util.validateModel(request);
  return doRequest('ModifyControlPolicy', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function modifyControlPolicy(request: ModifyControlPolicyRequest): ModifyControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyControlPolicyWithOptions(request, runtime);
}

model ModifyAddressBookRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  addressList?: string(name='AddressList'),
  description: string(name='Description'),
  groupName: string(name='GroupName'),
  groupUuid: string(name='GroupUuid'),
  autoAddTagEcs?: string(name='AutoAddTagEcs'),
  tagRelation?: string(name='TagRelation'),
  tagList?: [
    {
      tagKey: string(name='TagKey'),
      tagValue: string(name='TagValue'),
    }
  ](name='TagList'),
}

model ModifyAddressBookResponse = {
  requestId: string(name='RequestId'),
}

async function modifyAddressBookWithOptions(request: ModifyAddressBookRequest, runtime: Util.RuntimeOptions): ModifyAddressBookResponse {
  Util.validateModel(request);
  return doRequest('ModifyAddressBook', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function modifyAddressBook(request: ModifyAddressBookRequest): ModifyAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAddressBookWithOptions(request, runtime);
}

model DescribePolicyPriorUsedRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  direction: string(name='Direction'),
}

model DescribePolicyPriorUsedResponse = {
  requestId: string(name='RequestId'),
  start: integer(name='Start'),
  end: integer(name='End'),
}

async function describePolicyPriorUsedWithOptions(request: DescribePolicyPriorUsedRequest, runtime: Util.RuntimeOptions): DescribePolicyPriorUsedResponse {
  Util.validateModel(request);
  return doRequest('DescribePolicyPriorUsed', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function describePolicyPriorUsed(request: DescribePolicyPriorUsedRequest): DescribePolicyPriorUsedResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolicyPriorUsedWithOptions(request, runtime);
}

model DescribeControlPolicyRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  direction: string(name='Direction'),
  currentPage: string(name='CurrentPage'),
  pageSize: string(name='PageSize'),
  source?: string(name='Source'),
  destination?: string(name='Destination'),
  description?: string(name='Description'),
  proto?: string(name='Proto'),
  aclAction?: string(name='AclAction'),
  release?: string(name='Release'),
  aclUuid?: string(name='AclUuid'),
}

model DescribeControlPolicyResponse = {
  requestId: string(name='RequestId'),
  totalCount: string(name='TotalCount'),
  pageNo: string(name='PageNo'),
  pageSize: string(name='PageSize'),
  policys: [
    {
      aclUuid: string(name='AclUuid'),
      destination: string(name='Destination'),
      description: string(name='Description'),
      source: string(name='Source'),
      destPort: string(name='DestPort'),
      sourceType: string(name='SourceType'),
      proto: string(name='Proto'),
      destinationType: string(name='DestinationType'),
      aclAction: string(name='AclAction'),
      applicationId: string(name='ApplicationId'),
      applicationName: string(name='ApplicationName'),
      direction: string(name='Direction'),
      order: integer(name='Order'),
      hitTimes: long(name='HitTimes'),
      destPortType: string(name='DestPortType'),
      destPortGroup: string(name='DestPortGroup'),
      sourceGroupType: string(name='SourceGroupType'),
      destinationGroupType: string(name='DestinationGroupType'),
      dnsResult: string(name='DnsResult'),
      dnsResultTime: long(name='DnsResultTime'),
      release: string(name='Release'),
      sourceGroupCidrs: [ string ](name='SourceGroupCidrs'),
      destinationGroupCidrs: [ string ](name='DestinationGroupCidrs'),
      destPortGroupPorts: [ string ](name='DestPortGroupPorts'),
    }
  ](name='Policys'),
}

async function describeControlPolicyWithOptions(request: DescribeControlPolicyRequest, runtime: Util.RuntimeOptions): DescribeControlPolicyResponse {
  Util.validateModel(request);
  return doRequest('DescribeControlPolicy', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function describeControlPolicy(request: DescribeControlPolicyRequest): DescribeControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeControlPolicyWithOptions(request, runtime);
}

model DescribeAddressBookRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  currentPage?: string(name='CurrentPage'),
  pageSize?: string(name='PageSize'),
  query?: string(name='Query'),
  groupType?: string(name='GroupType'),
  containPort?: string(name='ContainPort'),
}

model DescribeAddressBookResponse = {
  requestId: string(name='RequestId'),
  totalCount: string(name='TotalCount'),
  pageNo: string(name='PageNo'),
  pageSize: string(name='PageSize'),
  acls: [
    {
      groupName: string(name='GroupName'),
      groupUuid: string(name='GroupUuid'),
      referenceCount: integer(name='ReferenceCount'),
      description: string(name='Description'),
      global: integer(name='Global'),
      groupType: string(name='GroupType'),
      autoAddTagEcs: integer(name='AutoAddTagEcs'),
      addressListCount: integer(name='AddressListCount'),
      tagRelation: string(name='TagRelation'),
      tagList: [
        {
          tagKey: string(name='TagKey'),
          tagValue: string(name='TagValue'),
        }
      ](name='TagList'),
      addressList: [ string ](name='AddressList'),
    }
  ](name='Acls'),
}

async function describeAddressBookWithOptions(request: DescribeAddressBookRequest, runtime: Util.RuntimeOptions): DescribeAddressBookResponse {
  Util.validateModel(request);
  return doRequest('DescribeAddressBook', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function describeAddressBook(request: DescribeAddressBookRequest): DescribeAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAddressBookWithOptions(request, runtime);
}

model DeleteControlPolicyRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  aclUuid: string(name='AclUuid'),
  direction: string(name='Direction'),
}

model DeleteControlPolicyResponse = {
  requestId: string(name='RequestId'),
}

async function deleteControlPolicyWithOptions(request: DeleteControlPolicyRequest, runtime: Util.RuntimeOptions): DeleteControlPolicyResponse {
  Util.validateModel(request);
  return doRequest('DeleteControlPolicy', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function deleteControlPolicy(request: DeleteControlPolicyRequest): DeleteControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteControlPolicyWithOptions(request, runtime);
}

model DeleteAddressBookRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  groupUuid: string(name='GroupUuid'),
}

model DeleteAddressBookResponse = {
  requestId: string(name='RequestId'),
}

async function deleteAddressBookWithOptions(request: DeleteAddressBookRequest, runtime: Util.RuntimeOptions): DeleteAddressBookResponse {
  Util.validateModel(request);
  return doRequest('DeleteAddressBook', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function deleteAddressBook(request: DeleteAddressBookRequest): DeleteAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAddressBookWithOptions(request, runtime);
}

model AddControlPolicyRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  aclAction: string(name='AclAction'),
  applicationName: string(name='ApplicationName'),
  description: string(name='Description'),
  destPort?: string(name='DestPort'),
  destination: string(name='Destination'),
  destinationType: string(name='DestinationType'),
  direction: string(name='Direction'),
  proto: string(name='Proto'),
  source: string(name='Source'),
  sourceType: string(name='SourceType'),
  newOrder: string(name='NewOrder'),
  destPortType?: string(name='DestPortType'),
  destPortGroup?: string(name='DestPortGroup'),
  release?: string(name='Release'),
}

model AddControlPolicyResponse = {
  requestId: string(name='RequestId'),
  aclUuid: string(name='AclUuid'),
}

async function addControlPolicyWithOptions(request: AddControlPolicyRequest, runtime: Util.RuntimeOptions): AddControlPolicyResponse {
  Util.validateModel(request);
  return doRequest('AddControlPolicy', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function addControlPolicy(request: AddControlPolicyRequest): AddControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return addControlPolicyWithOptions(request, runtime);
}

model AddAddressBookRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  addressList?: string(name='AddressList'),
  description: string(name='Description'),
  groupName: string(name='GroupName'),
  groupType: string(name='GroupType'),
  autoAddTagEcs?: string(name='AutoAddTagEcs'),
  tagRelation?: string(name='TagRelation'),
  tagList?: [
    {
      tagKey: string(name='TagKey'),
      tagValue: string(name='TagValue'),
    }
  ](name='TagList'),
}

model AddAddressBookResponse = {
  requestId: string(name='RequestId'),
  groupUuid: string(name='GroupUuid'),
}

async function addAddressBookWithOptions(request: AddAddressBookRequest, runtime: Util.RuntimeOptions): AddAddressBookResponse {
  Util.validateModel(request);
  return doRequest('AddAddressBook', 'HTTPS', 'POST', '2017-12-07', 'AK', null, request, runtime);
}

async function addAddressBook(request: AddAddressBookRequest): AddAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAddressBookWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
