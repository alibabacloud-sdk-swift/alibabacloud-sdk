import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'ddosbgp.aliyuncs.com',
    cn-beijing = 'ddosbgp.aliyuncs.com',
    cn-zhangjiakou = 'ddosbgp.aliyuncs.com',
    cn-huhehaote = 'ddosbgp.aliyuncs.com',
    cn-hangzhou = 'ddosbgp.aliyuncs.com',
    cn-shanghai = 'ddosbgp.aliyuncs.com',
    cn-shenzhen = 'ddosbgp.aliyuncs.com',
    ap-northeast-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    cn-chengdu = 'ddosbgp.aliyuncs.com',
    eu-central-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'ddosbgp.ap-southeast-1.aliyuncs.com',
    cn-hangzhou-finance = 'ddosbgp.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ddosbgp.aliyuncs.com',
    cn-shanghai-finance-1 = 'ddosbgp.aliyuncs.com',
    cn-north-2-gov-1 = 'ddosbgp.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('ddosbgp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DescribeOnDemandInstanceRequest = {
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model DescribeOnDemandInstanceResponse = {
  requestId: string(name='RequestId'),
  total: string(name='Total'),
  instances: [
    {
      instanceId: string(name='InstanceId'),
      remark: string(name='Remark'),
      defenseStatus: string(name='DefenseStatus'),
      regionId: string(name='RegionId'),
      ipnet: [ string ](name='Ipnet'),
    }
  ](name='Instances'),
}

async function describeOnDemandInstanceWithOptions(request: DescribeOnDemandInstanceRequest, runtime: Util.RuntimeOptions): DescribeOnDemandInstanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeOnDemandInstance', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function describeOnDemandInstance(request: DescribeOnDemandInstanceRequest): DescribeOnDemandInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOnDemandInstanceWithOptions(request, runtime);
}

model ModifyOnDemaondDefenseStatusRequest = {
  instanceId: string(name='InstanceId'),
  defenseStatus: string(name='DefenseStatus'),
  regionId?: string(name='RegionId'),
}

model ModifyOnDemaondDefenseStatusResponse = {
  requestId: string(name='RequestId'),
}

async function modifyOnDemaondDefenseStatusWithOptions(request: ModifyOnDemaondDefenseStatusRequest, runtime: Util.RuntimeOptions): ModifyOnDemaondDefenseStatusResponse {
  Util.validateModel(request);
  return doRequest('ModifyOnDemaondDefenseStatus', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function modifyOnDemaondDefenseStatus(request: ModifyOnDemaondDefenseStatusRequest): ModifyOnDemaondDefenseStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOnDemaondDefenseStatusWithOptions(request, runtime);
}

model DescribeOpEntitiesRequest = {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  currentPage: integer(name='CurrentPage'),
  pageSize: integer(name='PageSize'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
}

model DescribeOpEntitiesResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  opEntities: [
    {
      entityObject: string(name='EntityObject'),
      entityType: integer(name='EntityType'),
      opDesc: string(name='OpDesc'),
      opAccount: string(name='OpAccount'),
      opAction: integer(name='OpAction'),
      gmtCreate: long(name='GmtCreate'),
    }
  ](name='OpEntities'),
}

async function describeOpEntitiesWithOptions(request: DescribeOpEntitiesRequest, runtime: Util.RuntimeOptions): DescribeOpEntitiesResponse {
  Util.validateModel(request);
  return doRequest('DescribeOpEntities', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function describeOpEntities(request: DescribeOpEntitiesRequest): DescribeOpEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOpEntitiesWithOptions(request, runtime);
}

model DescribePackPaidTrafficRequest = {
  sourceIp?: string(name='SourceIp'),
  instanceId?: string(name='InstanceId'),
  currentPage: integer(name='CurrentPage'),
  pageSize: integer(name='PageSize'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
}

model DescribePackPaidTrafficResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  packPaidTraffics: [
    {
      instanceId: string(name='InstanceId'),
      startTime: long(name='StartTime'),
      baseBandwidth: integer(name='BaseBandwidth'),
      elasticBandwidth: integer(name='ElasticBandwidth'),
      paidCapacity: float(name='PaidCapacity'),
      totalCapacity: float(name='TotalCapacity'),
      maxAttack: float(name='MaxAttack'),
    }
  ](name='PackPaidTraffics'),
}

async function describePackPaidTrafficWithOptions(request: DescribePackPaidTrafficRequest, runtime: Util.RuntimeOptions): DescribePackPaidTrafficResponse {
  Util.validateModel(request);
  return doRequest('DescribePackPaidTraffic', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function describePackPaidTraffic(request: DescribePackPaidTrafficRequest): DescribePackPaidTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePackPaidTrafficWithOptions(request, runtime);
}

model DescribeResourcePackUsageRequest = {
  sourceIp?: string(name='SourceIp'),
  endTime: long(name='EndTime'),
  startTime: long(name='StartTime'),
}

model DescribeResourcePackUsageResponse = {
  requestId: string(name='RequestId'),
  interval: long(name='Interval'),
  startTime: long(name='StartTime'),
  endTime: long(name='EndTime'),
  packUsages: [
    {
      traffic: float(name='Traffic'),
      time: long(name='Time'),
    }
  ](name='PackUsages'),
}

async function describeResourcePackUsageWithOptions(request: DescribeResourcePackUsageRequest, runtime: Util.RuntimeOptions): DescribeResourcePackUsageResponse {
  Util.validateModel(request);
  return doRequest('DescribeResourcePackUsage', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function describeResourcePackUsage(request: DescribeResourcePackUsageRequest): DescribeResourcePackUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePackUsageWithOptions(request, runtime);
}

model DescribeResourcePackStatisticsRequest = {
  sourceIp?: string(name='SourceIp'),
}

model DescribeResourcePackStatisticsResponse = {
  requestId: string(name='RequestId'),
  availablePackNum: integer(name='AvailablePackNum'),
  totalCurrCapacity: long(name='TotalCurrCapacity'),
  totalUsedCapacity: long(name='TotalUsedCapacity'),
  totalInitCapacity: long(name='TotalInitCapacity'),
}

async function describeResourcePackStatisticsWithOptions(request: DescribeResourcePackStatisticsRequest, runtime: Util.RuntimeOptions): DescribeResourcePackStatisticsResponse {
  Util.validateModel(request);
  return doRequest('DescribeResourcePackStatistics', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function describeResourcePackStatistics(request: DescribeResourcePackStatisticsRequest): DescribeResourcePackStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePackStatisticsWithOptions(request, runtime);
}

model DescribeResourcePackInstancesRequest = {
  sourceIp?: string(name='SourceIp'),
  pageSize: integer(name='PageSize'),
  currentPage: integer(name='CurrentPage'),
}

model DescribeResourcePackInstancesResponse = {
  requestId: string(name='RequestId'),
  totalCount: integer(name='TotalCount'),
  resourcePacks: [
    {
      resourcePackId: string(name='ResourcePackId'),
      initCapacity: long(name='InitCapacity'),
      currCapacity: long(name='CurrCapacity'),
      startTime: long(name='StartTime'),
      endTime: long(name='EndTime'),
      status: string(name='Status'),
    }
  ](name='ResourcePacks'),
}

async function describeResourcePackInstancesWithOptions(request: DescribeResourcePackInstancesRequest, runtime: Util.RuntimeOptions): DescribeResourcePackInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeResourcePackInstances', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function describeResourcePackInstances(request: DescribeResourcePackInstancesRequest): DescribeResourcePackInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePackInstancesWithOptions(request, runtime);
}

model DeleteBlackholeRequest = {
  sourceIp?: string(name='SourceIp'),
  packId: string(name='PackId'),
  ip: string(name='Ip'),
}

model DeleteBlackholeResponse = {
  requestId: string(name='RequestId'),
}

async function deleteBlackholeWithOptions(request: DeleteBlackholeRequest, runtime: Util.RuntimeOptions): DeleteBlackholeResponse {
  Util.validateModel(request);
  return doRequest('DeleteBlackhole', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function deleteBlackhole(request: DeleteBlackholeRequest): DeleteBlackholeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBlackholeWithOptions(request, runtime);
}

model CheckGrantRequest = {
  sourceIp?: string(name='SourceIp'),
}

model CheckGrantResponse = {
  requestId: string(name='RequestId'),
  status: integer(name='Status'),
}

async function checkGrantWithOptions(request: CheckGrantRequest, runtime: Util.RuntimeOptions): CheckGrantResponse {
  Util.validateModel(request);
  return doRequest('CheckGrant', 'HTTPS', 'GET', '2017-11-20', 'AK', request, null, runtime);
}

async function checkGrant(request: CheckGrantRequest): CheckGrantResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkGrantWithOptions(request, runtime);
}

model DeleteProductRequest = {
  sourceIp?: string(name='SourceIp'),
  packId: string(name='PackId'),
}

model DeleteProductResponse = {
  requestId: string(name='RequestId'),
}

async function deleteProductWithOptions(request: DeleteProductRequest, runtime: Util.RuntimeOptions): DeleteProductResponse {
  Util.validateModel(request);
  return doRequest('DeleteProduct', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductWithOptions(request, runtime);
}

model AddProductRequest = {
  sourceIp?: string(name='SourceIp'),
  packId: string(name='PackId'),
  product: string(name='Product'),
}

model AddProductResponse = {
  requestId: string(name='RequestId'),
}

async function addProductWithOptions(request: AddProductRequest, runtime: Util.RuntimeOptions): AddProductResponse {
  Util.validateModel(request);
  return doRequest('AddProduct', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function addProduct(request: AddProductRequest): AddProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return addProductWithOptions(request, runtime);
}

model AddIpRequest = {
  sourceIp?: string(name='SourceIp'),
  packId: string(name='PackId'),
  ipList: string(name='IpList'),
}

model AddIpResponse = {
  requestId: string(name='RequestId'),
}

async function addIpWithOptions(request: AddIpRequest, runtime: Util.RuntimeOptions): AddIpResponse {
  Util.validateModel(request);
  return doRequest('AddIp', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function addIp(request: AddIpRequest): AddIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return addIpWithOptions(request, runtime);
}

model DescribeInstanceListRequest = {
  sourceIp?: string(name='SourceIp'),
  packIdList?: string(name='PackIdList'),
  instanceIdList?: string(name='InstanceIdList'),
  pageNo: integer(name='PageNo'),
  pageSize: integer(name='PageSize'),
}

model DescribeInstanceListResponse = {
  requestId: string(name='RequestId'),
  total: long(name='Total'),
  instanceList: [
    {
      expireTime: long(name='ExpireTime'),
      instanceId: string(name='InstanceId'),
      product: string(name='Product'),
      remark: string(name='Remark'),
      status: string(name='Status'),
      packId: string(name='PackId'),
      gmtCreate: long(name='GmtCreate'),
    }
  ](name='InstanceList'),
}

async function describeInstanceListWithOptions(request: DescribeInstanceListRequest, runtime: Util.RuntimeOptions): DescribeInstanceListResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceList', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function describeInstanceList(request: DescribeInstanceListRequest): DescribeInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceListWithOptions(request, runtime);
}

model DescribeTopTrafficRequest = {
  instanceId: string(name='InstanceId'),
  ipnet?: string(name='Ipnet'),
  startTime: string(name='StartTime'),
  endTime: string(name='EndTime'),
  rn?: integer(name='Rn'),
  pageNo?: integer(name='PageNo'),
  pageSize?: integer(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeTopTrafficResponse = {
  requestId: string(name='RequestId'),
  total: long(name='Total'),
  trafficList: [
    {
      pps: integer(name='Pps'),
      bps: integer(name='Bps'),
      attackBps: integer(name='AttackBps'),
      attackPps: integer(name='AttackPps'),
      ip: string(name='Ip'),
    }
  ](name='TrafficList'),
}

async function describeTopTrafficWithOptions(request: DescribeTopTrafficRequest, runtime: Util.RuntimeOptions): DescribeTopTrafficResponse {
  Util.validateModel(request);
  return doRequest('DescribeTopTraffic', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function describeTopTraffic(request: DescribeTopTrafficRequest): DescribeTopTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTopTrafficWithOptions(request, runtime);
}

model DescribeDdosEventRequest = {
  sourceIp?: string(name='SourceIp'),
  packId: string(name='PackId'),
  startTime: integer(name='StartTime'),
  endTime: integer(name='EndTime'),
  pageSize: integer(name='PageSize'),
  pageNo: integer(name='PageNo'),
}

model DescribeDdosEventResponse = {
  requestId: string(name='RequestId'),
  total: long(name='Total'),
  events: [
    {
      startTime: integer(name='StartTime'),
      endTime: integer(name='EndTime'),
      pps: integer(name='Pps'),
      ip: string(name='Ip'),
      mbps: integer(name='Mbps'),
      status: string(name='Status'),
    }
  ](name='Events'),
}

async function describeDdosEventWithOptions(request: DescribeDdosEventRequest, runtime: Util.RuntimeOptions): DescribeDdosEventResponse {
  Util.validateModel(request);
  return doRequest('DescribeDdosEvent', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function describeDdosEvent(request: DescribeDdosEventRequest): DescribeDdosEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDdosEventWithOptions(request, runtime);
}

model DescribeTrafficRequest = {
  sourceIp?: string(name='SourceIp'),
  name: string(name='Name'),
  startTime: integer(name='StartTime'),
  endTime: integer(name='EndTime'),
  interval: integer(name='Interval'),
}

model DescribeTrafficResponse = {
  requestId: string(name='RequestId'),
  flowList: [
    {
      pps: integer(name='Pps'),
      flowType: string(name='FlowType'),
      kbps: integer(name='Kbps'),
      name: string(name='Name'),
      time: integer(name='Time'),
    }
  ](name='FlowList'),
}

async function describeTrafficWithOptions(request: DescribeTrafficRequest, runtime: Util.RuntimeOptions): DescribeTrafficResponse {
  Util.validateModel(request);
  return doRequest('DescribeTraffic', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function describeTraffic(request: DescribeTrafficRequest): DescribeTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrafficWithOptions(request, runtime);
}

model DeleteIpRequest = {
  sourceIp?: string(name='SourceIp'),
  packId: string(name='PackId'),
  ipList: string(name='IpList'),
}

model DeleteIpResponse = {
  requestId: string(name='RequestId'),
}

async function deleteIpWithOptions(request: DeleteIpRequest, runtime: Util.RuntimeOptions): DeleteIpResponse {
  Util.validateModel(request);
  return doRequest('DeleteIp', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function deleteIp(request: DeleteIpRequest): DeleteIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpWithOptions(request, runtime);
}

model DescribePackRequest = {
  sourceIp?: string(name='SourceIp'),
  packId: string(name='PackId'),
}

model DescribePackResponse = {
  requestId: string(name='RequestId'),
  packInfo: {
    region: string(name='Region'),
    availableDeleteBlackholeCount: integer(name='AvailableDeleteBlackholeCount'),
    ipList: [
      {
        ip: string(name='Ip'),
      }
    ](name='IpList'),
    packConfig: {
      packAdvThre: integer(name='PackAdvThre'),
      ipAdvanceThre: integer(name='IpAdvanceThre'),
      ipBasicThre: integer(name='IpBasicThre'),
      packBasicThre: integer(name='PackBasicThre'),
      ipSpec: integer(name='IpSpec'),
    }(name='PackConfig'),
  }(name='PackInfo'),
}

async function describePackWithOptions(request: DescribePackRequest, runtime: Util.RuntimeOptions): DescribePackResponse {
  Util.validateModel(request);
  return doRequest('DescribePack', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function describePack(request: DescribePackRequest): DescribePackResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePackWithOptions(request, runtime);
}

model DescribePackListRequest = {
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribePackListResponse = {
  requestId: string(name='RequestId'),
  packList: [
    {
      availableDeleteBlackholeCount: integer(name='AvailableDeleteBlackholeCount'),
      region: string(name='Region'),
      packId: string(name='PackId'),
      packConfig: {
        packAdvThre: integer(name='PackAdvThre'),
        ipAdvanceThre: integer(name='IpAdvanceThre'),
        ipBasicThre: integer(name='IpBasicThre'),
        packBasicThre: integer(name='PackBasicThre'),
        ipSpec: integer(name='IpSpec'),
      }(name='PackConfig'),
    }
  ](name='PackList'),
}

async function describePackListWithOptions(request: DescribePackListRequest, runtime: Util.RuntimeOptions): DescribePackListResponse {
  Util.validateModel(request);
  return doRequest('DescribePackList', 'HTTPS', 'POST', '2017-11-20', 'AK', null, request, runtime);
}

async function describePackList(request: DescribePackListRequest): DescribePackListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePackListWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
