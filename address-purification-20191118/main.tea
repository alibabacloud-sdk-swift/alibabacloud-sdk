import Util;
import RPCUtil;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('address-purification', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model GetAddressGeocodeRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey: string(name='AppKey'),
}

model GetAddressGeocodeResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getAddressGeocodeWithOptions(request: GetAddressGeocodeRequest, runtime: Util.RuntimeOptions): GetAddressGeocodeResponse {
  Util.validateModel(request);
  return doRequest('GetAddressGeocode', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getAddressGeocode(request: GetAddressGeocodeRequest): GetAddressGeocodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAddressGeocodeWithOptions(request, runtime);
}

model CompleteAddressRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey: string(name='AppKey'),
}

model CompleteAddressResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function completeAddressWithOptions(request: CompleteAddressRequest, runtime: Util.RuntimeOptions): CompleteAddressResponse {
  Util.validateModel(request);
  return doRequest('CompleteAddress', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function completeAddress(request: CompleteAddressRequest): CompleteAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeAddressWithOptions(request, runtime);
}

model GetZipcodeRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey: string(name='AppKey'),
}

model GetZipcodeResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getZipcodeWithOptions(request: GetZipcodeRequest, runtime: Util.RuntimeOptions): GetZipcodeResponse {
  Util.validateModel(request);
  return doRequest('GetZipcode', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getZipcode(request: GetZipcodeRequest): GetZipcodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getZipcodeWithOptions(request, runtime);
}

model ExtractPhoneRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey: string(name='AppKey'),
}

model ExtractPhoneResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function extractPhoneWithOptions(request: ExtractPhoneRequest, runtime: Util.RuntimeOptions): ExtractPhoneResponse {
  Util.validateModel(request);
  return doRequest('ExtractPhone', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function extractPhone(request: ExtractPhoneRequest): ExtractPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return extractPhoneWithOptions(request, runtime);
}

model ExtractNameRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey: string(name='AppKey'),
}

model ExtractNameResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function extractNameWithOptions(request: ExtractNameRequest, runtime: Util.RuntimeOptions): ExtractNameResponse {
  Util.validateModel(request);
  return doRequest('ExtractName', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function extractName(request: ExtractNameRequest): ExtractNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return extractNameWithOptions(request, runtime);
}

model GetAddressDivisionCodeRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey: string(name='AppKey'),
}

model GetAddressDivisionCodeResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getAddressDivisionCodeWithOptions(request: GetAddressDivisionCodeRequest, runtime: Util.RuntimeOptions): GetAddressDivisionCodeResponse {
  Util.validateModel(request);
  return doRequest('GetAddressDivisionCode', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getAddressDivisionCode(request: GetAddressDivisionCodeRequest): GetAddressDivisionCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAddressDivisionCodeWithOptions(request, runtime);
}

model ClassifyPOIRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey: string(name='AppKey'),
}

model ClassifyPOIResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function classifyPOIWithOptions(request: ClassifyPOIRequest, runtime: Util.RuntimeOptions): ClassifyPOIResponse {
  Util.validateModel(request);
  return doRequest('ClassifyPOI', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function classifyPOI(request: ClassifyPOIRequest): ClassifyPOIResponse {
  var runtime = new Util.RuntimeOptions{};
  return classifyPOIWithOptions(request, runtime);
}

model StructureAddressRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey: string(name='AppKey'),
}

model StructureAddressResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function structureAddressWithOptions(request: StructureAddressRequest, runtime: Util.RuntimeOptions): StructureAddressResponse {
  Util.validateModel(request);
  return doRequest('StructureAddress', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function structureAddress(request: StructureAddressRequest): StructureAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return structureAddressWithOptions(request, runtime);
}

model ExtractAddressRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey: string(name='AppKey'),
}

model ExtractAddressResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function extractAddressWithOptions(request: ExtractAddressRequest, runtime: Util.RuntimeOptions): ExtractAddressResponse {
  Util.validateModel(request);
  return doRequest('ExtractAddress', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function extractAddress(request: ExtractAddressRequest): ExtractAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return extractAddressWithOptions(request, runtime);
}

model UpdateProjectRequest = {
  serviceCode: string(name='ServiceCode'),
  parameters: map[string]any(name='Parameters'),
}

model UpdateProjectShrinkRequest = {
  serviceCode: string(name='ServiceCode'),
  parametersShrink: string(name='Parameters'),
}

model UpdateProjectResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function updateProjectWithOptions(tmp: UpdateProjectRequest, runtime: Util.RuntimeOptions): UpdateProjectResponse {
  Util.validateModel(tmp);
  var request = new UpdateProjectShrinkRequest{};
  RPCUtil.convert(tmp, request);
  if (!Util.isUnset(tmp.parameters)) {
    request.parametersShrink = Util.toJSONString(tmp.parameters);
  }

  return doRequest('UpdateProject', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProjectWithOptions(request, runtime);
}

model CorrectAddressRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey: string(name='AppKey'),
}

model CorrectAddressResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function correctAddressWithOptions(request: CorrectAddressRequest, runtime: Util.RuntimeOptions): CorrectAddressResponse {
  Util.validateModel(request);
  return doRequest('CorrectAddress', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function correctAddress(request: CorrectAddressRequest): CorrectAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return correctAddressWithOptions(request, runtime);
}

model GetAddressSimilarityRequest = {
  serviceCode: string(name='ServiceCode'),
  text: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey: string(name='AppKey'),
}

model GetAddressSimilarityResponse = {
  data: string(name='Data'),
  requestId: string(name='RequestId'),
}

async function getAddressSimilarityWithOptions(request: GetAddressSimilarityRequest, runtime: Util.RuntimeOptions): GetAddressSimilarityResponse {
  Util.validateModel(request);
  return doRequest('GetAddressSimilarity', 'HTTPS', 'POST', '2019-11-18', 'AK', null, request, runtime);
}

async function getAddressSimilarity(request: GetAddressSimilarityRequest): GetAddressSimilarityResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAddressSimilarityWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
